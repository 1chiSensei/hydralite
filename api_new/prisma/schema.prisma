// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/typegql-generated"
}

enum OauthConnectionService {
  github
  google
  discord
  twitter
}

model OauthConnection {
  id                 String                 @id @default(uuid())
  oauthService       OauthConnectionService
  email              String
  username           String
  oauthServiceUserId String
  isPrimary          Boolean

  // Connection Owner
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  username  String   @unique
  email     String   @unique
  joinDate  DateTime @default(now())
  hydra     Int

  // Profile
  profile   UserProfile @relation("UserProfileRelation", fields: [profileId], references: [id])
  profileId String

  // Projects
  ownedProjects Project[] @relation("UserOwnedProjectsRelation")
  allProjects   Project[] @relation("AllUserProjectsRelation")

  // Appreciated Projects
  likedProjects    Project[] @relation("UserLikedProjectsRelation")
  followedProjects Project[] @relation("UserFollowedProjectsRelation")

  // Oauth Connections
  oauthConnections OauthConnection[]
}

model UserProfile {
  id        String        @id @default(uuid())
  user      User?         @relation("UserProfileRelation")
  avatarURL String
  bio       String
  following UserProfile[] @relation("ProfileFollowRelation", references: [id])
  followers UserProfile[] @relation("ProfileFollowRelation", references: [id])
}

model Project {
  id          String @id @default(uuid())
  title       String
  description String
  logoUrl     String
  bannerUrl   String

  // Members
  owner   User   @relation("UserOwnedProjectsRelation", fields: [ownerId], references: [id])
  ownerId String

  members User[] @relation("AllUserProjectsRelation", references: [id])

  // Appreciators
  likers    User[] @relation("UserLikedProjectsRelation", references: [id])
  followers User[] @relation("UserFollowedProjectsRelation", references: [id])
}
