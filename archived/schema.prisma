model TaskBoard {
    id          String  @id @default(uuid())
    title       String
    description String?

    tasks Task[]

    project   Project? @relation(fields: [projectId], references: [id])
    projectId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model TaskCategory {
    id          String  @id @default(uuid())
    name        String
    description String?
    color       String

    linkedTasks Task[]

    // project
    project   Project @relation(fields: [projectId], references: [id])
    projectId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model TaskLocation {
    // task location specifies the directory for the task (e.g web, api, cli, bot, etc)
    id          String @id @default(uuid())
    name        String
    linkedTasks Task[]

    // project
    project   Project @relation(fields: [projectId], references: [id])
    projectId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model TaskChecklistItem {
    id          String   @id @default(uuid())
    name        String
    description String?
    completed   Boolean?

    checklist   TaskChecklist? @relation(fields: [checklistId], references: [id])
    checklistId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model TaskChecklist {
    id             String              @id @default(uuid())
    name           String?
    description    String?
    items          TaskChecklistItem[]
    completedItems Int
    totalItems     Int

    // task
    task   Task?   @relation(fields: [taskId], references: [id])
    taskId String?
}

model Task {
    id String @id @default(uuid())

    taskBoard   TaskBoard @relation(fields: [taskBoardId], references: [id])
    taskBoardId String

    name        String
    description String?
    deadline    DateTime?
    priority    Int?
    isCompleted Boolean
    isOpen      Boolean

    // checklist
    checklists              TaskChecklist[]
    taskCompletedPercentage Int // computed on a scale of 1 to 100 based on how many checklist items amongst all of the checklists have been completed 

    // authors
    author    ProjectMember   @relation("MemberAuthoredTasksRelation", fields: [authorId], references: [id])
    authorId  String
    coAuthors ProjectMember[] @relation("MemberCoauthoredTasksRelation")

    // open ended tasks - allows members to get recommendations for tasks to take up
    isOpenEndedTask               Boolean?
    acceptingTaskRequiresApproval Boolean? // only applicable if isOpenEndedTask is set to true
    rolesPermittedToAcceptTask    ProjectRole[] // only applicable if isOpenEndedTask is set to true

    // assignees
    assignees ProjectMember[] @relation("MemberAssignedTasksRelation")

    // linked bugs reports and feature requests
    linkedFeatureRequests FeatureRequest[]
    linkedBugReports      BugReport[]

    // linked tasks
    waitlistedByTasks Task[] @relation("WaitlistingTaskRelation") // tasks that are waitlisting this task
    waitlistingTasks  Task[] @relation("WaitlistingTaskRelation") // tasks that are waitlisted due to this task
    duplicatedByTasks Task[] @relation("DuplicatingTaskRelation") // tasks that are duplicates of this task
    duplicatingTasks  Task[] @relation("DuplicatingTaskRelation") // tasks that are duplicated due to this task

    // complexity allows the ability to quantify the weight of a task
    complexity Int

    // Linked pull requests or commits
    // TASK: replace with pr and commit id's once git integrations are implemented
    linkedPrUrls     String[]
    linkedCommitUrls String[]

    // descriptive tags
    taskCategories TaskCategory[]
    taskLocations  TaskLocation[]

    // attachements
    attachements Attachment[]

    // TASK: connect flights/features for this task to go under

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
