var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __require = typeof require !== "undefined" ? require : (x) => {
  throw new Error('Dynamic require of "' + x + '" is not supported');
};
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[Object.keys(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod2) => function __require3() {
  return mod2 || (0, cb[Object.keys(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// node_modules/@sveltejs/kit/dist/install-fetch.js
function dataUriToBuffer(uri) {
  if (!/^data:/i.test(uri)) {
    throw new TypeError('`uri` does not appear to be a Data URI (must begin with "data:")');
  }
  uri = uri.replace(/\r?\n/g, "");
  const firstComma = uri.indexOf(",");
  if (firstComma === -1 || firstComma <= 4) {
    throw new TypeError("malformed data: URI");
  }
  const meta = uri.substring(5, firstComma).split(";");
  let charset = "";
  let base64 = false;
  const type = meta[0] || "text/plain";
  let typeFull = type;
  for (let i = 1; i < meta.length; i++) {
    if (meta[i] === "base64") {
      base64 = true;
    } else {
      typeFull += `;${meta[i]}`;
      if (meta[i].indexOf("charset=") === 0) {
        charset = meta[i].substring(8);
      }
    }
  }
  if (!meta[0] && !charset.length) {
    typeFull += ";charset=US-ASCII";
    charset = "US-ASCII";
  }
  const encoding = base64 ? "base64" : "ascii";
  const data = unescape(uri.substring(firstComma + 1));
  const buffer = Buffer.from(data, encoding);
  buffer.type = type;
  buffer.typeFull = typeFull;
  buffer.charset = charset;
  return buffer;
}
async function* read(parts) {
  for (const part of parts) {
    if ("stream" in part) {
      yield* part.stream();
    } else {
      yield part;
    }
  }
}
function isFormData(object) {
  return typeof object === "object" && typeof object.append === "function" && typeof object.set === "function" && typeof object.get === "function" && typeof object.getAll === "function" && typeof object.delete === "function" && typeof object.keys === "function" && typeof object.values === "function" && typeof object.entries === "function" && typeof object.constructor === "function" && object[NAME] === "FormData";
}
function getHeader(boundary, name2, field) {
  let header = "";
  header += `${dashes}${boundary}${carriage}`;
  header += `Content-Disposition: form-data; name="${name2}"`;
  if (isBlob(field)) {
    header += `; filename="${field.name}"${carriage}`;
    header += `Content-Type: ${field.type || "application/octet-stream"}`;
  }
  return `${header}${carriage.repeat(2)}`;
}
async function* formDataIterator(form, boundary) {
  for (const [name2, value] of form) {
    yield getHeader(boundary, name2, value);
    if (isBlob(value)) {
      yield* value.stream();
    } else {
      yield value;
    }
    yield carriage;
  }
  yield getFooter(boundary);
}
function getFormDataLength(form, boundary) {
  let length = 0;
  for (const [name2, value] of form) {
    length += Buffer.byteLength(getHeader(boundary, name2, value));
    if (isBlob(value)) {
      length += value.size;
    } else {
      length += Buffer.byteLength(String(value));
    }
    length += carriageLength;
  }
  length += Buffer.byteLength(getFooter(boundary));
  return length;
}
async function consumeBody(data) {
  if (data[INTERNALS$2].disturbed) {
    throw new TypeError(`body used already for: ${data.url}`);
  }
  data[INTERNALS$2].disturbed = true;
  if (data[INTERNALS$2].error) {
    throw data[INTERNALS$2].error;
  }
  let { body } = data;
  if (body === null) {
    return Buffer.alloc(0);
  }
  if (isBlob(body)) {
    body = body.stream();
  }
  if (Buffer.isBuffer(body)) {
    return body;
  }
  if (!(body instanceof import_stream.default)) {
    return Buffer.alloc(0);
  }
  const accum = [];
  let accumBytes = 0;
  try {
    for await (const chunk of body) {
      if (data.size > 0 && accumBytes + chunk.length > data.size) {
        const err = new FetchError(`content size at ${data.url} over limit: ${data.size}`, "max-size");
        body.destroy(err);
        throw err;
      }
      accumBytes += chunk.length;
      accum.push(chunk);
    }
  } catch (error2) {
    if (error2 instanceof FetchBaseError) {
      throw error2;
    } else {
      throw new FetchError(`Invalid response body while trying to fetch ${data.url}: ${error2.message}`, "system", error2);
    }
  }
  if (body.readableEnded === true || body._readableState.ended === true) {
    try {
      if (accum.every((c) => typeof c === "string")) {
        return Buffer.from(accum.join(""));
      }
      return Buffer.concat(accum, accumBytes);
    } catch (error2) {
      throw new FetchError(`Could not create Buffer from response body for ${data.url}: ${error2.message}`, "system", error2);
    }
  } else {
    throw new FetchError(`Premature close of server response while trying to fetch ${data.url}`);
  }
}
function fromRawHeaders(headers = []) {
  return new Headers(headers.reduce((result, value, index2, array) => {
    if (index2 % 2 === 0) {
      result.push(array.slice(index2, index2 + 2));
    }
    return result;
  }, []).filter(([name2, value]) => {
    try {
      validateHeaderName(name2);
      validateHeaderValue(name2, String(value));
      return true;
    } catch {
      return false;
    }
  }));
}
async function fetch(url, options_) {
  return new Promise((resolve2, reject) => {
    const request = new Request(url, options_);
    const options2 = getNodeRequestOptions(request);
    if (!supportedSchemas.has(options2.protocol)) {
      throw new TypeError(`node-fetch cannot load ${url}. URL scheme "${options2.protocol.replace(/:$/, "")}" is not supported.`);
    }
    if (options2.protocol === "data:") {
      const data = dataUriToBuffer$1(request.url);
      const response2 = new Response(data, { headers: { "Content-Type": data.typeFull } });
      resolve2(response2);
      return;
    }
    const send = (options2.protocol === "https:" ? import_https.default : import_http.default).request;
    const { signal } = request;
    let response = null;
    const abort = () => {
      const error2 = new AbortError("The operation was aborted.");
      reject(error2);
      if (request.body && request.body instanceof import_stream.default.Readable) {
        request.body.destroy(error2);
      }
      if (!response || !response.body) {
        return;
      }
      response.body.emit("error", error2);
    };
    if (signal && signal.aborted) {
      abort();
      return;
    }
    const abortAndFinalize = () => {
      abort();
      finalize();
    };
    const request_ = send(options2);
    if (signal) {
      signal.addEventListener("abort", abortAndFinalize);
    }
    const finalize = () => {
      request_.abort();
      if (signal) {
        signal.removeEventListener("abort", abortAndFinalize);
      }
    };
    request_.on("error", (err) => {
      reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, "system", err));
      finalize();
    });
    request_.on("response", (response_) => {
      request_.setTimeout(0);
      const headers = fromRawHeaders(response_.rawHeaders);
      if (isRedirect(response_.statusCode)) {
        const location = headers.get("Location");
        const locationURL = location === null ? null : new URL(location, request.url);
        switch (request.redirect) {
          case "error":
            reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, "no-redirect"));
            finalize();
            return;
          case "manual":
            if (locationURL !== null) {
              try {
                headers.set("Location", locationURL);
              } catch (error2) {
                reject(error2);
              }
            }
            break;
          case "follow": {
            if (locationURL === null) {
              break;
            }
            if (request.counter >= request.follow) {
              reject(new FetchError(`maximum redirect reached at: ${request.url}`, "max-redirect"));
              finalize();
              return;
            }
            const requestOptions = {
              headers: new Headers(request.headers),
              follow: request.follow,
              counter: request.counter + 1,
              agent: request.agent,
              compress: request.compress,
              method: request.method,
              body: request.body,
              signal: request.signal,
              size: request.size
            };
            if (response_.statusCode !== 303 && request.body && options_.body instanceof import_stream.default.Readable) {
              reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
              finalize();
              return;
            }
            if (response_.statusCode === 303 || (response_.statusCode === 301 || response_.statusCode === 302) && request.method === "POST") {
              requestOptions.method = "GET";
              requestOptions.body = void 0;
              requestOptions.headers.delete("content-length");
            }
            resolve2(fetch(new Request(locationURL, requestOptions)));
            finalize();
            return;
          }
        }
      }
      response_.once("end", () => {
        if (signal) {
          signal.removeEventListener("abort", abortAndFinalize);
        }
      });
      let body = (0, import_stream.pipeline)(response_, new import_stream.PassThrough(), (error2) => {
        reject(error2);
      });
      if (process.version < "v12.10") {
        response_.on("aborted", abortAndFinalize);
      }
      const responseOptions = {
        url: request.url,
        status: response_.statusCode,
        statusText: response_.statusMessage,
        headers,
        size: request.size,
        counter: request.counter,
        highWaterMark: request.highWaterMark
      };
      const codings = headers.get("Content-Encoding");
      if (!request.compress || request.method === "HEAD" || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {
        response = new Response(body, responseOptions);
        resolve2(response);
        return;
      }
      const zlibOptions = {
        flush: import_zlib.default.Z_SYNC_FLUSH,
        finishFlush: import_zlib.default.Z_SYNC_FLUSH
      };
      if (codings === "gzip" || codings === "x-gzip") {
        body = (0, import_stream.pipeline)(body, import_zlib.default.createGunzip(zlibOptions), (error2) => {
          reject(error2);
        });
        response = new Response(body, responseOptions);
        resolve2(response);
        return;
      }
      if (codings === "deflate" || codings === "x-deflate") {
        const raw = (0, import_stream.pipeline)(response_, new import_stream.PassThrough(), (error2) => {
          reject(error2);
        });
        raw.once("data", (chunk) => {
          if ((chunk[0] & 15) === 8) {
            body = (0, import_stream.pipeline)(body, import_zlib.default.createInflate(), (error2) => {
              reject(error2);
            });
          } else {
            body = (0, import_stream.pipeline)(body, import_zlib.default.createInflateRaw(), (error2) => {
              reject(error2);
            });
          }
          response = new Response(body, responseOptions);
          resolve2(response);
        });
        return;
      }
      if (codings === "br") {
        body = (0, import_stream.pipeline)(body, import_zlib.default.createBrotliDecompress(), (error2) => {
          reject(error2);
        });
        response = new Response(body, responseOptions);
        resolve2(response);
        return;
      }
      response = new Response(body, responseOptions);
      resolve2(response);
    });
    writeToStream(request_, request);
  });
}
var import_http, import_https, import_zlib, import_stream, import_util, import_crypto, import_url, src, dataUriToBuffer$1, Readable, wm, Blob, fetchBlob, Blob$1, FetchBaseError, FetchError, NAME, isURLSearchParameters, isBlob, isAbortSignal, carriage, dashes, carriageLength, getFooter, getBoundary, INTERNALS$2, Body, clone, extractContentType, getTotalBytes, writeToStream, validateHeaderName, validateHeaderValue, Headers, redirectStatus, isRedirect, INTERNALS$1, Response, getSearch, INTERNALS, isRequest, Request, getNodeRequestOptions, AbortError, supportedSchemas;
var init_install_fetch = __esm({
  "node_modules/@sveltejs/kit/dist/install-fetch.js"() {
    init_shims();
    import_http = __toModule(require("http"));
    import_https = __toModule(require("https"));
    import_zlib = __toModule(require("zlib"));
    import_stream = __toModule(require("stream"));
    import_util = __toModule(require("util"));
    import_crypto = __toModule(require("crypto"));
    import_url = __toModule(require("url"));
    src = dataUriToBuffer;
    dataUriToBuffer$1 = src;
    ({ Readable } = import_stream.default);
    wm = new WeakMap();
    Blob = class {
      constructor(blobParts = [], options2 = {}) {
        let size = 0;
        const parts = blobParts.map((element) => {
          let buffer;
          if (element instanceof Buffer) {
            buffer = element;
          } else if (ArrayBuffer.isView(element)) {
            buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
          } else if (element instanceof ArrayBuffer) {
            buffer = Buffer.from(element);
          } else if (element instanceof Blob) {
            buffer = element;
          } else {
            buffer = Buffer.from(typeof element === "string" ? element : String(element));
          }
          size += buffer.length || buffer.size || 0;
          return buffer;
        });
        const type = options2.type === void 0 ? "" : String(options2.type).toLowerCase();
        wm.set(this, {
          type: /[^\u0020-\u007E]/.test(type) ? "" : type,
          size,
          parts
        });
      }
      get size() {
        return wm.get(this).size;
      }
      get type() {
        return wm.get(this).type;
      }
      async text() {
        return Buffer.from(await this.arrayBuffer()).toString();
      }
      async arrayBuffer() {
        const data = new Uint8Array(this.size);
        let offset = 0;
        for await (const chunk of this.stream()) {
          data.set(chunk, offset);
          offset += chunk.length;
        }
        return data.buffer;
      }
      stream() {
        return Readable.from(read(wm.get(this).parts));
      }
      slice(start = 0, end = this.size, type = "") {
        const { size } = this;
        let relativeStart = start < 0 ? Math.max(size + start, 0) : Math.min(start, size);
        let relativeEnd = end < 0 ? Math.max(size + end, 0) : Math.min(end, size);
        const span = Math.max(relativeEnd - relativeStart, 0);
        const parts = wm.get(this).parts.values();
        const blobParts = [];
        let added = 0;
        for (const part of parts) {
          const size2 = ArrayBuffer.isView(part) ? part.byteLength : part.size;
          if (relativeStart && size2 <= relativeStart) {
            relativeStart -= size2;
            relativeEnd -= size2;
          } else {
            const chunk = part.slice(relativeStart, Math.min(size2, relativeEnd));
            blobParts.push(chunk);
            added += ArrayBuffer.isView(chunk) ? chunk.byteLength : chunk.size;
            relativeStart = 0;
            if (added >= span) {
              break;
            }
          }
        }
        const blob = new Blob([], { type: String(type).toLowerCase() });
        Object.assign(wm.get(blob), { size: span, parts: blobParts });
        return blob;
      }
      get [Symbol.toStringTag]() {
        return "Blob";
      }
      static [Symbol.hasInstance](object) {
        return object && typeof object === "object" && typeof object.stream === "function" && object.stream.length === 0 && typeof object.constructor === "function" && /^(Blob|File)$/.test(object[Symbol.toStringTag]);
      }
    };
    Object.defineProperties(Blob.prototype, {
      size: { enumerable: true },
      type: { enumerable: true },
      slice: { enumerable: true }
    });
    fetchBlob = Blob;
    Blob$1 = fetchBlob;
    FetchBaseError = class extends Error {
      constructor(message, type) {
        super(message);
        Error.captureStackTrace(this, this.constructor);
        this.type = type;
      }
      get name() {
        return this.constructor.name;
      }
      get [Symbol.toStringTag]() {
        return this.constructor.name;
      }
    };
    FetchError = class extends FetchBaseError {
      constructor(message, type, systemError) {
        super(message, type);
        if (systemError) {
          this.code = this.errno = systemError.code;
          this.erroredSysCall = systemError.syscall;
        }
      }
    };
    NAME = Symbol.toStringTag;
    isURLSearchParameters = (object) => {
      return typeof object === "object" && typeof object.append === "function" && typeof object.delete === "function" && typeof object.get === "function" && typeof object.getAll === "function" && typeof object.has === "function" && typeof object.set === "function" && typeof object.sort === "function" && object[NAME] === "URLSearchParams";
    };
    isBlob = (object) => {
      return typeof object === "object" && typeof object.arrayBuffer === "function" && typeof object.type === "string" && typeof object.stream === "function" && typeof object.constructor === "function" && /^(Blob|File)$/.test(object[NAME]);
    };
    isAbortSignal = (object) => {
      return typeof object === "object" && object[NAME] === "AbortSignal";
    };
    carriage = "\r\n";
    dashes = "-".repeat(2);
    carriageLength = Buffer.byteLength(carriage);
    getFooter = (boundary) => `${dashes}${boundary}${dashes}${carriage.repeat(2)}`;
    getBoundary = () => (0, import_crypto.randomBytes)(8).toString("hex");
    INTERNALS$2 = Symbol("Body internals");
    Body = class {
      constructor(body, {
        size = 0
      } = {}) {
        let boundary = null;
        if (body === null) {
          body = null;
        } else if (isURLSearchParameters(body)) {
          body = Buffer.from(body.toString());
        } else if (isBlob(body))
          ;
        else if (Buffer.isBuffer(body))
          ;
        else if (import_util.types.isAnyArrayBuffer(body)) {
          body = Buffer.from(body);
        } else if (ArrayBuffer.isView(body)) {
          body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
        } else if (body instanceof import_stream.default)
          ;
        else if (isFormData(body)) {
          boundary = `NodeFetchFormDataBoundary${getBoundary()}`;
          body = import_stream.default.Readable.from(formDataIterator(body, boundary));
        } else {
          body = Buffer.from(String(body));
        }
        this[INTERNALS$2] = {
          body,
          boundary,
          disturbed: false,
          error: null
        };
        this.size = size;
        if (body instanceof import_stream.default) {
          body.on("error", (err) => {
            const error2 = err instanceof FetchBaseError ? err : new FetchError(`Invalid response body while trying to fetch ${this.url}: ${err.message}`, "system", err);
            this[INTERNALS$2].error = error2;
          });
        }
      }
      get body() {
        return this[INTERNALS$2].body;
      }
      get bodyUsed() {
        return this[INTERNALS$2].disturbed;
      }
      async arrayBuffer() {
        const { buffer, byteOffset, byteLength } = await consumeBody(this);
        return buffer.slice(byteOffset, byteOffset + byteLength);
      }
      async blob() {
        const ct = this.headers && this.headers.get("content-type") || this[INTERNALS$2].body && this[INTERNALS$2].body.type || "";
        const buf = await this.buffer();
        return new Blob$1([buf], {
          type: ct
        });
      }
      async json() {
        const buffer = await consumeBody(this);
        return JSON.parse(buffer.toString());
      }
      async text() {
        const buffer = await consumeBody(this);
        return buffer.toString();
      }
      buffer() {
        return consumeBody(this);
      }
    };
    Object.defineProperties(Body.prototype, {
      body: { enumerable: true },
      bodyUsed: { enumerable: true },
      arrayBuffer: { enumerable: true },
      blob: { enumerable: true },
      json: { enumerable: true },
      text: { enumerable: true }
    });
    clone = (instance, highWaterMark) => {
      let p1;
      let p2;
      let { body } = instance;
      if (instance.bodyUsed) {
        throw new Error("cannot clone body after it is used");
      }
      if (body instanceof import_stream.default && typeof body.getBoundary !== "function") {
        p1 = new import_stream.PassThrough({ highWaterMark });
        p2 = new import_stream.PassThrough({ highWaterMark });
        body.pipe(p1);
        body.pipe(p2);
        instance[INTERNALS$2].body = p1;
        body = p2;
      }
      return body;
    };
    extractContentType = (body, request) => {
      if (body === null) {
        return null;
      }
      if (typeof body === "string") {
        return "text/plain;charset=UTF-8";
      }
      if (isURLSearchParameters(body)) {
        return "application/x-www-form-urlencoded;charset=UTF-8";
      }
      if (isBlob(body)) {
        return body.type || null;
      }
      if (Buffer.isBuffer(body) || import_util.types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {
        return null;
      }
      if (body && typeof body.getBoundary === "function") {
        return `multipart/form-data;boundary=${body.getBoundary()}`;
      }
      if (isFormData(body)) {
        return `multipart/form-data; boundary=${request[INTERNALS$2].boundary}`;
      }
      if (body instanceof import_stream.default) {
        return null;
      }
      return "text/plain;charset=UTF-8";
    };
    getTotalBytes = (request) => {
      const { body } = request;
      if (body === null) {
        return 0;
      }
      if (isBlob(body)) {
        return body.size;
      }
      if (Buffer.isBuffer(body)) {
        return body.length;
      }
      if (body && typeof body.getLengthSync === "function") {
        return body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;
      }
      if (isFormData(body)) {
        return getFormDataLength(request[INTERNALS$2].boundary);
      }
      return null;
    };
    writeToStream = (dest, { body }) => {
      if (body === null) {
        dest.end();
      } else if (isBlob(body)) {
        body.stream().pipe(dest);
      } else if (Buffer.isBuffer(body)) {
        dest.write(body);
        dest.end();
      } else {
        body.pipe(dest);
      }
    };
    validateHeaderName = typeof import_http.default.validateHeaderName === "function" ? import_http.default.validateHeaderName : (name2) => {
      if (!/^[\^`\-\w!#$%&'*+.|~]+$/.test(name2)) {
        const err = new TypeError(`Header name must be a valid HTTP token [${name2}]`);
        Object.defineProperty(err, "code", { value: "ERR_INVALID_HTTP_TOKEN" });
        throw err;
      }
    };
    validateHeaderValue = typeof import_http.default.validateHeaderValue === "function" ? import_http.default.validateHeaderValue : (name2, value) => {
      if (/[^\t\u0020-\u007E\u0080-\u00FF]/.test(value)) {
        const err = new TypeError(`Invalid character in header content ["${name2}"]`);
        Object.defineProperty(err, "code", { value: "ERR_INVALID_CHAR" });
        throw err;
      }
    };
    Headers = class extends URLSearchParams {
      constructor(init2) {
        let result = [];
        if (init2 instanceof Headers) {
          const raw = init2.raw();
          for (const [name2, values] of Object.entries(raw)) {
            result.push(...values.map((value) => [name2, value]));
          }
        } else if (init2 == null)
          ;
        else if (typeof init2 === "object" && !import_util.types.isBoxedPrimitive(init2)) {
          const method = init2[Symbol.iterator];
          if (method == null) {
            result.push(...Object.entries(init2));
          } else {
            if (typeof method !== "function") {
              throw new TypeError("Header pairs must be iterable");
            }
            result = [...init2].map((pair) => {
              if (typeof pair !== "object" || import_util.types.isBoxedPrimitive(pair)) {
                throw new TypeError("Each header pair must be an iterable object");
              }
              return [...pair];
            }).map((pair) => {
              if (pair.length !== 2) {
                throw new TypeError("Each header pair must be a name/value tuple");
              }
              return [...pair];
            });
          }
        } else {
          throw new TypeError("Failed to construct 'Headers': The provided value is not of type '(sequence<sequence<ByteString>> or record<ByteString, ByteString>)");
        }
        result = result.length > 0 ? result.map(([name2, value]) => {
          validateHeaderName(name2);
          validateHeaderValue(name2, String(value));
          return [String(name2).toLowerCase(), String(value)];
        }) : void 0;
        super(result);
        return new Proxy(this, {
          get(target, p, receiver) {
            switch (p) {
              case "append":
              case "set":
                return (name2, value) => {
                  validateHeaderName(name2);
                  validateHeaderValue(name2, String(value));
                  return URLSearchParams.prototype[p].call(receiver, String(name2).toLowerCase(), String(value));
                };
              case "delete":
              case "has":
              case "getAll":
                return (name2) => {
                  validateHeaderName(name2);
                  return URLSearchParams.prototype[p].call(receiver, String(name2).toLowerCase());
                };
              case "keys":
                return () => {
                  target.sort();
                  return new Set(URLSearchParams.prototype.keys.call(target)).keys();
                };
              default:
                return Reflect.get(target, p, receiver);
            }
          }
        });
      }
      get [Symbol.toStringTag]() {
        return this.constructor.name;
      }
      toString() {
        return Object.prototype.toString.call(this);
      }
      get(name2) {
        const values = this.getAll(name2);
        if (values.length === 0) {
          return null;
        }
        let value = values.join(", ");
        if (/^content-encoding$/i.test(name2)) {
          value = value.toLowerCase();
        }
        return value;
      }
      forEach(callback) {
        for (const name2 of this.keys()) {
          callback(this.get(name2), name2);
        }
      }
      *values() {
        for (const name2 of this.keys()) {
          yield this.get(name2);
        }
      }
      *entries() {
        for (const name2 of this.keys()) {
          yield [name2, this.get(name2)];
        }
      }
      [Symbol.iterator]() {
        return this.entries();
      }
      raw() {
        return [...this.keys()].reduce((result, key) => {
          result[key] = this.getAll(key);
          return result;
        }, {});
      }
      [Symbol.for("nodejs.util.inspect.custom")]() {
        return [...this.keys()].reduce((result, key) => {
          const values = this.getAll(key);
          if (key === "host") {
            result[key] = values[0];
          } else {
            result[key] = values.length > 1 ? values : values[0];
          }
          return result;
        }, {});
      }
    };
    Object.defineProperties(Headers.prototype, ["get", "entries", "forEach", "values"].reduce((result, property) => {
      result[property] = { enumerable: true };
      return result;
    }, {}));
    redirectStatus = new Set([301, 302, 303, 307, 308]);
    isRedirect = (code) => {
      return redirectStatus.has(code);
    };
    INTERNALS$1 = Symbol("Response internals");
    Response = class extends Body {
      constructor(body = null, options2 = {}) {
        super(body, options2);
        const status = options2.status || 200;
        const headers = new Headers(options2.headers);
        if (body !== null && !headers.has("Content-Type")) {
          const contentType = extractContentType(body);
          if (contentType) {
            headers.append("Content-Type", contentType);
          }
        }
        this[INTERNALS$1] = {
          url: options2.url,
          status,
          statusText: options2.statusText || "",
          headers,
          counter: options2.counter,
          highWaterMark: options2.highWaterMark
        };
      }
      get url() {
        return this[INTERNALS$1].url || "";
      }
      get status() {
        return this[INTERNALS$1].status;
      }
      get ok() {
        return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
      }
      get redirected() {
        return this[INTERNALS$1].counter > 0;
      }
      get statusText() {
        return this[INTERNALS$1].statusText;
      }
      get headers() {
        return this[INTERNALS$1].headers;
      }
      get highWaterMark() {
        return this[INTERNALS$1].highWaterMark;
      }
      clone() {
        return new Response(clone(this, this.highWaterMark), {
          url: this.url,
          status: this.status,
          statusText: this.statusText,
          headers: this.headers,
          ok: this.ok,
          redirected: this.redirected,
          size: this.size
        });
      }
      static redirect(url, status = 302) {
        if (!isRedirect(status)) {
          throw new RangeError('Failed to execute "redirect" on "response": Invalid status code');
        }
        return new Response(null, {
          headers: {
            location: new URL(url).toString()
          },
          status
        });
      }
      get [Symbol.toStringTag]() {
        return "Response";
      }
    };
    Object.defineProperties(Response.prototype, {
      url: { enumerable: true },
      status: { enumerable: true },
      ok: { enumerable: true },
      redirected: { enumerable: true },
      statusText: { enumerable: true },
      headers: { enumerable: true },
      clone: { enumerable: true }
    });
    getSearch = (parsedURL) => {
      if (parsedURL.search) {
        return parsedURL.search;
      }
      const lastOffset = parsedURL.href.length - 1;
      const hash2 = parsedURL.hash || (parsedURL.href[lastOffset] === "#" ? "#" : "");
      return parsedURL.href[lastOffset - hash2.length] === "?" ? "?" : "";
    };
    INTERNALS = Symbol("Request internals");
    isRequest = (object) => {
      return typeof object === "object" && typeof object[INTERNALS] === "object";
    };
    Request = class extends Body {
      constructor(input, init2 = {}) {
        let parsedURL;
        if (isRequest(input)) {
          parsedURL = new URL(input.url);
        } else {
          parsedURL = new URL(input);
          input = {};
        }
        let method = init2.method || input.method || "GET";
        method = method.toUpperCase();
        if ((init2.body != null || isRequest(input)) && input.body !== null && (method === "GET" || method === "HEAD")) {
          throw new TypeError("Request with GET/HEAD method cannot have body");
        }
        const inputBody = init2.body ? init2.body : isRequest(input) && input.body !== null ? clone(input) : null;
        super(inputBody, {
          size: init2.size || input.size || 0
        });
        const headers = new Headers(init2.headers || input.headers || {});
        if (inputBody !== null && !headers.has("Content-Type")) {
          const contentType = extractContentType(inputBody, this);
          if (contentType) {
            headers.append("Content-Type", contentType);
          }
        }
        let signal = isRequest(input) ? input.signal : null;
        if ("signal" in init2) {
          signal = init2.signal;
        }
        if (signal !== null && !isAbortSignal(signal)) {
          throw new TypeError("Expected signal to be an instanceof AbortSignal");
        }
        this[INTERNALS] = {
          method,
          redirect: init2.redirect || input.redirect || "follow",
          headers,
          parsedURL,
          signal
        };
        this.follow = init2.follow === void 0 ? input.follow === void 0 ? 20 : input.follow : init2.follow;
        this.compress = init2.compress === void 0 ? input.compress === void 0 ? true : input.compress : init2.compress;
        this.counter = init2.counter || input.counter || 0;
        this.agent = init2.agent || input.agent;
        this.highWaterMark = init2.highWaterMark || input.highWaterMark || 16384;
        this.insecureHTTPParser = init2.insecureHTTPParser || input.insecureHTTPParser || false;
      }
      get method() {
        return this[INTERNALS].method;
      }
      get url() {
        return (0, import_url.format)(this[INTERNALS].parsedURL);
      }
      get headers() {
        return this[INTERNALS].headers;
      }
      get redirect() {
        return this[INTERNALS].redirect;
      }
      get signal() {
        return this[INTERNALS].signal;
      }
      clone() {
        return new Request(this);
      }
      get [Symbol.toStringTag]() {
        return "Request";
      }
    };
    Object.defineProperties(Request.prototype, {
      method: { enumerable: true },
      url: { enumerable: true },
      headers: { enumerable: true },
      redirect: { enumerable: true },
      clone: { enumerable: true },
      signal: { enumerable: true }
    });
    getNodeRequestOptions = (request) => {
      const { parsedURL } = request[INTERNALS];
      const headers = new Headers(request[INTERNALS].headers);
      if (!headers.has("Accept")) {
        headers.set("Accept", "*/*");
      }
      let contentLengthValue = null;
      if (request.body === null && /^(post|put)$/i.test(request.method)) {
        contentLengthValue = "0";
      }
      if (request.body !== null) {
        const totalBytes = getTotalBytes(request);
        if (typeof totalBytes === "number" && !Number.isNaN(totalBytes)) {
          contentLengthValue = String(totalBytes);
        }
      }
      if (contentLengthValue) {
        headers.set("Content-Length", contentLengthValue);
      }
      if (!headers.has("User-Agent")) {
        headers.set("User-Agent", "node-fetch");
      }
      if (request.compress && !headers.has("Accept-Encoding")) {
        headers.set("Accept-Encoding", "gzip,deflate,br");
      }
      let { agent } = request;
      if (typeof agent === "function") {
        agent = agent(parsedURL);
      }
      if (!headers.has("Connection") && !agent) {
        headers.set("Connection", "close");
      }
      const search = getSearch(parsedURL);
      const requestOptions = {
        path: parsedURL.pathname + search,
        pathname: parsedURL.pathname,
        hostname: parsedURL.hostname,
        protocol: parsedURL.protocol,
        port: parsedURL.port,
        hash: parsedURL.hash,
        search: parsedURL.search,
        query: parsedURL.query,
        href: parsedURL.href,
        method: request.method,
        headers: headers[Symbol.for("nodejs.util.inspect.custom")](),
        insecureHTTPParser: request.insecureHTTPParser,
        agent
      };
      return requestOptions;
    };
    AbortError = class extends FetchBaseError {
      constructor(message, type = "aborted") {
        super(message, type);
      }
    };
    supportedSchemas = new Set(["data:", "http:", "https:"]);
  }
});

// node_modules/@sveltejs/adapter-vercel/files/shims.js
var init_shims = __esm({
  "node_modules/@sveltejs/adapter-vercel/files/shims.js"() {
    init_install_fetch();
  }
});

// node_modules/cookie/index.js
var require_cookie = __commonJS({
  "node_modules/cookie/index.js"(exports2) {
    init_shims();
    "use strict";
    exports2.parse = parse;
    exports2.serialize = serialize;
    var decode = decodeURIComponent;
    var encode = encodeURIComponent;
    var pairSplitRegExp = /; */;
    var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
    function parse(str, options2) {
      if (typeof str !== "string") {
        throw new TypeError("argument str must be a string");
      }
      var obj = {};
      var opt = options2 || {};
      var pairs = str.split(pairSplitRegExp);
      var dec = opt.decode || decode;
      for (var i = 0; i < pairs.length; i++) {
        var pair = pairs[i];
        var eq_idx = pair.indexOf("=");
        if (eq_idx < 0) {
          continue;
        }
        var key = pair.substr(0, eq_idx).trim();
        var val = pair.substr(++eq_idx, pair.length).trim();
        if (val[0] == '"') {
          val = val.slice(1, -1);
        }
        if (obj[key] == void 0) {
          obj[key] = tryDecode(val, dec);
        }
      }
      return obj;
    }
    function serialize(name2, val, options2) {
      var opt = options2 || {};
      var enc = opt.encode || encode;
      if (typeof enc !== "function") {
        throw new TypeError("option encode is invalid");
      }
      if (!fieldContentRegExp.test(name2)) {
        throw new TypeError("argument name is invalid");
      }
      var value = enc(val);
      if (value && !fieldContentRegExp.test(value)) {
        throw new TypeError("argument val is invalid");
      }
      var str = name2 + "=" + value;
      if (opt.maxAge != null) {
        var maxAge = opt.maxAge - 0;
        if (isNaN(maxAge) || !isFinite(maxAge)) {
          throw new TypeError("option maxAge is invalid");
        }
        str += "; Max-Age=" + Math.floor(maxAge);
      }
      if (opt.domain) {
        if (!fieldContentRegExp.test(opt.domain)) {
          throw new TypeError("option domain is invalid");
        }
        str += "; Domain=" + opt.domain;
      }
      if (opt.path) {
        if (!fieldContentRegExp.test(opt.path)) {
          throw new TypeError("option path is invalid");
        }
        str += "; Path=" + opt.path;
      }
      if (opt.expires) {
        if (typeof opt.expires.toUTCString !== "function") {
          throw new TypeError("option expires is invalid");
        }
        str += "; Expires=" + opt.expires.toUTCString();
      }
      if (opt.httpOnly) {
        str += "; HttpOnly";
      }
      if (opt.secure) {
        str += "; Secure";
      }
      if (opt.sameSite) {
        var sameSite = typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
        switch (sameSite) {
          case true:
            str += "; SameSite=Strict";
            break;
          case "lax":
            str += "; SameSite=Lax";
            break;
          case "strict":
            str += "; SameSite=Strict";
            break;
          case "none":
            str += "; SameSite=None";
            break;
          default:
            throw new TypeError("option sameSite is invalid");
        }
      }
      return str;
    }
    function tryDecode(str, decode2) {
      try {
        return decode2(str);
      } catch (e) {
        return str;
      }
    }
  }
});

// node_modules/typed.js/lib/typed.js
var require_typed = __commonJS({
  "node_modules/typed.js/lib/typed.js"(exports2, module2) {
    init_shims();
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports2 === "object" && typeof module2 === "object")
        module2.exports = factory();
      else if (typeof define === "function" && define.amd)
        define([], factory);
      else if (typeof exports2 === "object")
        exports2["Typed"] = factory();
      else
        root["Typed"] = factory();
    })(exports2, function() {
      return function(modules) {
        var installedModules = {};
        function __webpack_require__(moduleId) {
          if (installedModules[moduleId])
            return installedModules[moduleId].exports;
          var module3 = installedModules[moduleId] = {
            exports: {},
            id: moduleId,
            loaded: false
          };
          modules[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
          module3.loaded = true;
          return module3.exports;
        }
        __webpack_require__.m = modules;
        __webpack_require__.c = installedModules;
        __webpack_require__.p = "";
        return __webpack_require__(0);
      }([
        function(module3, exports3, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports3, "__esModule", {
            value: true
          });
          var _createClass = function() {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            return function(Constructor, protoProps, staticProps) {
              if (protoProps)
                defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var _initializerJs = __webpack_require__(1);
          var _htmlParserJs = __webpack_require__(3);
          var Typed = function() {
            function Typed2(elementId, options2) {
              _classCallCheck(this, Typed2);
              _initializerJs.initializer.load(this, options2, elementId);
              this.begin();
            }
            _createClass(Typed2, [{
              key: "toggle",
              value: function toggle() {
                this.pause.status ? this.start() : this.stop();
              }
            }, {
              key: "stop",
              value: function stop() {
                if (this.typingComplete)
                  return;
                if (this.pause.status)
                  return;
                this.toggleBlinking(true);
                this.pause.status = true;
                this.options.onStop(this.arrayPos, this);
              }
            }, {
              key: "start",
              value: function start() {
                if (this.typingComplete)
                  return;
                if (!this.pause.status)
                  return;
                this.pause.status = false;
                if (this.pause.typewrite) {
                  this.typewrite(this.pause.curString, this.pause.curStrPos);
                } else {
                  this.backspace(this.pause.curString, this.pause.curStrPos);
                }
                this.options.onStart(this.arrayPos, this);
              }
            }, {
              key: "destroy",
              value: function destroy() {
                this.reset(false);
                this.options.onDestroy(this);
              }
            }, {
              key: "reset",
              value: function reset() {
                var restart = arguments.length <= 0 || arguments[0] === void 0 ? true : arguments[0];
                clearInterval(this.timeout);
                this.replaceText("");
                if (this.cursor && this.cursor.parentNode) {
                  this.cursor.parentNode.removeChild(this.cursor);
                  this.cursor = null;
                }
                this.strPos = 0;
                this.arrayPos = 0;
                this.curLoop = 0;
                if (restart) {
                  this.insertCursor();
                  this.options.onReset(this);
                  this.begin();
                }
              }
            }, {
              key: "begin",
              value: function begin() {
                var _this = this;
                this.options.onBegin(this);
                this.typingComplete = false;
                this.shuffleStringsIfNeeded(this);
                this.insertCursor();
                if (this.bindInputFocusEvents)
                  this.bindFocusEvents();
                this.timeout = setTimeout(function() {
                  if (!_this.currentElContent || _this.currentElContent.length === 0) {
                    _this.typewrite(_this.strings[_this.sequence[_this.arrayPos]], _this.strPos);
                  } else {
                    _this.backspace(_this.currentElContent, _this.currentElContent.length);
                  }
                }, this.startDelay);
              }
            }, {
              key: "typewrite",
              value: function typewrite(curString, curStrPos) {
                var _this2 = this;
                if (this.fadeOut && this.el.classList.contains(this.fadeOutClass)) {
                  this.el.classList.remove(this.fadeOutClass);
                  if (this.cursor)
                    this.cursor.classList.remove(this.fadeOutClass);
                }
                var humanize = this.humanizer(this.typeSpeed);
                var numChars = 1;
                if (this.pause.status === true) {
                  this.setPauseStatus(curString, curStrPos, true);
                  return;
                }
                this.timeout = setTimeout(function() {
                  curStrPos = _htmlParserJs.htmlParser.typeHtmlChars(curString, curStrPos, _this2);
                  var pauseTime = 0;
                  var substr = curString.substr(curStrPos);
                  if (substr.charAt(0) === "^") {
                    if (/^\^\d+/.test(substr)) {
                      var skip = 1;
                      substr = /\d+/.exec(substr)[0];
                      skip += substr.length;
                      pauseTime = parseInt(substr);
                      _this2.temporaryPause = true;
                      _this2.options.onTypingPaused(_this2.arrayPos, _this2);
                      curString = curString.substring(0, curStrPos) + curString.substring(curStrPos + skip);
                      _this2.toggleBlinking(true);
                    }
                  }
                  if (substr.charAt(0) === "`") {
                    while (curString.substr(curStrPos + numChars).charAt(0) !== "`") {
                      numChars++;
                      if (curStrPos + numChars > curString.length)
                        break;
                    }
                    var stringBeforeSkip = curString.substring(0, curStrPos);
                    var stringSkipped = curString.substring(stringBeforeSkip.length + 1, curStrPos + numChars);
                    var stringAfterSkip = curString.substring(curStrPos + numChars + 1);
                    curString = stringBeforeSkip + stringSkipped + stringAfterSkip;
                    numChars--;
                  }
                  _this2.timeout = setTimeout(function() {
                    _this2.toggleBlinking(false);
                    if (curStrPos >= curString.length) {
                      _this2.doneTyping(curString, curStrPos);
                    } else {
                      _this2.keepTyping(curString, curStrPos, numChars);
                    }
                    if (_this2.temporaryPause) {
                      _this2.temporaryPause = false;
                      _this2.options.onTypingResumed(_this2.arrayPos, _this2);
                    }
                  }, pauseTime);
                }, humanize);
              }
            }, {
              key: "keepTyping",
              value: function keepTyping(curString, curStrPos, numChars) {
                if (curStrPos === 0) {
                  this.toggleBlinking(false);
                  this.options.preStringTyped(this.arrayPos, this);
                }
                curStrPos += numChars;
                var nextString = curString.substr(0, curStrPos);
                this.replaceText(nextString);
                this.typewrite(curString, curStrPos);
              }
            }, {
              key: "doneTyping",
              value: function doneTyping(curString, curStrPos) {
                var _this3 = this;
                this.options.onStringTyped(this.arrayPos, this);
                this.toggleBlinking(true);
                if (this.arrayPos === this.strings.length - 1) {
                  this.complete();
                  if (this.loop === false || this.curLoop === this.loopCount) {
                    return;
                  }
                }
                this.timeout = setTimeout(function() {
                  _this3.backspace(curString, curStrPos);
                }, this.backDelay);
              }
            }, {
              key: "backspace",
              value: function backspace(curString, curStrPos) {
                var _this4 = this;
                if (this.pause.status === true) {
                  this.setPauseStatus(curString, curStrPos, false);
                  return;
                }
                if (this.fadeOut)
                  return this.initFadeOut();
                this.toggleBlinking(false);
                var humanize = this.humanizer(this.backSpeed);
                this.timeout = setTimeout(function() {
                  curStrPos = _htmlParserJs.htmlParser.backSpaceHtmlChars(curString, curStrPos, _this4);
                  var curStringAtPosition = curString.substr(0, curStrPos);
                  _this4.replaceText(curStringAtPosition);
                  if (_this4.smartBackspace) {
                    var nextString = _this4.strings[_this4.arrayPos + 1];
                    if (nextString && curStringAtPosition === nextString.substr(0, curStrPos)) {
                      _this4.stopNum = curStrPos;
                    } else {
                      _this4.stopNum = 0;
                    }
                  }
                  if (curStrPos > _this4.stopNum) {
                    curStrPos--;
                    _this4.backspace(curString, curStrPos);
                  } else if (curStrPos <= _this4.stopNum) {
                    _this4.arrayPos++;
                    if (_this4.arrayPos === _this4.strings.length) {
                      _this4.arrayPos = 0;
                      _this4.options.onLastStringBackspaced();
                      _this4.shuffleStringsIfNeeded();
                      _this4.begin();
                    } else {
                      _this4.typewrite(_this4.strings[_this4.sequence[_this4.arrayPos]], curStrPos);
                    }
                  }
                }, humanize);
              }
            }, {
              key: "complete",
              value: function complete() {
                this.options.onComplete(this);
                if (this.loop) {
                  this.curLoop++;
                } else {
                  this.typingComplete = true;
                }
              }
            }, {
              key: "setPauseStatus",
              value: function setPauseStatus(curString, curStrPos, isTyping) {
                this.pause.typewrite = isTyping;
                this.pause.curString = curString;
                this.pause.curStrPos = curStrPos;
              }
            }, {
              key: "toggleBlinking",
              value: function toggleBlinking(isBlinking) {
                if (!this.cursor)
                  return;
                if (this.pause.status)
                  return;
                if (this.cursorBlinking === isBlinking)
                  return;
                this.cursorBlinking = isBlinking;
                if (isBlinking) {
                  this.cursor.classList.add("typed-cursor--blink");
                } else {
                  this.cursor.classList.remove("typed-cursor--blink");
                }
              }
            }, {
              key: "humanizer",
              value: function humanizer(speed) {
                return Math.round(Math.random() * speed / 2) + speed;
              }
            }, {
              key: "shuffleStringsIfNeeded",
              value: function shuffleStringsIfNeeded() {
                if (!this.shuffle)
                  return;
                this.sequence = this.sequence.sort(function() {
                  return Math.random() - 0.5;
                });
              }
            }, {
              key: "initFadeOut",
              value: function initFadeOut() {
                var _this5 = this;
                this.el.className += " " + this.fadeOutClass;
                if (this.cursor)
                  this.cursor.className += " " + this.fadeOutClass;
                return setTimeout(function() {
                  _this5.arrayPos++;
                  _this5.replaceText("");
                  if (_this5.strings.length > _this5.arrayPos) {
                    _this5.typewrite(_this5.strings[_this5.sequence[_this5.arrayPos]], 0);
                  } else {
                    _this5.typewrite(_this5.strings[0], 0);
                    _this5.arrayPos = 0;
                  }
                }, this.fadeOutDelay);
              }
            }, {
              key: "replaceText",
              value: function replaceText(str) {
                if (this.attr) {
                  this.el.setAttribute(this.attr, str);
                } else {
                  if (this.isInput) {
                    this.el.value = str;
                  } else if (this.contentType === "html") {
                    this.el.innerHTML = str;
                  } else {
                    this.el.textContent = str;
                  }
                }
              }
            }, {
              key: "bindFocusEvents",
              value: function bindFocusEvents() {
                var _this6 = this;
                if (!this.isInput)
                  return;
                this.el.addEventListener("focus", function(e) {
                  _this6.stop();
                });
                this.el.addEventListener("blur", function(e) {
                  if (_this6.el.value && _this6.el.value.length !== 0) {
                    return;
                  }
                  _this6.start();
                });
              }
            }, {
              key: "insertCursor",
              value: function insertCursor() {
                if (!this.showCursor)
                  return;
                if (this.cursor)
                  return;
                this.cursor = document.createElement("span");
                this.cursor.className = "typed-cursor";
                this.cursor.setAttribute("aria-hidden", true);
                this.cursor.innerHTML = this.cursorChar;
                this.el.parentNode && this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);
              }
            }]);
            return Typed2;
          }();
          exports3["default"] = Typed;
          module3.exports = exports3["default"];
        },
        function(module3, exports3, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports3, "__esModule", {
            value: true
          });
          var _extends = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          var _createClass = function() {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            return function(Constructor, protoProps, staticProps) {
              if (protoProps)
                defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { "default": obj };
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var _defaultsJs = __webpack_require__(2);
          var _defaultsJs2 = _interopRequireDefault(_defaultsJs);
          var Initializer = function() {
            function Initializer2() {
              _classCallCheck(this, Initializer2);
            }
            _createClass(Initializer2, [{
              key: "load",
              value: function load2(self2, options2, elementId) {
                if (typeof elementId === "string") {
                  self2.el = document.querySelector(elementId);
                } else {
                  self2.el = elementId;
                }
                self2.options = _extends({}, _defaultsJs2["default"], options2);
                self2.isInput = self2.el.tagName.toLowerCase() === "input";
                self2.attr = self2.options.attr;
                self2.bindInputFocusEvents = self2.options.bindInputFocusEvents;
                self2.showCursor = self2.isInput ? false : self2.options.showCursor;
                self2.cursorChar = self2.options.cursorChar;
                self2.cursorBlinking = true;
                self2.elContent = self2.attr ? self2.el.getAttribute(self2.attr) : self2.el.textContent;
                self2.contentType = self2.options.contentType;
                self2.typeSpeed = self2.options.typeSpeed;
                self2.startDelay = self2.options.startDelay;
                self2.backSpeed = self2.options.backSpeed;
                self2.smartBackspace = self2.options.smartBackspace;
                self2.backDelay = self2.options.backDelay;
                self2.fadeOut = self2.options.fadeOut;
                self2.fadeOutClass = self2.options.fadeOutClass;
                self2.fadeOutDelay = self2.options.fadeOutDelay;
                self2.isPaused = false;
                self2.strings = self2.options.strings.map(function(s2) {
                  return s2.trim();
                });
                if (typeof self2.options.stringsElement === "string") {
                  self2.stringsElement = document.querySelector(self2.options.stringsElement);
                } else {
                  self2.stringsElement = self2.options.stringsElement;
                }
                if (self2.stringsElement) {
                  self2.strings = [];
                  self2.stringsElement.style.display = "none";
                  var strings = Array.prototype.slice.apply(self2.stringsElement.children);
                  var stringsLength = strings.length;
                  if (stringsLength) {
                    for (var i = 0; i < stringsLength; i += 1) {
                      var stringEl = strings[i];
                      self2.strings.push(stringEl.innerHTML.trim());
                    }
                  }
                }
                self2.strPos = 0;
                self2.arrayPos = 0;
                self2.stopNum = 0;
                self2.loop = self2.options.loop;
                self2.loopCount = self2.options.loopCount;
                self2.curLoop = 0;
                self2.shuffle = self2.options.shuffle;
                self2.sequence = [];
                self2.pause = {
                  status: false,
                  typewrite: true,
                  curString: "",
                  curStrPos: 0
                };
                self2.typingComplete = false;
                for (var i in self2.strings) {
                  self2.sequence[i] = i;
                }
                self2.currentElContent = this.getCurrentElContent(self2);
                self2.autoInsertCss = self2.options.autoInsertCss;
                this.appendAnimationCss(self2);
              }
            }, {
              key: "getCurrentElContent",
              value: function getCurrentElContent(self2) {
                var elContent = "";
                if (self2.attr) {
                  elContent = self2.el.getAttribute(self2.attr);
                } else if (self2.isInput) {
                  elContent = self2.el.value;
                } else if (self2.contentType === "html") {
                  elContent = self2.el.innerHTML;
                } else {
                  elContent = self2.el.textContent;
                }
                return elContent;
              }
            }, {
              key: "appendAnimationCss",
              value: function appendAnimationCss(self2) {
                var cssDataName = "data-typed-js-css";
                if (!self2.autoInsertCss) {
                  return;
                }
                if (!self2.showCursor && !self2.fadeOut) {
                  return;
                }
                if (document.querySelector("[" + cssDataName + "]")) {
                  return;
                }
                var css2 = document.createElement("style");
                css2.type = "text/css";
                css2.setAttribute(cssDataName, true);
                var innerCss = "";
                if (self2.showCursor) {
                  innerCss += "\n        .typed-cursor{\n          opacity: 1;\n        }\n        .typed-cursor.typed-cursor--blink{\n          animation: typedjsBlink 0.7s infinite;\n          -webkit-animation: typedjsBlink 0.7s infinite;\n                  animation: typedjsBlink 0.7s infinite;\n        }\n        @keyframes typedjsBlink{\n          50% { opacity: 0.0; }\n        }\n        @-webkit-keyframes typedjsBlink{\n          0% { opacity: 1; }\n          50% { opacity: 0.0; }\n          100% { opacity: 1; }\n        }\n      ";
                }
                if (self2.fadeOut) {
                  innerCss += "\n        .typed-fade-out{\n          opacity: 0;\n          transition: opacity .25s;\n        }\n        .typed-cursor.typed-cursor--blink.typed-fade-out{\n          -webkit-animation: 0;\n          animation: 0;\n        }\n      ";
                }
                if (css2.length === 0) {
                  return;
                }
                css2.innerHTML = innerCss;
                document.body.appendChild(css2);
              }
            }]);
            return Initializer2;
          }();
          exports3["default"] = Initializer;
          var initializer = new Initializer();
          exports3.initializer = initializer;
        },
        function(module3, exports3) {
          "use strict";
          Object.defineProperty(exports3, "__esModule", {
            value: true
          });
          var defaults = {
            strings: ["These are the default values...", "You know what you should do?", "Use your own!", "Have a great day!"],
            stringsElement: null,
            typeSpeed: 0,
            startDelay: 0,
            backSpeed: 0,
            smartBackspace: true,
            shuffle: false,
            backDelay: 700,
            fadeOut: false,
            fadeOutClass: "typed-fade-out",
            fadeOutDelay: 500,
            loop: false,
            loopCount: Infinity,
            showCursor: true,
            cursorChar: "|",
            autoInsertCss: true,
            attr: null,
            bindInputFocusEvents: false,
            contentType: "html",
            onBegin: function onBegin(self2) {
            },
            onComplete: function onComplete(self2) {
            },
            preStringTyped: function preStringTyped(arrayPos, self2) {
            },
            onStringTyped: function onStringTyped(arrayPos, self2) {
            },
            onLastStringBackspaced: function onLastStringBackspaced(self2) {
            },
            onTypingPaused: function onTypingPaused(arrayPos, self2) {
            },
            onTypingResumed: function onTypingResumed(arrayPos, self2) {
            },
            onReset: function onReset(self2) {
            },
            onStop: function onStop(arrayPos, self2) {
            },
            onStart: function onStart(arrayPos, self2) {
            },
            onDestroy: function onDestroy(self2) {
            }
          };
          exports3["default"] = defaults;
          module3.exports = exports3["default"];
        },
        function(module3, exports3) {
          "use strict";
          Object.defineProperty(exports3, "__esModule", {
            value: true
          });
          var _createClass = function() {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            return function(Constructor, protoProps, staticProps) {
              if (protoProps)
                defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var HTMLParser = function() {
            function HTMLParser2() {
              _classCallCheck(this, HTMLParser2);
            }
            _createClass(HTMLParser2, [{
              key: "typeHtmlChars",
              value: function typeHtmlChars(curString, curStrPos, self2) {
                if (self2.contentType !== "html")
                  return curStrPos;
                var curChar = curString.substr(curStrPos).charAt(0);
                if (curChar === "<" || curChar === "&") {
                  var endTag = "";
                  if (curChar === "<") {
                    endTag = ">";
                  } else {
                    endTag = ";";
                  }
                  while (curString.substr(curStrPos + 1).charAt(0) !== endTag) {
                    curStrPos++;
                    if (curStrPos + 1 > curString.length) {
                      break;
                    }
                  }
                  curStrPos++;
                }
                return curStrPos;
              }
            }, {
              key: "backSpaceHtmlChars",
              value: function backSpaceHtmlChars(curString, curStrPos, self2) {
                if (self2.contentType !== "html")
                  return curStrPos;
                var curChar = curString.substr(curStrPos).charAt(0);
                if (curChar === ">" || curChar === ";") {
                  var endTag = "";
                  if (curChar === ">") {
                    endTag = "<";
                  } else {
                    endTag = "&";
                  }
                  while (curString.substr(curStrPos - 1).charAt(0) !== endTag) {
                    curStrPos--;
                    if (curStrPos < 0) {
                      break;
                    }
                  }
                  curStrPos--;
                }
                return curStrPos;
              }
            }]);
            return HTMLParser2;
          }();
          exports3["default"] = HTMLParser;
          var htmlParser = new HTMLParser();
          exports3.htmlParser = htmlParser;
        }
      ]);
    });
  }
});

// node_modules/firebase/node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "node_modules/firebase/node_modules/tslib/tslib.js"(exports2, module2) {
    init_shims();
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports3) {
          factory(createExporter(root, createExporter(exports3)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports3, previous) {
        if (exports3 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports3, "__esModule", { value: true });
          } else {
            exports3.__esModule = true;
          }
        }
        return function(id2, v) {
          return exports3[id2] = previous ? previous(id2, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s2, i = 1, n = arguments.length; i < n; i++) {
          s2 = arguments[i];
          for (var p in s2)
            if (Object.prototype.hasOwnProperty.call(s2, p))
              t[p] = s2[p];
        }
        return t;
      };
      __rest = function(s2, e) {
        var t = {};
        for (var p in s2)
          if (Object.prototype.hasOwnProperty.call(s2, p) && e.indexOf(p) < 0)
            t[p] = s2[p];
        if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
              t[p[i]] = s2[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          });
        }
        return new (P || (P = Promise))(function(resolve2, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __createBinding = function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __exportStar = function(m, exports3) {
        for (var p in m)
          if (p !== "default" && !exports3.hasOwnProperty(p))
            exports3[p] = m[p];
      };
      __values = function(o) {
        var s2 = typeof Symbol === "function" && Symbol.iterator, m = s2 && o[s2], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error2) {
          e = { error: error2 };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s2 = 0, i = 0, il = arguments.length; i < il; i++)
          s2 += arguments[i].length;
        for (var r = Array(s2), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve2, reject) {
              v = o[n](v), settle(resolve2, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve2, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve2({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      __importStar = function(mod2) {
        if (mod2 && mod2.__esModule)
          return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k in mod2)
            if (Object.hasOwnProperty.call(mod2, k))
              result[k] = mod2[k];
        }
        result["default"] = mod2;
        return result;
      };
      __importDefault = function(mod2) {
        return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
      };
      __classPrivateFieldGet = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    });
  }
});

// node_modules/@firebase/util/node_modules/tslib/tslib.js
var require_tslib2 = __commonJS({
  "node_modules/@firebase/util/node_modules/tslib/tslib.js"(exports2, module2) {
    init_shims();
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports3) {
          factory(createExporter(root, createExporter(exports3)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports3, previous) {
        if (exports3 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports3, "__esModule", { value: true });
          } else {
            exports3.__esModule = true;
          }
        }
        return function(id2, v) {
          return exports3[id2] = previous ? previous(id2, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s2, i = 1, n = arguments.length; i < n; i++) {
          s2 = arguments[i];
          for (var p in s2)
            if (Object.prototype.hasOwnProperty.call(s2, p))
              t[p] = s2[p];
        }
        return t;
      };
      __rest = function(s2, e) {
        var t = {};
        for (var p in s2)
          if (Object.prototype.hasOwnProperty.call(s2, p) && e.indexOf(p) < 0)
            t[p] = s2[p];
        if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
              t[p[i]] = s2[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          });
        }
        return new (P || (P = Promise))(function(resolve2, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __createBinding = function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __exportStar = function(m, exports3) {
        for (var p in m)
          if (p !== "default" && !exports3.hasOwnProperty(p))
            exports3[p] = m[p];
      };
      __values = function(o) {
        var s2 = typeof Symbol === "function" && Symbol.iterator, m = s2 && o[s2], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error2) {
          e = { error: error2 };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s2 = 0, i = 0, il = arguments.length; i < il; i++)
          s2 += arguments[i].length;
        for (var r = Array(s2), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve2, reject) {
              v = o[n](v), settle(resolve2, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve2, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve2({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      __importStar = function(mod2) {
        if (mod2 && mod2.__esModule)
          return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k in mod2)
            if (Object.hasOwnProperty.call(mod2, k))
              result[k] = mod2[k];
        }
        result["default"] = mod2;
        return result;
      };
      __importDefault = function(mod2) {
        return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
      };
      __classPrivateFieldGet = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    });
  }
});

// node_modules/@firebase/util/dist/index.node.cjs.js
var require_index_node_cjs = __commonJS({
  "node_modules/@firebase/util/dist/index.node.cjs.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib = require_tslib2();
    var CONSTANTS = {
      NODE_CLIENT: false,
      NODE_ADMIN: false,
      SDK_VERSION: "${JSCORE_VERSION}"
    };
    var assert = function(assertion, message) {
      if (!assertion) {
        throw assertionError(message);
      }
    };
    var assertionError = function(message) {
      return new Error("Firebase Database (" + CONSTANTS.SDK_VERSION + ") INTERNAL ASSERT FAILED: " + message);
    };
    var stringToByteArray = function(str) {
      var out = [];
      var p = 0;
      for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        if (c < 128) {
          out[p++] = c;
        } else if (c < 2048) {
          out[p++] = c >> 6 | 192;
          out[p++] = c & 63 | 128;
        } else if ((c & 64512) === 55296 && i + 1 < str.length && (str.charCodeAt(i + 1) & 64512) === 56320) {
          c = 65536 + ((c & 1023) << 10) + (str.charCodeAt(++i) & 1023);
          out[p++] = c >> 18 | 240;
          out[p++] = c >> 12 & 63 | 128;
          out[p++] = c >> 6 & 63 | 128;
          out[p++] = c & 63 | 128;
        } else {
          out[p++] = c >> 12 | 224;
          out[p++] = c >> 6 & 63 | 128;
          out[p++] = c & 63 | 128;
        }
      }
      return out;
    };
    var byteArrayToString = function(bytes) {
      var out = [];
      var pos = 0, c = 0;
      while (pos < bytes.length) {
        var c1 = bytes[pos++];
        if (c1 < 128) {
          out[c++] = String.fromCharCode(c1);
        } else if (c1 > 191 && c1 < 224) {
          var c2 = bytes[pos++];
          out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
        } else if (c1 > 239 && c1 < 365) {
          var c2 = bytes[pos++];
          var c3 = bytes[pos++];
          var c4 = bytes[pos++];
          var u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 65536;
          out[c++] = String.fromCharCode(55296 + (u >> 10));
          out[c++] = String.fromCharCode(56320 + (u & 1023));
        } else {
          var c2 = bytes[pos++];
          var c3 = bytes[pos++];
          out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
        }
      }
      return out.join("");
    };
    var base64 = {
      byteToCharMap_: null,
      charToByteMap_: null,
      byteToCharMapWebSafe_: null,
      charToByteMapWebSafe_: null,
      ENCODED_VALS_BASE: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
      get ENCODED_VALS() {
        return this.ENCODED_VALS_BASE + "+/=";
      },
      get ENCODED_VALS_WEBSAFE() {
        return this.ENCODED_VALS_BASE + "-_.";
      },
      HAS_NATIVE_SUPPORT: typeof atob === "function",
      encodeByteArray: function(input, webSafe) {
        if (!Array.isArray(input)) {
          throw Error("encodeByteArray takes an array as a parameter");
        }
        this.init_();
        var byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;
        var output = [];
        for (var i = 0; i < input.length; i += 3) {
          var byte1 = input[i];
          var haveByte2 = i + 1 < input.length;
          var byte2 = haveByte2 ? input[i + 1] : 0;
          var haveByte3 = i + 2 < input.length;
          var byte3 = haveByte3 ? input[i + 2] : 0;
          var outByte1 = byte1 >> 2;
          var outByte2 = (byte1 & 3) << 4 | byte2 >> 4;
          var outByte3 = (byte2 & 15) << 2 | byte3 >> 6;
          var outByte4 = byte3 & 63;
          if (!haveByte3) {
            outByte4 = 64;
            if (!haveByte2) {
              outByte3 = 64;
            }
          }
          output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
        }
        return output.join("");
      },
      encodeString: function(input, webSafe) {
        if (this.HAS_NATIVE_SUPPORT && !webSafe) {
          return btoa(input);
        }
        return this.encodeByteArray(stringToByteArray(input), webSafe);
      },
      decodeString: function(input, webSafe) {
        if (this.HAS_NATIVE_SUPPORT && !webSafe) {
          return atob(input);
        }
        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
      },
      decodeStringToByteArray: function(input, webSafe) {
        this.init_();
        var charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;
        var output = [];
        for (var i = 0; i < input.length; ) {
          var byte1 = charToByteMap[input.charAt(i++)];
          var haveByte2 = i < input.length;
          var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
          ++i;
          var haveByte3 = i < input.length;
          var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
          ++i;
          var haveByte4 = i < input.length;
          var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
          ++i;
          if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
            throw Error();
          }
          var outByte1 = byte1 << 2 | byte2 >> 4;
          output.push(outByte1);
          if (byte3 !== 64) {
            var outByte2 = byte2 << 4 & 240 | byte3 >> 2;
            output.push(outByte2);
            if (byte4 !== 64) {
              var outByte3 = byte3 << 6 & 192 | byte4;
              output.push(outByte3);
            }
          }
        }
        return output;
      },
      init_: function() {
        if (!this.byteToCharMap_) {
          this.byteToCharMap_ = {};
          this.charToByteMap_ = {};
          this.byteToCharMapWebSafe_ = {};
          this.charToByteMapWebSafe_ = {};
          for (var i = 0; i < this.ENCODED_VALS.length; i++) {
            this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
            this.charToByteMap_[this.byteToCharMap_[i]] = i;
            this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
            this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
            if (i >= this.ENCODED_VALS_BASE.length) {
              this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
              this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
            }
          }
        }
      }
    };
    var base64Encode = function(str) {
      var utf8Bytes = stringToByteArray(str);
      return base64.encodeByteArray(utf8Bytes, true);
    };
    var base64Decode = function(str) {
      try {
        return base64.decodeString(str, true);
      } catch (e) {
        console.error("base64Decode failed: ", e);
      }
      return null;
    };
    function deepCopy(value) {
      return deepExtend(void 0, value);
    }
    function deepExtend(target, source) {
      if (!(source instanceof Object)) {
        return source;
      }
      switch (source.constructor) {
        case Date:
          var dateValue = source;
          return new Date(dateValue.getTime());
        case Object:
          if (target === void 0) {
            target = {};
          }
          break;
        case Array:
          target = [];
          break;
        default:
          return source;
      }
      for (var prop in source) {
        if (!source.hasOwnProperty(prop)) {
          continue;
        }
        target[prop] = deepExtend(target[prop], source[prop]);
      }
      return target;
    }
    var Deferred = function() {
      function Deferred2() {
        var _this = this;
        this.reject = function() {
        };
        this.resolve = function() {
        };
        this.promise = new Promise(function(resolve2, reject) {
          _this.resolve = resolve2;
          _this.reject = reject;
        });
      }
      Deferred2.prototype.wrapCallback = function(callback) {
        var _this = this;
        return function(error2, value) {
          if (error2) {
            _this.reject(error2);
          } else {
            _this.resolve(value);
          }
          if (typeof callback === "function") {
            _this.promise.catch(function() {
            });
            if (callback.length === 1) {
              callback(error2);
            } else {
              callback(error2, value);
            }
          }
        };
      };
      return Deferred2;
    }();
    function getUA() {
      if (typeof navigator !== "undefined" && typeof navigator["userAgent"] === "string") {
        return navigator["userAgent"];
      } else {
        return "";
      }
    }
    function isMobileCordova() {
      return typeof window !== "undefined" && !!(window["cordova"] || window["phonegap"] || window["PhoneGap"]) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA());
    }
    function isNode() {
      try {
        return Object.prototype.toString.call(global.process) === "[object process]";
      } catch (e) {
        return false;
      }
    }
    function isBrowser() {
      return typeof self === "object" && self.self === self;
    }
    function isBrowserExtension() {
      var runtime = typeof chrome === "object" ? chrome.runtime : typeof browser === "object" ? browser.runtime : void 0;
      return typeof runtime === "object" && runtime.id !== void 0;
    }
    function isReactNative() {
      return typeof navigator === "object" && navigator["product"] === "ReactNative";
    }
    function isElectron() {
      return getUA().indexOf("Electron/") >= 0;
    }
    function isIE() {
      var ua = getUA();
      return ua.indexOf("MSIE ") >= 0 || ua.indexOf("Trident/") >= 0;
    }
    function isUWP() {
      return getUA().indexOf("MSAppHost/") >= 0;
    }
    function isNodeSdk() {
      return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
    }
    function isSafari() {
      return !isNode() && navigator.userAgent.includes("Safari") && !navigator.userAgent.includes("Chrome");
    }
    function isIndexedDBAvailable() {
      return "indexedDB" in self && indexedDB != null;
    }
    function validateIndexedDBOpenable() {
      return new Promise(function(resolve2, reject) {
        try {
          var preExist_1 = true;
          var DB_CHECK_NAME_1 = "validate-browser-context-for-indexeddb-analytics-module";
          var request_1 = window.indexedDB.open(DB_CHECK_NAME_1);
          request_1.onsuccess = function() {
            request_1.result.close();
            if (!preExist_1) {
              window.indexedDB.deleteDatabase(DB_CHECK_NAME_1);
            }
            resolve2(true);
          };
          request_1.onupgradeneeded = function() {
            preExist_1 = false;
          };
          request_1.onerror = function() {
            var _a;
            reject(((_a = request_1.error) === null || _a === void 0 ? void 0 : _a.message) || "");
          };
        } catch (error2) {
          reject(error2);
        }
      });
    }
    function areCookiesEnabled() {
      if (!navigator || !navigator.cookieEnabled) {
        return false;
      }
      return true;
    }
    var ERROR_NAME = "FirebaseError";
    var FirebaseError = function(_super) {
      tslib.__extends(FirebaseError2, _super);
      function FirebaseError2(code, message) {
        var _this = _super.call(this, message) || this;
        _this.code = code;
        _this.name = ERROR_NAME;
        Object.setPrototypeOf(_this, FirebaseError2.prototype);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(_this, ErrorFactory.prototype.create);
        }
        return _this;
      }
      return FirebaseError2;
    }(Error);
    var ErrorFactory = function() {
      function ErrorFactory2(service, serviceName, errors) {
        this.service = service;
        this.serviceName = serviceName;
        this.errors = errors;
      }
      ErrorFactory2.prototype.create = function(code) {
        var data = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          data[_i - 1] = arguments[_i];
        }
        var customData = data[0] || {};
        var fullCode = this.service + "/" + code;
        var template2 = this.errors[code];
        var message = template2 ? replaceTemplate(template2, customData) : "Error";
        var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
        var error2 = new FirebaseError(fullCode, fullMessage);
        for (var _a = 0, _b = Object.keys(customData); _a < _b.length; _a++) {
          var key = _b[_a];
          if (key.slice(-1) !== "_") {
            if (key in error2) {
              console.warn('Overwriting FirebaseError base field "' + key + '" can cause unexpected behavior.');
            }
            error2[key] = customData[key];
          }
        }
        return error2;
      };
      return ErrorFactory2;
    }();
    function replaceTemplate(template2, data) {
      return template2.replace(PATTERN, function(_, key) {
        var value = data[key];
        return value != null ? String(value) : "<" + key + "?>";
      });
    }
    var PATTERN = /\{\$([^}]+)}/g;
    function jsonEval(str) {
      return JSON.parse(str);
    }
    function stringify(data) {
      return JSON.stringify(data);
    }
    var decode = function(token) {
      var header = {}, claims = {}, data = {}, signature = "";
      try {
        var parts = token.split(".");
        header = jsonEval(base64Decode(parts[0]) || "");
        claims = jsonEval(base64Decode(parts[1]) || "");
        signature = parts[2];
        data = claims["d"] || {};
        delete claims["d"];
      } catch (e) {
      }
      return {
        header,
        claims,
        data,
        signature
      };
    };
    var isValidTimestamp = function(token) {
      var claims = decode(token).claims;
      var now = Math.floor(new Date().getTime() / 1e3);
      var validSince = 0, validUntil = 0;
      if (typeof claims === "object") {
        if (claims.hasOwnProperty("nbf")) {
          validSince = claims["nbf"];
        } else if (claims.hasOwnProperty("iat")) {
          validSince = claims["iat"];
        }
        if (claims.hasOwnProperty("exp")) {
          validUntil = claims["exp"];
        } else {
          validUntil = validSince + 86400;
        }
      }
      return !!now && !!validSince && !!validUntil && now >= validSince && now <= validUntil;
    };
    var issuedAtTime = function(token) {
      var claims = decode(token).claims;
      if (typeof claims === "object" && claims.hasOwnProperty("iat")) {
        return claims["iat"];
      }
      return null;
    };
    var isValidFormat = function(token) {
      var decoded = decode(token), claims = decoded.claims;
      return !!claims && typeof claims === "object" && claims.hasOwnProperty("iat");
    };
    var isAdmin = function(token) {
      var claims = decode(token).claims;
      return typeof claims === "object" && claims["admin"] === true;
    };
    function contains(obj, key) {
      return Object.prototype.hasOwnProperty.call(obj, key);
    }
    function safeGet(obj, key) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        return obj[key];
      } else {
        return void 0;
      }
    }
    function isEmpty(obj) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          return false;
        }
      }
      return true;
    }
    function map(obj, fn, contextObj) {
      var res = {};
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          res[key] = fn.call(contextObj, obj[key], key, obj);
        }
      }
      return res;
    }
    function querystring(querystringParams) {
      var params = [];
      var _loop_1 = function(key2, value2) {
        if (Array.isArray(value2)) {
          value2.forEach(function(arrayVal) {
            params.push(encodeURIComponent(key2) + "=" + encodeURIComponent(arrayVal));
          });
        } else {
          params.push(encodeURIComponent(key2) + "=" + encodeURIComponent(value2));
        }
      };
      for (var _i = 0, _a = Object.entries(querystringParams); _i < _a.length; _i++) {
        var _b = _a[_i], key = _b[0], value = _b[1];
        _loop_1(key, value);
      }
      return params.length ? "&" + params.join("&") : "";
    }
    function querystringDecode(querystring2) {
      var obj = {};
      var tokens = querystring2.replace(/^\?/, "").split("&");
      tokens.forEach(function(token) {
        if (token) {
          var key = token.split("=");
          obj[key[0]] = key[1];
        }
      });
      return obj;
    }
    var Sha1 = function() {
      function Sha12() {
        this.chain_ = [];
        this.buf_ = [];
        this.W_ = [];
        this.pad_ = [];
        this.inbuf_ = 0;
        this.total_ = 0;
        this.blockSize = 512 / 8;
        this.pad_[0] = 128;
        for (var i = 1; i < this.blockSize; ++i) {
          this.pad_[i] = 0;
        }
        this.reset();
      }
      Sha12.prototype.reset = function() {
        this.chain_[0] = 1732584193;
        this.chain_[1] = 4023233417;
        this.chain_[2] = 2562383102;
        this.chain_[3] = 271733878;
        this.chain_[4] = 3285377520;
        this.inbuf_ = 0;
        this.total_ = 0;
      };
      Sha12.prototype.compress_ = function(buf, offset) {
        if (!offset) {
          offset = 0;
        }
        var W = this.W_;
        if (typeof buf === "string") {
          for (var i = 0; i < 16; i++) {
            W[i] = buf.charCodeAt(offset) << 24 | buf.charCodeAt(offset + 1) << 16 | buf.charCodeAt(offset + 2) << 8 | buf.charCodeAt(offset + 3);
            offset += 4;
          }
        } else {
          for (var i = 0; i < 16; i++) {
            W[i] = buf[offset] << 24 | buf[offset + 1] << 16 | buf[offset + 2] << 8 | buf[offset + 3];
            offset += 4;
          }
        }
        for (var i = 16; i < 80; i++) {
          var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
          W[i] = (t << 1 | t >>> 31) & 4294967295;
        }
        var a = this.chain_[0];
        var b = this.chain_[1];
        var c = this.chain_[2];
        var d = this.chain_[3];
        var e = this.chain_[4];
        var f, k;
        for (var i = 0; i < 80; i++) {
          if (i < 40) {
            if (i < 20) {
              f = d ^ b & (c ^ d);
              k = 1518500249;
            } else {
              f = b ^ c ^ d;
              k = 1859775393;
            }
          } else {
            if (i < 60) {
              f = b & c | d & (b | c);
              k = 2400959708;
            } else {
              f = b ^ c ^ d;
              k = 3395469782;
            }
          }
          var t = (a << 5 | a >>> 27) + f + e + k + W[i] & 4294967295;
          e = d;
          d = c;
          c = (b << 30 | b >>> 2) & 4294967295;
          b = a;
          a = t;
        }
        this.chain_[0] = this.chain_[0] + a & 4294967295;
        this.chain_[1] = this.chain_[1] + b & 4294967295;
        this.chain_[2] = this.chain_[2] + c & 4294967295;
        this.chain_[3] = this.chain_[3] + d & 4294967295;
        this.chain_[4] = this.chain_[4] + e & 4294967295;
      };
      Sha12.prototype.update = function(bytes, length) {
        if (bytes == null) {
          return;
        }
        if (length === void 0) {
          length = bytes.length;
        }
        var lengthMinusBlock = length - this.blockSize;
        var n = 0;
        var buf = this.buf_;
        var inbuf = this.inbuf_;
        while (n < length) {
          if (inbuf === 0) {
            while (n <= lengthMinusBlock) {
              this.compress_(bytes, n);
              n += this.blockSize;
            }
          }
          if (typeof bytes === "string") {
            while (n < length) {
              buf[inbuf] = bytes.charCodeAt(n);
              ++inbuf;
              ++n;
              if (inbuf === this.blockSize) {
                this.compress_(buf);
                inbuf = 0;
                break;
              }
            }
          } else {
            while (n < length) {
              buf[inbuf] = bytes[n];
              ++inbuf;
              ++n;
              if (inbuf === this.blockSize) {
                this.compress_(buf);
                inbuf = 0;
                break;
              }
            }
          }
        }
        this.inbuf_ = inbuf;
        this.total_ += length;
      };
      Sha12.prototype.digest = function() {
        var digest = [];
        var totalBits = this.total_ * 8;
        if (this.inbuf_ < 56) {
          this.update(this.pad_, 56 - this.inbuf_);
        } else {
          this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
        }
        for (var i = this.blockSize - 1; i >= 56; i--) {
          this.buf_[i] = totalBits & 255;
          totalBits /= 256;
        }
        this.compress_(this.buf_);
        var n = 0;
        for (var i = 0; i < 5; i++) {
          for (var j = 24; j >= 0; j -= 8) {
            digest[n] = this.chain_[i] >> j & 255;
            ++n;
          }
        }
        return digest;
      };
      return Sha12;
    }();
    function createSubscribe(executor, onNoObservers) {
      var proxy = new ObserverProxy(executor, onNoObservers);
      return proxy.subscribe.bind(proxy);
    }
    var ObserverProxy = function() {
      function ObserverProxy2(executor, onNoObservers) {
        var _this = this;
        this.observers = [];
        this.unsubscribes = [];
        this.observerCount = 0;
        this.task = Promise.resolve();
        this.finalized = false;
        this.onNoObservers = onNoObservers;
        this.task.then(function() {
          executor(_this);
        }).catch(function(e) {
          _this.error(e);
        });
      }
      ObserverProxy2.prototype.next = function(value) {
        this.forEachObserver(function(observer) {
          observer.next(value);
        });
      };
      ObserverProxy2.prototype.error = function(error2) {
        this.forEachObserver(function(observer) {
          observer.error(error2);
        });
        this.close(error2);
      };
      ObserverProxy2.prototype.complete = function() {
        this.forEachObserver(function(observer) {
          observer.complete();
        });
        this.close();
      };
      ObserverProxy2.prototype.subscribe = function(nextOrObserver, error2, complete) {
        var _this = this;
        var observer;
        if (nextOrObserver === void 0 && error2 === void 0 && complete === void 0) {
          throw new Error("Missing Observer.");
        }
        if (implementsAnyMethods(nextOrObserver, [
          "next",
          "error",
          "complete"
        ])) {
          observer = nextOrObserver;
        } else {
          observer = {
            next: nextOrObserver,
            error: error2,
            complete
          };
        }
        if (observer.next === void 0) {
          observer.next = noop2;
        }
        if (observer.error === void 0) {
          observer.error = noop2;
        }
        if (observer.complete === void 0) {
          observer.complete = noop2;
        }
        var unsub = this.unsubscribeOne.bind(this, this.observers.length);
        if (this.finalized) {
          this.task.then(function() {
            try {
              if (_this.finalError) {
                observer.error(_this.finalError);
              } else {
                observer.complete();
              }
            } catch (e) {
            }
            return;
          });
        }
        this.observers.push(observer);
        return unsub;
      };
      ObserverProxy2.prototype.unsubscribeOne = function(i) {
        if (this.observers === void 0 || this.observers[i] === void 0) {
          return;
        }
        delete this.observers[i];
        this.observerCount -= 1;
        if (this.observerCount === 0 && this.onNoObservers !== void 0) {
          this.onNoObservers(this);
        }
      };
      ObserverProxy2.prototype.forEachObserver = function(fn) {
        if (this.finalized) {
          return;
        }
        for (var i = 0; i < this.observers.length; i++) {
          this.sendOne(i, fn);
        }
      };
      ObserverProxy2.prototype.sendOne = function(i, fn) {
        var _this = this;
        this.task.then(function() {
          if (_this.observers !== void 0 && _this.observers[i] !== void 0) {
            try {
              fn(_this.observers[i]);
            } catch (e) {
              if (typeof console !== "undefined" && console.error) {
                console.error(e);
              }
            }
          }
        });
      };
      ObserverProxy2.prototype.close = function(err) {
        var _this = this;
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        if (err !== void 0) {
          this.finalError = err;
        }
        this.task.then(function() {
          _this.observers = void 0;
          _this.onNoObservers = void 0;
        });
      };
      return ObserverProxy2;
    }();
    function async(fn, onError) {
      return function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        Promise.resolve(true).then(function() {
          fn.apply(void 0, args);
        }).catch(function(error2) {
          if (onError) {
            onError(error2);
          }
        });
      };
    }
    function implementsAnyMethods(obj, methods) {
      if (typeof obj !== "object" || obj === null) {
        return false;
      }
      for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
        var method = methods_1[_i];
        if (method in obj && typeof obj[method] === "function") {
          return true;
        }
      }
      return false;
    }
    function noop2() {
    }
    var validateArgCount = function(fnName, minCount, maxCount, argCount) {
      var argError;
      if (argCount < minCount) {
        argError = "at least " + minCount;
      } else if (argCount > maxCount) {
        argError = maxCount === 0 ? "none" : "no more than " + maxCount;
      }
      if (argError) {
        var error2 = fnName + " failed: Was called with " + argCount + (argCount === 1 ? " argument." : " arguments.") + " Expects " + argError + ".";
        throw new Error(error2);
      }
    };
    function errorPrefix(fnName, argumentNumber, optional) {
      var argName = "";
      switch (argumentNumber) {
        case 1:
          argName = optional ? "first" : "First";
          break;
        case 2:
          argName = optional ? "second" : "Second";
          break;
        case 3:
          argName = optional ? "third" : "Third";
          break;
        case 4:
          argName = optional ? "fourth" : "Fourth";
          break;
        default:
          throw new Error("errorPrefix called with argumentNumber > 4.  Need to update it?");
      }
      var error2 = fnName + " failed: ";
      error2 += argName + " argument ";
      return error2;
    }
    function validateNamespace(fnName, argumentNumber, namespace, optional) {
      if (optional && !namespace) {
        return;
      }
      if (typeof namespace !== "string") {
        throw new Error(errorPrefix(fnName, argumentNumber, optional) + "must be a valid firebase namespace.");
      }
    }
    function validateCallback(fnName, argumentNumber, callback, optional) {
      if (optional && !callback) {
        return;
      }
      if (typeof callback !== "function") {
        throw new Error(errorPrefix(fnName, argumentNumber, optional) + "must be a valid function.");
      }
    }
    function validateContextObject(fnName, argumentNumber, context, optional) {
      if (optional && !context) {
        return;
      }
      if (typeof context !== "object" || context === null) {
        throw new Error(errorPrefix(fnName, argumentNumber, optional) + "must be a valid context object.");
      }
    }
    var stringToByteArray$1 = function(str) {
      var out = [];
      var p = 0;
      for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        if (c >= 55296 && c <= 56319) {
          var high = c - 55296;
          i++;
          assert(i < str.length, "Surrogate pair missing trail surrogate.");
          var low = str.charCodeAt(i) - 56320;
          c = 65536 + (high << 10) + low;
        }
        if (c < 128) {
          out[p++] = c;
        } else if (c < 2048) {
          out[p++] = c >> 6 | 192;
          out[p++] = c & 63 | 128;
        } else if (c < 65536) {
          out[p++] = c >> 12 | 224;
          out[p++] = c >> 6 & 63 | 128;
          out[p++] = c & 63 | 128;
        } else {
          out[p++] = c >> 18 | 240;
          out[p++] = c >> 12 & 63 | 128;
          out[p++] = c >> 6 & 63 | 128;
          out[p++] = c & 63 | 128;
        }
      }
      return out;
    };
    var stringLength = function(str) {
      var p = 0;
      for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        if (c < 128) {
          p++;
        } else if (c < 2048) {
          p += 2;
        } else if (c >= 55296 && c <= 56319) {
          p += 4;
          i++;
        } else {
          p += 3;
        }
      }
      return p;
    };
    var DEFAULT_INTERVAL_MILLIS = 1e3;
    var DEFAULT_BACKOFF_FACTOR = 2;
    var MAX_VALUE_MILLIS = 4 * 60 * 60 * 1e3;
    var RANDOM_FACTOR = 0.5;
    function calculateBackoffMillis(backoffCount, intervalMillis, backoffFactor) {
      if (intervalMillis === void 0) {
        intervalMillis = DEFAULT_INTERVAL_MILLIS;
      }
      if (backoffFactor === void 0) {
        backoffFactor = DEFAULT_BACKOFF_FACTOR;
      }
      var currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);
      var randomWait = Math.round(RANDOM_FACTOR * currBaseValue * (Math.random() - 0.5) * 2);
      return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);
    }
    CONSTANTS.NODE_CLIENT = true;
    exports2.CONSTANTS = CONSTANTS;
    exports2.Deferred = Deferred;
    exports2.ErrorFactory = ErrorFactory;
    exports2.FirebaseError = FirebaseError;
    exports2.MAX_VALUE_MILLIS = MAX_VALUE_MILLIS;
    exports2.RANDOM_FACTOR = RANDOM_FACTOR;
    exports2.Sha1 = Sha1;
    exports2.areCookiesEnabled = areCookiesEnabled;
    exports2.assert = assert;
    exports2.assertionError = assertionError;
    exports2.async = async;
    exports2.base64 = base64;
    exports2.base64Decode = base64Decode;
    exports2.base64Encode = base64Encode;
    exports2.calculateBackoffMillis = calculateBackoffMillis;
    exports2.contains = contains;
    exports2.createSubscribe = createSubscribe;
    exports2.decode = decode;
    exports2.deepCopy = deepCopy;
    exports2.deepExtend = deepExtend;
    exports2.errorPrefix = errorPrefix;
    exports2.getUA = getUA;
    exports2.isAdmin = isAdmin;
    exports2.isBrowser = isBrowser;
    exports2.isBrowserExtension = isBrowserExtension;
    exports2.isElectron = isElectron;
    exports2.isEmpty = isEmpty;
    exports2.isIE = isIE;
    exports2.isIndexedDBAvailable = isIndexedDBAvailable;
    exports2.isMobileCordova = isMobileCordova;
    exports2.isNode = isNode;
    exports2.isNodeSdk = isNodeSdk;
    exports2.isReactNative = isReactNative;
    exports2.isSafari = isSafari;
    exports2.isUWP = isUWP;
    exports2.isValidFormat = isValidFormat;
    exports2.isValidTimestamp = isValidTimestamp;
    exports2.issuedAtTime = issuedAtTime;
    exports2.jsonEval = jsonEval;
    exports2.map = map;
    exports2.querystring = querystring;
    exports2.querystringDecode = querystringDecode;
    exports2.safeGet = safeGet;
    exports2.stringLength = stringLength;
    exports2.stringToByteArray = stringToByteArray$1;
    exports2.stringify = stringify;
    exports2.validateArgCount = validateArgCount;
    exports2.validateCallback = validateCallback;
    exports2.validateContextObject = validateContextObject;
    exports2.validateIndexedDBOpenable = validateIndexedDBOpenable;
    exports2.validateNamespace = validateNamespace;
  }
});

// node_modules/@firebase/component/node_modules/tslib/tslib.js
var require_tslib3 = __commonJS({
  "node_modules/@firebase/component/node_modules/tslib/tslib.js"(exports2, module2) {
    init_shims();
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports3) {
          factory(createExporter(root, createExporter(exports3)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports3, previous) {
        if (exports3 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports3, "__esModule", { value: true });
          } else {
            exports3.__esModule = true;
          }
        }
        return function(id2, v) {
          return exports3[id2] = previous ? previous(id2, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s2, i = 1, n = arguments.length; i < n; i++) {
          s2 = arguments[i];
          for (var p in s2)
            if (Object.prototype.hasOwnProperty.call(s2, p))
              t[p] = s2[p];
        }
        return t;
      };
      __rest = function(s2, e) {
        var t = {};
        for (var p in s2)
          if (Object.prototype.hasOwnProperty.call(s2, p) && e.indexOf(p) < 0)
            t[p] = s2[p];
        if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
              t[p[i]] = s2[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          });
        }
        return new (P || (P = Promise))(function(resolve2, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __createBinding = function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __exportStar = function(m, exports3) {
        for (var p in m)
          if (p !== "default" && !exports3.hasOwnProperty(p))
            exports3[p] = m[p];
      };
      __values = function(o) {
        var s2 = typeof Symbol === "function" && Symbol.iterator, m = s2 && o[s2], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error2) {
          e = { error: error2 };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s2 = 0, i = 0, il = arguments.length; i < il; i++)
          s2 += arguments[i].length;
        for (var r = Array(s2), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve2, reject) {
              v = o[n](v), settle(resolve2, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve2, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve2({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      __importStar = function(mod2) {
        if (mod2 && mod2.__esModule)
          return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k in mod2)
            if (Object.hasOwnProperty.call(mod2, k))
              result[k] = mod2[k];
        }
        result["default"] = mod2;
        return result;
      };
      __importDefault = function(mod2) {
        return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
      };
      __classPrivateFieldGet = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    });
  }
});

// node_modules/@firebase/component/dist/index.cjs.js
var require_index_cjs = __commonJS({
  "node_modules/@firebase/component/dist/index.cjs.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib = require_tslib3();
    var util = require_index_node_cjs();
    var Component = function() {
      function Component2(name2, instanceFactory, type) {
        this.name = name2;
        this.instanceFactory = instanceFactory;
        this.type = type;
        this.multipleInstances = false;
        this.serviceProps = {};
        this.instantiationMode = "LAZY";
      }
      Component2.prototype.setInstantiationMode = function(mode) {
        this.instantiationMode = mode;
        return this;
      };
      Component2.prototype.setMultipleInstances = function(multipleInstances) {
        this.multipleInstances = multipleInstances;
        return this;
      };
      Component2.prototype.setServiceProps = function(props) {
        this.serviceProps = props;
        return this;
      };
      return Component2;
    }();
    var DEFAULT_ENTRY_NAME = "[DEFAULT]";
    var Provider = function() {
      function Provider2(name2, container) {
        this.name = name2;
        this.container = container;
        this.component = null;
        this.instances = new Map();
        this.instancesDeferred = new Map();
      }
      Provider2.prototype.get = function(identifier) {
        if (identifier === void 0) {
          identifier = DEFAULT_ENTRY_NAME;
        }
        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        if (!this.instancesDeferred.has(normalizedIdentifier)) {
          var deferred = new util.Deferred();
          this.instancesDeferred.set(normalizedIdentifier, deferred);
          try {
            var instance = this.getOrInitializeService(normalizedIdentifier);
            if (instance) {
              deferred.resolve(instance);
            }
          } catch (e) {
          }
        }
        return this.instancesDeferred.get(normalizedIdentifier).promise;
      };
      Provider2.prototype.getImmediate = function(options2) {
        var _a = tslib.__assign({ identifier: DEFAULT_ENTRY_NAME, optional: false }, options2), identifier = _a.identifier, optional = _a.optional;
        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        try {
          var instance = this.getOrInitializeService(normalizedIdentifier);
          if (!instance) {
            if (optional) {
              return null;
            }
            throw Error("Service " + this.name + " is not available");
          }
          return instance;
        } catch (e) {
          if (optional) {
            return null;
          } else {
            throw e;
          }
        }
      };
      Provider2.prototype.getComponent = function() {
        return this.component;
      };
      Provider2.prototype.setComponent = function(component) {
        var e_1, _a;
        if (component.name !== this.name) {
          throw Error("Mismatching Component " + component.name + " for Provider " + this.name + ".");
        }
        if (this.component) {
          throw Error("Component for " + this.name + " has already been provided");
        }
        this.component = component;
        if (isComponentEager(component)) {
          try {
            this.getOrInitializeService(DEFAULT_ENTRY_NAME);
          } catch (e) {
          }
        }
        try {
          for (var _b = tslib.__values(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = tslib.__read(_c.value, 2), instanceIdentifier = _d[0], instanceDeferred = _d[1];
            var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
            try {
              var instance = this.getOrInitializeService(normalizedIdentifier);
              instanceDeferred.resolve(instance);
            } catch (e) {
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              _a.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      };
      Provider2.prototype.clearInstance = function(identifier) {
        if (identifier === void 0) {
          identifier = DEFAULT_ENTRY_NAME;
        }
        this.instancesDeferred.delete(identifier);
        this.instances.delete(identifier);
      };
      Provider2.prototype.delete = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var services;
          return tslib.__generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                services = Array.from(this.instances.values());
                return [4, Promise.all(tslib.__spread(services.filter(function(service) {
                  return "INTERNAL" in service;
                }).map(function(service) {
                  return service.INTERNAL.delete();
                }), services.filter(function(service) {
                  return "_delete" in service;
                }).map(function(service) {
                  return service._delete();
                })))];
              case 1:
                _a.sent();
                return [2];
            }
          });
        });
      };
      Provider2.prototype.isComponentSet = function() {
        return this.component != null;
      };
      Provider2.prototype.getOrInitializeService = function(identifier) {
        var instance = this.instances.get(identifier);
        if (!instance && this.component) {
          instance = this.component.instanceFactory(this.container, normalizeIdentifierForFactory(identifier));
          this.instances.set(identifier, instance);
        }
        return instance || null;
      };
      Provider2.prototype.normalizeInstanceIdentifier = function(identifier) {
        if (this.component) {
          return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;
        } else {
          return identifier;
        }
      };
      return Provider2;
    }();
    function normalizeIdentifierForFactory(identifier) {
      return identifier === DEFAULT_ENTRY_NAME ? void 0 : identifier;
    }
    function isComponentEager(component) {
      return component.instantiationMode === "EAGER";
    }
    var ComponentContainer = function() {
      function ComponentContainer2(name2) {
        this.name = name2;
        this.providers = new Map();
      }
      ComponentContainer2.prototype.addComponent = function(component) {
        var provider = this.getProvider(component.name);
        if (provider.isComponentSet()) {
          throw new Error("Component " + component.name + " has already been registered with " + this.name);
        }
        provider.setComponent(component);
      };
      ComponentContainer2.prototype.addOrOverwriteComponent = function(component) {
        var provider = this.getProvider(component.name);
        if (provider.isComponentSet()) {
          this.providers.delete(component.name);
        }
        this.addComponent(component);
      };
      ComponentContainer2.prototype.getProvider = function(name2) {
        if (this.providers.has(name2)) {
          return this.providers.get(name2);
        }
        var provider = new Provider(name2, this);
        this.providers.set(name2, provider);
        return provider;
      };
      ComponentContainer2.prototype.getProviders = function() {
        return Array.from(this.providers.values());
      };
      return ComponentContainer2;
    }();
    exports2.Component = Component;
    exports2.ComponentContainer = ComponentContainer;
    exports2.Provider = Provider;
  }
});

// node_modules/@firebase/logger/dist/index.cjs.js
var require_index_cjs2 = __commonJS({
  "node_modules/@firebase/logger/dist/index.cjs.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function __spreadArrays() {
      for (var s2 = 0, i = 0, il = arguments.length; i < il; i++)
        s2 += arguments[i].length;
      for (var r = Array(s2), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    }
    var _a;
    var instances = [];
    (function(LogLevel) {
      LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
      LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
      LogLevel[LogLevel["INFO"] = 2] = "INFO";
      LogLevel[LogLevel["WARN"] = 3] = "WARN";
      LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
      LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
    })(exports2.LogLevel || (exports2.LogLevel = {}));
    var levelStringToEnum = {
      "debug": exports2.LogLevel.DEBUG,
      "verbose": exports2.LogLevel.VERBOSE,
      "info": exports2.LogLevel.INFO,
      "warn": exports2.LogLevel.WARN,
      "error": exports2.LogLevel.ERROR,
      "silent": exports2.LogLevel.SILENT
    };
    var defaultLogLevel = exports2.LogLevel.INFO;
    var ConsoleMethod = (_a = {}, _a[exports2.LogLevel.DEBUG] = "log", _a[exports2.LogLevel.VERBOSE] = "log", _a[exports2.LogLevel.INFO] = "info", _a[exports2.LogLevel.WARN] = "warn", _a[exports2.LogLevel.ERROR] = "error", _a);
    var defaultLogHandler = function(instance, logType) {
      var args = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
      }
      if (logType < instance.logLevel) {
        return;
      }
      var now = new Date().toISOString();
      var method = ConsoleMethod[logType];
      if (method) {
        console[method].apply(console, __spreadArrays(["[" + now + "]  " + instance.name + ":"], args));
      } else {
        throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
      }
    };
    var Logger = function() {
      function Logger2(name2) {
        this.name = name2;
        this._logLevel = defaultLogLevel;
        this._logHandler = defaultLogHandler;
        this._userLogHandler = null;
        instances.push(this);
      }
      Object.defineProperty(Logger2.prototype, "logLevel", {
        get: function() {
          return this._logLevel;
        },
        set: function(val) {
          if (!(val in exports2.LogLevel)) {
            throw new TypeError('Invalid value "' + val + '" assigned to `logLevel`');
          }
          this._logLevel = val;
        },
        enumerable: false,
        configurable: true
      });
      Logger2.prototype.setLogLevel = function(val) {
        this._logLevel = typeof val === "string" ? levelStringToEnum[val] : val;
      };
      Object.defineProperty(Logger2.prototype, "logHandler", {
        get: function() {
          return this._logHandler;
        },
        set: function(val) {
          if (typeof val !== "function") {
            throw new TypeError("Value assigned to `logHandler` must be a function");
          }
          this._logHandler = val;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Logger2.prototype, "userLogHandler", {
        get: function() {
          return this._userLogHandler;
        },
        set: function(val) {
          this._userLogHandler = val;
        },
        enumerable: false,
        configurable: true
      });
      Logger2.prototype.debug = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, exports2.LogLevel.DEBUG], args));
        this._logHandler.apply(this, __spreadArrays([this, exports2.LogLevel.DEBUG], args));
      };
      Logger2.prototype.log = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, exports2.LogLevel.VERBOSE], args));
        this._logHandler.apply(this, __spreadArrays([this, exports2.LogLevel.VERBOSE], args));
      };
      Logger2.prototype.info = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, exports2.LogLevel.INFO], args));
        this._logHandler.apply(this, __spreadArrays([this, exports2.LogLevel.INFO], args));
      };
      Logger2.prototype.warn = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, exports2.LogLevel.WARN], args));
        this._logHandler.apply(this, __spreadArrays([this, exports2.LogLevel.WARN], args));
      };
      Logger2.prototype.error = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, exports2.LogLevel.ERROR], args));
        this._logHandler.apply(this, __spreadArrays([this, exports2.LogLevel.ERROR], args));
      };
      return Logger2;
    }();
    function setLogLevel(level) {
      instances.forEach(function(inst) {
        inst.setLogLevel(level);
      });
    }
    function setUserLogHandler(logCallback, options2) {
      var _loop_1 = function(instance2) {
        var customLogLevel = null;
        if (options2 && options2.level) {
          customLogLevel = levelStringToEnum[options2.level];
        }
        if (logCallback === null) {
          instance2.userLogHandler = null;
        } else {
          instance2.userLogHandler = function(instance3, level) {
            var args = [];
            for (var _i2 = 2; _i2 < arguments.length; _i2++) {
              args[_i2 - 2] = arguments[_i2];
            }
            var message = args.map(function(arg) {
              if (arg == null) {
                return null;
              } else if (typeof arg === "string") {
                return arg;
              } else if (typeof arg === "number" || typeof arg === "boolean") {
                return arg.toString();
              } else if (arg instanceof Error) {
                return arg.message;
              } else {
                try {
                  return JSON.stringify(arg);
                } catch (ignored) {
                  return null;
                }
              }
            }).filter(function(arg) {
              return arg;
            }).join(" ");
            if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance3.logLevel)) {
              logCallback({
                level: exports2.LogLevel[level].toLowerCase(),
                message,
                args,
                type: instance3.name
              });
            }
          };
        }
      };
      for (var _i = 0, instances_1 = instances; _i < instances_1.length; _i++) {
        var instance = instances_1[_i];
        _loop_1(instance);
      }
    }
    exports2.Logger = Logger;
    exports2.setLogLevel = setLogLevel;
    exports2.setUserLogHandler = setUserLogHandler;
  }
});

// node_modules/dom-storage/lib/index.js
var require_lib = __commonJS({
  "node_modules/dom-storage/lib/index.js"(exports2, module2) {
    init_shims();
    (function() {
      "use strict";
      var fs = require("fs");
      function Storage(path, opts) {
        opts = opts || {};
        var db;
        Object.defineProperty(this, "___priv_bk___", {
          value: {
            path
          },
          writable: false,
          enumerable: false
        });
        Object.defineProperty(this, "___priv_strict___", {
          value: !!opts.strict,
          writable: false,
          enumerable: false
        });
        Object.defineProperty(this, "___priv_ws___", {
          value: opts.ws || "  ",
          writable: false,
          enumerable: false
        });
        try {
          db = JSON.parse(fs.readFileSync(path));
        } catch (e) {
          db = {};
        }
        Object.keys(db).forEach(function(key) {
          this[key] = db[key];
        }, this);
      }
      Storage.prototype.getItem = function(key) {
        if (this.hasOwnProperty(key)) {
          if (this.___priv_strict___) {
            return String(this[key]);
          } else {
            return this[key];
          }
        }
        return null;
      };
      Storage.prototype.setItem = function(key, val) {
        if (val === void 0) {
          this[key] = null;
        } else if (this.___priv_strict___) {
          this[key] = String(val);
        } else {
          this[key] = val;
        }
        this.___save___();
      };
      Storage.prototype.removeItem = function(key) {
        delete this[key];
        this.___save___();
      };
      Storage.prototype.clear = function() {
        var self2 = this;
        Object.keys(self2).forEach(function(key) {
          self2[key] = void 0;
          delete self2[key];
        });
      };
      Storage.prototype.key = function(i) {
        i = i || 0;
        return Object.keys(this)[i];
      };
      Object.defineProperty(Storage.prototype, "length", {
        get: function() {
          return Object.keys(this).length;
        }
      });
      Storage.prototype.___save___ = function() {
        var self2 = this;
        if (!this.___priv_bk___.path) {
          return;
        }
        if (this.___priv_bk___.lock) {
          this.___priv_bk___.wait = true;
          return;
        }
        this.___priv_bk___.lock = true;
        fs.writeFile(this.___priv_bk___.path, JSON.stringify(this, null, this.___priv_ws___), "utf8", function(e) {
          self2.___priv_bk___.lock = false;
          if (e) {
            console.error("Could not write to database", self2.___priv_bk___.path);
            console.error(e);
            return;
          }
          if (self2.___priv_bk___.wait) {
            self2.___priv_bk___.wait = false;
            self2.___save___();
          }
        });
      };
      Object.defineProperty(Storage, "create", {
        value: function(path, opts) {
          return new Storage(path, opts);
        },
        writable: false,
        enumerable: false
      });
      module2.exports = Storage;
    })();
  }
});

// node_modules/xmlhttprequest/lib/XMLHttpRequest.js
var require_XMLHttpRequest = __commonJS({
  "node_modules/xmlhttprequest/lib/XMLHttpRequest.js"(exports2) {
    init_shims();
    var Url = require("url");
    var spawn = require("child_process").spawn;
    var fs = require("fs");
    exports2.XMLHttpRequest = function() {
      "use strict";
      var self2 = this;
      var http2 = require("http");
      var https2 = require("https");
      var request;
      var response;
      var settings = {};
      var disableHeaderCheck = false;
      var defaultHeaders = {
        "User-Agent": "node-XMLHttpRequest",
        "Accept": "*/*"
      };
      var headers = {};
      var headersCase = {};
      var forbiddenRequestHeaders = [
        "accept-charset",
        "accept-encoding",
        "access-control-request-headers",
        "access-control-request-method",
        "connection",
        "content-length",
        "content-transfer-encoding",
        "cookie",
        "cookie2",
        "date",
        "expect",
        "host",
        "keep-alive",
        "origin",
        "referer",
        "te",
        "trailer",
        "transfer-encoding",
        "upgrade",
        "via"
      ];
      var forbiddenRequestMethods = [
        "TRACE",
        "TRACK",
        "CONNECT"
      ];
      var sendFlag = false;
      var errorFlag = false;
      var listeners = {};
      this.UNSENT = 0;
      this.OPENED = 1;
      this.HEADERS_RECEIVED = 2;
      this.LOADING = 3;
      this.DONE = 4;
      this.readyState = this.UNSENT;
      this.onreadystatechange = null;
      this.responseText = "";
      this.responseXML = "";
      this.status = null;
      this.statusText = null;
      this.withCredentials = false;
      var isAllowedHttpHeader = function(header) {
        return disableHeaderCheck || header && forbiddenRequestHeaders.indexOf(header.toLowerCase()) === -1;
      };
      var isAllowedHttpMethod = function(method) {
        return method && forbiddenRequestMethods.indexOf(method) === -1;
      };
      this.open = function(method, url, async, user, password) {
        this.abort();
        errorFlag = false;
        if (!isAllowedHttpMethod(method)) {
          throw new Error("SecurityError: Request method not allowed");
        }
        settings = {
          "method": method,
          "url": url.toString(),
          "async": typeof async !== "boolean" ? true : async,
          "user": user || null,
          "password": password || null
        };
        setState(this.OPENED);
      };
      this.setDisableHeaderCheck = function(state) {
        disableHeaderCheck = state;
      };
      this.setRequestHeader = function(header, value) {
        if (this.readyState !== this.OPENED) {
          throw new Error("INVALID_STATE_ERR: setRequestHeader can only be called when state is OPEN");
        }
        if (!isAllowedHttpHeader(header)) {
          console.warn('Refused to set unsafe header "' + header + '"');
          return;
        }
        if (sendFlag) {
          throw new Error("INVALID_STATE_ERR: send flag is true");
        }
        header = headersCase[header.toLowerCase()] || header;
        headersCase[header.toLowerCase()] = header;
        headers[header] = headers[header] ? headers[header] + ", " + value : value;
      };
      this.getResponseHeader = function(header) {
        if (typeof header === "string" && this.readyState > this.OPENED && response && response.headers && response.headers[header.toLowerCase()] && !errorFlag) {
          return response.headers[header.toLowerCase()];
        }
        return null;
      };
      this.getAllResponseHeaders = function() {
        if (this.readyState < this.HEADERS_RECEIVED || errorFlag) {
          return "";
        }
        var result = "";
        for (var i in response.headers) {
          if (i !== "set-cookie" && i !== "set-cookie2") {
            result += i + ": " + response.headers[i] + "\r\n";
          }
        }
        return result.substr(0, result.length - 2);
      };
      this.getRequestHeader = function(name2) {
        if (typeof name2 === "string" && headersCase[name2.toLowerCase()]) {
          return headers[headersCase[name2.toLowerCase()]];
        }
        return "";
      };
      this.send = function(data) {
        if (this.readyState !== this.OPENED) {
          throw new Error("INVALID_STATE_ERR: connection must be opened before send() is called");
        }
        if (sendFlag) {
          throw new Error("INVALID_STATE_ERR: send has already been called");
        }
        var ssl = false, local = false;
        var url = Url.parse(settings.url);
        var host;
        switch (url.protocol) {
          case "https:":
            ssl = true;
          case "http:":
            host = url.hostname;
            break;
          case "file:":
            local = true;
            break;
          case void 0:
          case null:
          case "":
            host = "localhost";
            break;
          default:
            throw new Error("Protocol not supported.");
        }
        if (local) {
          if (settings.method !== "GET") {
            throw new Error("XMLHttpRequest: Only GET method is supported");
          }
          if (settings.async) {
            fs.readFile(url.pathname, "utf8", function(error2, data2) {
              if (error2) {
                self2.handleError(error2);
              } else {
                self2.status = 200;
                self2.responseText = data2;
                setState(self2.DONE);
              }
            });
          } else {
            try {
              this.responseText = fs.readFileSync(url.pathname, "utf8");
              this.status = 200;
              setState(self2.DONE);
            } catch (e) {
              this.handleError(e);
            }
          }
          return;
        }
        var port = url.port || (ssl ? 443 : 80);
        var uri = url.pathname + (url.search ? url.search : "");
        for (var name2 in defaultHeaders) {
          if (!headersCase[name2.toLowerCase()]) {
            headers[name2] = defaultHeaders[name2];
          }
        }
        headers.Host = host;
        if (!(ssl && port === 443 || port === 80)) {
          headers.Host += ":" + url.port;
        }
        if (settings.user) {
          if (typeof settings.password === "undefined") {
            settings.password = "";
          }
          var authBuf = new Buffer(settings.user + ":" + settings.password);
          headers.Authorization = "Basic " + authBuf.toString("base64");
        }
        if (settings.method === "GET" || settings.method === "HEAD") {
          data = null;
        } else if (data) {
          headers["Content-Length"] = Buffer.isBuffer(data) ? data.length : Buffer.byteLength(data);
          if (!headers["Content-Type"]) {
            headers["Content-Type"] = "text/plain;charset=UTF-8";
          }
        } else if (settings.method === "POST") {
          headers["Content-Length"] = 0;
        }
        var options2 = {
          host,
          port,
          path: uri,
          method: settings.method,
          headers,
          agent: false,
          withCredentials: self2.withCredentials
        };
        errorFlag = false;
        if (settings.async) {
          var doRequest = ssl ? https2.request : http2.request;
          sendFlag = true;
          self2.dispatchEvent("readystatechange");
          var responseHandler = function responseHandler2(resp2) {
            response = resp2;
            if (response.statusCode === 301 || response.statusCode === 302 || response.statusCode === 303 || response.statusCode === 307) {
              settings.url = response.headers.location;
              var url2 = Url.parse(settings.url);
              host = url2.hostname;
              var newOptions = {
                hostname: url2.hostname,
                port: url2.port,
                path: url2.path,
                method: response.statusCode === 303 ? "GET" : settings.method,
                headers,
                withCredentials: self2.withCredentials
              };
              request = doRequest(newOptions, responseHandler2).on("error", errorHandler);
              request.end();
              return;
            }
            response.setEncoding("utf8");
            setState(self2.HEADERS_RECEIVED);
            self2.status = response.statusCode;
            response.on("data", function(chunk) {
              if (chunk) {
                self2.responseText += chunk;
              }
              if (sendFlag) {
                setState(self2.LOADING);
              }
            });
            response.on("end", function() {
              if (sendFlag) {
                setState(self2.DONE);
                sendFlag = false;
              }
            });
            response.on("error", function(error2) {
              self2.handleError(error2);
            });
          };
          var errorHandler = function errorHandler2(error2) {
            self2.handleError(error2);
          };
          request = doRequest(options2, responseHandler).on("error", errorHandler);
          if (data) {
            request.write(data);
          }
          request.end();
          self2.dispatchEvent("loadstart");
        } else {
          var contentFile = ".node-xmlhttprequest-content-" + process.pid;
          var syncFile = ".node-xmlhttprequest-sync-" + process.pid;
          fs.writeFileSync(syncFile, "", "utf8");
          var execString = "var http = require('http'), https = require('https'), fs = require('fs');var doRequest = http" + (ssl ? "s" : "") + ".request;var options = " + JSON.stringify(options2) + ";var responseText = '';var req = doRequest(options, function(response) {response.setEncoding('utf8');response.on('data', function(chunk) {  responseText += chunk;});response.on('end', function() {fs.writeFileSync('" + contentFile + "', JSON.stringify({err: null, data: {statusCode: response.statusCode, headers: response.headers, text: responseText}}), 'utf8');fs.unlinkSync('" + syncFile + "');});response.on('error', function(error) {fs.writeFileSync('" + contentFile + "', JSON.stringify({err: error}), 'utf8');fs.unlinkSync('" + syncFile + "');});}).on('error', function(error) {fs.writeFileSync('" + contentFile + "', JSON.stringify({err: error}), 'utf8');fs.unlinkSync('" + syncFile + "');});" + (data ? "req.write('" + JSON.stringify(data).slice(1, -1).replace(/'/g, "\\'") + "');" : "") + "req.end();";
          var syncProc = spawn(process.argv[0], ["-e", execString]);
          while (fs.existsSync(syncFile)) {
          }
          var resp = JSON.parse(fs.readFileSync(contentFile, "utf8"));
          syncProc.stdin.end();
          fs.unlinkSync(contentFile);
          if (resp.err) {
            self2.handleError(resp.err);
          } else {
            response = resp.data;
            self2.status = resp.data.statusCode;
            self2.responseText = resp.data.text;
            setState(self2.DONE);
          }
        }
      };
      this.handleError = function(error2) {
        this.status = 0;
        this.statusText = error2;
        this.responseText = error2.stack;
        errorFlag = true;
        setState(this.DONE);
        this.dispatchEvent("error");
      };
      this.abort = function() {
        if (request) {
          request.abort();
          request = null;
        }
        headers = defaultHeaders;
        this.status = 0;
        this.responseText = "";
        this.responseXML = "";
        errorFlag = true;
        if (this.readyState !== this.UNSENT && (this.readyState !== this.OPENED || sendFlag) && this.readyState !== this.DONE) {
          sendFlag = false;
          setState(this.DONE);
        }
        this.readyState = this.UNSENT;
        this.dispatchEvent("abort");
      };
      this.addEventListener = function(event, callback) {
        if (!(event in listeners)) {
          listeners[event] = [];
        }
        listeners[event].push(callback);
      };
      this.removeEventListener = function(event, callback) {
        if (event in listeners) {
          listeners[event] = listeners[event].filter(function(ev) {
            return ev !== callback;
          });
        }
      };
      this.dispatchEvent = function(event) {
        if (typeof self2["on" + event] === "function") {
          self2["on" + event]();
        }
        if (event in listeners) {
          for (var i = 0, len = listeners[event].length; i < len; i++) {
            listeners[event][i].call(self2);
          }
        }
      };
      var setState = function(state) {
        if (state == self2.LOADING || self2.readyState !== state) {
          self2.readyState = state;
          if (settings.async || self2.readyState < self2.OPENED || self2.readyState === self2.DONE) {
            self2.dispatchEvent("readystatechange");
          }
          if (self2.readyState === self2.DONE && !errorFlag) {
            self2.dispatchEvent("load");
            self2.dispatchEvent("loadend");
          }
        }
      };
    };
  }
});

// node_modules/firebase/node_modules/@firebase/app/dist/index.node.cjs.js
var require_index_node_cjs2 = __commonJS({
  "node_modules/firebase/node_modules/@firebase/app/dist/index.node.cjs.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib = require_tslib();
    var util = require_index_node_cjs();
    var component = require_index_cjs();
    var logger$1 = require_index_cjs2();
    var Storage = require_lib();
    var xmlhttprequest = require_XMLHttpRequest();
    function _interopDefaultLegacy(e) {
      return e && typeof e === "object" && "default" in e ? e : { "default": e };
    }
    var Storage__default = /* @__PURE__ */ _interopDefaultLegacy(Storage);
    var _a;
    var ERRORS = (_a = {}, _a["no-app"] = "No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()", _a["bad-app-name"] = "Illegal App name: '{$appName}", _a["duplicate-app"] = "Firebase App named '{$appName}' already exists", _a["app-deleted"] = "Firebase App named '{$appName}' already deleted", _a["invalid-app-argument"] = "firebase.{$appName}() takes either no argument or a Firebase App instance.", _a["invalid-log-argument"] = "First argument to `onLog` must be null or a function.", _a);
    var ERROR_FACTORY = new util.ErrorFactory("app", "Firebase", ERRORS);
    var name$1 = "@firebase/app";
    var version = "0.6.11";
    var name$2 = "@firebase/analytics";
    var name$3 = "@firebase/auth";
    var name$4 = "@firebase/database";
    var name$5 = "@firebase/functions";
    var name$6 = "@firebase/installations";
    var name$7 = "@firebase/messaging";
    var name$8 = "@firebase/performance";
    var name$9 = "@firebase/remote-config";
    var name$a = "@firebase/storage";
    var name$b = "@firebase/firestore";
    var name$c = "firebase-wrapper";
    var _a$1;
    var DEFAULT_ENTRY_NAME = "[DEFAULT]";
    var PLATFORM_LOG_STRING = (_a$1 = {}, _a$1[name$1] = "fire-core", _a$1[name$2] = "fire-analytics", _a$1[name$3] = "fire-auth", _a$1[name$4] = "fire-rtdb", _a$1[name$5] = "fire-fn", _a$1[name$6] = "fire-iid", _a$1[name$7] = "fire-fcm", _a$1[name$8] = "fire-perf", _a$1[name$9] = "fire-rc", _a$1[name$a] = "fire-gcs", _a$1[name$b] = "fire-fst", _a$1["fire-js"] = "fire-js", _a$1[name$c] = "fire-js-all", _a$1);
    var logger = new logger$1.Logger("@firebase/app");
    var FirebaseAppImpl = function() {
      function FirebaseAppImpl2(options2, config, firebase_) {
        var e_1, _a2;
        var _this = this;
        this.firebase_ = firebase_;
        this.isDeleted_ = false;
        this.name_ = config.name;
        this.automaticDataCollectionEnabled_ = config.automaticDataCollectionEnabled || false;
        this.options_ = util.deepCopy(options2);
        this.container = new component.ComponentContainer(config.name);
        this._addComponent(new component.Component("app", function() {
          return _this;
        }, "PUBLIC"));
        try {
          for (var _b = tslib.__values(this.firebase_.INTERNAL.components.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
            var component$1 = _c.value;
            this._addComponent(component$1);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a2 = _b.return))
              _a2.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      }
      Object.defineProperty(FirebaseAppImpl2.prototype, "automaticDataCollectionEnabled", {
        get: function() {
          this.checkDestroyed_();
          return this.automaticDataCollectionEnabled_;
        },
        set: function(val) {
          this.checkDestroyed_();
          this.automaticDataCollectionEnabled_ = val;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(FirebaseAppImpl2.prototype, "name", {
        get: function() {
          this.checkDestroyed_();
          return this.name_;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(FirebaseAppImpl2.prototype, "options", {
        get: function() {
          this.checkDestroyed_();
          return this.options_;
        },
        enumerable: false,
        configurable: true
      });
      FirebaseAppImpl2.prototype.delete = function() {
        var _this = this;
        return new Promise(function(resolve2) {
          _this.checkDestroyed_();
          resolve2();
        }).then(function() {
          _this.firebase_.INTERNAL.removeApp(_this.name_);
          return Promise.all(_this.container.getProviders().map(function(provider) {
            return provider.delete();
          }));
        }).then(function() {
          _this.isDeleted_ = true;
        });
      };
      FirebaseAppImpl2.prototype._getService = function(name2, instanceIdentifier) {
        if (instanceIdentifier === void 0) {
          instanceIdentifier = DEFAULT_ENTRY_NAME;
        }
        this.checkDestroyed_();
        return this.container.getProvider(name2).getImmediate({
          identifier: instanceIdentifier
        });
      };
      FirebaseAppImpl2.prototype._removeServiceInstance = function(name2, instanceIdentifier) {
        if (instanceIdentifier === void 0) {
          instanceIdentifier = DEFAULT_ENTRY_NAME;
        }
        this.container.getProvider(name2).clearInstance(instanceIdentifier);
      };
      FirebaseAppImpl2.prototype._addComponent = function(component2) {
        try {
          this.container.addComponent(component2);
        } catch (e) {
          logger.debug("Component " + component2.name + " failed to register with FirebaseApp " + this.name, e);
        }
      };
      FirebaseAppImpl2.prototype._addOrOverwriteComponent = function(component2) {
        this.container.addOrOverwriteComponent(component2);
      };
      FirebaseAppImpl2.prototype.checkDestroyed_ = function() {
        if (this.isDeleted_) {
          throw ERROR_FACTORY.create("app-deleted", { appName: this.name_ });
        }
      };
      return FirebaseAppImpl2;
    }();
    FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options || FirebaseAppImpl.prototype.delete || console.log("dc");
    var version$1 = "7.20.0";
    function createFirebaseNamespaceCore(firebaseAppImpl) {
      var apps = {};
      var components = new Map();
      var namespace = {
        __esModule: true,
        initializeApp,
        app,
        registerVersion,
        setLogLevel: logger$1.setLogLevel,
        onLog,
        apps: null,
        SDK_VERSION: version$1,
        INTERNAL: {
          registerComponent,
          removeApp,
          components,
          useAsService
        }
      };
      namespace["default"] = namespace;
      Object.defineProperty(namespace, "apps", {
        get: getApps
      });
      function removeApp(name2) {
        delete apps[name2];
      }
      function app(name2) {
        name2 = name2 || DEFAULT_ENTRY_NAME;
        if (!util.contains(apps, name2)) {
          throw ERROR_FACTORY.create("no-app", { appName: name2 });
        }
        return apps[name2];
      }
      app["App"] = firebaseAppImpl;
      function initializeApp(options2, rawConfig) {
        if (rawConfig === void 0) {
          rawConfig = {};
        }
        if (typeof rawConfig !== "object" || rawConfig === null) {
          var name_1 = rawConfig;
          rawConfig = { name: name_1 };
        }
        var config = rawConfig;
        if (config.name === void 0) {
          config.name = DEFAULT_ENTRY_NAME;
        }
        var name2 = config.name;
        if (typeof name2 !== "string" || !name2) {
          throw ERROR_FACTORY.create("bad-app-name", {
            appName: String(name2)
          });
        }
        if (util.contains(apps, name2)) {
          throw ERROR_FACTORY.create("duplicate-app", { appName: name2 });
        }
        var app2 = new firebaseAppImpl(options2, config, namespace);
        apps[name2] = app2;
        return app2;
      }
      function getApps() {
        return Object.keys(apps).map(function(name2) {
          return apps[name2];
        });
      }
      function registerComponent(component2) {
        var e_1, _a2;
        var componentName = component2.name;
        if (components.has(componentName)) {
          logger.debug("There were multiple attempts to register component " + componentName + ".");
          return component2.type === "PUBLIC" ? namespace[componentName] : null;
        }
        components.set(componentName, component2);
        if (component2.type === "PUBLIC") {
          var serviceNamespace = function(appArg) {
            if (appArg === void 0) {
              appArg = app();
            }
            if (typeof appArg[componentName] !== "function") {
              throw ERROR_FACTORY.create("invalid-app-argument", {
                appName: componentName
              });
            }
            return appArg[componentName]();
          };
          if (component2.serviceProps !== void 0) {
            util.deepExtend(serviceNamespace, component2.serviceProps);
          }
          namespace[componentName] = serviceNamespace;
          firebaseAppImpl.prototype[componentName] = function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            var serviceFxn = this._getService.bind(this, componentName);
            return serviceFxn.apply(this, component2.multipleInstances ? args : []);
          };
        }
        try {
          for (var _b = tslib.__values(Object.keys(apps)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var appName = _c.value;
            apps[appName]._addComponent(component2);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a2 = _b.return))
              _a2.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        return component2.type === "PUBLIC" ? namespace[componentName] : null;
      }
      function registerVersion(libraryKeyOrName, version2, variant) {
        var _a2;
        var library = (_a2 = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a2 !== void 0 ? _a2 : libraryKeyOrName;
        if (variant) {
          library += "-" + variant;
        }
        var libraryMismatch = library.match(/\s|\//);
        var versionMismatch = version2.match(/\s|\//);
        if (libraryMismatch || versionMismatch) {
          var warning = [
            'Unable to register library "' + library + '" with version "' + version2 + '":'
          ];
          if (libraryMismatch) {
            warning.push('library name "' + library + '" contains illegal characters (whitespace or "/")');
          }
          if (libraryMismatch && versionMismatch) {
            warning.push("and");
          }
          if (versionMismatch) {
            warning.push('version name "' + version2 + '" contains illegal characters (whitespace or "/")');
          }
          logger.warn(warning.join(" "));
          return;
        }
        registerComponent(new component.Component(library + "-version", function() {
          return { library, version: version2 };
        }, "VERSION"));
      }
      function onLog(logCallback, options2) {
        if (logCallback !== null && typeof logCallback !== "function") {
          throw ERROR_FACTORY.create("invalid-log-argument", {
            appName: name
          });
        }
        logger$1.setUserLogHandler(logCallback, options2);
      }
      function useAsService(app2, name2) {
        if (name2 === "serverAuth") {
          return null;
        }
        var useService = name2;
        return useService;
      }
      return namespace;
    }
    function createFirebaseNamespace() {
      var namespace = createFirebaseNamespaceCore(FirebaseAppImpl);
      namespace.INTERNAL = tslib.__assign(tslib.__assign({}, namespace.INTERNAL), {
        createFirebaseNamespace,
        extendNamespace,
        createSubscribe: util.createSubscribe,
        ErrorFactory: util.ErrorFactory,
        deepExtend: util.deepExtend
      });
      function extendNamespace(props) {
        util.deepExtend(namespace, props);
      }
      return namespace;
    }
    var firebase = createFirebaseNamespace();
    var PlatformLoggerService = function() {
      function PlatformLoggerService2(container) {
        this.container = container;
      }
      PlatformLoggerService2.prototype.getPlatformInfoString = function() {
        var providers = this.container.getProviders();
        return providers.map(function(provider) {
          if (isVersionServiceProvider(provider)) {
            var service = provider.getImmediate();
            return service.library + "/" + service.version;
          } else {
            return null;
          }
        }).filter(function(logString) {
          return logString;
        }).join(" ");
      };
      return PlatformLoggerService2;
    }();
    function isVersionServiceProvider(provider) {
      var component2 = provider.getComponent();
      return (component2 === null || component2 === void 0 ? void 0 : component2.type) === "VERSION";
    }
    function registerCoreComponents(firebase2, variant) {
      firebase2.INTERNAL.registerComponent(new component.Component("platform-logger", function(container) {
        return new PlatformLoggerService(container);
      }, "PRIVATE"));
      firebase2.registerVersion(name$1, version, variant);
      firebase2.registerVersion("fire-js", "");
    }
    firebase.INTERNAL.extendNamespace({
      INTERNAL: {
        node: {
          localStorage: new Storage__default["default"](null, { strict: true }),
          sessionStorage: new Storage__default["default"](null, { strict: true }),
          XMLHttpRequest: xmlhttprequest.XMLHttpRequest
        }
      }
    });
    var firebase$1 = firebase;
    registerCoreComponents(firebase$1, "node");
    exports2.default = firebase$1;
    exports2.firebase = firebase$1;
  }
});

// node_modules/firebase/app/dist/index.cjs.js
var require_index_cjs3 = __commonJS({
  "node_modules/firebase/app/dist/index.cjs.js"(exports2, module2) {
    init_shims();
    "use strict";
    var firebase = require_index_node_cjs2();
    function _interopDefaultLegacy(e) {
      return e && typeof e === "object" && "default" in e ? e : { "default": e };
    }
    var firebase__default = /* @__PURE__ */ _interopDefaultLegacy(firebase);
    var name2 = "firebase";
    var version = "7.24.0";
    firebase__default["default"].registerVersion(name2, version, "app");
    module2.exports = firebase__default["default"];
  }
});

// node_modules/@protobufjs/aspromise/index.js
var require_aspromise = __commonJS({
  "node_modules/@protobufjs/aspromise/index.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = asPromise;
    function asPromise(fn, ctx) {
      var params = new Array(arguments.length - 1), offset = 0, index2 = 2, pending = true;
      while (index2 < arguments.length)
        params[offset++] = arguments[index2++];
      return new Promise(function executor(resolve2, reject) {
        params[offset] = function callback(err) {
          if (pending) {
            pending = false;
            if (err)
              reject(err);
            else {
              var params2 = new Array(arguments.length - 1), offset2 = 0;
              while (offset2 < params2.length)
                params2[offset2++] = arguments[offset2];
              resolve2.apply(null, params2);
            }
          }
        };
        try {
          fn.apply(ctx || null, params);
        } catch (err) {
          if (pending) {
            pending = false;
            reject(err);
          }
        }
      });
    }
  }
});

// node_modules/@protobufjs/base64/index.js
var require_base64 = __commonJS({
  "node_modules/@protobufjs/base64/index.js"(exports2) {
    init_shims();
    "use strict";
    var base64 = exports2;
    base64.length = function length(string) {
      var p = string.length;
      if (!p)
        return 0;
      var n = 0;
      while (--p % 4 > 1 && string.charAt(p) === "=")
        ++n;
      return Math.ceil(string.length * 3) / 4 - n;
    };
    var b64 = new Array(64);
    var s64 = new Array(123);
    for (i = 0; i < 64; )
      s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;
    var i;
    base64.encode = function encode(buffer, start, end) {
      var parts = null, chunk = [];
      var i2 = 0, j = 0, t;
      while (start < end) {
        var b = buffer[start++];
        switch (j) {
          case 0:
            chunk[i2++] = b64[b >> 2];
            t = (b & 3) << 4;
            j = 1;
            break;
          case 1:
            chunk[i2++] = b64[t | b >> 4];
            t = (b & 15) << 2;
            j = 2;
            break;
          case 2:
            chunk[i2++] = b64[t | b >> 6];
            chunk[i2++] = b64[b & 63];
            j = 0;
            break;
        }
        if (i2 > 8191) {
          (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
          i2 = 0;
        }
      }
      if (j) {
        chunk[i2++] = b64[t];
        chunk[i2++] = 61;
        if (j === 1)
          chunk[i2++] = 61;
      }
      if (parts) {
        if (i2)
          parts.push(String.fromCharCode.apply(String, chunk.slice(0, i2)));
        return parts.join("");
      }
      return String.fromCharCode.apply(String, chunk.slice(0, i2));
    };
    var invalidEncoding = "invalid encoding";
    base64.decode = function decode(string, buffer, offset) {
      var start = offset;
      var j = 0, t;
      for (var i2 = 0; i2 < string.length; ) {
        var c = string.charCodeAt(i2++);
        if (c === 61 && j > 1)
          break;
        if ((c = s64[c]) === void 0)
          throw Error(invalidEncoding);
        switch (j) {
          case 0:
            t = c;
            j = 1;
            break;
          case 1:
            buffer[offset++] = t << 2 | (c & 48) >> 4;
            t = c;
            j = 2;
            break;
          case 2:
            buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
            t = c;
            j = 3;
            break;
          case 3:
            buffer[offset++] = (t & 3) << 6 | c;
            j = 0;
            break;
        }
      }
      if (j === 1)
        throw Error(invalidEncoding);
      return offset - start;
    };
    base64.test = function test(string) {
      return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
    };
  }
});

// node_modules/@protobufjs/eventemitter/index.js
var require_eventemitter = __commonJS({
  "node_modules/@protobufjs/eventemitter/index.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = EventEmitter;
    function EventEmitter() {
      this._listeners = {};
    }
    EventEmitter.prototype.on = function on(evt, fn, ctx) {
      (this._listeners[evt] || (this._listeners[evt] = [])).push({
        fn,
        ctx: ctx || this
      });
      return this;
    };
    EventEmitter.prototype.off = function off(evt, fn) {
      if (evt === void 0)
        this._listeners = {};
      else {
        if (fn === void 0)
          this._listeners[evt] = [];
        else {
          var listeners = this._listeners[evt];
          for (var i = 0; i < listeners.length; )
            if (listeners[i].fn === fn)
              listeners.splice(i, 1);
            else
              ++i;
        }
      }
      return this;
    };
    EventEmitter.prototype.emit = function emit(evt) {
      var listeners = this._listeners[evt];
      if (listeners) {
        var args = [], i = 1;
        for (; i < arguments.length; )
          args.push(arguments[i++]);
        for (i = 0; i < listeners.length; )
          listeners[i].fn.apply(listeners[i++].ctx, args);
      }
      return this;
    };
  }
});

// node_modules/@protobufjs/float/index.js
var require_float = __commonJS({
  "node_modules/@protobufjs/float/index.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = factory(factory);
    function factory(exports3) {
      if (typeof Float32Array !== "undefined")
        (function() {
          var f32 = new Float32Array([-0]), f8b = new Uint8Array(f32.buffer), le = f8b[3] === 128;
          function writeFloat_f32_cpy(val, buf, pos) {
            f32[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
          }
          function writeFloat_f32_rev(val, buf, pos) {
            f32[0] = val;
            buf[pos] = f8b[3];
            buf[pos + 1] = f8b[2];
            buf[pos + 2] = f8b[1];
            buf[pos + 3] = f8b[0];
          }
          exports3.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
          exports3.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;
          function readFloat_f32_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            return f32[0];
          }
          function readFloat_f32_rev(buf, pos) {
            f8b[3] = buf[pos];
            f8b[2] = buf[pos + 1];
            f8b[1] = buf[pos + 2];
            f8b[0] = buf[pos + 3];
            return f32[0];
          }
          exports3.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
          exports3.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;
        })();
      else
        (function() {
          function writeFloat_ieee754(writeUint, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
              val = -val;
            if (val === 0)
              writeUint(1 / val > 0 ? 0 : 2147483648, buf, pos);
            else if (isNaN(val))
              writeUint(2143289344, buf, pos);
            else if (val > 34028234663852886e22)
              writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
            else if (val < 11754943508222875e-54)
              writeUint((sign << 31 | Math.round(val / 1401298464324817e-60)) >>> 0, buf, pos);
            else {
              var exponent = Math.floor(Math.log(val) / Math.LN2), mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
              writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
            }
          }
          exports3.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
          exports3.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);
          function readFloat_ieee754(readUint, buf, pos) {
            var uint = readUint(buf, pos), sign = (uint >> 31) * 2 + 1, exponent = uint >>> 23 & 255, mantissa = uint & 8388607;
            return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 ? sign * 1401298464324817e-60 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
          }
          exports3.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
          exports3.readFloatBE = readFloat_ieee754.bind(null, readUintBE);
        })();
      if (typeof Float64Array !== "undefined")
        (function() {
          var f64 = new Float64Array([-0]), f8b = new Uint8Array(f64.buffer), le = f8b[7] === 128;
          function writeDouble_f64_cpy(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
            buf[pos + 4] = f8b[4];
            buf[pos + 5] = f8b[5];
            buf[pos + 6] = f8b[6];
            buf[pos + 7] = f8b[7];
          }
          function writeDouble_f64_rev(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[7];
            buf[pos + 1] = f8b[6];
            buf[pos + 2] = f8b[5];
            buf[pos + 3] = f8b[4];
            buf[pos + 4] = f8b[3];
            buf[pos + 5] = f8b[2];
            buf[pos + 6] = f8b[1];
            buf[pos + 7] = f8b[0];
          }
          exports3.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
          exports3.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;
          function readDouble_f64_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            f8b[4] = buf[pos + 4];
            f8b[5] = buf[pos + 5];
            f8b[6] = buf[pos + 6];
            f8b[7] = buf[pos + 7];
            return f64[0];
          }
          function readDouble_f64_rev(buf, pos) {
            f8b[7] = buf[pos];
            f8b[6] = buf[pos + 1];
            f8b[5] = buf[pos + 2];
            f8b[4] = buf[pos + 3];
            f8b[3] = buf[pos + 4];
            f8b[2] = buf[pos + 5];
            f8b[1] = buf[pos + 6];
            f8b[0] = buf[pos + 7];
            return f64[0];
          }
          exports3.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
          exports3.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;
        })();
      else
        (function() {
          function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
              val = -val;
            if (val === 0) {
              writeUint(0, buf, pos + off0);
              writeUint(1 / val > 0 ? 0 : 2147483648, buf, pos + off1);
            } else if (isNaN(val)) {
              writeUint(0, buf, pos + off0);
              writeUint(2146959360, buf, pos + off1);
            } else if (val > 17976931348623157e292) {
              writeUint(0, buf, pos + off0);
              writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
            } else {
              var mantissa;
              if (val < 22250738585072014e-324) {
                mantissa = val / 5e-324;
                writeUint(mantissa >>> 0, buf, pos + off0);
                writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
              } else {
                var exponent = Math.floor(Math.log(val) / Math.LN2);
                if (exponent === 1024)
                  exponent = 1023;
                mantissa = val * Math.pow(2, -exponent);
                writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
              }
            }
          }
          exports3.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
          exports3.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);
          function readDouble_ieee754(readUint, off0, off1, buf, pos) {
            var lo = readUint(buf, pos + off0), hi = readUint(buf, pos + off1);
            var sign = (hi >> 31) * 2 + 1, exponent = hi >>> 20 & 2047, mantissa = 4294967296 * (hi & 1048575) + lo;
            return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
          }
          exports3.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
          exports3.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);
        })();
      return exports3;
    }
    function writeUintLE(val, buf, pos) {
      buf[pos] = val & 255;
      buf[pos + 1] = val >>> 8 & 255;
      buf[pos + 2] = val >>> 16 & 255;
      buf[pos + 3] = val >>> 24;
    }
    function writeUintBE(val, buf, pos) {
      buf[pos] = val >>> 24;
      buf[pos + 1] = val >>> 16 & 255;
      buf[pos + 2] = val >>> 8 & 255;
      buf[pos + 3] = val & 255;
    }
    function readUintLE(buf, pos) {
      return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;
    }
    function readUintBE(buf, pos) {
      return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;
    }
  }
});

// node_modules/@protobufjs/inquire/index.js
var require_inquire = __commonJS({
  "node_modules/@protobufjs/inquire/index.js"(exports, module) {
    init_shims();
    "use strict";
    module.exports = inquire;
    function inquire(moduleName) {
      try {
        var mod = eval("quire".replace(/^/, "re"))(moduleName);
        if (mod && (mod.length || Object.keys(mod).length))
          return mod;
      } catch (e) {
      }
      return null;
    }
  }
});

// node_modules/@protobufjs/utf8/index.js
var require_utf8 = __commonJS({
  "node_modules/@protobufjs/utf8/index.js"(exports2) {
    init_shims();
    "use strict";
    var utf8 = exports2;
    utf8.length = function utf8_length(string) {
      var len = 0, c = 0;
      for (var i = 0; i < string.length; ++i) {
        c = string.charCodeAt(i);
        if (c < 128)
          len += 1;
        else if (c < 2048)
          len += 2;
        else if ((c & 64512) === 55296 && (string.charCodeAt(i + 1) & 64512) === 56320) {
          ++i;
          len += 4;
        } else
          len += 3;
      }
      return len;
    };
    utf8.read = function utf8_read(buffer, start, end) {
      var len = end - start;
      if (len < 1)
        return "";
      var parts = null, chunk = [], i = 0, t;
      while (start < end) {
        t = buffer[start++];
        if (t < 128)
          chunk[i++] = t;
        else if (t > 191 && t < 224)
          chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
        else if (t > 239 && t < 365) {
          t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 65536;
          chunk[i++] = 55296 + (t >> 10);
          chunk[i++] = 56320 + (t & 1023);
        } else
          chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
        if (i > 8191) {
          (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
          i = 0;
        }
      }
      if (parts) {
        if (i)
          parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
      }
      return String.fromCharCode.apply(String, chunk.slice(0, i));
    };
    utf8.write = function utf8_write(string, buffer, offset) {
      var start = offset, c1, c2;
      for (var i = 0; i < string.length; ++i) {
        c1 = string.charCodeAt(i);
        if (c1 < 128) {
          buffer[offset++] = c1;
        } else if (c1 < 2048) {
          buffer[offset++] = c1 >> 6 | 192;
          buffer[offset++] = c1 & 63 | 128;
        } else if ((c1 & 64512) === 55296 && ((c2 = string.charCodeAt(i + 1)) & 64512) === 56320) {
          c1 = 65536 + ((c1 & 1023) << 10) + (c2 & 1023);
          ++i;
          buffer[offset++] = c1 >> 18 | 240;
          buffer[offset++] = c1 >> 12 & 63 | 128;
          buffer[offset++] = c1 >> 6 & 63 | 128;
          buffer[offset++] = c1 & 63 | 128;
        } else {
          buffer[offset++] = c1 >> 12 | 224;
          buffer[offset++] = c1 >> 6 & 63 | 128;
          buffer[offset++] = c1 & 63 | 128;
        }
      }
      return offset - start;
    };
  }
});

// node_modules/@protobufjs/pool/index.js
var require_pool = __commonJS({
  "node_modules/@protobufjs/pool/index.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = pool;
    function pool(alloc, slice, size) {
      var SIZE = size || 8192;
      var MAX = SIZE >>> 1;
      var slab = null;
      var offset = SIZE;
      return function pool_alloc(size2) {
        if (size2 < 1 || size2 > MAX)
          return alloc(size2);
        if (offset + size2 > SIZE) {
          slab = alloc(SIZE);
          offset = 0;
        }
        var buf = slice.call(slab, offset, offset += size2);
        if (offset & 7)
          offset = (offset | 7) + 1;
        return buf;
      };
    }
  }
});

// node_modules/protobufjs/src/util/longbits.js
var require_longbits = __commonJS({
  "node_modules/protobufjs/src/util/longbits.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = LongBits;
    var util = require_minimal();
    function LongBits(lo, hi) {
      this.lo = lo >>> 0;
      this.hi = hi >>> 0;
    }
    var zero = LongBits.zero = new LongBits(0, 0);
    zero.toNumber = function() {
      return 0;
    };
    zero.zzEncode = zero.zzDecode = function() {
      return this;
    };
    zero.length = function() {
      return 1;
    };
    var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";
    LongBits.fromNumber = function fromNumber(value) {
      if (value === 0)
        return zero;
      var sign = value < 0;
      if (sign)
        value = -value;
      var lo = value >>> 0, hi = (value - lo) / 4294967296 >>> 0;
      if (sign) {
        hi = ~hi >>> 0;
        lo = ~lo >>> 0;
        if (++lo > 4294967295) {
          lo = 0;
          if (++hi > 4294967295)
            hi = 0;
        }
      }
      return new LongBits(lo, hi);
    };
    LongBits.from = function from(value) {
      if (typeof value === "number")
        return LongBits.fromNumber(value);
      if (util.isString(value)) {
        if (util.Long)
          value = util.Long.fromString(value);
        else
          return LongBits.fromNumber(parseInt(value, 10));
      }
      return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
    };
    LongBits.prototype.toNumber = function toNumber(unsigned) {
      if (!unsigned && this.hi >>> 31) {
        var lo = ~this.lo + 1 >>> 0, hi = ~this.hi >>> 0;
        if (!lo)
          hi = hi + 1 >>> 0;
        return -(lo + hi * 4294967296);
      }
      return this.lo + this.hi * 4294967296;
    };
    LongBits.prototype.toLong = function toLong(unsigned) {
      return util.Long ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned)) : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
    };
    var charCodeAt = String.prototype.charCodeAt;
    LongBits.fromHash = function fromHash(hash2) {
      if (hash2 === zeroHash)
        return zero;
      return new LongBits((charCodeAt.call(hash2, 0) | charCodeAt.call(hash2, 1) << 8 | charCodeAt.call(hash2, 2) << 16 | charCodeAt.call(hash2, 3) << 24) >>> 0, (charCodeAt.call(hash2, 4) | charCodeAt.call(hash2, 5) << 8 | charCodeAt.call(hash2, 6) << 16 | charCodeAt.call(hash2, 7) << 24) >>> 0);
    };
    LongBits.prototype.toHash = function toHash() {
      return String.fromCharCode(this.lo & 255, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, this.hi & 255, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);
    };
    LongBits.prototype.zzEncode = function zzEncode() {
      var mask = this.hi >> 31;
      this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
      this.lo = (this.lo << 1 ^ mask) >>> 0;
      return this;
    };
    LongBits.prototype.zzDecode = function zzDecode() {
      var mask = -(this.lo & 1);
      this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
      this.hi = (this.hi >>> 1 ^ mask) >>> 0;
      return this;
    };
    LongBits.prototype.length = function length() {
      var part0 = this.lo, part1 = (this.lo >>> 28 | this.hi << 4) >>> 0, part2 = this.hi >>> 24;
      return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;
    };
  }
});

// node_modules/protobufjs/src/util/minimal.js
var require_minimal = __commonJS({
  "node_modules/protobufjs/src/util/minimal.js"(exports2) {
    init_shims();
    "use strict";
    var util = exports2;
    util.asPromise = require_aspromise();
    util.base64 = require_base64();
    util.EventEmitter = require_eventemitter();
    util.float = require_float();
    util.inquire = require_inquire();
    util.utf8 = require_utf8();
    util.pool = require_pool();
    util.LongBits = require_longbits();
    util.isNode = Boolean(typeof global !== "undefined" && global && global.process && global.process.versions && global.process.versions.node);
    util.global = util.isNode && global || typeof window !== "undefined" && window || typeof self !== "undefined" && self || exports2;
    util.emptyArray = Object.freeze ? Object.freeze([]) : [];
    util.emptyObject = Object.freeze ? Object.freeze({}) : {};
    util.isInteger = Number.isInteger || function isInteger(value) {
      return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
    };
    util.isString = function isString(value) {
      return typeof value === "string" || value instanceof String;
    };
    util.isObject = function isObject(value) {
      return value && typeof value === "object";
    };
    util.isset = util.isSet = function isSet(obj, prop) {
      var value = obj[prop];
      if (value != null && obj.hasOwnProperty(prop))
        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
      return false;
    };
    util.Buffer = function() {
      try {
        var Buffer2 = util.inquire("buffer").Buffer;
        return Buffer2.prototype.utf8Write ? Buffer2 : null;
      } catch (e) {
        return null;
      }
    }();
    util._Buffer_from = null;
    util._Buffer_allocUnsafe = null;
    util.newBuffer = function newBuffer(sizeOrArray) {
      return typeof sizeOrArray === "number" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === "undefined" ? sizeOrArray : new Uint8Array(sizeOrArray);
    };
    util.Array = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    util.Long = util.global.dcodeIO && util.global.dcodeIO.Long || util.global.Long || util.inquire("long");
    util.key2Re = /^true|false|0|1$/;
    util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;
    util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;
    util.longToHash = function longToHash(value) {
      return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;
    };
    util.longFromHash = function longFromHash(hash2, unsigned) {
      var bits = util.LongBits.fromHash(hash2);
      if (util.Long)
        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
      return bits.toNumber(Boolean(unsigned));
    };
    function merge(dst, src2, ifNotSet) {
      for (var keys = Object.keys(src2), i = 0; i < keys.length; ++i)
        if (dst[keys[i]] === void 0 || !ifNotSet)
          dst[keys[i]] = src2[keys[i]];
      return dst;
    }
    util.merge = merge;
    util.lcFirst = function lcFirst(str) {
      return str.charAt(0).toLowerCase() + str.substring(1);
    };
    function newError(name2) {
      function CustomError(message, properties) {
        if (!(this instanceof CustomError))
          return new CustomError(message, properties);
        Object.defineProperty(this, "message", { get: function() {
          return message;
        } });
        if (Error.captureStackTrace)
          Error.captureStackTrace(this, CustomError);
        else
          Object.defineProperty(this, "stack", { value: new Error().stack || "" });
        if (properties)
          merge(this, properties);
      }
      (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;
      Object.defineProperty(CustomError.prototype, "name", { get: function() {
        return name2;
      } });
      CustomError.prototype.toString = function toString() {
        return this.name + ": " + this.message;
      };
      return CustomError;
    }
    util.newError = newError;
    util.ProtocolError = newError("ProtocolError");
    util.oneOfGetter = function getOneOf(fieldNames) {
      var fieldMap = {};
      for (var i = 0; i < fieldNames.length; ++i)
        fieldMap[fieldNames[i]] = 1;
      return function() {
        for (var keys = Object.keys(this), i2 = keys.length - 1; i2 > -1; --i2)
          if (fieldMap[keys[i2]] === 1 && this[keys[i2]] !== void 0 && this[keys[i2]] !== null)
            return keys[i2];
      };
    };
    util.oneOfSetter = function setOneOf(fieldNames) {
      return function(name2) {
        for (var i = 0; i < fieldNames.length; ++i)
          if (fieldNames[i] !== name2)
            delete this[fieldNames[i]];
      };
    };
    util.toJSONOptions = {
      longs: String,
      enums: String,
      bytes: String,
      json: true
    };
    util._configure = function() {
      var Buffer2 = util.Buffer;
      if (!Buffer2) {
        util._Buffer_from = util._Buffer_allocUnsafe = null;
        return;
      }
      util._Buffer_from = Buffer2.from !== Uint8Array.from && Buffer2.from || function Buffer_from(value, encoding) {
        return new Buffer2(value, encoding);
      };
      util._Buffer_allocUnsafe = Buffer2.allocUnsafe || function Buffer_allocUnsafe(size) {
        return new Buffer2(size);
      };
    };
  }
});

// node_modules/protobufjs/src/writer.js
var require_writer = __commonJS({
  "node_modules/protobufjs/src/writer.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = Writer;
    var util = require_minimal();
    var BufferWriter;
    var LongBits = util.LongBits;
    var base64 = util.base64;
    var utf8 = util.utf8;
    function Op(fn, len, val) {
      this.fn = fn;
      this.len = len;
      this.next = void 0;
      this.val = val;
    }
    function noop2() {
    }
    function State(writer) {
      this.head = writer.head;
      this.tail = writer.tail;
      this.len = writer.len;
      this.next = writer.states;
    }
    function Writer() {
      this.len = 0;
      this.head = new Op(noop2, 0, 0);
      this.tail = this.head;
      this.states = null;
    }
    var create = function create2() {
      return util.Buffer ? function create_buffer_setup() {
        return (Writer.create = function create_buffer() {
          return new BufferWriter();
        })();
      } : function create_array() {
        return new Writer();
      };
    };
    Writer.create = create();
    Writer.alloc = function alloc(size) {
      return new util.Array(size);
    };
    if (util.Array !== Array)
      Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);
    Writer.prototype._push = function push(fn, len, val) {
      this.tail = this.tail.next = new Op(fn, len, val);
      this.len += len;
      return this;
    };
    function writeByte(val, buf, pos) {
      buf[pos] = val & 255;
    }
    function writeVarint32(val, buf, pos) {
      while (val > 127) {
        buf[pos++] = val & 127 | 128;
        val >>>= 7;
      }
      buf[pos] = val;
    }
    function VarintOp(len, val) {
      this.len = len;
      this.next = void 0;
      this.val = val;
    }
    VarintOp.prototype = Object.create(Op.prototype);
    VarintOp.prototype.fn = writeVarint32;
    Writer.prototype.uint32 = function write_uint32(value) {
      this.len += (this.tail = this.tail.next = new VarintOp((value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5, value)).len;
      return this;
    };
    Writer.prototype.int32 = function write_int32(value) {
      return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) : this.uint32(value);
    };
    Writer.prototype.sint32 = function write_sint32(value) {
      return this.uint32((value << 1 ^ value >> 31) >>> 0);
    };
    function writeVarint64(val, buf, pos) {
      while (val.hi) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
        val.hi >>>= 7;
      }
      while (val.lo > 127) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = val.lo >>> 7;
      }
      buf[pos++] = val.lo;
    }
    Writer.prototype.uint64 = function write_uint64(value) {
      var bits = LongBits.from(value);
      return this._push(writeVarint64, bits.length(), bits);
    };
    Writer.prototype.int64 = Writer.prototype.uint64;
    Writer.prototype.sint64 = function write_sint64(value) {
      var bits = LongBits.from(value).zzEncode();
      return this._push(writeVarint64, bits.length(), bits);
    };
    Writer.prototype.bool = function write_bool(value) {
      return this._push(writeByte, 1, value ? 1 : 0);
    };
    function writeFixed32(val, buf, pos) {
      buf[pos] = val & 255;
      buf[pos + 1] = val >>> 8 & 255;
      buf[pos + 2] = val >>> 16 & 255;
      buf[pos + 3] = val >>> 24;
    }
    Writer.prototype.fixed32 = function write_fixed32(value) {
      return this._push(writeFixed32, 4, value >>> 0);
    };
    Writer.prototype.sfixed32 = Writer.prototype.fixed32;
    Writer.prototype.fixed64 = function write_fixed64(value) {
      var bits = LongBits.from(value);
      return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
    };
    Writer.prototype.sfixed64 = Writer.prototype.fixed64;
    Writer.prototype.float = function write_float(value) {
      return this._push(util.float.writeFloatLE, 4, value);
    };
    Writer.prototype.double = function write_double(value) {
      return this._push(util.float.writeDoubleLE, 8, value);
    };
    var writeBytes = util.Array.prototype.set ? function writeBytes_set(val, buf, pos) {
      buf.set(val, pos);
    } : function writeBytes_for(val, buf, pos) {
      for (var i = 0; i < val.length; ++i)
        buf[pos + i] = val[i];
    };
    Writer.prototype.bytes = function write_bytes(value) {
      var len = value.length >>> 0;
      if (!len)
        return this._push(writeByte, 1, 0);
      if (util.isString(value)) {
        var buf = Writer.alloc(len = base64.length(value));
        base64.decode(value, buf, 0);
        value = buf;
      }
      return this.uint32(len)._push(writeBytes, len, value);
    };
    Writer.prototype.string = function write_string(value) {
      var len = utf8.length(value);
      return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);
    };
    Writer.prototype.fork = function fork() {
      this.states = new State(this);
      this.head = this.tail = new Op(noop2, 0, 0);
      this.len = 0;
      return this;
    };
    Writer.prototype.reset = function reset() {
      if (this.states) {
        this.head = this.states.head;
        this.tail = this.states.tail;
        this.len = this.states.len;
        this.states = this.states.next;
      } else {
        this.head = this.tail = new Op(noop2, 0, 0);
        this.len = 0;
      }
      return this;
    };
    Writer.prototype.ldelim = function ldelim() {
      var head = this.head, tail = this.tail, len = this.len;
      this.reset().uint32(len);
      if (len) {
        this.tail.next = head.next;
        this.tail = tail;
        this.len += len;
      }
      return this;
    };
    Writer.prototype.finish = function finish() {
      var head = this.head.next, buf = this.constructor.alloc(this.len), pos = 0;
      while (head) {
        head.fn(head.val, buf, pos);
        pos += head.len;
        head = head.next;
      }
      return buf;
    };
    Writer._configure = function(BufferWriter_) {
      BufferWriter = BufferWriter_;
      Writer.create = create();
      BufferWriter._configure();
    };
  }
});

// node_modules/protobufjs/src/writer_buffer.js
var require_writer_buffer = __commonJS({
  "node_modules/protobufjs/src/writer_buffer.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = BufferWriter;
    var Writer = require_writer();
    (BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;
    var util = require_minimal();
    function BufferWriter() {
      Writer.call(this);
    }
    BufferWriter._configure = function() {
      BufferWriter.alloc = util._Buffer_allocUnsafe;
      BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === "set" ? function writeBytesBuffer_set(val, buf, pos) {
        buf.set(val, pos);
      } : function writeBytesBuffer_copy(val, buf, pos) {
        if (val.copy)
          val.copy(buf, pos, 0, val.length);
        else
          for (var i = 0; i < val.length; )
            buf[pos++] = val[i++];
      };
    };
    BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
      if (util.isString(value))
        value = util._Buffer_from(value, "base64");
      var len = value.length >>> 0;
      this.uint32(len);
      if (len)
        this._push(BufferWriter.writeBytesBuffer, len, value);
      return this;
    };
    function writeStringBuffer(val, buf, pos) {
      if (val.length < 40)
        util.utf8.write(val, buf, pos);
      else if (buf.utf8Write)
        buf.utf8Write(val, pos);
      else
        buf.write(val, pos);
    }
    BufferWriter.prototype.string = function write_string_buffer(value) {
      var len = util.Buffer.byteLength(value);
      this.uint32(len);
      if (len)
        this._push(writeStringBuffer, len, value);
      return this;
    };
    BufferWriter._configure();
  }
});

// node_modules/protobufjs/src/reader.js
var require_reader = __commonJS({
  "node_modules/protobufjs/src/reader.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = Reader;
    var util = require_minimal();
    var BufferReader;
    var LongBits = util.LongBits;
    var utf8 = util.utf8;
    function indexOutOfRange(reader, writeLength) {
      return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
    }
    function Reader(buffer) {
      this.buf = buffer;
      this.pos = 0;
      this.len = buffer.length;
    }
    var create_array = typeof Uint8Array !== "undefined" ? function create_typed_array(buffer) {
      if (buffer instanceof Uint8Array || Array.isArray(buffer))
        return new Reader(buffer);
      throw Error("illegal buffer");
    } : function create_array2(buffer) {
      if (Array.isArray(buffer))
        return new Reader(buffer);
      throw Error("illegal buffer");
    };
    var create = function create2() {
      return util.Buffer ? function create_buffer_setup(buffer) {
        return (Reader.create = function create_buffer(buffer2) {
          return util.Buffer.isBuffer(buffer2) ? new BufferReader(buffer2) : create_array(buffer2);
        })(buffer);
      } : create_array;
    };
    Reader.create = create();
    Reader.prototype._slice = util.Array.prototype.subarray || util.Array.prototype.slice;
    Reader.prototype.uint32 = function read_uint32_setup() {
      var value = 4294967295;
      return function read_uint32() {
        value = (this.buf[this.pos] & 127) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        if ((this.pos += 5) > this.len) {
          this.pos = this.len;
          throw indexOutOfRange(this, 10);
        }
        return value;
      };
    }();
    Reader.prototype.int32 = function read_int32() {
      return this.uint32() | 0;
    };
    Reader.prototype.sint32 = function read_sint32() {
      var value = this.uint32();
      return value >>> 1 ^ -(value & 1) | 0;
    };
    function readLongVarint() {
      var bits = new LongBits(0, 0);
      var i = 0;
      if (this.len - this.pos > 4) {
        for (; i < 4; ++i) {
          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;
        if (this.buf[this.pos++] < 128)
          return bits;
        i = 0;
      } else {
        for (; i < 3; ++i) {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
        return bits;
      }
      if (this.len - this.pos > 4) {
        for (; i < 5; ++i) {
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
      } else {
        for (; i < 5; ++i) {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
      }
      throw Error("invalid varint encoding");
    }
    Reader.prototype.bool = function read_bool() {
      return this.uint32() !== 0;
    };
    function readFixed32_end(buf, end) {
      return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;
    }
    Reader.prototype.fixed32 = function read_fixed32() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      return readFixed32_end(this.buf, this.pos += 4);
    };
    Reader.prototype.sfixed32 = function read_sfixed32() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      return readFixed32_end(this.buf, this.pos += 4) | 0;
    };
    function readFixed64() {
      if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 8);
      return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
    }
    Reader.prototype.float = function read_float() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      var value = util.float.readFloatLE(this.buf, this.pos);
      this.pos += 4;
      return value;
    };
    Reader.prototype.double = function read_double() {
      if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 4);
      var value = util.float.readDoubleLE(this.buf, this.pos);
      this.pos += 8;
      return value;
    };
    Reader.prototype.bytes = function read_bytes() {
      var length = this.uint32(), start = this.pos, end = this.pos + length;
      if (end > this.len)
        throw indexOutOfRange(this, length);
      this.pos += length;
      if (Array.isArray(this.buf))
        return this.buf.slice(start, end);
      return start === end ? new this.buf.constructor(0) : this._slice.call(this.buf, start, end);
    };
    Reader.prototype.string = function read_string() {
      var bytes = this.bytes();
      return utf8.read(bytes, 0, bytes.length);
    };
    Reader.prototype.skip = function skip(length) {
      if (typeof length === "number") {
        if (this.pos + length > this.len)
          throw indexOutOfRange(this, length);
        this.pos += length;
      } else {
        do {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
        } while (this.buf[this.pos++] & 128);
      }
      return this;
    };
    Reader.prototype.skipType = function(wireType) {
      switch (wireType) {
        case 0:
          this.skip();
          break;
        case 1:
          this.skip(8);
          break;
        case 2:
          this.skip(this.uint32());
          break;
        case 3:
          while ((wireType = this.uint32() & 7) !== 4) {
            this.skipType(wireType);
          }
          break;
        case 5:
          this.skip(4);
          break;
        default:
          throw Error("invalid wire type " + wireType + " at offset " + this.pos);
      }
      return this;
    };
    Reader._configure = function(BufferReader_) {
      BufferReader = BufferReader_;
      Reader.create = create();
      BufferReader._configure();
      var fn = util.Long ? "toLong" : "toNumber";
      util.merge(Reader.prototype, {
        int64: function read_int64() {
          return readLongVarint.call(this)[fn](false);
        },
        uint64: function read_uint64() {
          return readLongVarint.call(this)[fn](true);
        },
        sint64: function read_sint64() {
          return readLongVarint.call(this).zzDecode()[fn](false);
        },
        fixed64: function read_fixed64() {
          return readFixed64.call(this)[fn](true);
        },
        sfixed64: function read_sfixed64() {
          return readFixed64.call(this)[fn](false);
        }
      });
    };
  }
});

// node_modules/protobufjs/src/reader_buffer.js
var require_reader_buffer = __commonJS({
  "node_modules/protobufjs/src/reader_buffer.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = BufferReader;
    var Reader = require_reader();
    (BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;
    var util = require_minimal();
    function BufferReader(buffer) {
      Reader.call(this, buffer);
    }
    BufferReader._configure = function() {
      if (util.Buffer)
        BufferReader.prototype._slice = util.Buffer.prototype.slice;
    };
    BufferReader.prototype.string = function read_string_buffer() {
      var len = this.uint32();
      return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len)) : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
    };
    BufferReader._configure();
  }
});

// node_modules/protobufjs/src/rpc/service.js
var require_service = __commonJS({
  "node_modules/protobufjs/src/rpc/service.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = Service;
    var util = require_minimal();
    (Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;
    function Service(rpcImpl, requestDelimited, responseDelimited) {
      if (typeof rpcImpl !== "function")
        throw TypeError("rpcImpl must be a function");
      util.EventEmitter.call(this);
      this.rpcImpl = rpcImpl;
      this.requestDelimited = Boolean(requestDelimited);
      this.responseDelimited = Boolean(responseDelimited);
    }
    Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {
      if (!request)
        throw TypeError("request must be specified");
      var self2 = this;
      if (!callback)
        return util.asPromise(rpcCall, self2, method, requestCtor, responseCtor, request);
      if (!self2.rpcImpl) {
        setTimeout(function() {
          callback(Error("already ended"));
        }, 0);
        return void 0;
      }
      try {
        return self2.rpcImpl(method, requestCtor[self2.requestDelimited ? "encodeDelimited" : "encode"](request).finish(), function rpcCallback(err, response) {
          if (err) {
            self2.emit("error", err, method);
            return callback(err);
          }
          if (response === null) {
            self2.end(true);
            return void 0;
          }
          if (!(response instanceof responseCtor)) {
            try {
              response = responseCtor[self2.responseDelimited ? "decodeDelimited" : "decode"](response);
            } catch (err2) {
              self2.emit("error", err2, method);
              return callback(err2);
            }
          }
          self2.emit("data", response, method);
          return callback(null, response);
        });
      } catch (err) {
        self2.emit("error", err, method);
        setTimeout(function() {
          callback(err);
        }, 0);
        return void 0;
      }
    };
    Service.prototype.end = function end(endedByRPC) {
      if (this.rpcImpl) {
        if (!endedByRPC)
          this.rpcImpl(null, null, null);
        this.rpcImpl = null;
        this.emit("end").off();
      }
      return this;
    };
  }
});

// node_modules/protobufjs/src/rpc.js
var require_rpc = __commonJS({
  "node_modules/protobufjs/src/rpc.js"(exports2) {
    init_shims();
    "use strict";
    var rpc = exports2;
    rpc.Service = require_service();
  }
});

// node_modules/protobufjs/src/roots.js
var require_roots = __commonJS({
  "node_modules/protobufjs/src/roots.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = {};
  }
});

// node_modules/protobufjs/src/index-minimal.js
var require_index_minimal = __commonJS({
  "node_modules/protobufjs/src/index-minimal.js"(exports2) {
    init_shims();
    "use strict";
    var protobuf = exports2;
    protobuf.build = "minimal";
    protobuf.Writer = require_writer();
    protobuf.BufferWriter = require_writer_buffer();
    protobuf.Reader = require_reader();
    protobuf.BufferReader = require_reader_buffer();
    protobuf.util = require_minimal();
    protobuf.rpc = require_rpc();
    protobuf.roots = require_roots();
    protobuf.configure = configure;
    function configure() {
      protobuf.util._configure();
      protobuf.Writer._configure(protobuf.BufferWriter);
      protobuf.Reader._configure(protobuf.BufferReader);
    }
    configure();
  }
});

// node_modules/@protobufjs/codegen/index.js
var require_codegen = __commonJS({
  "node_modules/@protobufjs/codegen/index.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = codegen;
    function codegen(functionParams, functionName) {
      if (typeof functionParams === "string") {
        functionName = functionParams;
        functionParams = void 0;
      }
      var body = [];
      function Codegen(formatStringOrScope) {
        if (typeof formatStringOrScope !== "string") {
          var source = toString();
          if (codegen.verbose)
            console.log("codegen: " + source);
          source = "return " + source;
          if (formatStringOrScope) {
            var scopeKeys = Object.keys(formatStringOrScope), scopeParams = new Array(scopeKeys.length + 1), scopeValues = new Array(scopeKeys.length), scopeOffset = 0;
            while (scopeOffset < scopeKeys.length) {
              scopeParams[scopeOffset] = scopeKeys[scopeOffset];
              scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];
            }
            scopeParams[scopeOffset] = source;
            return Function.apply(null, scopeParams).apply(null, scopeValues);
          }
          return Function(source)();
        }
        var formatParams = new Array(arguments.length - 1), formatOffset = 0;
        while (formatOffset < formatParams.length)
          formatParams[formatOffset] = arguments[++formatOffset];
        formatOffset = 0;
        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {
          var value = formatParams[formatOffset++];
          switch ($1) {
            case "d":
            case "f":
              return String(Number(value));
            case "i":
              return String(Math.floor(value));
            case "j":
              return JSON.stringify(value);
            case "s":
              return String(value);
          }
          return "%";
        });
        if (formatOffset !== formatParams.length)
          throw Error("parameter count mismatch");
        body.push(formatStringOrScope);
        return Codegen;
      }
      function toString(functionNameOverride) {
        return "function " + (functionNameOverride || functionName || "") + "(" + (functionParams && functionParams.join(",") || "") + "){\n  " + body.join("\n  ") + "\n}";
      }
      Codegen.toString = toString;
      return Codegen;
    }
    codegen.verbose = false;
  }
});

// node_modules/@protobufjs/fetch/index.js
var require_fetch = __commonJS({
  "node_modules/@protobufjs/fetch/index.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = fetch2;
    var asPromise = require_aspromise();
    var inquire2 = require_inquire();
    var fs = inquire2("fs");
    function fetch2(filename, options2, callback) {
      if (typeof options2 === "function") {
        callback = options2;
        options2 = {};
      } else if (!options2)
        options2 = {};
      if (!callback)
        return asPromise(fetch2, this, filename, options2);
      if (!options2.xhr && fs && fs.readFile)
        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {
          return err && typeof XMLHttpRequest !== "undefined" ? fetch2.xhr(filename, options2, callback) : err ? callback(err) : callback(null, options2.binary ? contents : contents.toString("utf8"));
        });
      return fetch2.xhr(filename, options2, callback);
    }
    fetch2.xhr = function fetch_xhr(filename, options2, callback) {
      var xhr = new XMLHttpRequest();
      xhr.onreadystatechange = function fetchOnReadyStateChange() {
        if (xhr.readyState !== 4)
          return void 0;
        if (xhr.status !== 0 && xhr.status !== 200)
          return callback(Error("status " + xhr.status));
        if (options2.binary) {
          var buffer = xhr.response;
          if (!buffer) {
            buffer = [];
            for (var i = 0; i < xhr.responseText.length; ++i)
              buffer.push(xhr.responseText.charCodeAt(i) & 255);
          }
          return callback(null, typeof Uint8Array !== "undefined" ? new Uint8Array(buffer) : buffer);
        }
        return callback(null, xhr.responseText);
      };
      if (options2.binary) {
        if ("overrideMimeType" in xhr)
          xhr.overrideMimeType("text/plain; charset=x-user-defined");
        xhr.responseType = "arraybuffer";
      }
      xhr.open("GET", filename);
      xhr.send();
    };
  }
});

// node_modules/@protobufjs/path/index.js
var require_path = __commonJS({
  "node_modules/@protobufjs/path/index.js"(exports2) {
    init_shims();
    "use strict";
    var path = exports2;
    var isAbsolute = path.isAbsolute = function isAbsolute2(path2) {
      return /^(?:\/|\w+:)/.test(path2);
    };
    var normalize2 = path.normalize = function normalize3(path2) {
      path2 = path2.replace(/\\/g, "/").replace(/\/{2,}/g, "/");
      var parts = path2.split("/"), absolute2 = isAbsolute(path2), prefix = "";
      if (absolute2)
        prefix = parts.shift() + "/";
      for (var i = 0; i < parts.length; ) {
        if (parts[i] === "..") {
          if (i > 0 && parts[i - 1] !== "..")
            parts.splice(--i, 2);
          else if (absolute2)
            parts.splice(i, 1);
          else
            ++i;
        } else if (parts[i] === ".")
          parts.splice(i, 1);
        else
          ++i;
      }
      return prefix + parts.join("/");
    };
    path.resolve = function resolve2(originPath, includePath, alreadyNormalized) {
      if (!alreadyNormalized)
        includePath = normalize2(includePath);
      if (isAbsolute(includePath))
        return includePath;
      if (!alreadyNormalized)
        originPath = normalize2(originPath);
      return (originPath = originPath.replace(/(?:\/|^)[^/]+$/, "")).length ? normalize2(originPath + "/" + includePath) : includePath;
    };
  }
});

// node_modules/protobufjs/src/types.js
var require_types = __commonJS({
  "node_modules/protobufjs/src/types.js"(exports2) {
    init_shims();
    "use strict";
    var types2 = exports2;
    var util = require_util();
    var s2 = [
      "double",
      "float",
      "int32",
      "uint32",
      "sint32",
      "fixed32",
      "sfixed32",
      "int64",
      "uint64",
      "sint64",
      "fixed64",
      "sfixed64",
      "bool",
      "string",
      "bytes"
    ];
    function bake(values, offset) {
      var i = 0, o = {};
      offset |= 0;
      while (i < values.length)
        o[s2[i + offset]] = values[i++];
      return o;
    }
    types2.basic = bake([
      1,
      5,
      0,
      0,
      0,
      5,
      5,
      0,
      0,
      0,
      1,
      1,
      0,
      2,
      2
    ]);
    types2.defaults = bake([
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      false,
      "",
      util.emptyArray,
      null
    ]);
    types2.long = bake([
      0,
      0,
      0,
      1,
      1
    ], 7);
    types2.mapKey = bake([
      0,
      0,
      0,
      5,
      5,
      0,
      0,
      0,
      1,
      1,
      0,
      2
    ], 2);
    types2.packed = bake([
      1,
      5,
      0,
      0,
      0,
      5,
      5,
      0,
      0,
      0,
      1,
      1,
      0
    ]);
  }
});

// node_modules/protobufjs/src/field.js
var require_field = __commonJS({
  "node_modules/protobufjs/src/field.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = Field;
    var ReflectionObject = require_object();
    ((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = "Field";
    var Enum = require_enum();
    var types2 = require_types();
    var util = require_util();
    var Type;
    var ruleRe = /^required|optional|repeated$/;
    Field.fromJSON = function fromJSON(name2, json) {
      return new Field(name2, json.id, json.type, json.rule, json.extend, json.options, json.comment);
    };
    function Field(name2, id2, type, rule, extend, options2, comment) {
      if (util.isObject(rule)) {
        comment = extend;
        options2 = rule;
        rule = extend = void 0;
      } else if (util.isObject(extend)) {
        comment = options2;
        options2 = extend;
        extend = void 0;
      }
      ReflectionObject.call(this, name2, options2);
      if (!util.isInteger(id2) || id2 < 0)
        throw TypeError("id must be a non-negative integer");
      if (!util.isString(type))
        throw TypeError("type must be a string");
      if (rule !== void 0 && !ruleRe.test(rule = rule.toString().toLowerCase()))
        throw TypeError("rule must be a string rule");
      if (extend !== void 0 && !util.isString(extend))
        throw TypeError("extend must be a string");
      if (rule === "proto3_optional") {
        rule = "optional";
      }
      this.rule = rule && rule !== "optional" ? rule : void 0;
      this.type = type;
      this.id = id2;
      this.extend = extend || void 0;
      this.required = rule === "required";
      this.optional = !this.required;
      this.repeated = rule === "repeated";
      this.map = false;
      this.message = null;
      this.partOf = null;
      this.typeDefault = null;
      this.defaultValue = null;
      this.long = util.Long ? types2.long[type] !== void 0 : false;
      this.bytes = type === "bytes";
      this.resolvedType = null;
      this.extensionField = null;
      this.declaringField = null;
      this._packed = null;
      this.comment = comment;
    }
    Object.defineProperty(Field.prototype, "packed", {
      get: function() {
        if (this._packed === null)
          this._packed = this.getOption("packed") !== false;
        return this._packed;
      }
    });
    Field.prototype.setOption = function setOption(name2, value, ifNotSet) {
      if (name2 === "packed")
        this._packed = null;
      return ReflectionObject.prototype.setOption.call(this, name2, value, ifNotSet);
    };
    Field.prototype.toJSON = function toJSON(toJSONOptions) {
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "rule",
        this.rule !== "optional" && this.rule || void 0,
        "type",
        this.type,
        "id",
        this.id,
        "extend",
        this.extend,
        "options",
        this.options,
        "comment",
        keepComments ? this.comment : void 0
      ]);
    };
    Field.prototype.resolve = function resolve2() {
      if (this.resolved)
        return this;
      if ((this.typeDefault = types2.defaults[this.type]) === void 0) {
        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);
        if (this.resolvedType instanceof Type)
          this.typeDefault = null;
        else
          this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]];
      }
      if (this.options && this.options["default"] != null) {
        this.typeDefault = this.options["default"];
        if (this.resolvedType instanceof Enum && typeof this.typeDefault === "string")
          this.typeDefault = this.resolvedType.values[this.typeDefault];
      }
      if (this.options) {
        if (this.options.packed === true || this.options.packed !== void 0 && this.resolvedType && !(this.resolvedType instanceof Enum))
          delete this.options.packed;
        if (!Object.keys(this.options).length)
          this.options = void 0;
      }
      if (this.long) {
        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === "u");
        if (Object.freeze)
          Object.freeze(this.typeDefault);
      } else if (this.bytes && typeof this.typeDefault === "string") {
        var buf;
        if (util.base64.test(this.typeDefault))
          util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);
        else
          util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);
        this.typeDefault = buf;
      }
      if (this.map)
        this.defaultValue = util.emptyObject;
      else if (this.repeated)
        this.defaultValue = util.emptyArray;
      else
        this.defaultValue = this.typeDefault;
      if (this.parent instanceof Type)
        this.parent.ctor.prototype[this.name] = this.defaultValue;
      return ReflectionObject.prototype.resolve.call(this);
    };
    Field.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {
      if (typeof fieldType === "function")
        fieldType = util.decorateType(fieldType).name;
      else if (fieldType && typeof fieldType === "object")
        fieldType = util.decorateEnum(fieldType).name;
      return function fieldDecorator(prototype, fieldName) {
        util.decorateType(prototype.constructor).add(new Field(fieldName, fieldId, fieldType, fieldRule, { "default": defaultValue }));
      };
    };
    Field._configure = function configure(Type_) {
      Type = Type_;
    };
  }
});

// node_modules/protobufjs/src/oneof.js
var require_oneof = __commonJS({
  "node_modules/protobufjs/src/oneof.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = OneOf;
    var ReflectionObject = require_object();
    ((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = "OneOf";
    var Field = require_field();
    var util = require_util();
    function OneOf(name2, fieldNames, options2, comment) {
      if (!Array.isArray(fieldNames)) {
        options2 = fieldNames;
        fieldNames = void 0;
      }
      ReflectionObject.call(this, name2, options2);
      if (!(fieldNames === void 0 || Array.isArray(fieldNames)))
        throw TypeError("fieldNames must be an Array");
      this.oneof = fieldNames || [];
      this.fieldsArray = [];
      this.comment = comment;
    }
    OneOf.fromJSON = function fromJSON(name2, json) {
      return new OneOf(name2, json.oneof, json.options, json.comment);
    };
    OneOf.prototype.toJSON = function toJSON(toJSONOptions) {
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "options",
        this.options,
        "oneof",
        this.oneof,
        "comment",
        keepComments ? this.comment : void 0
      ]);
    };
    function addFieldsToParent(oneof) {
      if (oneof.parent) {
        for (var i = 0; i < oneof.fieldsArray.length; ++i)
          if (!oneof.fieldsArray[i].parent)
            oneof.parent.add(oneof.fieldsArray[i]);
      }
    }
    OneOf.prototype.add = function add(field) {
      if (!(field instanceof Field))
        throw TypeError("field must be a Field");
      if (field.parent && field.parent !== this.parent)
        field.parent.remove(field);
      this.oneof.push(field.name);
      this.fieldsArray.push(field);
      field.partOf = this;
      addFieldsToParent(this);
      return this;
    };
    OneOf.prototype.remove = function remove(field) {
      if (!(field instanceof Field))
        throw TypeError("field must be a Field");
      var index2 = this.fieldsArray.indexOf(field);
      if (index2 < 0)
        throw Error(field + " is not a member of " + this);
      this.fieldsArray.splice(index2, 1);
      index2 = this.oneof.indexOf(field.name);
      if (index2 > -1)
        this.oneof.splice(index2, 1);
      field.partOf = null;
      return this;
    };
    OneOf.prototype.onAdd = function onAdd(parent) {
      ReflectionObject.prototype.onAdd.call(this, parent);
      var self2 = this;
      for (var i = 0; i < this.oneof.length; ++i) {
        var field = parent.get(this.oneof[i]);
        if (field && !field.partOf) {
          field.partOf = self2;
          self2.fieldsArray.push(field);
        }
      }
      addFieldsToParent(this);
    };
    OneOf.prototype.onRemove = function onRemove(parent) {
      for (var i = 0, field; i < this.fieldsArray.length; ++i)
        if ((field = this.fieldsArray[i]).parent)
          field.parent.remove(field);
      ReflectionObject.prototype.onRemove.call(this, parent);
    };
    OneOf.d = function decorateOneOf() {
      var fieldNames = new Array(arguments.length), index2 = 0;
      while (index2 < arguments.length)
        fieldNames[index2] = arguments[index2++];
      return function oneOfDecorator(prototype, oneofName) {
        util.decorateType(prototype.constructor).add(new OneOf(oneofName, fieldNames));
        Object.defineProperty(prototype, oneofName, {
          get: util.oneOfGetter(fieldNames),
          set: util.oneOfSetter(fieldNames)
        });
      };
    };
  }
});

// node_modules/protobufjs/src/namespace.js
var require_namespace = __commonJS({
  "node_modules/protobufjs/src/namespace.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = Namespace;
    var ReflectionObject = require_object();
    ((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = "Namespace";
    var Field = require_field();
    var OneOf = require_oneof();
    var util = require_util();
    var Type;
    var Service;
    var Enum;
    Namespace.fromJSON = function fromJSON(name2, json) {
      return new Namespace(name2, json.options).addJSON(json.nested);
    };
    function arrayToJSON(array, toJSONOptions) {
      if (!(array && array.length))
        return void 0;
      var obj = {};
      for (var i = 0; i < array.length; ++i)
        obj[array[i].name] = array[i].toJSON(toJSONOptions);
      return obj;
    }
    Namespace.arrayToJSON = arrayToJSON;
    Namespace.isReservedId = function isReservedId(reserved2, id2) {
      if (reserved2) {
        for (var i = 0; i < reserved2.length; ++i)
          if (typeof reserved2[i] !== "string" && reserved2[i][0] <= id2 && reserved2[i][1] > id2)
            return true;
      }
      return false;
    };
    Namespace.isReservedName = function isReservedName(reserved2, name2) {
      if (reserved2) {
        for (var i = 0; i < reserved2.length; ++i)
          if (reserved2[i] === name2)
            return true;
      }
      return false;
    };
    function Namespace(name2, options2) {
      ReflectionObject.call(this, name2, options2);
      this.nested = void 0;
      this._nestedArray = null;
    }
    function clearCache(namespace) {
      namespace._nestedArray = null;
      return namespace;
    }
    Object.defineProperty(Namespace.prototype, "nestedArray", {
      get: function() {
        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));
      }
    });
    Namespace.prototype.toJSON = function toJSON(toJSONOptions) {
      return util.toObject([
        "options",
        this.options,
        "nested",
        arrayToJSON(this.nestedArray, toJSONOptions)
      ]);
    };
    Namespace.prototype.addJSON = function addJSON(nestedJson) {
      var ns = this;
      if (nestedJson) {
        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {
          nested = nestedJson[names[i]];
          ns.add((nested.fields !== void 0 ? Type.fromJSON : nested.values !== void 0 ? Enum.fromJSON : nested.methods !== void 0 ? Service.fromJSON : nested.id !== void 0 ? Field.fromJSON : Namespace.fromJSON)(names[i], nested));
        }
      }
      return this;
    };
    Namespace.prototype.get = function get(name2) {
      return this.nested && this.nested[name2] || null;
    };
    Namespace.prototype.getEnum = function getEnum(name2) {
      if (this.nested && this.nested[name2] instanceof Enum)
        return this.nested[name2].values;
      throw Error("no such enum: " + name2);
    };
    Namespace.prototype.add = function add(object) {
      if (!(object instanceof Field && object.extend !== void 0 || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace || object instanceof OneOf))
        throw TypeError("object must be a valid nested object");
      if (!this.nested)
        this.nested = {};
      else {
        var prev = this.get(object.name);
        if (prev) {
          if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {
            var nested = prev.nestedArray;
            for (var i = 0; i < nested.length; ++i)
              object.add(nested[i]);
            this.remove(prev);
            if (!this.nested)
              this.nested = {};
            object.setOptions(prev.options, true);
          } else
            throw Error("duplicate name '" + object.name + "' in " + this);
        }
      }
      this.nested[object.name] = object;
      object.onAdd(this);
      return clearCache(this);
    };
    Namespace.prototype.remove = function remove(object) {
      if (!(object instanceof ReflectionObject))
        throw TypeError("object must be a ReflectionObject");
      if (object.parent !== this)
        throw Error(object + " is not a member of " + this);
      delete this.nested[object.name];
      if (!Object.keys(this.nested).length)
        this.nested = void 0;
      object.onRemove(this);
      return clearCache(this);
    };
    Namespace.prototype.define = function define2(path, json) {
      if (util.isString(path))
        path = path.split(".");
      else if (!Array.isArray(path))
        throw TypeError("illegal path");
      if (path && path.length && path[0] === "")
        throw Error("path must be relative");
      var ptr = this;
      while (path.length > 0) {
        var part = path.shift();
        if (ptr.nested && ptr.nested[part]) {
          ptr = ptr.nested[part];
          if (!(ptr instanceof Namespace))
            throw Error("path conflicts with non-namespace objects");
        } else
          ptr.add(ptr = new Namespace(part));
      }
      if (json)
        ptr.addJSON(json);
      return ptr;
    };
    Namespace.prototype.resolveAll = function resolveAll() {
      var nested = this.nestedArray, i = 0;
      while (i < nested.length)
        if (nested[i] instanceof Namespace)
          nested[i++].resolveAll();
        else
          nested[i++].resolve();
      return this.resolve();
    };
    Namespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {
      if (typeof filterTypes === "boolean") {
        parentAlreadyChecked = filterTypes;
        filterTypes = void 0;
      } else if (filterTypes && !Array.isArray(filterTypes))
        filterTypes = [filterTypes];
      if (util.isString(path) && path.length) {
        if (path === ".")
          return this.root;
        path = path.split(".");
      } else if (!path.length)
        return this;
      if (path[0] === "")
        return this.root.lookup(path.slice(1), filterTypes);
      var found = this.get(path[0]);
      if (found) {
        if (path.length === 1) {
          if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)
            return found;
        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))
          return found;
      } else
        for (var i = 0; i < this.nestedArray.length; ++i)
          if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))
            return found;
      if (this.parent === null || parentAlreadyChecked)
        return null;
      return this.parent.lookup(path, filterTypes);
    };
    Namespace.prototype.lookupType = function lookupType(path) {
      var found = this.lookup(path, [Type]);
      if (!found)
        throw Error("no such type: " + path);
      return found;
    };
    Namespace.prototype.lookupEnum = function lookupEnum(path) {
      var found = this.lookup(path, [Enum]);
      if (!found)
        throw Error("no such Enum '" + path + "' in " + this);
      return found;
    };
    Namespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {
      var found = this.lookup(path, [Type, Enum]);
      if (!found)
        throw Error("no such Type or Enum '" + path + "' in " + this);
      return found;
    };
    Namespace.prototype.lookupService = function lookupService(path) {
      var found = this.lookup(path, [Service]);
      if (!found)
        throw Error("no such Service '" + path + "' in " + this);
      return found;
    };
    Namespace._configure = function(Type_, Service_, Enum_) {
      Type = Type_;
      Service = Service_;
      Enum = Enum_;
    };
  }
});

// node_modules/protobufjs/src/mapfield.js
var require_mapfield = __commonJS({
  "node_modules/protobufjs/src/mapfield.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = MapField;
    var Field = require_field();
    ((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = "MapField";
    var types2 = require_types();
    var util = require_util();
    function MapField(name2, id2, keyType, type, options2, comment) {
      Field.call(this, name2, id2, type, void 0, void 0, options2, comment);
      if (!util.isString(keyType))
        throw TypeError("keyType must be a string");
      this.keyType = keyType;
      this.resolvedKeyType = null;
      this.map = true;
    }
    MapField.fromJSON = function fromJSON(name2, json) {
      return new MapField(name2, json.id, json.keyType, json.type, json.options, json.comment);
    };
    MapField.prototype.toJSON = function toJSON(toJSONOptions) {
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "keyType",
        this.keyType,
        "type",
        this.type,
        "id",
        this.id,
        "extend",
        this.extend,
        "options",
        this.options,
        "comment",
        keepComments ? this.comment : void 0
      ]);
    };
    MapField.prototype.resolve = function resolve2() {
      if (this.resolved)
        return this;
      if (types2.mapKey[this.keyType] === void 0)
        throw Error("invalid key type: " + this.keyType);
      return Field.prototype.resolve.call(this);
    };
    MapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {
      if (typeof fieldValueType === "function")
        fieldValueType = util.decorateType(fieldValueType).name;
      else if (fieldValueType && typeof fieldValueType === "object")
        fieldValueType = util.decorateEnum(fieldValueType).name;
      return function mapFieldDecorator(prototype, fieldName) {
        util.decorateType(prototype.constructor).add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));
      };
    };
  }
});

// node_modules/protobufjs/src/method.js
var require_method = __commonJS({
  "node_modules/protobufjs/src/method.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = Method;
    var ReflectionObject = require_object();
    ((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = "Method";
    var util = require_util();
    function Method(name2, type, requestType, responseType, requestStream, responseStream, options2, comment, parsedOptions) {
      if (util.isObject(requestStream)) {
        options2 = requestStream;
        requestStream = responseStream = void 0;
      } else if (util.isObject(responseStream)) {
        options2 = responseStream;
        responseStream = void 0;
      }
      if (!(type === void 0 || util.isString(type)))
        throw TypeError("type must be a string");
      if (!util.isString(requestType))
        throw TypeError("requestType must be a string");
      if (!util.isString(responseType))
        throw TypeError("responseType must be a string");
      ReflectionObject.call(this, name2, options2);
      this.type = type || "rpc";
      this.requestType = requestType;
      this.requestStream = requestStream ? true : void 0;
      this.responseType = responseType;
      this.responseStream = responseStream ? true : void 0;
      this.resolvedRequestType = null;
      this.resolvedResponseType = null;
      this.comment = comment;
      this.parsedOptions = parsedOptions;
    }
    Method.fromJSON = function fromJSON(name2, json) {
      return new Method(name2, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment, json.parsedOptions);
    };
    Method.prototype.toJSON = function toJSON(toJSONOptions) {
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "type",
        this.type !== "rpc" && this.type || void 0,
        "requestType",
        this.requestType,
        "requestStream",
        this.requestStream,
        "responseType",
        this.responseType,
        "responseStream",
        this.responseStream,
        "options",
        this.options,
        "comment",
        keepComments ? this.comment : void 0,
        "parsedOptions",
        this.parsedOptions
      ]);
    };
    Method.prototype.resolve = function resolve2() {
      if (this.resolved)
        return this;
      this.resolvedRequestType = this.parent.lookupType(this.requestType);
      this.resolvedResponseType = this.parent.lookupType(this.responseType);
      return ReflectionObject.prototype.resolve.call(this);
    };
  }
});

// node_modules/protobufjs/src/service.js
var require_service2 = __commonJS({
  "node_modules/protobufjs/src/service.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = Service;
    var Namespace = require_namespace();
    ((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = "Service";
    var Method = require_method();
    var util = require_util();
    var rpc = require_rpc();
    function Service(name2, options2) {
      Namespace.call(this, name2, options2);
      this.methods = {};
      this._methodsArray = null;
    }
    Service.fromJSON = function fromJSON(name2, json) {
      var service = new Service(name2, json.options);
      if (json.methods)
        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)
          service.add(Method.fromJSON(names[i], json.methods[names[i]]));
      if (json.nested)
        service.addJSON(json.nested);
      service.comment = json.comment;
      return service;
    };
    Service.prototype.toJSON = function toJSON(toJSONOptions) {
      var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "options",
        inherited && inherited.options || void 0,
        "methods",
        Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || {},
        "nested",
        inherited && inherited.nested || void 0,
        "comment",
        keepComments ? this.comment : void 0
      ]);
    };
    Object.defineProperty(Service.prototype, "methodsArray", {
      get: function() {
        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));
      }
    });
    function clearCache(service) {
      service._methodsArray = null;
      return service;
    }
    Service.prototype.get = function get(name2) {
      return this.methods[name2] || Namespace.prototype.get.call(this, name2);
    };
    Service.prototype.resolveAll = function resolveAll() {
      var methods = this.methodsArray;
      for (var i = 0; i < methods.length; ++i)
        methods[i].resolve();
      return Namespace.prototype.resolve.call(this);
    };
    Service.prototype.add = function add(object) {
      if (this.get(object.name))
        throw Error("duplicate name '" + object.name + "' in " + this);
      if (object instanceof Method) {
        this.methods[object.name] = object;
        object.parent = this;
        return clearCache(this);
      }
      return Namespace.prototype.add.call(this, object);
    };
    Service.prototype.remove = function remove(object) {
      if (object instanceof Method) {
        if (this.methods[object.name] !== object)
          throw Error(object + " is not a member of " + this);
        delete this.methods[object.name];
        object.parent = null;
        return clearCache(this);
      }
      return Namespace.prototype.remove.call(this, object);
    };
    Service.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {
      var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);
      for (var i = 0, method; i < this.methodsArray.length; ++i) {
        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\w_]/g, "");
        rpcService[methodName] = util.codegen(["r", "c"], util.isReserved(methodName) ? methodName + "_" : methodName)("return this.rpcCall(m,q,s,r,c)")({
          m: method,
          q: method.resolvedRequestType.ctor,
          s: method.resolvedResponseType.ctor
        });
      }
      return rpcService;
    };
  }
});

// node_modules/protobufjs/src/message.js
var require_message = __commonJS({
  "node_modules/protobufjs/src/message.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = Message;
    var util = require_minimal();
    function Message(properties) {
      if (properties)
        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          this[keys[i]] = properties[keys[i]];
    }
    Message.create = function create(properties) {
      return this.$type.create(properties);
    };
    Message.encode = function encode(message, writer) {
      return this.$type.encode(message, writer);
    };
    Message.encodeDelimited = function encodeDelimited(message, writer) {
      return this.$type.encodeDelimited(message, writer);
    };
    Message.decode = function decode(reader) {
      return this.$type.decode(reader);
    };
    Message.decodeDelimited = function decodeDelimited(reader) {
      return this.$type.decodeDelimited(reader);
    };
    Message.verify = function verify(message) {
      return this.$type.verify(message);
    };
    Message.fromObject = function fromObject(object) {
      return this.$type.fromObject(object);
    };
    Message.toObject = function toObject(message, options2) {
      return this.$type.toObject(message, options2);
    };
    Message.prototype.toJSON = function toJSON() {
      return this.$type.toObject(this, util.toJSONOptions);
    };
  }
});

// node_modules/protobufjs/src/decoder.js
var require_decoder = __commonJS({
  "node_modules/protobufjs/src/decoder.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = decoder;
    var Enum = require_enum();
    var types2 = require_types();
    var util = require_util();
    function missing(field) {
      return "missing required '" + field.name + "'";
    }
    function decoder(mtype) {
      var gen = util.codegen(["r", "l"], mtype.name + "$decode")("if(!(r instanceof Reader))")("r=Reader.create(r)")("var c=l===undefined?r.len:r.pos+l,m=new this.ctor" + (mtype.fieldsArray.filter(function(field2) {
        return field2.map;
      }).length ? ",k,value" : ""))("while(r.pos<c){")("var t=r.uint32()");
      if (mtype.group)
        gen("if((t&7)===4)")("break");
      gen("switch(t>>>3){");
      var i = 0;
      for (; i < mtype.fieldsArray.length; ++i) {
        var field = mtype._fieldsArray[i].resolve(), type = field.resolvedType instanceof Enum ? "int32" : field.type, ref = "m" + util.safeProp(field.name);
        gen("case %i:", field.id);
        if (field.map) {
          gen("if(%s===util.emptyObject)", ref)("%s={}", ref)("var c2 = r.uint32()+r.pos");
          if (types2.defaults[field.keyType] !== void 0)
            gen("k=%j", types2.defaults[field.keyType]);
          else
            gen("k=null");
          if (types2.defaults[type] !== void 0)
            gen("value=%j", types2.defaults[type]);
          else
            gen("value=null");
          gen("while(r.pos<c2){")("var tag2=r.uint32()")("switch(tag2>>>3){")("case 1: k=r.%s(); break", field.keyType)("case 2:");
          if (types2.basic[type] === void 0)
            gen("value=types[%i].decode(r,r.uint32())", i);
          else
            gen("value=r.%s()", type);
          gen("break")("default:")("r.skipType(tag2&7)")("break")("}")("}");
          if (types2.long[field.keyType] !== void 0)
            gen('%s[typeof k==="object"?util.longToHash(k):k]=value', ref);
          else
            gen("%s[k]=value", ref);
        } else if (field.repeated) {
          gen("if(!(%s&&%s.length))", ref, ref)("%s=[]", ref);
          if (types2.packed[type] !== void 0)
            gen("if((t&7)===2){")("var c2=r.uint32()+r.pos")("while(r.pos<c2)")("%s.push(r.%s())", ref, type)("}else");
          if (types2.basic[type] === void 0)
            gen(field.resolvedType.group ? "%s.push(types[%i].decode(r))" : "%s.push(types[%i].decode(r,r.uint32()))", ref, i);
          else
            gen("%s.push(r.%s())", ref, type);
        } else if (types2.basic[type] === void 0)
          gen(field.resolvedType.group ? "%s=types[%i].decode(r)" : "%s=types[%i].decode(r,r.uint32())", ref, i);
        else
          gen("%s=r.%s()", ref, type);
        gen("break");
      }
      gen("default:")("r.skipType(t&7)")("break")("}")("}");
      for (i = 0; i < mtype._fieldsArray.length; ++i) {
        var rfield = mtype._fieldsArray[i];
        if (rfield.required)
          gen("if(!m.hasOwnProperty(%j))", rfield.name)("throw util.ProtocolError(%j,{instance:m})", missing(rfield));
      }
      return gen("return m");
    }
  }
});

// node_modules/protobufjs/src/verifier.js
var require_verifier = __commonJS({
  "node_modules/protobufjs/src/verifier.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = verifier;
    var Enum = require_enum();
    var util = require_util();
    function invalid(field, expected) {
      return field.name + ": " + expected + (field.repeated && expected !== "array" ? "[]" : field.map && expected !== "object" ? "{k:" + field.keyType + "}" : "") + " expected";
    }
    function genVerifyValue(gen, field, fieldIndex, ref) {
      if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) {
          gen("switch(%s){", ref)("default:")("return%j", invalid(field, "enum value"));
          for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j)
            gen("case %i:", field.resolvedType.values[keys[j]]);
          gen("break")("}");
        } else {
          gen("{")("var e=types[%i].verify(%s);", fieldIndex, ref)("if(e)")("return%j+e", field.name + ".")("}");
        }
      } else {
        switch (field.type) {
          case "int32":
          case "uint32":
          case "sint32":
          case "fixed32":
          case "sfixed32":
            gen("if(!util.isInteger(%s))", ref)("return%j", invalid(field, "integer"));
            break;
          case "int64":
          case "uint64":
          case "sint64":
          case "fixed64":
          case "sfixed64":
            gen("if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))", ref, ref, ref, ref)("return%j", invalid(field, "integer|Long"));
            break;
          case "float":
          case "double":
            gen('if(typeof %s!=="number")', ref)("return%j", invalid(field, "number"));
            break;
          case "bool":
            gen('if(typeof %s!=="boolean")', ref)("return%j", invalid(field, "boolean"));
            break;
          case "string":
            gen("if(!util.isString(%s))", ref)("return%j", invalid(field, "string"));
            break;
          case "bytes":
            gen('if(!(%s&&typeof %s.length==="number"||util.isString(%s)))', ref, ref, ref)("return%j", invalid(field, "buffer"));
            break;
        }
      }
      return gen;
    }
    function genVerifyKey(gen, field, ref) {
      switch (field.keyType) {
        case "int32":
        case "uint32":
        case "sint32":
        case "fixed32":
        case "sfixed32":
          gen("if(!util.key32Re.test(%s))", ref)("return%j", invalid(field, "integer key"));
          break;
        case "int64":
        case "uint64":
        case "sint64":
        case "fixed64":
        case "sfixed64":
          gen("if(!util.key64Re.test(%s))", ref)("return%j", invalid(field, "integer|Long key"));
          break;
        case "bool":
          gen("if(!util.key2Re.test(%s))", ref)("return%j", invalid(field, "boolean key"));
          break;
      }
      return gen;
    }
    function verifier(mtype) {
      var gen = util.codegen(["m"], mtype.name + "$verify")('if(typeof m!=="object"||m===null)')("return%j", "object expected");
      var oneofs = mtype.oneofsArray, seenFirstField = {};
      if (oneofs.length)
        gen("var p={}");
      for (var i = 0; i < mtype.fieldsArray.length; ++i) {
        var field = mtype._fieldsArray[i].resolve(), ref = "m" + util.safeProp(field.name);
        if (field.optional)
          gen("if(%s!=null&&m.hasOwnProperty(%j)){", ref, field.name);
        if (field.map) {
          gen("if(!util.isObject(%s))", ref)("return%j", invalid(field, "object"))("var k=Object.keys(%s)", ref)("for(var i=0;i<k.length;++i){");
          genVerifyKey(gen, field, "k[i]");
          genVerifyValue(gen, field, i, ref + "[k[i]]")("}");
        } else if (field.repeated) {
          gen("if(!Array.isArray(%s))", ref)("return%j", invalid(field, "array"))("for(var i=0;i<%s.length;++i){", ref);
          genVerifyValue(gen, field, i, ref + "[i]")("}");
        } else {
          if (field.partOf) {
            var oneofProp = util.safeProp(field.partOf.name);
            if (seenFirstField[field.partOf.name] === 1)
              gen("if(p%s===1)", oneofProp)("return%j", field.partOf.name + ": multiple values");
            seenFirstField[field.partOf.name] = 1;
            gen("p%s=1", oneofProp);
          }
          genVerifyValue(gen, field, i, ref);
        }
        if (field.optional)
          gen("}");
      }
      return gen("return null");
    }
  }
});

// node_modules/protobufjs/src/converter.js
var require_converter = __commonJS({
  "node_modules/protobufjs/src/converter.js"(exports2) {
    init_shims();
    "use strict";
    var converter = exports2;
    var Enum = require_enum();
    var util = require_util();
    function genValuePartial_fromObject(gen, field, fieldIndex, prop) {
      if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) {
          gen("switch(d%s){", prop);
          for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {
            if (field.repeated && values[keys[i]] === field.typeDefault)
              gen("default:");
            gen("case%j:", keys[i])("case %i:", values[keys[i]])("m%s=%j", prop, values[keys[i]])("break");
          }
          gen("}");
        } else
          gen('if(typeof d%s!=="object")', prop)("throw TypeError(%j)", field.fullName + ": object expected")("m%s=types[%i].fromObject(d%s)", prop, fieldIndex, prop);
      } else {
        var isUnsigned = false;
        switch (field.type) {
          case "double":
          case "float":
            gen("m%s=Number(d%s)", prop, prop);
            break;
          case "uint32":
          case "fixed32":
            gen("m%s=d%s>>>0", prop, prop);
            break;
          case "int32":
          case "sint32":
          case "sfixed32":
            gen("m%s=d%s|0", prop, prop);
            break;
          case "uint64":
            isUnsigned = true;
          case "int64":
          case "sint64":
          case "fixed64":
          case "sfixed64":
            gen("if(util.Long)")("(m%s=util.Long.fromValue(d%s)).unsigned=%j", prop, prop, isUnsigned)('else if(typeof d%s==="string")', prop)("m%s=parseInt(d%s,10)", prop, prop)('else if(typeof d%s==="number")', prop)("m%s=d%s", prop, prop)('else if(typeof d%s==="object")', prop)("m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)", prop, prop, prop, isUnsigned ? "true" : "");
            break;
          case "bytes":
            gen('if(typeof d%s==="string")', prop)("util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)", prop, prop, prop)("else if(d%s.length)", prop)("m%s=d%s", prop, prop);
            break;
          case "string":
            gen("m%s=String(d%s)", prop, prop);
            break;
          case "bool":
            gen("m%s=Boolean(d%s)", prop, prop);
            break;
        }
      }
      return gen;
    }
    converter.fromObject = function fromObject(mtype) {
      var fields = mtype.fieldsArray;
      var gen = util.codegen(["d"], mtype.name + "$fromObject")("if(d instanceof this.ctor)")("return d");
      if (!fields.length)
        return gen("return new this.ctor");
      gen("var m=new this.ctor");
      for (var i = 0; i < fields.length; ++i) {
        var field = fields[i].resolve(), prop = util.safeProp(field.name);
        if (field.map) {
          gen("if(d%s){", prop)('if(typeof d%s!=="object")', prop)("throw TypeError(%j)", field.fullName + ": object expected")("m%s={}", prop)("for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){", prop);
          genValuePartial_fromObject(gen, field, i, prop + "[ks[i]]")("}")("}");
        } else if (field.repeated) {
          gen("if(d%s){", prop)("if(!Array.isArray(d%s))", prop)("throw TypeError(%j)", field.fullName + ": array expected")("m%s=[]", prop)("for(var i=0;i<d%s.length;++i){", prop);
          genValuePartial_fromObject(gen, field, i, prop + "[i]")("}")("}");
        } else {
          if (!(field.resolvedType instanceof Enum))
            gen("if(d%s!=null){", prop);
          genValuePartial_fromObject(gen, field, i, prop);
          if (!(field.resolvedType instanceof Enum))
            gen("}");
        }
      }
      return gen("return m");
    };
    function genValuePartial_toObject(gen, field, fieldIndex, prop) {
      if (field.resolvedType) {
        if (field.resolvedType instanceof Enum)
          gen("d%s=o.enums===String?types[%i].values[m%s]:m%s", prop, fieldIndex, prop, prop);
        else
          gen("d%s=types[%i].toObject(m%s,o)", prop, fieldIndex, prop);
      } else {
        var isUnsigned = false;
        switch (field.type) {
          case "double":
          case "float":
            gen("d%s=o.json&&!isFinite(m%s)?String(m%s):m%s", prop, prop, prop, prop);
            break;
          case "uint64":
            isUnsigned = true;
          case "int64":
          case "sint64":
          case "fixed64":
          case "sfixed64":
            gen('if(typeof m%s==="number")', prop)("d%s=o.longs===String?String(m%s):m%s", prop, prop, prop)("else")("d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s", prop, prop, prop, prop, isUnsigned ? "true" : "", prop);
            break;
          case "bytes":
            gen("d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s", prop, prop, prop, prop, prop);
            break;
          default:
            gen("d%s=m%s", prop, prop);
            break;
        }
      }
      return gen;
    }
    converter.toObject = function toObject(mtype) {
      var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);
      if (!fields.length)
        return util.codegen()("return {}");
      var gen = util.codegen(["m", "o"], mtype.name + "$toObject")("if(!o)")("o={}")("var d={}");
      var repeatedFields = [], mapFields = [], normalFields = [], i = 0;
      for (; i < fields.length; ++i)
        if (!fields[i].partOf)
          (fields[i].resolve().repeated ? repeatedFields : fields[i].map ? mapFields : normalFields).push(fields[i]);
      if (repeatedFields.length) {
        gen("if(o.arrays||o.defaults){");
        for (i = 0; i < repeatedFields.length; ++i)
          gen("d%s=[]", util.safeProp(repeatedFields[i].name));
        gen("}");
      }
      if (mapFields.length) {
        gen("if(o.objects||o.defaults){");
        for (i = 0; i < mapFields.length; ++i)
          gen("d%s={}", util.safeProp(mapFields[i].name));
        gen("}");
      }
      if (normalFields.length) {
        gen("if(o.defaults){");
        for (i = 0; i < normalFields.length; ++i) {
          var field = normalFields[i], prop = util.safeProp(field.name);
          if (field.resolvedType instanceof Enum)
            gen("d%s=o.enums===String?%j:%j", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);
          else if (field.long)
            gen("if(util.Long){")("var n=new util.Long(%i,%i,%j)", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)("d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n", prop)("}else")("d%s=o.longs===String?%j:%i", prop, field.typeDefault.toString(), field.typeDefault.toNumber());
          else if (field.bytes) {
            var arrayDefault = "[" + Array.prototype.slice.call(field.typeDefault).join(",") + "]";
            gen("if(o.bytes===String)d%s=%j", prop, String.fromCharCode.apply(String, field.typeDefault))("else{")("d%s=%s", prop, arrayDefault)("if(o.bytes!==Array)d%s=util.newBuffer(d%s)", prop, prop)("}");
          } else
            gen("d%s=%j", prop, field.typeDefault);
        }
        gen("}");
      }
      var hasKs2 = false;
      for (i = 0; i < fields.length; ++i) {
        var field = fields[i], index2 = mtype._fieldsArray.indexOf(field), prop = util.safeProp(field.name);
        if (field.map) {
          if (!hasKs2) {
            hasKs2 = true;
            gen("var ks2");
          }
          gen("if(m%s&&(ks2=Object.keys(m%s)).length){", prop, prop)("d%s={}", prop)("for(var j=0;j<ks2.length;++j){");
          genValuePartial_toObject(gen, field, index2, prop + "[ks2[j]]")("}");
        } else if (field.repeated) {
          gen("if(m%s&&m%s.length){", prop, prop)("d%s=[]", prop)("for(var j=0;j<m%s.length;++j){", prop);
          genValuePartial_toObject(gen, field, index2, prop + "[j]")("}");
        } else {
          gen("if(m%s!=null&&m.hasOwnProperty(%j)){", prop, field.name);
          genValuePartial_toObject(gen, field, index2, prop);
          if (field.partOf)
            gen("if(o.oneofs)")("d%s=%j", util.safeProp(field.partOf.name), field.name);
        }
        gen("}");
      }
      return gen("return d");
    };
  }
});

// node_modules/protobufjs/src/wrappers.js
var require_wrappers = __commonJS({
  "node_modules/protobufjs/src/wrappers.js"(exports2) {
    init_shims();
    "use strict";
    var wrappers = exports2;
    var Message = require_message();
    wrappers[".google.protobuf.Any"] = {
      fromObject: function(object) {
        if (object && object["@type"]) {
          var name2 = object["@type"].substring(object["@type"].lastIndexOf("/") + 1);
          var type = this.lookup(name2);
          if (type) {
            var type_url = object["@type"].charAt(0) === "." ? object["@type"].substr(1) : object["@type"];
            if (type_url.indexOf("/") === -1) {
              type_url = "/" + type_url;
            }
            return this.create({
              type_url,
              value: type.encode(type.fromObject(object)).finish()
            });
          }
        }
        return this.fromObject(object);
      },
      toObject: function(message, options2) {
        var googleApi = "type.googleapis.com/";
        var prefix = "";
        var name2 = "";
        if (options2 && options2.json && message.type_url && message.value) {
          name2 = message.type_url.substring(message.type_url.lastIndexOf("/") + 1);
          prefix = message.type_url.substring(0, message.type_url.lastIndexOf("/") + 1);
          var type = this.lookup(name2);
          if (type)
            message = type.decode(message.value);
        }
        if (!(message instanceof this.ctor) && message instanceof Message) {
          var object = message.$type.toObject(message, options2);
          var messageName = message.$type.fullName[0] === "." ? message.$type.fullName.substr(1) : message.$type.fullName;
          if (prefix === "") {
            prefix = googleApi;
          }
          name2 = prefix + messageName;
          object["@type"] = name2;
          return object;
        }
        return this.toObject(message, options2);
      }
    };
  }
});

// node_modules/protobufjs/src/type.js
var require_type = __commonJS({
  "node_modules/protobufjs/src/type.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = Type;
    var Namespace = require_namespace();
    ((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = "Type";
    var Enum = require_enum();
    var OneOf = require_oneof();
    var Field = require_field();
    var MapField = require_mapfield();
    var Service = require_service2();
    var Message = require_message();
    var Reader = require_reader();
    var Writer = require_writer();
    var util = require_util();
    var encoder = require_encoder();
    var decoder = require_decoder();
    var verifier = require_verifier();
    var converter = require_converter();
    var wrappers = require_wrappers();
    function Type(name2, options2) {
      Namespace.call(this, name2, options2);
      this.fields = {};
      this.oneofs = void 0;
      this.extensions = void 0;
      this.reserved = void 0;
      this.group = void 0;
      this._fieldsById = null;
      this._fieldsArray = null;
      this._oneofsArray = null;
      this._ctor = null;
    }
    Object.defineProperties(Type.prototype, {
      fieldsById: {
        get: function() {
          if (this._fieldsById)
            return this._fieldsById;
          this._fieldsById = {};
          for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {
            var field = this.fields[names[i]], id2 = field.id;
            if (this._fieldsById[id2])
              throw Error("duplicate id " + id2 + " in " + this);
            this._fieldsById[id2] = field;
          }
          return this._fieldsById;
        }
      },
      fieldsArray: {
        get: function() {
          return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));
        }
      },
      oneofsArray: {
        get: function() {
          return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));
        }
      },
      ctor: {
        get: function() {
          return this._ctor || (this.ctor = Type.generateConstructor(this)());
        },
        set: function(ctor) {
          var prototype = ctor.prototype;
          if (!(prototype instanceof Message)) {
            (ctor.prototype = new Message()).constructor = ctor;
            util.merge(ctor.prototype, prototype);
          }
          ctor.$type = ctor.prototype.$type = this;
          util.merge(ctor, Message, true);
          this._ctor = ctor;
          var i = 0;
          for (; i < this.fieldsArray.length; ++i)
            this._fieldsArray[i].resolve();
          var ctorProperties = {};
          for (i = 0; i < this.oneofsArray.length; ++i)
            ctorProperties[this._oneofsArray[i].resolve().name] = {
              get: util.oneOfGetter(this._oneofsArray[i].oneof),
              set: util.oneOfSetter(this._oneofsArray[i].oneof)
            };
          if (i)
            Object.defineProperties(ctor.prototype, ctorProperties);
        }
      }
    });
    Type.generateConstructor = function generateConstructor(mtype) {
      var gen = util.codegen(["p"], mtype.name);
      for (var i = 0, field; i < mtype.fieldsArray.length; ++i)
        if ((field = mtype._fieldsArray[i]).map)
          gen("this%s={}", util.safeProp(field.name));
        else if (field.repeated)
          gen("this%s=[]", util.safeProp(field.name));
      return gen("if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)")("this[ks[i]]=p[ks[i]]");
    };
    function clearCache(type) {
      type._fieldsById = type._fieldsArray = type._oneofsArray = null;
      delete type.encode;
      delete type.decode;
      delete type.verify;
      return type;
    }
    Type.fromJSON = function fromJSON(name2, json) {
      var type = new Type(name2, json.options);
      type.extensions = json.extensions;
      type.reserved = json.reserved;
      var names = Object.keys(json.fields), i = 0;
      for (; i < names.length; ++i)
        type.add((typeof json.fields[names[i]].keyType !== "undefined" ? MapField.fromJSON : Field.fromJSON)(names[i], json.fields[names[i]]));
      if (json.oneofs)
        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)
          type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));
      if (json.nested)
        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {
          var nested = json.nested[names[i]];
          type.add((nested.id !== void 0 ? Field.fromJSON : nested.fields !== void 0 ? Type.fromJSON : nested.values !== void 0 ? Enum.fromJSON : nested.methods !== void 0 ? Service.fromJSON : Namespace.fromJSON)(names[i], nested));
        }
      if (json.extensions && json.extensions.length)
        type.extensions = json.extensions;
      if (json.reserved && json.reserved.length)
        type.reserved = json.reserved;
      if (json.group)
        type.group = true;
      if (json.comment)
        type.comment = json.comment;
      return type;
    };
    Type.prototype.toJSON = function toJSON(toJSONOptions) {
      var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "options",
        inherited && inherited.options || void 0,
        "oneofs",
        Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),
        "fields",
        Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) {
          return !obj.declaringField;
        }), toJSONOptions) || {},
        "extensions",
        this.extensions && this.extensions.length ? this.extensions : void 0,
        "reserved",
        this.reserved && this.reserved.length ? this.reserved : void 0,
        "group",
        this.group || void 0,
        "nested",
        inherited && inherited.nested || void 0,
        "comment",
        keepComments ? this.comment : void 0
      ]);
    };
    Type.prototype.resolveAll = function resolveAll() {
      var fields = this.fieldsArray, i = 0;
      while (i < fields.length)
        fields[i++].resolve();
      var oneofs = this.oneofsArray;
      i = 0;
      while (i < oneofs.length)
        oneofs[i++].resolve();
      return Namespace.prototype.resolveAll.call(this);
    };
    Type.prototype.get = function get(name2) {
      return this.fields[name2] || this.oneofs && this.oneofs[name2] || this.nested && this.nested[name2] || null;
    };
    Type.prototype.add = function add(object) {
      if (this.get(object.name))
        throw Error("duplicate name '" + object.name + "' in " + this);
      if (object instanceof Field && object.extend === void 0) {
        if (this._fieldsById ? this._fieldsById[object.id] : this.fieldsById[object.id])
          throw Error("duplicate id " + object.id + " in " + this);
        if (this.isReservedId(object.id))
          throw Error("id " + object.id + " is reserved in " + this);
        if (this.isReservedName(object.name))
          throw Error("name '" + object.name + "' is reserved in " + this);
        if (object.parent)
          object.parent.remove(object);
        this.fields[object.name] = object;
        object.message = this;
        object.onAdd(this);
        return clearCache(this);
      }
      if (object instanceof OneOf) {
        if (!this.oneofs)
          this.oneofs = {};
        this.oneofs[object.name] = object;
        object.onAdd(this);
        return clearCache(this);
      }
      return Namespace.prototype.add.call(this, object);
    };
    Type.prototype.remove = function remove(object) {
      if (object instanceof Field && object.extend === void 0) {
        if (!this.fields || this.fields[object.name] !== object)
          throw Error(object + " is not a member of " + this);
        delete this.fields[object.name];
        object.parent = null;
        object.onRemove(this);
        return clearCache(this);
      }
      if (object instanceof OneOf) {
        if (!this.oneofs || this.oneofs[object.name] !== object)
          throw Error(object + " is not a member of " + this);
        delete this.oneofs[object.name];
        object.parent = null;
        object.onRemove(this);
        return clearCache(this);
      }
      return Namespace.prototype.remove.call(this, object);
    };
    Type.prototype.isReservedId = function isReservedId(id2) {
      return Namespace.isReservedId(this.reserved, id2);
    };
    Type.prototype.isReservedName = function isReservedName(name2) {
      return Namespace.isReservedName(this.reserved, name2);
    };
    Type.prototype.create = function create(properties) {
      return new this.ctor(properties);
    };
    Type.prototype.setup = function setup() {
      var fullName = this.fullName, types2 = [];
      for (var i = 0; i < this.fieldsArray.length; ++i)
        types2.push(this._fieldsArray[i].resolve().resolvedType);
      this.encode = encoder(this)({
        Writer,
        types: types2,
        util
      });
      this.decode = decoder(this)({
        Reader,
        types: types2,
        util
      });
      this.verify = verifier(this)({
        types: types2,
        util
      });
      this.fromObject = converter.fromObject(this)({
        types: types2,
        util
      });
      this.toObject = converter.toObject(this)({
        types: types2,
        util
      });
      var wrapper = wrappers[fullName];
      if (wrapper) {
        var originalThis = Object.create(this);
        originalThis.fromObject = this.fromObject;
        this.fromObject = wrapper.fromObject.bind(originalThis);
        originalThis.toObject = this.toObject;
        this.toObject = wrapper.toObject.bind(originalThis);
      }
      return this;
    };
    Type.prototype.encode = function encode_setup(message, writer) {
      return this.setup().encode(message, writer);
    };
    Type.prototype.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();
    };
    Type.prototype.decode = function decode_setup(reader, length) {
      return this.setup().decode(reader, length);
    };
    Type.prototype.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof Reader))
        reader = Reader.create(reader);
      return this.decode(reader, reader.uint32());
    };
    Type.prototype.verify = function verify_setup(message) {
      return this.setup().verify(message);
    };
    Type.prototype.fromObject = function fromObject(object) {
      return this.setup().fromObject(object);
    };
    Type.prototype.toObject = function toObject(message, options2) {
      return this.setup().toObject(message, options2);
    };
    Type.d = function decorateType(typeName) {
      return function typeDecorator(target) {
        util.decorateType(target, typeName);
      };
    };
  }
});

// node_modules/protobufjs/src/root.js
var require_root = __commonJS({
  "node_modules/protobufjs/src/root.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = Root2;
    var Namespace = require_namespace();
    ((Root2.prototype = Object.create(Namespace.prototype)).constructor = Root2).className = "Root";
    var Field = require_field();
    var Enum = require_enum();
    var OneOf = require_oneof();
    var util = require_util();
    var Type;
    var parse;
    var common;
    function Root2(options2) {
      Namespace.call(this, "", options2);
      this.deferred = [];
      this.files = [];
    }
    Root2.fromJSON = function fromJSON(json, root) {
      if (!root)
        root = new Root2();
      if (json.options)
        root.setOptions(json.options);
      return root.addJSON(json.nested);
    };
    Root2.prototype.resolvePath = util.path.resolve;
    Root2.prototype.fetch = util.fetch;
    function SYNC() {
    }
    Root2.prototype.load = function load2(filename, options2, callback) {
      if (typeof options2 === "function") {
        callback = options2;
        options2 = void 0;
      }
      var self2 = this;
      if (!callback)
        return util.asPromise(load2, self2, filename, options2);
      var sync = callback === SYNC;
      function finish(err, root) {
        if (!callback)
          return;
        var cb = callback;
        callback = null;
        if (sync)
          throw err;
        cb(err, root);
      }
      function getBundledFileName(filename2) {
        var idx = filename2.lastIndexOf("google/protobuf/");
        if (idx > -1) {
          var altname = filename2.substring(idx);
          if (altname in common)
            return altname;
        }
        return null;
      }
      function process2(filename2, source) {
        try {
          if (util.isString(source) && source.charAt(0) === "{")
            source = JSON.parse(source);
          if (!util.isString(source))
            self2.setOptions(source.options).addJSON(source.nested);
          else {
            parse.filename = filename2;
            var parsed = parse(source, self2, options2), resolved2, i2 = 0;
            if (parsed.imports) {
              for (; i2 < parsed.imports.length; ++i2)
                if (resolved2 = getBundledFileName(parsed.imports[i2]) || self2.resolvePath(filename2, parsed.imports[i2]))
                  fetch2(resolved2);
            }
            if (parsed.weakImports) {
              for (i2 = 0; i2 < parsed.weakImports.length; ++i2)
                if (resolved2 = getBundledFileName(parsed.weakImports[i2]) || self2.resolvePath(filename2, parsed.weakImports[i2]))
                  fetch2(resolved2, true);
            }
          }
        } catch (err) {
          finish(err);
        }
        if (!sync && !queued)
          finish(null, self2);
      }
      function fetch2(filename2, weak) {
        if (self2.files.indexOf(filename2) > -1)
          return;
        self2.files.push(filename2);
        if (filename2 in common) {
          if (sync)
            process2(filename2, common[filename2]);
          else {
            ++queued;
            setTimeout(function() {
              --queued;
              process2(filename2, common[filename2]);
            });
          }
          return;
        }
        if (sync) {
          var source;
          try {
            source = util.fs.readFileSync(filename2).toString("utf8");
          } catch (err) {
            if (!weak)
              finish(err);
            return;
          }
          process2(filename2, source);
        } else {
          ++queued;
          self2.fetch(filename2, function(err, source2) {
            --queued;
            if (!callback)
              return;
            if (err) {
              if (!weak)
                finish(err);
              else if (!queued)
                finish(null, self2);
              return;
            }
            process2(filename2, source2);
          });
        }
      }
      var queued = 0;
      if (util.isString(filename))
        filename = [filename];
      for (var i = 0, resolved; i < filename.length; ++i)
        if (resolved = self2.resolvePath("", filename[i]))
          fetch2(resolved);
      if (sync)
        return self2;
      if (!queued)
        finish(null, self2);
      return void 0;
    };
    Root2.prototype.loadSync = function loadSync(filename, options2) {
      if (!util.isNode)
        throw Error("not supported");
      return this.load(filename, options2, SYNC);
    };
    Root2.prototype.resolveAll = function resolveAll() {
      if (this.deferred.length)
        throw Error("unresolvable extensions: " + this.deferred.map(function(field) {
          return "'extend " + field.extend + "' in " + field.parent.fullName;
        }).join(", "));
      return Namespace.prototype.resolveAll.call(this);
    };
    var exposeRe = /^[A-Z]/;
    function tryHandleExtension(root, field) {
      var extendedType = field.parent.lookup(field.extend);
      if (extendedType) {
        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, void 0, field.options);
        sisterField.declaringField = field;
        field.extensionField = sisterField;
        extendedType.add(sisterField);
        return true;
      }
      return false;
    }
    Root2.prototype._handleAdd = function _handleAdd(object) {
      if (object instanceof Field) {
        if (object.extend !== void 0 && !object.extensionField) {
          if (!tryHandleExtension(this, object))
            this.deferred.push(object);
        }
      } else if (object instanceof Enum) {
        if (exposeRe.test(object.name))
          object.parent[object.name] = object.values;
      } else if (!(object instanceof OneOf)) {
        if (object instanceof Type)
          for (var i = 0; i < this.deferred.length; )
            if (tryHandleExtension(this, this.deferred[i]))
              this.deferred.splice(i, 1);
            else
              ++i;
        for (var j = 0; j < object.nestedArray.length; ++j)
          this._handleAdd(object._nestedArray[j]);
        if (exposeRe.test(object.name))
          object.parent[object.name] = object;
      }
    };
    Root2.prototype._handleRemove = function _handleRemove(object) {
      if (object instanceof Field) {
        if (object.extend !== void 0) {
          if (object.extensionField) {
            object.extensionField.parent.remove(object.extensionField);
            object.extensionField = null;
          } else {
            var index2 = this.deferred.indexOf(object);
            if (index2 > -1)
              this.deferred.splice(index2, 1);
          }
        }
      } else if (object instanceof Enum) {
        if (exposeRe.test(object.name))
          delete object.parent[object.name];
      } else if (object instanceof Namespace) {
        for (var i = 0; i < object.nestedArray.length; ++i)
          this._handleRemove(object._nestedArray[i]);
        if (exposeRe.test(object.name))
          delete object.parent[object.name];
      }
    };
    Root2._configure = function(Type_, parse_, common_) {
      Type = Type_;
      parse = parse_;
      common = common_;
    };
  }
});

// node_modules/protobufjs/src/util.js
var require_util = __commonJS({
  "node_modules/protobufjs/src/util.js"(exports2, module2) {
    init_shims();
    "use strict";
    var util = module2.exports = require_minimal();
    var roots = require_roots();
    var Type;
    var Enum;
    util.codegen = require_codegen();
    util.fetch = require_fetch();
    util.path = require_path();
    util.fs = util.inquire("fs");
    util.toArray = function toArray(object) {
      if (object) {
        var keys = Object.keys(object), array = new Array(keys.length), index2 = 0;
        while (index2 < keys.length)
          array[index2] = object[keys[index2++]];
        return array;
      }
      return [];
    };
    util.toObject = function toObject(array) {
      var object = {}, index2 = 0;
      while (index2 < array.length) {
        var key = array[index2++], val = array[index2++];
        if (val !== void 0)
          object[key] = val;
      }
      return object;
    };
    var safePropBackslashRe = /\\/g;
    var safePropQuoteRe = /"/g;
    util.isReserved = function isReserved(name2) {
      return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name2);
    };
    util.safeProp = function safeProp2(prop) {
      if (!/^[$\w_]+$/.test(prop) || util.isReserved(prop))
        return '["' + prop.replace(safePropBackslashRe, "\\\\").replace(safePropQuoteRe, '\\"') + '"]';
      return "." + prop;
    };
    util.ucFirst = function ucFirst(str) {
      return str.charAt(0).toUpperCase() + str.substring(1);
    };
    var camelCaseRe = /_([a-z])/g;
    util.camelCase = function camelCase(str) {
      return str.substring(0, 1) + str.substring(1).replace(camelCaseRe, function($0, $1) {
        return $1.toUpperCase();
      });
    };
    util.compareFieldsById = function compareFieldsById(a, b) {
      return a.id - b.id;
    };
    util.decorateType = function decorateType(ctor, typeName) {
      if (ctor.$type) {
        if (typeName && ctor.$type.name !== typeName) {
          util.decorateRoot.remove(ctor.$type);
          ctor.$type.name = typeName;
          util.decorateRoot.add(ctor.$type);
        }
        return ctor.$type;
      }
      if (!Type)
        Type = require_type();
      var type = new Type(typeName || ctor.name);
      util.decorateRoot.add(type);
      type.ctor = ctor;
      Object.defineProperty(ctor, "$type", { value: type, enumerable: false });
      Object.defineProperty(ctor.prototype, "$type", { value: type, enumerable: false });
      return type;
    };
    var decorateEnumIndex = 0;
    util.decorateEnum = function decorateEnum(object) {
      if (object.$type)
        return object.$type;
      if (!Enum)
        Enum = require_enum();
      var enm = new Enum("Enum" + decorateEnumIndex++, object);
      util.decorateRoot.add(enm);
      Object.defineProperty(object, "$type", { value: enm, enumerable: false });
      return enm;
    };
    util.setProperty = function setProperty(dst, path, value) {
      function setProp(dst2, path2, value2) {
        var part = path2.shift();
        if (path2.length > 0) {
          dst2[part] = setProp(dst2[part] || {}, path2, value2);
        } else {
          var prevValue = dst2[part];
          if (prevValue)
            value2 = [].concat(prevValue).concat(value2);
          dst2[part] = value2;
        }
        return dst2;
      }
      if (typeof dst !== "object")
        throw TypeError("dst must be an object");
      if (!path)
        throw TypeError("path must be specified");
      path = path.split(".");
      return setProp(dst, path, value);
    };
    Object.defineProperty(util, "decorateRoot", {
      get: function() {
        return roots["decorated"] || (roots["decorated"] = new (require_root())());
      }
    });
  }
});

// node_modules/protobufjs/src/object.js
var require_object = __commonJS({
  "node_modules/protobufjs/src/object.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = ReflectionObject;
    ReflectionObject.className = "ReflectionObject";
    var util = require_util();
    var Root2;
    function ReflectionObject(name2, options2) {
      if (!util.isString(name2))
        throw TypeError("name must be a string");
      if (options2 && !util.isObject(options2))
        throw TypeError("options must be an object");
      this.options = options2;
      this.parsedOptions = null;
      this.name = name2;
      this.parent = null;
      this.resolved = false;
      this.comment = null;
      this.filename = null;
    }
    Object.defineProperties(ReflectionObject.prototype, {
      root: {
        get: function() {
          var ptr = this;
          while (ptr.parent !== null)
            ptr = ptr.parent;
          return ptr;
        }
      },
      fullName: {
        get: function() {
          var path = [this.name], ptr = this.parent;
          while (ptr) {
            path.unshift(ptr.name);
            ptr = ptr.parent;
          }
          return path.join(".");
        }
      }
    });
    ReflectionObject.prototype.toJSON = function toJSON() {
      throw Error();
    };
    ReflectionObject.prototype.onAdd = function onAdd(parent) {
      if (this.parent && this.parent !== parent)
        this.parent.remove(this);
      this.parent = parent;
      this.resolved = false;
      var root = parent.root;
      if (root instanceof Root2)
        root._handleAdd(this);
    };
    ReflectionObject.prototype.onRemove = function onRemove(parent) {
      var root = parent.root;
      if (root instanceof Root2)
        root._handleRemove(this);
      this.parent = null;
      this.resolved = false;
    };
    ReflectionObject.prototype.resolve = function resolve2() {
      if (this.resolved)
        return this;
      if (this.root instanceof Root2)
        this.resolved = true;
      return this;
    };
    ReflectionObject.prototype.getOption = function getOption(name2) {
      if (this.options)
        return this.options[name2];
      return void 0;
    };
    ReflectionObject.prototype.setOption = function setOption(name2, value, ifNotSet) {
      if (!ifNotSet || !this.options || this.options[name2] === void 0)
        (this.options || (this.options = {}))[name2] = value;
      return this;
    };
    ReflectionObject.prototype.setParsedOption = function setParsedOption(name2, value, propName) {
      if (!this.parsedOptions) {
        this.parsedOptions = [];
      }
      var parsedOptions = this.parsedOptions;
      if (propName) {
        var opt = parsedOptions.find(function(opt2) {
          return Object.prototype.hasOwnProperty.call(opt2, name2);
        });
        if (opt) {
          var newValue = opt[name2];
          util.setProperty(newValue, propName, value);
        } else {
          opt = {};
          opt[name2] = util.setProperty({}, propName, value);
          parsedOptions.push(opt);
        }
      } else {
        var newOpt = {};
        newOpt[name2] = value;
        parsedOptions.push(newOpt);
      }
      return this;
    };
    ReflectionObject.prototype.setOptions = function setOptions(options2, ifNotSet) {
      if (options2)
        for (var keys = Object.keys(options2), i = 0; i < keys.length; ++i)
          this.setOption(keys[i], options2[keys[i]], ifNotSet);
      return this;
    };
    ReflectionObject.prototype.toString = function toString() {
      var className = this.constructor.className, fullName = this.fullName;
      if (fullName.length)
        return className + " " + fullName;
      return className;
    };
    ReflectionObject._configure = function(Root_) {
      Root2 = Root_;
    };
  }
});

// node_modules/protobufjs/src/enum.js
var require_enum = __commonJS({
  "node_modules/protobufjs/src/enum.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = Enum;
    var ReflectionObject = require_object();
    ((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = "Enum";
    var Namespace = require_namespace();
    var util = require_util();
    function Enum(name2, values, options2, comment, comments) {
      ReflectionObject.call(this, name2, options2);
      if (values && typeof values !== "object")
        throw TypeError("values must be an object");
      this.valuesById = {};
      this.values = Object.create(this.valuesById);
      this.comment = comment;
      this.comments = comments || {};
      this.reserved = void 0;
      if (values) {
        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)
          if (typeof values[keys[i]] === "number")
            this.valuesById[this.values[keys[i]] = values[keys[i]]] = keys[i];
      }
    }
    Enum.fromJSON = function fromJSON(name2, json) {
      var enm = new Enum(name2, json.values, json.options, json.comment, json.comments);
      enm.reserved = json.reserved;
      return enm;
    };
    Enum.prototype.toJSON = function toJSON(toJSONOptions) {
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "options",
        this.options,
        "values",
        this.values,
        "reserved",
        this.reserved && this.reserved.length ? this.reserved : void 0,
        "comment",
        keepComments ? this.comment : void 0,
        "comments",
        keepComments ? this.comments : void 0
      ]);
    };
    Enum.prototype.add = function add(name2, id2, comment) {
      if (!util.isString(name2))
        throw TypeError("name must be a string");
      if (!util.isInteger(id2))
        throw TypeError("id must be an integer");
      if (this.values[name2] !== void 0)
        throw Error("duplicate name '" + name2 + "' in " + this);
      if (this.isReservedId(id2))
        throw Error("id " + id2 + " is reserved in " + this);
      if (this.isReservedName(name2))
        throw Error("name '" + name2 + "' is reserved in " + this);
      if (this.valuesById[id2] !== void 0) {
        if (!(this.options && this.options.allow_alias))
          throw Error("duplicate id " + id2 + " in " + this);
        this.values[name2] = id2;
      } else
        this.valuesById[this.values[name2] = id2] = name2;
      this.comments[name2] = comment || null;
      return this;
    };
    Enum.prototype.remove = function remove(name2) {
      if (!util.isString(name2))
        throw TypeError("name must be a string");
      var val = this.values[name2];
      if (val == null)
        throw Error("name '" + name2 + "' does not exist in " + this);
      delete this.valuesById[val];
      delete this.values[name2];
      delete this.comments[name2];
      return this;
    };
    Enum.prototype.isReservedId = function isReservedId(id2) {
      return Namespace.isReservedId(this.reserved, id2);
    };
    Enum.prototype.isReservedName = function isReservedName(name2) {
      return Namespace.isReservedName(this.reserved, name2);
    };
  }
});

// node_modules/protobufjs/src/encoder.js
var require_encoder = __commonJS({
  "node_modules/protobufjs/src/encoder.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = encoder;
    var Enum = require_enum();
    var types2 = require_types();
    var util = require_util();
    function genTypePartial(gen, field, fieldIndex, ref) {
      return field.resolvedType.group ? gen("types[%i].encode(%s,w.uint32(%i)).uint32(%i)", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0) : gen("types[%i].encode(%s,w.uint32(%i).fork()).ldelim()", fieldIndex, ref, (field.id << 3 | 2) >>> 0);
    }
    function encoder(mtype) {
      var gen = util.codegen(["m", "w"], mtype.name + "$encode")("if(!w)")("w=Writer.create()");
      var i, ref;
      var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);
      for (var i = 0; i < fields.length; ++i) {
        var field = fields[i].resolve(), index2 = mtype._fieldsArray.indexOf(field), type = field.resolvedType instanceof Enum ? "int32" : field.type, wireType = types2.basic[type];
        ref = "m" + util.safeProp(field.name);
        if (field.map) {
          gen("if(%s!=null&&Object.hasOwnProperty.call(m,%j)){", ref, field.name)("for(var ks=Object.keys(%s),i=0;i<ks.length;++i){", ref)("w.uint32(%i).fork().uint32(%i).%s(ks[i])", (field.id << 3 | 2) >>> 0, 8 | types2.mapKey[field.keyType], field.keyType);
          if (wireType === void 0)
            gen("types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()", index2, ref);
          else
            gen(".uint32(%i).%s(%s[ks[i]]).ldelim()", 16 | wireType, type, ref);
          gen("}")("}");
        } else if (field.repeated) {
          gen("if(%s!=null&&%s.length){", ref, ref);
          if (field.packed && types2.packed[type] !== void 0) {
            gen("w.uint32(%i).fork()", (field.id << 3 | 2) >>> 0)("for(var i=0;i<%s.length;++i)", ref)("w.%s(%s[i])", type, ref)("w.ldelim()");
          } else {
            gen("for(var i=0;i<%s.length;++i)", ref);
            if (wireType === void 0)
              genTypePartial(gen, field, index2, ref + "[i]");
            else
              gen("w.uint32(%i).%s(%s[i])", (field.id << 3 | wireType) >>> 0, type, ref);
          }
          gen("}");
        } else {
          if (field.optional)
            gen("if(%s!=null&&Object.hasOwnProperty.call(m,%j))", ref, field.name);
          if (wireType === void 0)
            genTypePartial(gen, field, index2, ref);
          else
            gen("w.uint32(%i).%s(%s)", (field.id << 3 | wireType) >>> 0, type, ref);
        }
      }
      return gen("return w");
    }
  }
});

// node_modules/protobufjs/src/index-light.js
var require_index_light = __commonJS({
  "node_modules/protobufjs/src/index-light.js"(exports2, module2) {
    init_shims();
    "use strict";
    var protobuf = module2.exports = require_index_minimal();
    protobuf.build = "light";
    function load2(filename, root, callback) {
      if (typeof root === "function") {
        callback = root;
        root = new protobuf.Root();
      } else if (!root)
        root = new protobuf.Root();
      return root.load(filename, callback);
    }
    protobuf.load = load2;
    function loadSync(filename, root) {
      if (!root)
        root = new protobuf.Root();
      return root.loadSync(filename);
    }
    protobuf.loadSync = loadSync;
    protobuf.encoder = require_encoder();
    protobuf.decoder = require_decoder();
    protobuf.verifier = require_verifier();
    protobuf.converter = require_converter();
    protobuf.ReflectionObject = require_object();
    protobuf.Namespace = require_namespace();
    protobuf.Root = require_root();
    protobuf.Enum = require_enum();
    protobuf.Type = require_type();
    protobuf.Field = require_field();
    protobuf.OneOf = require_oneof();
    protobuf.MapField = require_mapfield();
    protobuf.Service = require_service2();
    protobuf.Method = require_method();
    protobuf.Message = require_message();
    protobuf.wrappers = require_wrappers();
    protobuf.types = require_types();
    protobuf.util = require_util();
    protobuf.ReflectionObject._configure(protobuf.Root);
    protobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);
    protobuf.Root._configure(protobuf.Type);
    protobuf.Field._configure(protobuf.Type);
  }
});

// node_modules/protobufjs/src/tokenize.js
var require_tokenize = __commonJS({
  "node_modules/protobufjs/src/tokenize.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = tokenize;
    var delimRe = /[\s{}=;:[\],'"()<>]/g;
    var stringDoubleRe = /(?:"([^"\\]*(?:\\.[^"\\]*)*)")/g;
    var stringSingleRe = /(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g;
    var setCommentRe = /^ *[*/]+ */;
    var setCommentAltRe = /^\s*\*?\/*/;
    var setCommentSplitRe = /\n/g;
    var whitespaceRe = /\s/;
    var unescapeRe = /\\(.?)/g;
    var unescapeMap = {
      "0": "\0",
      "r": "\r",
      "n": "\n",
      "t": "	"
    };
    function unescape2(str) {
      return str.replace(unescapeRe, function($0, $1) {
        switch ($1) {
          case "\\":
          case "":
            return $1;
          default:
            return unescapeMap[$1] || "";
        }
      });
    }
    tokenize.unescape = unescape2;
    function tokenize(source, alternateCommentMode) {
      source = source.toString();
      var offset = 0, length = source.length, line = 1, commentType = null, commentText = null, commentLine = 0, commentLineEmpty = false, commentIsLeading = false;
      var stack = [];
      var stringDelim = null;
      function illegal(subject) {
        return Error("illegal " + subject + " (line " + line + ")");
      }
      function readString() {
        var re = stringDelim === "'" ? stringSingleRe : stringDoubleRe;
        re.lastIndex = offset - 1;
        var match = re.exec(source);
        if (!match)
          throw illegal("string");
        offset = re.lastIndex;
        push(stringDelim);
        stringDelim = null;
        return unescape2(match[1]);
      }
      function charAt(pos) {
        return source.charAt(pos);
      }
      function setComment(start, end, isLeading) {
        commentType = source.charAt(start++);
        commentLine = line;
        commentLineEmpty = false;
        commentIsLeading = isLeading;
        var lookback;
        if (alternateCommentMode) {
          lookback = 2;
        } else {
          lookback = 3;
        }
        var commentOffset = start - lookback, c;
        do {
          if (--commentOffset < 0 || (c = source.charAt(commentOffset)) === "\n") {
            commentLineEmpty = true;
            break;
          }
        } while (c === " " || c === "	");
        var lines = source.substring(start, end).split(setCommentSplitRe);
        for (var i = 0; i < lines.length; ++i)
          lines[i] = lines[i].replace(alternateCommentMode ? setCommentAltRe : setCommentRe, "").trim();
        commentText = lines.join("\n").trim();
      }
      function isDoubleSlashCommentLine(startOffset) {
        var endOffset = findEndOfLine(startOffset);
        var lineText = source.substring(startOffset, endOffset);
        var isComment = /^\s*\/{1,2}/.test(lineText);
        return isComment;
      }
      function findEndOfLine(cursor) {
        var endOffset = cursor;
        while (endOffset < length && charAt(endOffset) !== "\n") {
          endOffset++;
        }
        return endOffset;
      }
      function next() {
        if (stack.length > 0)
          return stack.shift();
        if (stringDelim)
          return readString();
        var repeat, prev, curr, start, isDoc, isLeadingComment = offset === 0;
        do {
          if (offset === length)
            return null;
          repeat = false;
          while (whitespaceRe.test(curr = charAt(offset))) {
            if (curr === "\n") {
              isLeadingComment = true;
              ++line;
            }
            if (++offset === length)
              return null;
          }
          if (charAt(offset) === "/") {
            if (++offset === length) {
              throw illegal("comment");
            }
            if (charAt(offset) === "/") {
              if (!alternateCommentMode) {
                isDoc = charAt(start = offset + 1) === "/";
                while (charAt(++offset) !== "\n") {
                  if (offset === length) {
                    return null;
                  }
                }
                ++offset;
                if (isDoc) {
                  setComment(start, offset - 1, isLeadingComment);
                }
                ++line;
                repeat = true;
              } else {
                start = offset;
                isDoc = false;
                if (isDoubleSlashCommentLine(offset)) {
                  isDoc = true;
                  do {
                    offset = findEndOfLine(offset);
                    if (offset === length) {
                      break;
                    }
                    offset++;
                  } while (isDoubleSlashCommentLine(offset));
                } else {
                  offset = Math.min(length, findEndOfLine(offset) + 1);
                }
                if (isDoc) {
                  setComment(start, offset, isLeadingComment);
                }
                line++;
                repeat = true;
              }
            } else if ((curr = charAt(offset)) === "*") {
              start = offset + 1;
              isDoc = alternateCommentMode || charAt(start) === "*";
              do {
                if (curr === "\n") {
                  ++line;
                }
                if (++offset === length) {
                  throw illegal("comment");
                }
                prev = curr;
                curr = charAt(offset);
              } while (prev !== "*" || curr !== "/");
              ++offset;
              if (isDoc) {
                setComment(start, offset - 2, isLeadingComment);
              }
              repeat = true;
            } else {
              return "/";
            }
          }
        } while (repeat);
        var end = offset;
        delimRe.lastIndex = 0;
        var delim = delimRe.test(charAt(end++));
        if (!delim)
          while (end < length && !delimRe.test(charAt(end)))
            ++end;
        var token = source.substring(offset, offset = end);
        if (token === '"' || token === "'")
          stringDelim = token;
        return token;
      }
      function push(token) {
        stack.push(token);
      }
      function peek() {
        if (!stack.length) {
          var token = next();
          if (token === null)
            return null;
          push(token);
        }
        return stack[0];
      }
      function skip(expected, optional) {
        var actual = peek(), equals = actual === expected;
        if (equals) {
          next();
          return true;
        }
        if (!optional)
          throw illegal("token '" + actual + "', '" + expected + "' expected");
        return false;
      }
      function cmnt(trailingLine) {
        var ret = null;
        if (trailingLine === void 0) {
          if (commentLine === line - 1 && (alternateCommentMode || commentType === "*" || commentLineEmpty)) {
            ret = commentIsLeading ? commentText : null;
          }
        } else {
          if (commentLine < trailingLine) {
            peek();
          }
          if (commentLine === trailingLine && !commentLineEmpty && (alternateCommentMode || commentType === "/")) {
            ret = commentIsLeading ? null : commentText;
          }
        }
        return ret;
      }
      return Object.defineProperty({
        next,
        peek,
        push,
        skip,
        cmnt
      }, "line", {
        get: function() {
          return line;
        }
      });
    }
  }
});

// node_modules/protobufjs/src/parse.js
var require_parse = __commonJS({
  "node_modules/protobufjs/src/parse.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = parse;
    parse.filename = null;
    parse.defaults = { keepCase: false };
    var tokenize = require_tokenize();
    var Root2 = require_root();
    var Type = require_type();
    var Field = require_field();
    var MapField = require_mapfield();
    var OneOf = require_oneof();
    var Enum = require_enum();
    var Service = require_service2();
    var Method = require_method();
    var types2 = require_types();
    var util = require_util();
    var base10Re = /^[1-9][0-9]*$/;
    var base10NegRe = /^-?[1-9][0-9]*$/;
    var base16Re = /^0[x][0-9a-fA-F]+$/;
    var base16NegRe = /^-?0[x][0-9a-fA-F]+$/;
    var base8Re = /^0[0-7]+$/;
    var base8NegRe = /^-?0[0-7]+$/;
    var numberRe = /^(?![eE])[0-9]*(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/;
    var nameRe = /^[a-zA-Z_][a-zA-Z_0-9]*$/;
    var typeRefRe = /^(?:\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\.[a-zA-Z_][a-zA-Z_0-9]*)*$/;
    var fqTypeRefRe = /^(?:\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;
    function parse(source, root, options2) {
      if (!(root instanceof Root2)) {
        options2 = root;
        root = new Root2();
      }
      if (!options2)
        options2 = parse.defaults;
      var preferTrailingComment = options2.preferTrailingComment || false;
      var tn = tokenize(source, options2.alternateCommentMode || false), next = tn.next, push = tn.push, peek = tn.peek, skip = tn.skip, cmnt = tn.cmnt;
      var head = true, pkg, imports, weakImports, syntax, isProto3 = false;
      var ptr = root;
      var applyCase = options2.keepCase ? function(name2) {
        return name2;
      } : util.camelCase;
      function illegal(token2, name2, insideTryCatch) {
        var filename = parse.filename;
        if (!insideTryCatch)
          parse.filename = null;
        return Error("illegal " + (name2 || "token") + " '" + token2 + "' (" + (filename ? filename + ", " : "") + "line " + tn.line + ")");
      }
      function readString() {
        var values = [], token2;
        do {
          if ((token2 = next()) !== '"' && token2 !== "'")
            throw illegal(token2);
          values.push(next());
          skip(token2);
          token2 = peek();
        } while (token2 === '"' || token2 === "'");
        return values.join("");
      }
      function readValue(acceptTypeRef) {
        var token2 = next();
        switch (token2) {
          case "'":
          case '"':
            push(token2);
            return readString();
          case "true":
          case "TRUE":
            return true;
          case "false":
          case "FALSE":
            return false;
        }
        try {
          return parseNumber(token2, true);
        } catch (e) {
          if (acceptTypeRef && typeRefRe.test(token2))
            return token2;
          throw illegal(token2, "value");
        }
      }
      function readRanges(target, acceptStrings) {
        var token2, start;
        do {
          if (acceptStrings && ((token2 = peek()) === '"' || token2 === "'"))
            target.push(readString());
          else
            target.push([start = parseId(next()), skip("to", true) ? parseId(next()) : start]);
        } while (skip(",", true));
        skip(";");
      }
      function parseNumber(token2, insideTryCatch) {
        var sign = 1;
        if (token2.charAt(0) === "-") {
          sign = -1;
          token2 = token2.substring(1);
        }
        switch (token2) {
          case "inf":
          case "INF":
          case "Inf":
            return sign * Infinity;
          case "nan":
          case "NAN":
          case "Nan":
          case "NaN":
            return NaN;
          case "0":
            return 0;
        }
        if (base10Re.test(token2))
          return sign * parseInt(token2, 10);
        if (base16Re.test(token2))
          return sign * parseInt(token2, 16);
        if (base8Re.test(token2))
          return sign * parseInt(token2, 8);
        if (numberRe.test(token2))
          return sign * parseFloat(token2);
        throw illegal(token2, "number", insideTryCatch);
      }
      function parseId(token2, acceptNegative) {
        switch (token2) {
          case "max":
          case "MAX":
          case "Max":
            return 536870911;
          case "0":
            return 0;
        }
        if (!acceptNegative && token2.charAt(0) === "-")
          throw illegal(token2, "id");
        if (base10NegRe.test(token2))
          return parseInt(token2, 10);
        if (base16NegRe.test(token2))
          return parseInt(token2, 16);
        if (base8NegRe.test(token2))
          return parseInt(token2, 8);
        throw illegal(token2, "id");
      }
      function parsePackage() {
        if (pkg !== void 0)
          throw illegal("package");
        pkg = next();
        if (!typeRefRe.test(pkg))
          throw illegal(pkg, "name");
        ptr = ptr.define(pkg);
        skip(";");
      }
      function parseImport() {
        var token2 = peek();
        var whichImports;
        switch (token2) {
          case "weak":
            whichImports = weakImports || (weakImports = []);
            next();
            break;
          case "public":
            next();
          default:
            whichImports = imports || (imports = []);
            break;
        }
        token2 = readString();
        skip(";");
        whichImports.push(token2);
      }
      function parseSyntax() {
        skip("=");
        syntax = readString();
        isProto3 = syntax === "proto3";
        if (!isProto3 && syntax !== "proto2")
          throw illegal(syntax, "syntax");
        skip(";");
      }
      function parseCommon(parent, token2) {
        switch (token2) {
          case "option":
            parseOption(parent, token2);
            skip(";");
            return true;
          case "message":
            parseType(parent, token2);
            return true;
          case "enum":
            parseEnum(parent, token2);
            return true;
          case "service":
            parseService(parent, token2);
            return true;
          case "extend":
            parseExtension(parent, token2);
            return true;
        }
        return false;
      }
      function ifBlock(obj, fnIf, fnElse) {
        var trailingLine = tn.line;
        if (obj) {
          if (typeof obj.comment !== "string") {
            obj.comment = cmnt();
          }
          obj.filename = parse.filename;
        }
        if (skip("{", true)) {
          var token2;
          while ((token2 = next()) !== "}")
            fnIf(token2);
          skip(";", true);
        } else {
          if (fnElse)
            fnElse();
          skip(";");
          if (obj && (typeof obj.comment !== "string" || preferTrailingComment))
            obj.comment = cmnt(trailingLine) || obj.comment;
        }
      }
      function parseType(parent, token2) {
        if (!nameRe.test(token2 = next()))
          throw illegal(token2, "type name");
        var type = new Type(token2);
        ifBlock(type, function parseType_block(token3) {
          if (parseCommon(type, token3))
            return;
          switch (token3) {
            case "map":
              parseMapField(type, token3);
              break;
            case "required":
            case "repeated":
              parseField(type, token3);
              break;
            case "optional":
              if (isProto3) {
                parseField(type, "proto3_optional");
              } else {
                parseField(type, "optional");
              }
              break;
            case "oneof":
              parseOneOf(type, token3);
              break;
            case "extensions":
              readRanges(type.extensions || (type.extensions = []));
              break;
            case "reserved":
              readRanges(type.reserved || (type.reserved = []), true);
              break;
            default:
              if (!isProto3 || !typeRefRe.test(token3))
                throw illegal(token3);
              push(token3);
              parseField(type, "optional");
              break;
          }
        });
        parent.add(type);
      }
      function parseField(parent, rule, extend) {
        var type = next();
        if (type === "group") {
          parseGroup(parent, rule);
          return;
        }
        if (!typeRefRe.test(type))
          throw illegal(type, "type");
        var name2 = next();
        if (!nameRe.test(name2))
          throw illegal(name2, "name");
        name2 = applyCase(name2);
        skip("=");
        var field = new Field(name2, parseId(next()), type, rule, extend);
        ifBlock(field, function parseField_block(token2) {
          if (token2 === "option") {
            parseOption(field, token2);
            skip(";");
          } else
            throw illegal(token2);
        }, function parseField_line() {
          parseInlineOptions(field);
        });
        if (rule === "proto3_optional") {
          var oneof = new OneOf("_" + name2);
          field.setOption("proto3_optional", true);
          oneof.add(field);
          parent.add(oneof);
        } else {
          parent.add(field);
        }
        if (!isProto3 && field.repeated && (types2.packed[type] !== void 0 || types2.basic[type] === void 0))
          field.setOption("packed", false, true);
      }
      function parseGroup(parent, rule) {
        var name2 = next();
        if (!nameRe.test(name2))
          throw illegal(name2, "name");
        var fieldName = util.lcFirst(name2);
        if (name2 === fieldName)
          name2 = util.ucFirst(name2);
        skip("=");
        var id2 = parseId(next());
        var type = new Type(name2);
        type.group = true;
        var field = new Field(fieldName, id2, name2, rule);
        field.filename = parse.filename;
        ifBlock(type, function parseGroup_block(token2) {
          switch (token2) {
            case "option":
              parseOption(type, token2);
              skip(";");
              break;
            case "required":
            case "repeated":
              parseField(type, token2);
              break;
            case "optional":
              if (isProto3) {
                parseField(type, "proto3_optional");
              } else {
                parseField(type, "optional");
              }
              break;
            default:
              throw illegal(token2);
          }
        });
        parent.add(type).add(field);
      }
      function parseMapField(parent) {
        skip("<");
        var keyType = next();
        if (types2.mapKey[keyType] === void 0)
          throw illegal(keyType, "type");
        skip(",");
        var valueType = next();
        if (!typeRefRe.test(valueType))
          throw illegal(valueType, "type");
        skip(">");
        var name2 = next();
        if (!nameRe.test(name2))
          throw illegal(name2, "name");
        skip("=");
        var field = new MapField(applyCase(name2), parseId(next()), keyType, valueType);
        ifBlock(field, function parseMapField_block(token2) {
          if (token2 === "option") {
            parseOption(field, token2);
            skip(";");
          } else
            throw illegal(token2);
        }, function parseMapField_line() {
          parseInlineOptions(field);
        });
        parent.add(field);
      }
      function parseOneOf(parent, token2) {
        if (!nameRe.test(token2 = next()))
          throw illegal(token2, "name");
        var oneof = new OneOf(applyCase(token2));
        ifBlock(oneof, function parseOneOf_block(token3) {
          if (token3 === "option") {
            parseOption(oneof, token3);
            skip(";");
          } else {
            push(token3);
            parseField(oneof, "optional");
          }
        });
        parent.add(oneof);
      }
      function parseEnum(parent, token2) {
        if (!nameRe.test(token2 = next()))
          throw illegal(token2, "name");
        var enm = new Enum(token2);
        ifBlock(enm, function parseEnum_block(token3) {
          switch (token3) {
            case "option":
              parseOption(enm, token3);
              skip(";");
              break;
            case "reserved":
              readRanges(enm.reserved || (enm.reserved = []), true);
              break;
            default:
              parseEnumValue(enm, token3);
          }
        });
        parent.add(enm);
      }
      function parseEnumValue(parent, token2) {
        if (!nameRe.test(token2))
          throw illegal(token2, "name");
        skip("=");
        var value = parseId(next(), true), dummy = {};
        ifBlock(dummy, function parseEnumValue_block(token3) {
          if (token3 === "option") {
            parseOption(dummy, token3);
            skip(";");
          } else
            throw illegal(token3);
        }, function parseEnumValue_line() {
          parseInlineOptions(dummy);
        });
        parent.add(token2, value, dummy.comment);
      }
      function parseOption(parent, token2) {
        var isCustom = skip("(", true);
        if (!typeRefRe.test(token2 = next()))
          throw illegal(token2, "name");
        var name2 = token2;
        var option = name2;
        var propName;
        if (isCustom) {
          skip(")");
          name2 = "(" + name2 + ")";
          option = name2;
          token2 = peek();
          if (fqTypeRefRe.test(token2)) {
            propName = token2.substr(1);
            name2 += token2;
            next();
          }
        }
        skip("=");
        var optionValue = parseOptionValue(parent, name2);
        setParsedOption(parent, option, optionValue, propName);
      }
      function parseOptionValue(parent, name2) {
        if (skip("{", true)) {
          var result = {};
          while (!skip("}", true)) {
            if (!nameRe.test(token = next()))
              throw illegal(token, "name");
            var value;
            var propName = token;
            if (peek() === "{")
              value = parseOptionValue(parent, name2 + "." + token);
            else {
              skip(":");
              if (peek() === "{")
                value = parseOptionValue(parent, name2 + "." + token);
              else {
                value = readValue(true);
                setOption(parent, name2 + "." + token, value);
              }
            }
            var prevValue = result[propName];
            if (prevValue)
              value = [].concat(prevValue).concat(value);
            result[propName] = value;
            skip(",", true);
          }
          return result;
        }
        var simpleValue = readValue(true);
        setOption(parent, name2, simpleValue);
        return simpleValue;
      }
      function setOption(parent, name2, value) {
        if (parent.setOption)
          parent.setOption(name2, value);
      }
      function setParsedOption(parent, name2, value, propName) {
        if (parent.setParsedOption)
          parent.setParsedOption(name2, value, propName);
      }
      function parseInlineOptions(parent) {
        if (skip("[", true)) {
          do {
            parseOption(parent, "option");
          } while (skip(",", true));
          skip("]");
        }
        return parent;
      }
      function parseService(parent, token2) {
        if (!nameRe.test(token2 = next()))
          throw illegal(token2, "service name");
        var service = new Service(token2);
        ifBlock(service, function parseService_block(token3) {
          if (parseCommon(service, token3))
            return;
          if (token3 === "rpc")
            parseMethod(service, token3);
          else
            throw illegal(token3);
        });
        parent.add(service);
      }
      function parseMethod(parent, token2) {
        var commentText = cmnt();
        var type = token2;
        if (!nameRe.test(token2 = next()))
          throw illegal(token2, "name");
        var name2 = token2, requestType, requestStream, responseType, responseStream;
        skip("(");
        if (skip("stream", true))
          requestStream = true;
        if (!typeRefRe.test(token2 = next()))
          throw illegal(token2);
        requestType = token2;
        skip(")");
        skip("returns");
        skip("(");
        if (skip("stream", true))
          responseStream = true;
        if (!typeRefRe.test(token2 = next()))
          throw illegal(token2);
        responseType = token2;
        skip(")");
        var method = new Method(name2, type, requestType, responseType, requestStream, responseStream);
        method.comment = commentText;
        ifBlock(method, function parseMethod_block(token3) {
          if (token3 === "option") {
            parseOption(method, token3);
            skip(";");
          } else
            throw illegal(token3);
        });
        parent.add(method);
      }
      function parseExtension(parent, token2) {
        if (!typeRefRe.test(token2 = next()))
          throw illegal(token2, "reference");
        var reference = token2;
        ifBlock(null, function parseExtension_block(token3) {
          switch (token3) {
            case "required":
            case "repeated":
              parseField(parent, token3, reference);
              break;
            case "optional":
              if (isProto3) {
                parseField(parent, "proto3_optional", reference);
              } else {
                parseField(parent, "optional", reference);
              }
              break;
            default:
              if (!isProto3 || !typeRefRe.test(token3))
                throw illegal(token3);
              push(token3);
              parseField(parent, "optional", reference);
              break;
          }
        });
      }
      var token;
      while ((token = next()) !== null) {
        switch (token) {
          case "package":
            if (!head)
              throw illegal(token);
            parsePackage();
            break;
          case "import":
            if (!head)
              throw illegal(token);
            parseImport();
            break;
          case "syntax":
            if (!head)
              throw illegal(token);
            parseSyntax();
            break;
          case "option":
            parseOption(ptr, token);
            skip(";");
            break;
          default:
            if (parseCommon(ptr, token)) {
              head = false;
              continue;
            }
            throw illegal(token);
        }
      }
      parse.filename = null;
      return {
        "package": pkg,
        "imports": imports,
        weakImports,
        syntax,
        root
      };
    }
  }
});

// node_modules/protobufjs/src/common.js
var require_common = __commonJS({
  "node_modules/protobufjs/src/common.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = common;
    var commonRe = /\/|\./;
    function common(name2, json) {
      if (!commonRe.test(name2)) {
        name2 = "google/protobuf/" + name2 + ".proto";
        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };
      }
      common[name2] = json;
    }
    common("any", {
      Any: {
        fields: {
          type_url: {
            type: "string",
            id: 1
          },
          value: {
            type: "bytes",
            id: 2
          }
        }
      }
    });
    var timeType;
    common("duration", {
      Duration: timeType = {
        fields: {
          seconds: {
            type: "int64",
            id: 1
          },
          nanos: {
            type: "int32",
            id: 2
          }
        }
      }
    });
    common("timestamp", {
      Timestamp: timeType
    });
    common("empty", {
      Empty: {
        fields: {}
      }
    });
    common("struct", {
      Struct: {
        fields: {
          fields: {
            keyType: "string",
            type: "Value",
            id: 1
          }
        }
      },
      Value: {
        oneofs: {
          kind: {
            oneof: [
              "nullValue",
              "numberValue",
              "stringValue",
              "boolValue",
              "structValue",
              "listValue"
            ]
          }
        },
        fields: {
          nullValue: {
            type: "NullValue",
            id: 1
          },
          numberValue: {
            type: "double",
            id: 2
          },
          stringValue: {
            type: "string",
            id: 3
          },
          boolValue: {
            type: "bool",
            id: 4
          },
          structValue: {
            type: "Struct",
            id: 5
          },
          listValue: {
            type: "ListValue",
            id: 6
          }
        }
      },
      NullValue: {
        values: {
          NULL_VALUE: 0
        }
      },
      ListValue: {
        fields: {
          values: {
            rule: "repeated",
            type: "Value",
            id: 1
          }
        }
      }
    });
    common("wrappers", {
      DoubleValue: {
        fields: {
          value: {
            type: "double",
            id: 1
          }
        }
      },
      FloatValue: {
        fields: {
          value: {
            type: "float",
            id: 1
          }
        }
      },
      Int64Value: {
        fields: {
          value: {
            type: "int64",
            id: 1
          }
        }
      },
      UInt64Value: {
        fields: {
          value: {
            type: "uint64",
            id: 1
          }
        }
      },
      Int32Value: {
        fields: {
          value: {
            type: "int32",
            id: 1
          }
        }
      },
      UInt32Value: {
        fields: {
          value: {
            type: "uint32",
            id: 1
          }
        }
      },
      BoolValue: {
        fields: {
          value: {
            type: "bool",
            id: 1
          }
        }
      },
      StringValue: {
        fields: {
          value: {
            type: "string",
            id: 1
          }
        }
      },
      BytesValue: {
        fields: {
          value: {
            type: "bytes",
            id: 1
          }
        }
      }
    });
    common("field_mask", {
      FieldMask: {
        fields: {
          paths: {
            rule: "repeated",
            type: "string",
            id: 1
          }
        }
      }
    });
    common.get = function get(file) {
      return common[file] || null;
    };
  }
});

// node_modules/protobufjs/src/index.js
var require_src = __commonJS({
  "node_modules/protobufjs/src/index.js"(exports2, module2) {
    init_shims();
    "use strict";
    var protobuf = module2.exports = require_index_light();
    protobuf.build = "full";
    protobuf.tokenize = require_tokenize();
    protobuf.parse = require_parse();
    protobuf.common = require_common();
    protobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);
  }
});

// node_modules/protobufjs/index.js
var require_protobufjs = __commonJS({
  "node_modules/protobufjs/index.js"(exports2, module2) {
    init_shims();
    "use strict";
    module2.exports = require_src();
  }
});

// node_modules/protobufjs/google/protobuf/descriptor.json
var require_descriptor = __commonJS({
  "node_modules/protobufjs/google/protobuf/descriptor.json"(exports2, module2) {
    module2.exports = {
      nested: {
        google: {
          nested: {
            protobuf: {
              nested: {
                FileDescriptorSet: {
                  fields: {
                    file: {
                      rule: "repeated",
                      type: "FileDescriptorProto",
                      id: 1
                    }
                  }
                },
                FileDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    package: {
                      type: "string",
                      id: 2
                    },
                    dependency: {
                      rule: "repeated",
                      type: "string",
                      id: 3
                    },
                    publicDependency: {
                      rule: "repeated",
                      type: "int32",
                      id: 10,
                      options: {
                        packed: false
                      }
                    },
                    weakDependency: {
                      rule: "repeated",
                      type: "int32",
                      id: 11,
                      options: {
                        packed: false
                      }
                    },
                    messageType: {
                      rule: "repeated",
                      type: "DescriptorProto",
                      id: 4
                    },
                    enumType: {
                      rule: "repeated",
                      type: "EnumDescriptorProto",
                      id: 5
                    },
                    service: {
                      rule: "repeated",
                      type: "ServiceDescriptorProto",
                      id: 6
                    },
                    extension: {
                      rule: "repeated",
                      type: "FieldDescriptorProto",
                      id: 7
                    },
                    options: {
                      type: "FileOptions",
                      id: 8
                    },
                    sourceCodeInfo: {
                      type: "SourceCodeInfo",
                      id: 9
                    },
                    syntax: {
                      type: "string",
                      id: 12
                    }
                  }
                },
                DescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    field: {
                      rule: "repeated",
                      type: "FieldDescriptorProto",
                      id: 2
                    },
                    extension: {
                      rule: "repeated",
                      type: "FieldDescriptorProto",
                      id: 6
                    },
                    nestedType: {
                      rule: "repeated",
                      type: "DescriptorProto",
                      id: 3
                    },
                    enumType: {
                      rule: "repeated",
                      type: "EnumDescriptorProto",
                      id: 4
                    },
                    extensionRange: {
                      rule: "repeated",
                      type: "ExtensionRange",
                      id: 5
                    },
                    oneofDecl: {
                      rule: "repeated",
                      type: "OneofDescriptorProto",
                      id: 8
                    },
                    options: {
                      type: "MessageOptions",
                      id: 7
                    },
                    reservedRange: {
                      rule: "repeated",
                      type: "ReservedRange",
                      id: 9
                    },
                    reservedName: {
                      rule: "repeated",
                      type: "string",
                      id: 10
                    }
                  },
                  nested: {
                    ExtensionRange: {
                      fields: {
                        start: {
                          type: "int32",
                          id: 1
                        },
                        end: {
                          type: "int32",
                          id: 2
                        }
                      }
                    },
                    ReservedRange: {
                      fields: {
                        start: {
                          type: "int32",
                          id: 1
                        },
                        end: {
                          type: "int32",
                          id: 2
                        }
                      }
                    }
                  }
                },
                FieldDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    number: {
                      type: "int32",
                      id: 3
                    },
                    label: {
                      type: "Label",
                      id: 4
                    },
                    type: {
                      type: "Type",
                      id: 5
                    },
                    typeName: {
                      type: "string",
                      id: 6
                    },
                    extendee: {
                      type: "string",
                      id: 2
                    },
                    defaultValue: {
                      type: "string",
                      id: 7
                    },
                    oneofIndex: {
                      type: "int32",
                      id: 9
                    },
                    jsonName: {
                      type: "string",
                      id: 10
                    },
                    options: {
                      type: "FieldOptions",
                      id: 8
                    }
                  },
                  nested: {
                    Type: {
                      values: {
                        TYPE_DOUBLE: 1,
                        TYPE_FLOAT: 2,
                        TYPE_INT64: 3,
                        TYPE_UINT64: 4,
                        TYPE_INT32: 5,
                        TYPE_FIXED64: 6,
                        TYPE_FIXED32: 7,
                        TYPE_BOOL: 8,
                        TYPE_STRING: 9,
                        TYPE_GROUP: 10,
                        TYPE_MESSAGE: 11,
                        TYPE_BYTES: 12,
                        TYPE_UINT32: 13,
                        TYPE_ENUM: 14,
                        TYPE_SFIXED32: 15,
                        TYPE_SFIXED64: 16,
                        TYPE_SINT32: 17,
                        TYPE_SINT64: 18
                      }
                    },
                    Label: {
                      values: {
                        LABEL_OPTIONAL: 1,
                        LABEL_REQUIRED: 2,
                        LABEL_REPEATED: 3
                      }
                    }
                  }
                },
                OneofDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    options: {
                      type: "OneofOptions",
                      id: 2
                    }
                  }
                },
                EnumDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    value: {
                      rule: "repeated",
                      type: "EnumValueDescriptorProto",
                      id: 2
                    },
                    options: {
                      type: "EnumOptions",
                      id: 3
                    }
                  }
                },
                EnumValueDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    number: {
                      type: "int32",
                      id: 2
                    },
                    options: {
                      type: "EnumValueOptions",
                      id: 3
                    }
                  }
                },
                ServiceDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    method: {
                      rule: "repeated",
                      type: "MethodDescriptorProto",
                      id: 2
                    },
                    options: {
                      type: "ServiceOptions",
                      id: 3
                    }
                  }
                },
                MethodDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    inputType: {
                      type: "string",
                      id: 2
                    },
                    outputType: {
                      type: "string",
                      id: 3
                    },
                    options: {
                      type: "MethodOptions",
                      id: 4
                    },
                    clientStreaming: {
                      type: "bool",
                      id: 5
                    },
                    serverStreaming: {
                      type: "bool",
                      id: 6
                    }
                  }
                },
                FileOptions: {
                  fields: {
                    javaPackage: {
                      type: "string",
                      id: 1
                    },
                    javaOuterClassname: {
                      type: "string",
                      id: 8
                    },
                    javaMultipleFiles: {
                      type: "bool",
                      id: 10
                    },
                    javaGenerateEqualsAndHash: {
                      type: "bool",
                      id: 20,
                      options: {
                        deprecated: true
                      }
                    },
                    javaStringCheckUtf8: {
                      type: "bool",
                      id: 27
                    },
                    optimizeFor: {
                      type: "OptimizeMode",
                      id: 9,
                      options: {
                        default: "SPEED"
                      }
                    },
                    goPackage: {
                      type: "string",
                      id: 11
                    },
                    ccGenericServices: {
                      type: "bool",
                      id: 16
                    },
                    javaGenericServices: {
                      type: "bool",
                      id: 17
                    },
                    pyGenericServices: {
                      type: "bool",
                      id: 18
                    },
                    deprecated: {
                      type: "bool",
                      id: 23
                    },
                    ccEnableArenas: {
                      type: "bool",
                      id: 31
                    },
                    objcClassPrefix: {
                      type: "string",
                      id: 36
                    },
                    csharpNamespace: {
                      type: "string",
                      id: 37
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ],
                  reserved: [
                    [
                      38,
                      38
                    ]
                  ],
                  nested: {
                    OptimizeMode: {
                      values: {
                        SPEED: 1,
                        CODE_SIZE: 2,
                        LITE_RUNTIME: 3
                      }
                    }
                  }
                },
                MessageOptions: {
                  fields: {
                    messageSetWireFormat: {
                      type: "bool",
                      id: 1
                    },
                    noStandardDescriptorAccessor: {
                      type: "bool",
                      id: 2
                    },
                    deprecated: {
                      type: "bool",
                      id: 3
                    },
                    mapEntry: {
                      type: "bool",
                      id: 7
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ],
                  reserved: [
                    [
                      8,
                      8
                    ]
                  ]
                },
                FieldOptions: {
                  fields: {
                    ctype: {
                      type: "CType",
                      id: 1,
                      options: {
                        default: "STRING"
                      }
                    },
                    packed: {
                      type: "bool",
                      id: 2
                    },
                    jstype: {
                      type: "JSType",
                      id: 6,
                      options: {
                        default: "JS_NORMAL"
                      }
                    },
                    lazy: {
                      type: "bool",
                      id: 5
                    },
                    deprecated: {
                      type: "bool",
                      id: 3
                    },
                    weak: {
                      type: "bool",
                      id: 10
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ],
                  reserved: [
                    [
                      4,
                      4
                    ]
                  ],
                  nested: {
                    CType: {
                      values: {
                        STRING: 0,
                        CORD: 1,
                        STRING_PIECE: 2
                      }
                    },
                    JSType: {
                      values: {
                        JS_NORMAL: 0,
                        JS_STRING: 1,
                        JS_NUMBER: 2
                      }
                    }
                  }
                },
                OneofOptions: {
                  fields: {
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ]
                },
                EnumOptions: {
                  fields: {
                    allowAlias: {
                      type: "bool",
                      id: 2
                    },
                    deprecated: {
                      type: "bool",
                      id: 3
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ]
                },
                EnumValueOptions: {
                  fields: {
                    deprecated: {
                      type: "bool",
                      id: 1
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ]
                },
                ServiceOptions: {
                  fields: {
                    deprecated: {
                      type: "bool",
                      id: 33
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ]
                },
                MethodOptions: {
                  fields: {
                    deprecated: {
                      type: "bool",
                      id: 33
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ]
                },
                UninterpretedOption: {
                  fields: {
                    name: {
                      rule: "repeated",
                      type: "NamePart",
                      id: 2
                    },
                    identifierValue: {
                      type: "string",
                      id: 3
                    },
                    positiveIntValue: {
                      type: "uint64",
                      id: 4
                    },
                    negativeIntValue: {
                      type: "int64",
                      id: 5
                    },
                    doubleValue: {
                      type: "double",
                      id: 6
                    },
                    stringValue: {
                      type: "bytes",
                      id: 7
                    },
                    aggregateValue: {
                      type: "string",
                      id: 8
                    }
                  },
                  nested: {
                    NamePart: {
                      fields: {
                        namePart: {
                          rule: "required",
                          type: "string",
                          id: 1
                        },
                        isExtension: {
                          rule: "required",
                          type: "bool",
                          id: 2
                        }
                      }
                    }
                  }
                },
                SourceCodeInfo: {
                  fields: {
                    location: {
                      rule: "repeated",
                      type: "Location",
                      id: 1
                    }
                  },
                  nested: {
                    Location: {
                      fields: {
                        path: {
                          rule: "repeated",
                          type: "int32",
                          id: 1
                        },
                        span: {
                          rule: "repeated",
                          type: "int32",
                          id: 2
                        },
                        leadingComments: {
                          type: "string",
                          id: 3
                        },
                        trailingComments: {
                          type: "string",
                          id: 4
                        },
                        leadingDetachedComments: {
                          rule: "repeated",
                          type: "string",
                          id: 6
                        }
                      }
                    }
                  }
                },
                GeneratedCodeInfo: {
                  fields: {
                    annotation: {
                      rule: "repeated",
                      type: "Annotation",
                      id: 1
                    }
                  },
                  nested: {
                    Annotation: {
                      fields: {
                        path: {
                          rule: "repeated",
                          type: "int32",
                          id: 1
                        },
                        sourceFile: {
                          type: "string",
                          id: 2
                        },
                        begin: {
                          type: "int32",
                          id: 3
                        },
                        end: {
                          type: "int32",
                          id: 4
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
  }
});

// node_modules/protobufjs/ext/descriptor/index.js
var require_descriptor2 = __commonJS({
  "node_modules/protobufjs/ext/descriptor/index.js"(exports2, module2) {
    init_shims();
    "use strict";
    var $protobuf = require_protobufjs();
    module2.exports = exports2 = $protobuf.descriptor = $protobuf.Root.fromJSON(require_descriptor()).lookup(".google.protobuf");
    var Namespace = $protobuf.Namespace;
    var Root2 = $protobuf.Root;
    var Enum = $protobuf.Enum;
    var Type = $protobuf.Type;
    var Field = $protobuf.Field;
    var MapField = $protobuf.MapField;
    var OneOf = $protobuf.OneOf;
    var Service = $protobuf.Service;
    var Method = $protobuf.Method;
    Root2.fromDescriptor = function fromDescriptor(descriptor) {
      if (typeof descriptor.length === "number")
        descriptor = exports2.FileDescriptorSet.decode(descriptor);
      var root = new Root2();
      if (descriptor.file) {
        var fileDescriptor, filePackage;
        for (var j = 0, i; j < descriptor.file.length; ++j) {
          filePackage = root;
          if ((fileDescriptor = descriptor.file[j])["package"] && fileDescriptor["package"].length)
            filePackage = root.define(fileDescriptor["package"]);
          if (fileDescriptor.name && fileDescriptor.name.length)
            root.files.push(filePackage.filename = fileDescriptor.name);
          if (fileDescriptor.messageType)
            for (i = 0; i < fileDescriptor.messageType.length; ++i)
              filePackage.add(Type.fromDescriptor(fileDescriptor.messageType[i], fileDescriptor.syntax));
          if (fileDescriptor.enumType)
            for (i = 0; i < fileDescriptor.enumType.length; ++i)
              filePackage.add(Enum.fromDescriptor(fileDescriptor.enumType[i]));
          if (fileDescriptor.extension)
            for (i = 0; i < fileDescriptor.extension.length; ++i)
              filePackage.add(Field.fromDescriptor(fileDescriptor.extension[i]));
          if (fileDescriptor.service)
            for (i = 0; i < fileDescriptor.service.length; ++i)
              filePackage.add(Service.fromDescriptor(fileDescriptor.service[i]));
          var opts = fromDescriptorOptions(fileDescriptor.options, exports2.FileOptions);
          if (opts) {
            var ks = Object.keys(opts);
            for (i = 0; i < ks.length; ++i)
              filePackage.setOption(ks[i], opts[ks[i]]);
          }
        }
      }
      return root;
    };
    Root2.prototype.toDescriptor = function toDescriptor(syntax) {
      var set = exports2.FileDescriptorSet.create();
      Root_toDescriptorRecursive(this, set.file, syntax);
      return set;
    };
    function Root_toDescriptorRecursive(ns, files, syntax) {
      var file = exports2.FileDescriptorProto.create({ name: ns.filename || (ns.fullName.substring(1).replace(/\./g, "_") || "root") + ".proto" });
      if (syntax)
        file.syntax = syntax;
      if (!(ns instanceof Root2))
        file["package"] = ns.fullName.substring(1);
      for (var i = 0, nested; i < ns.nestedArray.length; ++i)
        if ((nested = ns._nestedArray[i]) instanceof Type)
          file.messageType.push(nested.toDescriptor(syntax));
        else if (nested instanceof Enum)
          file.enumType.push(nested.toDescriptor());
        else if (nested instanceof Field)
          file.extension.push(nested.toDescriptor(syntax));
        else if (nested instanceof Service)
          file.service.push(nested.toDescriptor());
        else if (nested instanceof Namespace)
          Root_toDescriptorRecursive(nested, files, syntax);
      file.options = toDescriptorOptions(ns.options, exports2.FileOptions);
      if (file.messageType.length + file.enumType.length + file.extension.length + file.service.length)
        files.push(file);
    }
    var unnamedMessageIndex = 0;
    Type.fromDescriptor = function fromDescriptor(descriptor, syntax) {
      if (typeof descriptor.length === "number")
        descriptor = exports2.DescriptorProto.decode(descriptor);
      var type = new Type(descriptor.name.length ? descriptor.name : "Type" + unnamedMessageIndex++, fromDescriptorOptions(descriptor.options, exports2.MessageOptions)), i;
      if (descriptor.oneofDecl)
        for (i = 0; i < descriptor.oneofDecl.length; ++i)
          type.add(OneOf.fromDescriptor(descriptor.oneofDecl[i]));
      if (descriptor.field)
        for (i = 0; i < descriptor.field.length; ++i) {
          var field = Field.fromDescriptor(descriptor.field[i], syntax);
          type.add(field);
          if (descriptor.field[i].hasOwnProperty("oneofIndex"))
            type.oneofsArray[descriptor.field[i].oneofIndex].add(field);
        }
      if (descriptor.extension)
        for (i = 0; i < descriptor.extension.length; ++i)
          type.add(Field.fromDescriptor(descriptor.extension[i], syntax));
      if (descriptor.nestedType)
        for (i = 0; i < descriptor.nestedType.length; ++i) {
          type.add(Type.fromDescriptor(descriptor.nestedType[i], syntax));
          if (descriptor.nestedType[i].options && descriptor.nestedType[i].options.mapEntry)
            type.setOption("map_entry", true);
        }
      if (descriptor.enumType)
        for (i = 0; i < descriptor.enumType.length; ++i)
          type.add(Enum.fromDescriptor(descriptor.enumType[i]));
      if (descriptor.extensionRange && descriptor.extensionRange.length) {
        type.extensions = [];
        for (i = 0; i < descriptor.extensionRange.length; ++i)
          type.extensions.push([descriptor.extensionRange[i].start, descriptor.extensionRange[i].end]);
      }
      if (descriptor.reservedRange && descriptor.reservedRange.length || descriptor.reservedName && descriptor.reservedName.length) {
        type.reserved = [];
        if (descriptor.reservedRange)
          for (i = 0; i < descriptor.reservedRange.length; ++i)
            type.reserved.push([descriptor.reservedRange[i].start, descriptor.reservedRange[i].end]);
        if (descriptor.reservedName)
          for (i = 0; i < descriptor.reservedName.length; ++i)
            type.reserved.push(descriptor.reservedName[i]);
      }
      return type;
    };
    Type.prototype.toDescriptor = function toDescriptor(syntax) {
      var descriptor = exports2.DescriptorProto.create({ name: this.name }), i;
      for (i = 0; i < this.fieldsArray.length; ++i) {
        var fieldDescriptor;
        descriptor.field.push(fieldDescriptor = this._fieldsArray[i].toDescriptor(syntax));
        if (this._fieldsArray[i] instanceof MapField) {
          var keyType = toDescriptorType(this._fieldsArray[i].keyType, this._fieldsArray[i].resolvedKeyType), valueType = toDescriptorType(this._fieldsArray[i].type, this._fieldsArray[i].resolvedType), valueTypeName = valueType === 11 || valueType === 14 ? this._fieldsArray[i].resolvedType && shortname(this.parent, this._fieldsArray[i].resolvedType) || this._fieldsArray[i].type : void 0;
          descriptor.nestedType.push(exports2.DescriptorProto.create({
            name: fieldDescriptor.typeName,
            field: [
              exports2.FieldDescriptorProto.create({ name: "key", number: 1, label: 1, type: keyType }),
              exports2.FieldDescriptorProto.create({ name: "value", number: 2, label: 1, type: valueType, typeName: valueTypeName })
            ],
            options: exports2.MessageOptions.create({ mapEntry: true })
          }));
        }
      }
      for (i = 0; i < this.oneofsArray.length; ++i)
        descriptor.oneofDecl.push(this._oneofsArray[i].toDescriptor());
      for (i = 0; i < this.nestedArray.length; ++i) {
        if (this._nestedArray[i] instanceof Field)
          descriptor.field.push(this._nestedArray[i].toDescriptor(syntax));
        else if (this._nestedArray[i] instanceof Type)
          descriptor.nestedType.push(this._nestedArray[i].toDescriptor(syntax));
        else if (this._nestedArray[i] instanceof Enum)
          descriptor.enumType.push(this._nestedArray[i].toDescriptor());
      }
      if (this.extensions)
        for (i = 0; i < this.extensions.length; ++i)
          descriptor.extensionRange.push(exports2.DescriptorProto.ExtensionRange.create({ start: this.extensions[i][0], end: this.extensions[i][1] }));
      if (this.reserved)
        for (i = 0; i < this.reserved.length; ++i)
          if (typeof this.reserved[i] === "string")
            descriptor.reservedName.push(this.reserved[i]);
          else
            descriptor.reservedRange.push(exports2.DescriptorProto.ReservedRange.create({ start: this.reserved[i][0], end: this.reserved[i][1] }));
      descriptor.options = toDescriptorOptions(this.options, exports2.MessageOptions);
      return descriptor;
    };
    var numberRe = /^(?![eE])[0-9]*(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/;
    Field.fromDescriptor = function fromDescriptor(descriptor, syntax) {
      if (typeof descriptor.length === "number")
        descriptor = exports2.DescriptorProto.decode(descriptor);
      if (typeof descriptor.number !== "number")
        throw Error("missing field id");
      var fieldType;
      if (descriptor.typeName && descriptor.typeName.length)
        fieldType = descriptor.typeName;
      else
        fieldType = fromDescriptorType(descriptor.type);
      var fieldRule;
      switch (descriptor.label) {
        case 1:
          fieldRule = void 0;
          break;
        case 2:
          fieldRule = "required";
          break;
        case 3:
          fieldRule = "repeated";
          break;
        default:
          throw Error("illegal label: " + descriptor.label);
      }
      var extendee = descriptor.extendee;
      if (descriptor.extendee !== void 0) {
        extendee = extendee.length ? extendee : void 0;
      }
      var field = new Field(descriptor.name.length ? descriptor.name : "field" + descriptor.number, descriptor.number, fieldType, fieldRule, extendee);
      field.options = fromDescriptorOptions(descriptor.options, exports2.FieldOptions);
      if (descriptor.defaultValue && descriptor.defaultValue.length) {
        var defaultValue = descriptor.defaultValue;
        switch (defaultValue) {
          case "true":
          case "TRUE":
            defaultValue = true;
            break;
          case "false":
          case "FALSE":
            defaultValue = false;
            break;
          default:
            var match = numberRe.exec(defaultValue);
            if (match)
              defaultValue = parseInt(defaultValue);
            break;
        }
        field.setOption("default", defaultValue);
      }
      if (packableDescriptorType(descriptor.type)) {
        if (syntax === "proto3") {
          if (descriptor.options && !descriptor.options.packed)
            field.setOption("packed", false);
        } else if (!(descriptor.options && descriptor.options.packed))
          field.setOption("packed", false);
      }
      return field;
    };
    Field.prototype.toDescriptor = function toDescriptor(syntax) {
      var descriptor = exports2.FieldDescriptorProto.create({ name: this.name, number: this.id });
      if (this.map) {
        descriptor.type = 11;
        descriptor.typeName = $protobuf.util.ucFirst(this.name);
        descriptor.label = 3;
      } else {
        switch (descriptor.type = toDescriptorType(this.type, this.resolve().resolvedType)) {
          case 10:
          case 11:
          case 14:
            descriptor.typeName = this.resolvedType ? shortname(this.parent, this.resolvedType) : this.type;
            break;
        }
        switch (this.rule) {
          case "repeated":
            descriptor.label = 3;
            break;
          case "required":
            descriptor.label = 2;
            break;
          default:
            descriptor.label = 1;
            break;
        }
      }
      descriptor.extendee = this.extensionField ? this.extensionField.parent.fullName : this.extend;
      if (this.partOf) {
        if ((descriptor.oneofIndex = this.parent.oneofsArray.indexOf(this.partOf)) < 0)
          throw Error("missing oneof");
      }
      if (this.options) {
        descriptor.options = toDescriptorOptions(this.options, exports2.FieldOptions);
        if (this.options["default"] != null)
          descriptor.defaultValue = String(this.options["default"]);
      }
      if (syntax === "proto3") {
        if (!this.packed)
          (descriptor.options || (descriptor.options = exports2.FieldOptions.create())).packed = false;
      } else if (this.packed)
        (descriptor.options || (descriptor.options = exports2.FieldOptions.create())).packed = true;
      return descriptor;
    };
    var unnamedEnumIndex = 0;
    Enum.fromDescriptor = function fromDescriptor(descriptor) {
      if (typeof descriptor.length === "number")
        descriptor = exports2.EnumDescriptorProto.decode(descriptor);
      var values = {};
      if (descriptor.value)
        for (var i = 0; i < descriptor.value.length; ++i) {
          var name2 = descriptor.value[i].name, value = descriptor.value[i].number || 0;
          values[name2 && name2.length ? name2 : "NAME" + value] = value;
        }
      return new Enum(descriptor.name && descriptor.name.length ? descriptor.name : "Enum" + unnamedEnumIndex++, values, fromDescriptorOptions(descriptor.options, exports2.EnumOptions));
    };
    Enum.prototype.toDescriptor = function toDescriptor() {
      var values = [];
      for (var i = 0, ks = Object.keys(this.values); i < ks.length; ++i)
        values.push(exports2.EnumValueDescriptorProto.create({ name: ks[i], number: this.values[ks[i]] }));
      return exports2.EnumDescriptorProto.create({
        name: this.name,
        value: values,
        options: toDescriptorOptions(this.options, exports2.EnumOptions)
      });
    };
    var unnamedOneofIndex = 0;
    OneOf.fromDescriptor = function fromDescriptor(descriptor) {
      if (typeof descriptor.length === "number")
        descriptor = exports2.OneofDescriptorProto.decode(descriptor);
      return new OneOf(descriptor.name && descriptor.name.length ? descriptor.name : "oneof" + unnamedOneofIndex++);
    };
    OneOf.prototype.toDescriptor = function toDescriptor() {
      return exports2.OneofDescriptorProto.create({
        name: this.name
      });
    };
    var unnamedServiceIndex = 0;
    Service.fromDescriptor = function fromDescriptor(descriptor) {
      if (typeof descriptor.length === "number")
        descriptor = exports2.ServiceDescriptorProto.decode(descriptor);
      var service = new Service(descriptor.name && descriptor.name.length ? descriptor.name : "Service" + unnamedServiceIndex++, fromDescriptorOptions(descriptor.options, exports2.ServiceOptions));
      if (descriptor.method)
        for (var i = 0; i < descriptor.method.length; ++i)
          service.add(Method.fromDescriptor(descriptor.method[i]));
      return service;
    };
    Service.prototype.toDescriptor = function toDescriptor() {
      var methods = [];
      for (var i = 0; i < this.methodsArray.length; ++i)
        methods.push(this._methodsArray[i].toDescriptor());
      return exports2.ServiceDescriptorProto.create({
        name: this.name,
        method: methods,
        options: toDescriptorOptions(this.options, exports2.ServiceOptions)
      });
    };
    var unnamedMethodIndex = 0;
    Method.fromDescriptor = function fromDescriptor(descriptor) {
      if (typeof descriptor.length === "number")
        descriptor = exports2.MethodDescriptorProto.decode(descriptor);
      return new Method(descriptor.name && descriptor.name.length ? descriptor.name : "Method" + unnamedMethodIndex++, "rpc", descriptor.inputType, descriptor.outputType, Boolean(descriptor.clientStreaming), Boolean(descriptor.serverStreaming), fromDescriptorOptions(descriptor.options, exports2.MethodOptions));
    };
    Method.prototype.toDescriptor = function toDescriptor() {
      return exports2.MethodDescriptorProto.create({
        name: this.name,
        inputType: this.resolvedRequestType ? this.resolvedRequestType.fullName : this.requestType,
        outputType: this.resolvedResponseType ? this.resolvedResponseType.fullName : this.responseType,
        clientStreaming: this.requestStream,
        serverStreaming: this.responseStream,
        options: toDescriptorOptions(this.options, exports2.MethodOptions)
      });
    };
    function fromDescriptorType(type) {
      switch (type) {
        case 1:
          return "double";
        case 2:
          return "float";
        case 3:
          return "int64";
        case 4:
          return "uint64";
        case 5:
          return "int32";
        case 6:
          return "fixed64";
        case 7:
          return "fixed32";
        case 8:
          return "bool";
        case 9:
          return "string";
        case 12:
          return "bytes";
        case 13:
          return "uint32";
        case 15:
          return "sfixed32";
        case 16:
          return "sfixed64";
        case 17:
          return "sint32";
        case 18:
          return "sint64";
      }
      throw Error("illegal type: " + type);
    }
    function packableDescriptorType(type) {
      switch (type) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
          return true;
      }
      return false;
    }
    function toDescriptorType(type, resolvedType) {
      switch (type) {
        case "double":
          return 1;
        case "float":
          return 2;
        case "int64":
          return 3;
        case "uint64":
          return 4;
        case "int32":
          return 5;
        case "fixed64":
          return 6;
        case "fixed32":
          return 7;
        case "bool":
          return 8;
        case "string":
          return 9;
        case "bytes":
          return 12;
        case "uint32":
          return 13;
        case "sfixed32":
          return 15;
        case "sfixed64":
          return 16;
        case "sint32":
          return 17;
        case "sint64":
          return 18;
      }
      if (resolvedType instanceof Enum)
        return 14;
      if (resolvedType instanceof Type)
        return resolvedType.group ? 10 : 11;
      throw Error("illegal type: " + type);
    }
    function fromDescriptorOptions(options2, type) {
      if (!options2)
        return void 0;
      var out = [];
      for (var i = 0, field, key, val; i < type.fieldsArray.length; ++i)
        if ((key = (field = type._fieldsArray[i]).name) !== "uninterpretedOption") {
          if (options2.hasOwnProperty(key)) {
            val = options2[key];
            if (field.resolvedType instanceof Enum && typeof val === "number" && field.resolvedType.valuesById[val] !== void 0)
              val = field.resolvedType.valuesById[val];
            out.push(underScore(key), val);
          }
        }
      return out.length ? $protobuf.util.toObject(out) : void 0;
    }
    function toDescriptorOptions(options2, type) {
      if (!options2)
        return void 0;
      var out = [];
      for (var i = 0, ks = Object.keys(options2), key, val; i < ks.length; ++i) {
        val = options2[key = ks[i]];
        if (key === "default")
          continue;
        var field = type.fields[key];
        if (!field && !(field = type.fields[key = $protobuf.util.camelCase(key)]))
          continue;
        out.push(key, val);
      }
      return out.length ? type.fromObject($protobuf.util.toObject(out)) : void 0;
    }
    function shortname(from, to) {
      var fromPath = from.fullName.split("."), toPath = to.fullName.split("."), i = 0, j = 0, k = toPath.length - 1;
      if (!(from instanceof Root2) && to instanceof Namespace)
        while (i < fromPath.length && j < k && fromPath[i] === toPath[j]) {
          var other = to.lookup(fromPath[i++], true);
          if (other !== null && other !== to)
            break;
          ++j;
        }
      else
        for (; i < fromPath.length && j < k && fromPath[i] === toPath[j]; ++i, ++j)
          ;
      return toPath.slice(j).join(".");
    }
    function underScore(str) {
      return str.substring(0, 1) + str.substring(1).replace(/([A-Z])(?=[a-z]|$)/g, function($0, $1) {
        return "_" + $1.toLowerCase();
      });
    }
  }
});

// node_modules/lodash.camelcase/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.camelcase/index.js"(exports2, module2) {
    init_shims();
    var INFINITY = 1 / 0;
    var symbolTag = "[object Symbol]";
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f\\ufe20-\\ufe23";
    var rsComboSymbolsRange = "\\u20d0-\\u20f0";
    var rsDingbatRange = "\\u2700-\\u27bf";
    var rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff";
    var rsMathOpRange = "\\xac\\xb1\\xd7\\xf7";
    var rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf";
    var rsPunctuationRange = "\\u2000-\\u206f";
    var rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000";
    var rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde";
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    var rsApos = "['\u2019]";
    var rsAstral = "[" + rsAstralRange + "]";
    var rsBreak = "[" + rsBreakRange + "]";
    var rsCombo = "[" + rsComboMarksRange + rsComboSymbolsRange + "]";
    var rsDigits = "\\d+";
    var rsDingbat = "[" + rsDingbatRange + "]";
    var rsLower = "[" + rsLowerRange + "]";
    var rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]";
    var rsFitz = "\\ud83c[\\udffb-\\udfff]";
    var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
    var rsNonAstral = "[^" + rsAstralRange + "]";
    var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
    var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
    var rsUpper = "[" + rsUpperRange + "]";
    var rsZWJ = "\\u200d";
    var rsLowerMisc = "(?:" + rsLower + "|" + rsMisc + ")";
    var rsUpperMisc = "(?:" + rsUpper + "|" + rsMisc + ")";
    var rsOptLowerContr = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?";
    var rsOptUpperContr = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?";
    var reOptMod = rsModifier + "?";
    var rsOptVar = "[" + rsVarRange + "]?";
    var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
    var rsSeq = rsOptVar + reOptMod + rsOptJoin;
    var rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq;
    var rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
    var reApos = RegExp(rsApos, "g");
    var reComboMark = RegExp(rsCombo, "g");
    var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
    var reUnicodeWord = RegExp([
      rsUpper + "?" + rsLower + "+" + rsOptLowerContr + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
      rsUpperMisc + "+" + rsOptUpperContr + "(?=" + [rsBreak, rsUpper + rsLowerMisc, "$"].join("|") + ")",
      rsUpper + "?" + rsLowerMisc + "+" + rsOptLowerContr,
      rsUpper + "+" + rsOptUpperContr,
      rsDigits,
      rsEmoji
    ].join("|"), "g");
    var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + "]");
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    var deburredLetters = {
      "\xC0": "A",
      "\xC1": "A",
      "\xC2": "A",
      "\xC3": "A",
      "\xC4": "A",
      "\xC5": "A",
      "\xE0": "a",
      "\xE1": "a",
      "\xE2": "a",
      "\xE3": "a",
      "\xE4": "a",
      "\xE5": "a",
      "\xC7": "C",
      "\xE7": "c",
      "\xD0": "D",
      "\xF0": "d",
      "\xC8": "E",
      "\xC9": "E",
      "\xCA": "E",
      "\xCB": "E",
      "\xE8": "e",
      "\xE9": "e",
      "\xEA": "e",
      "\xEB": "e",
      "\xCC": "I",
      "\xCD": "I",
      "\xCE": "I",
      "\xCF": "I",
      "\xEC": "i",
      "\xED": "i",
      "\xEE": "i",
      "\xEF": "i",
      "\xD1": "N",
      "\xF1": "n",
      "\xD2": "O",
      "\xD3": "O",
      "\xD4": "O",
      "\xD5": "O",
      "\xD6": "O",
      "\xD8": "O",
      "\xF2": "o",
      "\xF3": "o",
      "\xF4": "o",
      "\xF5": "o",
      "\xF6": "o",
      "\xF8": "o",
      "\xD9": "U",
      "\xDA": "U",
      "\xDB": "U",
      "\xDC": "U",
      "\xF9": "u",
      "\xFA": "u",
      "\xFB": "u",
      "\xFC": "u",
      "\xDD": "Y",
      "\xFD": "y",
      "\xFF": "y",
      "\xC6": "Ae",
      "\xE6": "ae",
      "\xDE": "Th",
      "\xFE": "th",
      "\xDF": "ss",
      "\u0100": "A",
      "\u0102": "A",
      "\u0104": "A",
      "\u0101": "a",
      "\u0103": "a",
      "\u0105": "a",
      "\u0106": "C",
      "\u0108": "C",
      "\u010A": "C",
      "\u010C": "C",
      "\u0107": "c",
      "\u0109": "c",
      "\u010B": "c",
      "\u010D": "c",
      "\u010E": "D",
      "\u0110": "D",
      "\u010F": "d",
      "\u0111": "d",
      "\u0112": "E",
      "\u0114": "E",
      "\u0116": "E",
      "\u0118": "E",
      "\u011A": "E",
      "\u0113": "e",
      "\u0115": "e",
      "\u0117": "e",
      "\u0119": "e",
      "\u011B": "e",
      "\u011C": "G",
      "\u011E": "G",
      "\u0120": "G",
      "\u0122": "G",
      "\u011D": "g",
      "\u011F": "g",
      "\u0121": "g",
      "\u0123": "g",
      "\u0124": "H",
      "\u0126": "H",
      "\u0125": "h",
      "\u0127": "h",
      "\u0128": "I",
      "\u012A": "I",
      "\u012C": "I",
      "\u012E": "I",
      "\u0130": "I",
      "\u0129": "i",
      "\u012B": "i",
      "\u012D": "i",
      "\u012F": "i",
      "\u0131": "i",
      "\u0134": "J",
      "\u0135": "j",
      "\u0136": "K",
      "\u0137": "k",
      "\u0138": "k",
      "\u0139": "L",
      "\u013B": "L",
      "\u013D": "L",
      "\u013F": "L",
      "\u0141": "L",
      "\u013A": "l",
      "\u013C": "l",
      "\u013E": "l",
      "\u0140": "l",
      "\u0142": "l",
      "\u0143": "N",
      "\u0145": "N",
      "\u0147": "N",
      "\u014A": "N",
      "\u0144": "n",
      "\u0146": "n",
      "\u0148": "n",
      "\u014B": "n",
      "\u014C": "O",
      "\u014E": "O",
      "\u0150": "O",
      "\u014D": "o",
      "\u014F": "o",
      "\u0151": "o",
      "\u0154": "R",
      "\u0156": "R",
      "\u0158": "R",
      "\u0155": "r",
      "\u0157": "r",
      "\u0159": "r",
      "\u015A": "S",
      "\u015C": "S",
      "\u015E": "S",
      "\u0160": "S",
      "\u015B": "s",
      "\u015D": "s",
      "\u015F": "s",
      "\u0161": "s",
      "\u0162": "T",
      "\u0164": "T",
      "\u0166": "T",
      "\u0163": "t",
      "\u0165": "t",
      "\u0167": "t",
      "\u0168": "U",
      "\u016A": "U",
      "\u016C": "U",
      "\u016E": "U",
      "\u0170": "U",
      "\u0172": "U",
      "\u0169": "u",
      "\u016B": "u",
      "\u016D": "u",
      "\u016F": "u",
      "\u0171": "u",
      "\u0173": "u",
      "\u0174": "W",
      "\u0175": "w",
      "\u0176": "Y",
      "\u0177": "y",
      "\u0178": "Y",
      "\u0179": "Z",
      "\u017B": "Z",
      "\u017D": "Z",
      "\u017A": "z",
      "\u017C": "z",
      "\u017E": "z",
      "\u0132": "IJ",
      "\u0133": "ij",
      "\u0152": "Oe",
      "\u0153": "oe",
      "\u0149": "'n",
      "\u017F": "ss"
    };
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index2 = -1, length = array ? array.length : 0;
      if (initAccum && length) {
        accumulator = array[++index2];
      }
      while (++index2 < length) {
        accumulator = iteratee(accumulator, array[index2], index2, array);
      }
      return accumulator;
    }
    function asciiToArray(string) {
      return string.split("");
    }
    function asciiWords(string) {
      return string.match(reAsciiWord) || [];
    }
    function basePropertyOf(object) {
      return function(key) {
        return object == null ? void 0 : object[key];
      };
    }
    var deburrLetter = basePropertyOf(deburredLetters);
    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }
    function hasUnicodeWord(string) {
      return reHasUnicodeWord.test(string);
    }
    function stringToArray(string) {
      return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
    }
    function unicodeToArray(string) {
      return string.match(reUnicode) || [];
    }
    function unicodeWords(string) {
      return string.match(reUnicodeWord) || [];
    }
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var Symbol2 = root.Symbol;
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseSlice(array, start, end) {
      var index2 = -1, length = array.length;
      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : end - start >>> 0;
      start >>>= 0;
      var result = Array(length);
      while (++index2 < length) {
        result[index2] = array[index2 + start];
      }
      return result;
    }
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === void 0 ? length : end;
      return !start && end >= length ? array : baseSlice(array, start, end);
    }
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);
        var strSymbols = hasUnicode(string) ? stringToArray(string) : void 0;
        var chr = strSymbols ? strSymbols[0] : string.charAt(0);
        var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
        return chr[methodName]() + trailing;
      };
    }
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
      };
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toString(value) {
      return value == null ? "" : baseToString(value);
    }
    var camelCase = createCompounder(function(result, word, index2) {
      word = word.toLowerCase();
      return result + (index2 ? capitalize(word) : word);
    });
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
    }
    var upperFirst = createCaseFirst("toUpperCase");
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? void 0 : pattern;
      if (pattern === void 0) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }
    module2.exports = camelCase;
  }
});

// node_modules/protobufjs/google/protobuf/api.json
var require_api = __commonJS({
  "node_modules/protobufjs/google/protobuf/api.json"(exports2, module2) {
    module2.exports = {
      nested: {
        google: {
          nested: {
            protobuf: {
              nested: {
                Api: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    methods: {
                      rule: "repeated",
                      type: "Method",
                      id: 2
                    },
                    options: {
                      rule: "repeated",
                      type: "Option",
                      id: 3
                    },
                    version: {
                      type: "string",
                      id: 4
                    },
                    sourceContext: {
                      type: "SourceContext",
                      id: 5
                    },
                    mixins: {
                      rule: "repeated",
                      type: "Mixin",
                      id: 6
                    },
                    syntax: {
                      type: "Syntax",
                      id: 7
                    }
                  }
                },
                Method: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    requestTypeUrl: {
                      type: "string",
                      id: 2
                    },
                    requestStreaming: {
                      type: "bool",
                      id: 3
                    },
                    responseTypeUrl: {
                      type: "string",
                      id: 4
                    },
                    responseStreaming: {
                      type: "bool",
                      id: 5
                    },
                    options: {
                      rule: "repeated",
                      type: "Option",
                      id: 6
                    },
                    syntax: {
                      type: "Syntax",
                      id: 7
                    }
                  }
                },
                Mixin: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    root: {
                      type: "string",
                      id: 2
                    }
                  }
                },
                SourceContext: {
                  fields: {
                    fileName: {
                      type: "string",
                      id: 1
                    }
                  }
                },
                Option: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    value: {
                      type: "Any",
                      id: 2
                    }
                  }
                },
                Syntax: {
                  values: {
                    SYNTAX_PROTO2: 0,
                    SYNTAX_PROTO3: 1
                  }
                }
              }
            }
          }
        }
      }
    };
  }
});

// node_modules/protobufjs/google/protobuf/source_context.json
var require_source_context = __commonJS({
  "node_modules/protobufjs/google/protobuf/source_context.json"(exports2, module2) {
    module2.exports = {
      nested: {
        google: {
          nested: {
            protobuf: {
              nested: {
                SourceContext: {
                  fields: {
                    fileName: {
                      type: "string",
                      id: 1
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
  }
});

// node_modules/protobufjs/google/protobuf/type.json
var require_type2 = __commonJS({
  "node_modules/protobufjs/google/protobuf/type.json"(exports2, module2) {
    module2.exports = {
      nested: {
        google: {
          nested: {
            protobuf: {
              nested: {
                Type: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    fields: {
                      rule: "repeated",
                      type: "Field",
                      id: 2
                    },
                    oneofs: {
                      rule: "repeated",
                      type: "string",
                      id: 3
                    },
                    options: {
                      rule: "repeated",
                      type: "Option",
                      id: 4
                    },
                    sourceContext: {
                      type: "SourceContext",
                      id: 5
                    },
                    syntax: {
                      type: "Syntax",
                      id: 6
                    }
                  }
                },
                Field: {
                  fields: {
                    kind: {
                      type: "Kind",
                      id: 1
                    },
                    cardinality: {
                      type: "Cardinality",
                      id: 2
                    },
                    number: {
                      type: "int32",
                      id: 3
                    },
                    name: {
                      type: "string",
                      id: 4
                    },
                    typeUrl: {
                      type: "string",
                      id: 6
                    },
                    oneofIndex: {
                      type: "int32",
                      id: 7
                    },
                    packed: {
                      type: "bool",
                      id: 8
                    },
                    options: {
                      rule: "repeated",
                      type: "Option",
                      id: 9
                    },
                    jsonName: {
                      type: "string",
                      id: 10
                    },
                    defaultValue: {
                      type: "string",
                      id: 11
                    }
                  },
                  nested: {
                    Kind: {
                      values: {
                        TYPE_UNKNOWN: 0,
                        TYPE_DOUBLE: 1,
                        TYPE_FLOAT: 2,
                        TYPE_INT64: 3,
                        TYPE_UINT64: 4,
                        TYPE_INT32: 5,
                        TYPE_FIXED64: 6,
                        TYPE_FIXED32: 7,
                        TYPE_BOOL: 8,
                        TYPE_STRING: 9,
                        TYPE_GROUP: 10,
                        TYPE_MESSAGE: 11,
                        TYPE_BYTES: 12,
                        TYPE_UINT32: 13,
                        TYPE_ENUM: 14,
                        TYPE_SFIXED32: 15,
                        TYPE_SFIXED64: 16,
                        TYPE_SINT32: 17,
                        TYPE_SINT64: 18
                      }
                    },
                    Cardinality: {
                      values: {
                        CARDINALITY_UNKNOWN: 0,
                        CARDINALITY_OPTIONAL: 1,
                        CARDINALITY_REQUIRED: 2,
                        CARDINALITY_REPEATED: 3
                      }
                    }
                  }
                },
                Enum: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    enumvalue: {
                      rule: "repeated",
                      type: "EnumValue",
                      id: 2
                    },
                    options: {
                      rule: "repeated",
                      type: "Option",
                      id: 3
                    },
                    sourceContext: {
                      type: "SourceContext",
                      id: 4
                    },
                    syntax: {
                      type: "Syntax",
                      id: 5
                    }
                  }
                },
                EnumValue: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    number: {
                      type: "int32",
                      id: 2
                    },
                    options: {
                      rule: "repeated",
                      type: "Option",
                      id: 3
                    }
                  }
                },
                Option: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    value: {
                      type: "Any",
                      id: 2
                    }
                  }
                },
                Syntax: {
                  values: {
                    SYNTAX_PROTO2: 0,
                    SYNTAX_PROTO3: 1
                  }
                },
                Any: {
                  fields: {
                    type_url: {
                      type: "string",
                      id: 1
                    },
                    value: {
                      type: "bytes",
                      id: 2
                    }
                  }
                },
                SourceContext: {
                  fields: {
                    fileName: {
                      type: "string",
                      id: 1
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
  }
});

// node_modules/@grpc/proto-loader/build/src/index.js
var require_src2 = __commonJS({
  "node_modules/@grpc/proto-loader/build/src/index.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var fs = require("fs");
    var path = require("path");
    var Protobuf = require_protobufjs();
    var descriptor = require_descriptor2();
    var camelCase = require_lodash();
    var descriptorOptions = {
      longs: String,
      enums: String,
      bytes: String,
      defaults: true,
      oneofs: true,
      json: true
    };
    function joinName(baseName, name2) {
      if (baseName === "") {
        return name2;
      } else {
        return baseName + "." + name2;
      }
    }
    function isHandledReflectionObject(obj) {
      return obj instanceof Protobuf.Service || obj instanceof Protobuf.Type || obj instanceof Protobuf.Enum;
    }
    function isNamespaceBase(obj) {
      return obj instanceof Protobuf.Namespace || obj instanceof Protobuf.Root;
    }
    function getAllHandledReflectionObjects(obj, parentName) {
      const objName = joinName(parentName, obj.name);
      if (isHandledReflectionObject(obj)) {
        return [[objName, obj]];
      } else {
        if (isNamespaceBase(obj) && typeof obj.nested !== "undefined") {
          return Object.keys(obj.nested).map((name2) => {
            return getAllHandledReflectionObjects(obj.nested[name2], objName);
          }).reduce((accumulator, currentValue) => accumulator.concat(currentValue), []);
        }
      }
      return [];
    }
    function createDeserializer(cls, options2) {
      return function deserialize(argBuf) {
        return cls.toObject(cls.decode(argBuf), options2);
      };
    }
    function createSerializer(cls) {
      return function serialize(arg) {
        const message = cls.fromObject(arg);
        return cls.encode(message).finish();
      };
    }
    function createMethodDefinition(method, serviceName, options2, fileDescriptors) {
      const requestType = method.resolvedRequestType;
      const responseType = method.resolvedResponseType;
      return {
        path: "/" + serviceName + "/" + method.name,
        requestStream: !!method.requestStream,
        responseStream: !!method.responseStream,
        requestSerialize: createSerializer(requestType),
        requestDeserialize: createDeserializer(requestType, options2),
        responseSerialize: createSerializer(responseType),
        responseDeserialize: createDeserializer(responseType, options2),
        originalName: camelCase(method.name),
        requestType: createMessageDefinition(requestType, fileDescriptors),
        responseType: createMessageDefinition(responseType, fileDescriptors)
      };
    }
    function createServiceDefinition(service, name2, options2, fileDescriptors) {
      const def = {};
      for (const method of service.methodsArray) {
        def[method.name] = createMethodDefinition(method, name2, options2, fileDescriptors);
      }
      return def;
    }
    function createMessageDefinition(message, fileDescriptors) {
      const messageDescriptor = message.toDescriptor("proto3");
      return {
        format: "Protocol Buffer 3 DescriptorProto",
        type: messageDescriptor.$type.toObject(messageDescriptor, descriptorOptions),
        fileDescriptorProtos: fileDescriptors
      };
    }
    function createEnumDefinition(enumType, fileDescriptors) {
      const enumDescriptor = enumType.toDescriptor("proto3");
      return {
        format: "Protocol Buffer 3 EnumDescriptorProto",
        type: enumDescriptor.$type.toObject(enumDescriptor, descriptorOptions),
        fileDescriptorProtos: fileDescriptors
      };
    }
    function createDefinition(obj, name2, options2, fileDescriptors) {
      if (obj instanceof Protobuf.Service) {
        return createServiceDefinition(obj, name2, options2, fileDescriptors);
      } else if (obj instanceof Protobuf.Type) {
        return createMessageDefinition(obj, fileDescriptors);
      } else if (obj instanceof Protobuf.Enum) {
        return createEnumDefinition(obj, fileDescriptors);
      } else {
        throw new Error("Type mismatch in reflection object handling");
      }
    }
    function createPackageDefinition(root, options2) {
      const def = {};
      root.resolveAll();
      const descriptorList = root.toDescriptor("proto3").file;
      const bufferList = descriptorList.map((value) => Buffer.from(descriptor.FileDescriptorProto.encode(value).finish()));
      for (const [name2, obj] of getAllHandledReflectionObjects(root, "")) {
        def[name2] = createDefinition(obj, name2, options2, bufferList);
      }
      return def;
    }
    function addIncludePathResolver(root, includePaths) {
      const originalResolvePath = root.resolvePath;
      root.resolvePath = (origin, target) => {
        if (path.isAbsolute(target)) {
          return target;
        }
        for (const directory of includePaths) {
          const fullPath = path.join(directory, target);
          try {
            fs.accessSync(fullPath, fs.constants.R_OK);
            return fullPath;
          } catch (err) {
            continue;
          }
        }
        process.emitWarning(`${target} not found in any of the include paths ${includePaths}`);
        return originalResolvePath(origin, target);
      };
    }
    function createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options2) {
      options2 = options2 || {};
      const root = Protobuf.Root.fromDescriptor(decodedDescriptorSet);
      root.resolveAll();
      return createPackageDefinition(root, options2);
    }
    function load2(filename, options2) {
      const root = new Protobuf.Root();
      options2 = options2 || {};
      if (!!options2.includeDirs) {
        if (!Array.isArray(options2.includeDirs)) {
          return Promise.reject(new Error("The includeDirs option must be an array"));
        }
        addIncludePathResolver(root, options2.includeDirs);
      }
      return root.load(filename, options2).then((loadedRoot) => {
        loadedRoot.resolveAll();
        return createPackageDefinition(root, options2);
      });
    }
    exports2.load = load2;
    function loadSync(filename, options2) {
      const root = new Protobuf.Root();
      options2 = options2 || {};
      if (!!options2.includeDirs) {
        if (!Array.isArray(options2.includeDirs)) {
          throw new Error("The includeDirs option must be an array");
        }
        addIncludePathResolver(root, options2.includeDirs);
      }
      const loadedRoot = root.loadSync(filename, options2);
      loadedRoot.resolveAll();
      return createPackageDefinition(root, options2);
    }
    exports2.loadSync = loadSync;
    function loadFileDescriptorSetFromBuffer(descriptorSet, options2) {
      const decodedDescriptorSet = descriptor.FileDescriptorSet.decode(descriptorSet);
      return createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options2);
    }
    exports2.loadFileDescriptorSetFromBuffer = loadFileDescriptorSetFromBuffer;
    function loadFileDescriptorSetFromObject(descriptorSet, options2) {
      const decodedDescriptorSet = descriptor.FileDescriptorSet.fromObject(descriptorSet);
      return createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options2);
    }
    exports2.loadFileDescriptorSetFromObject = loadFileDescriptorSetFromObject;
    var apiDescriptor = require_api();
    var descriptorDescriptor = require_descriptor();
    var sourceContextDescriptor = require_source_context();
    var typeDescriptor = require_type2();
    Protobuf.common("api", apiDescriptor.nested.google.nested.protobuf.nested);
    Protobuf.common("descriptor", descriptorDescriptor.nested.google.nested.protobuf.nested);
    Protobuf.common("source_context", sourceContextDescriptor.nested.google.nested.protobuf.nested);
    Protobuf.common("type", typeDescriptor.nested.google.nested.protobuf.nested);
  }
});

// node_modules/@grpc/grpc-js/build/src/constants.js
var require_constants = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/constants.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH = exports2.DEFAULT_MAX_SEND_MESSAGE_LENGTH = exports2.Propagate = exports2.LogVerbosity = exports2.Status = void 0;
    var Status;
    (function(Status2) {
      Status2[Status2["OK"] = 0] = "OK";
      Status2[Status2["CANCELLED"] = 1] = "CANCELLED";
      Status2[Status2["UNKNOWN"] = 2] = "UNKNOWN";
      Status2[Status2["INVALID_ARGUMENT"] = 3] = "INVALID_ARGUMENT";
      Status2[Status2["DEADLINE_EXCEEDED"] = 4] = "DEADLINE_EXCEEDED";
      Status2[Status2["NOT_FOUND"] = 5] = "NOT_FOUND";
      Status2[Status2["ALREADY_EXISTS"] = 6] = "ALREADY_EXISTS";
      Status2[Status2["PERMISSION_DENIED"] = 7] = "PERMISSION_DENIED";
      Status2[Status2["RESOURCE_EXHAUSTED"] = 8] = "RESOURCE_EXHAUSTED";
      Status2[Status2["FAILED_PRECONDITION"] = 9] = "FAILED_PRECONDITION";
      Status2[Status2["ABORTED"] = 10] = "ABORTED";
      Status2[Status2["OUT_OF_RANGE"] = 11] = "OUT_OF_RANGE";
      Status2[Status2["UNIMPLEMENTED"] = 12] = "UNIMPLEMENTED";
      Status2[Status2["INTERNAL"] = 13] = "INTERNAL";
      Status2[Status2["UNAVAILABLE"] = 14] = "UNAVAILABLE";
      Status2[Status2["DATA_LOSS"] = 15] = "DATA_LOSS";
      Status2[Status2["UNAUTHENTICATED"] = 16] = "UNAUTHENTICATED";
    })(Status = exports2.Status || (exports2.Status = {}));
    var LogVerbosity;
    (function(LogVerbosity2) {
      LogVerbosity2[LogVerbosity2["DEBUG"] = 0] = "DEBUG";
      LogVerbosity2[LogVerbosity2["INFO"] = 1] = "INFO";
      LogVerbosity2[LogVerbosity2["ERROR"] = 2] = "ERROR";
      LogVerbosity2[LogVerbosity2["NONE"] = 3] = "NONE";
    })(LogVerbosity = exports2.LogVerbosity || (exports2.LogVerbosity = {}));
    var Propagate;
    (function(Propagate2) {
      Propagate2[Propagate2["DEADLINE"] = 1] = "DEADLINE";
      Propagate2[Propagate2["CENSUS_STATS_CONTEXT"] = 2] = "CENSUS_STATS_CONTEXT";
      Propagate2[Propagate2["CENSUS_TRACING_CONTEXT"] = 4] = "CENSUS_TRACING_CONTEXT";
      Propagate2[Propagate2["CANCELLATION"] = 8] = "CANCELLATION";
      Propagate2[Propagate2["DEFAULTS"] = 65535] = "DEFAULTS";
    })(Propagate = exports2.Propagate || (exports2.Propagate = {}));
    exports2.DEFAULT_MAX_SEND_MESSAGE_LENGTH = -1;
    exports2.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH = 4 * 1024 * 1024;
  }
});

// node_modules/@grpc/grpc-js/build/src/logging.js
var require_logging = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/logging.js"(exports2) {
    init_shims();
    "use strict";
    var _a;
    var _b;
    var _c;
    var _d;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.trace = exports2.log = exports2.setLoggerVerbosity = exports2.setLogger = exports2.getLogger = void 0;
    var constants_1 = require_constants();
    var _logger = console;
    var _logVerbosity = constants_1.LogVerbosity.ERROR;
    var verbosityString = (_b = (_a = process.env.GRPC_NODE_VERBOSITY) !== null && _a !== void 0 ? _a : process.env.GRPC_VERBOSITY) !== null && _b !== void 0 ? _b : "";
    switch (verbosityString.toUpperCase()) {
      case "DEBUG":
        _logVerbosity = constants_1.LogVerbosity.DEBUG;
        break;
      case "INFO":
        _logVerbosity = constants_1.LogVerbosity.INFO;
        break;
      case "ERROR":
        _logVerbosity = constants_1.LogVerbosity.ERROR;
        break;
      case "NONE":
        _logVerbosity = constants_1.LogVerbosity.NONE;
        break;
      default:
    }
    exports2.getLogger = () => {
      return _logger;
    };
    exports2.setLogger = (logger) => {
      _logger = logger;
    };
    exports2.setLoggerVerbosity = (verbosity) => {
      _logVerbosity = verbosity;
    };
    exports2.log = (severity, ...args) => {
      if (severity >= _logVerbosity && typeof _logger.error === "function") {
        _logger.error(...args);
      }
    };
    var tracersString = (_d = (_c = process.env.GRPC_NODE_TRACE) !== null && _c !== void 0 ? _c : process.env.GRPC_TRACE) !== null && _d !== void 0 ? _d : "";
    var enabledTracers = new Set();
    var disabledTracers = new Set();
    for (const tracerName of tracersString.split(",")) {
      if (tracerName.startsWith("-")) {
        disabledTracers.add(tracerName.substring(1));
      } else {
        enabledTracers.add(tracerName);
      }
    }
    var allEnabled = enabledTracers.has("all");
    function trace(severity, tracer, text) {
      if (!disabledTracers.has(tracer) && (allEnabled || enabledTracers.has(tracer))) {
        exports2.log(severity, new Date().toISOString() + " | " + tracer + " | " + text);
      }
    }
    exports2.trace = trace;
  }
});

// node_modules/@grpc/grpc-js/build/src/metadata.js
var require_metadata = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/metadata.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Metadata = void 0;
    var logging_1 = require_logging();
    var constants_1 = require_constants();
    var LEGAL_KEY_REGEX = /^[0-9a-z_.-]+$/;
    var LEGAL_NON_BINARY_VALUE_REGEX = /^[ -~]*$/;
    function isLegalKey(key) {
      return LEGAL_KEY_REGEX.test(key);
    }
    function isLegalNonBinaryValue(value) {
      return LEGAL_NON_BINARY_VALUE_REGEX.test(value);
    }
    function isBinaryKey(key) {
      return key.endsWith("-bin");
    }
    function isCustomMetadata(key) {
      return !key.startsWith("grpc-");
    }
    function normalizeKey(key) {
      return key.toLowerCase();
    }
    function validate(key, value) {
      if (!isLegalKey(key)) {
        throw new Error('Metadata key "' + key + '" contains illegal characters');
      }
      if (value !== null && value !== void 0) {
        if (isBinaryKey(key)) {
          if (!(value instanceof Buffer)) {
            throw new Error("keys that end with '-bin' must have Buffer values");
          }
        } else {
          if (value instanceof Buffer) {
            throw new Error("keys that don't end with '-bin' must have String values");
          }
          if (!isLegalNonBinaryValue(value)) {
            throw new Error('Metadata string value "' + value + '" contains illegal characters');
          }
        }
      }
    }
    var Metadata = class {
      constructor(options2) {
        this.internalRepr = new Map();
        if (options2 === void 0) {
          this.options = {};
        } else {
          this.options = options2;
        }
      }
      set(key, value) {
        key = normalizeKey(key);
        validate(key, value);
        this.internalRepr.set(key, [value]);
      }
      add(key, value) {
        key = normalizeKey(key);
        validate(key, value);
        const existingValue = this.internalRepr.get(key);
        if (existingValue === void 0) {
          this.internalRepr.set(key, [value]);
        } else {
          existingValue.push(value);
        }
      }
      remove(key) {
        key = normalizeKey(key);
        validate(key);
        this.internalRepr.delete(key);
      }
      get(key) {
        key = normalizeKey(key);
        validate(key);
        return this.internalRepr.get(key) || [];
      }
      getMap() {
        const result = {};
        this.internalRepr.forEach((values, key) => {
          if (values.length > 0) {
            const v = values[0];
            result[key] = v instanceof Buffer ? v.slice() : v;
          }
        });
        return result;
      }
      clone() {
        const newMetadata = new Metadata(this.options);
        const newInternalRepr = newMetadata.internalRepr;
        this.internalRepr.forEach((value, key) => {
          const clonedValue = value.map((v) => {
            if (v instanceof Buffer) {
              return Buffer.from(v);
            } else {
              return v;
            }
          });
          newInternalRepr.set(key, clonedValue);
        });
        return newMetadata;
      }
      merge(other) {
        other.internalRepr.forEach((values, key) => {
          const mergedValue = (this.internalRepr.get(key) || []).concat(values);
          this.internalRepr.set(key, mergedValue);
        });
      }
      setOptions(options2) {
        this.options = options2;
      }
      getOptions() {
        return this.options;
      }
      toHttp2Headers() {
        const result = {};
        this.internalRepr.forEach((values, key) => {
          result[key] = values.map((value) => {
            if (value instanceof Buffer) {
              return value.toString("base64");
            } else {
              return value;
            }
          });
        });
        return result;
      }
      _getCoreRepresentation() {
        return this.internalRepr;
      }
      static fromHttp2Headers(headers) {
        const result = new Metadata();
        Object.keys(headers).forEach((key) => {
          if (key.charAt(0) === ":") {
            return;
          }
          const values = headers[key];
          try {
            if (isBinaryKey(key)) {
              if (Array.isArray(values)) {
                values.forEach((value) => {
                  result.add(key, Buffer.from(value, "base64"));
                });
              } else if (values !== void 0) {
                if (isCustomMetadata(key)) {
                  values.split(",").forEach((v) => {
                    result.add(key, Buffer.from(v.trim(), "base64"));
                  });
                } else {
                  result.add(key, Buffer.from(values, "base64"));
                }
              }
            } else {
              if (Array.isArray(values)) {
                values.forEach((value) => {
                  result.add(key, value);
                });
              } else if (values !== void 0) {
                result.add(key, values);
              }
            }
          } catch (error2) {
            const message = `Failed to add metadata entry ${key}: ${values}. ${error2.message}. For more information see https://github.com/grpc/grpc-node/issues/1173`;
            logging_1.log(constants_1.LogVerbosity.ERROR, message);
          }
        });
        return result;
      }
    };
    exports2.Metadata = Metadata;
  }
});

// node_modules/@grpc/grpc-js/build/src/call-credentials.js
var require_call_credentials = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/call-credentials.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CallCredentials = void 0;
    var metadata_1 = require_metadata();
    function isCurrentOauth2Client(client) {
      return "getRequestHeaders" in client && typeof client.getRequestHeaders === "function";
    }
    var CallCredentials = class {
      static createFromMetadataGenerator(metadataGenerator) {
        return new SingleCallCredentials(metadataGenerator);
      }
      static createFromGoogleCredential(googleCredentials) {
        return CallCredentials.createFromMetadataGenerator((options2, callback) => {
          let getHeaders;
          if (isCurrentOauth2Client(googleCredentials)) {
            getHeaders = googleCredentials.getRequestHeaders(options2.service_url);
          } else {
            getHeaders = new Promise((resolve2, reject) => {
              googleCredentials.getRequestMetadata(options2.service_url, (err, headers) => {
                if (err) {
                  reject(err);
                  return;
                }
                resolve2(headers);
              });
            });
          }
          getHeaders.then((headers) => {
            const metadata = new metadata_1.Metadata();
            for (const key of Object.keys(headers)) {
              metadata.add(key, headers[key]);
            }
            callback(null, metadata);
          }, (err) => {
            callback(err);
          });
        });
      }
      static createEmpty() {
        return new EmptyCallCredentials();
      }
    };
    exports2.CallCredentials = CallCredentials;
    var ComposedCallCredentials = class extends CallCredentials {
      constructor(creds) {
        super();
        this.creds = creds;
      }
      async generateMetadata(options2) {
        const base2 = new metadata_1.Metadata();
        const generated = await Promise.all(this.creds.map((cred) => cred.generateMetadata(options2)));
        for (const gen of generated) {
          base2.merge(gen);
        }
        return base2;
      }
      compose(other) {
        return new ComposedCallCredentials(this.creds.concat([other]));
      }
      _equals(other) {
        if (this === other) {
          return true;
        }
        if (other instanceof ComposedCallCredentials) {
          return this.creds.every((value, index2) => value._equals(other.creds[index2]));
        } else {
          return false;
        }
      }
    };
    var SingleCallCredentials = class extends CallCredentials {
      constructor(metadataGenerator) {
        super();
        this.metadataGenerator = metadataGenerator;
      }
      generateMetadata(options2) {
        return new Promise((resolve2, reject) => {
          this.metadataGenerator(options2, (err, metadata) => {
            if (metadata !== void 0) {
              resolve2(metadata);
            } else {
              reject(err);
            }
          });
        });
      }
      compose(other) {
        return new ComposedCallCredentials([this, other]);
      }
      _equals(other) {
        if (this === other) {
          return true;
        }
        if (other instanceof SingleCallCredentials) {
          return this.metadataGenerator === other.metadataGenerator;
        } else {
          return false;
        }
      }
    };
    var EmptyCallCredentials = class extends CallCredentials {
      generateMetadata(options2) {
        return Promise.resolve(new metadata_1.Metadata());
      }
      compose(other) {
        return other;
      }
      _equals(other) {
        return other instanceof EmptyCallCredentials;
      }
    };
  }
});

// node_modules/@grpc/grpc-js/build/src/filter-stack.js
var require_filter_stack = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/filter-stack.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FilterStackFactory = exports2.FilterStack = void 0;
    var FilterStack = class {
      constructor(filters) {
        this.filters = filters;
      }
      sendMetadata(metadata) {
        let result = metadata;
        for (let i = 0; i < this.filters.length; i++) {
          result = this.filters[i].sendMetadata(result);
        }
        return result;
      }
      receiveMetadata(metadata) {
        let result = metadata;
        for (let i = this.filters.length - 1; i >= 0; i--) {
          result = this.filters[i].receiveMetadata(result);
        }
        return result;
      }
      sendMessage(message) {
        let result = message;
        for (let i = 0; i < this.filters.length; i++) {
          result = this.filters[i].sendMessage(result);
        }
        return result;
      }
      receiveMessage(message) {
        let result = message;
        for (let i = this.filters.length - 1; i >= 0; i--) {
          result = this.filters[i].receiveMessage(result);
        }
        return result;
      }
      receiveTrailers(status) {
        let result = status;
        for (let i = this.filters.length - 1; i >= 0; i--) {
          result = this.filters[i].receiveTrailers(result);
        }
        return result;
      }
    };
    exports2.FilterStack = FilterStack;
    var FilterStackFactory = class {
      constructor(factories) {
        this.factories = factories;
      }
      createFilter(callStream) {
        return new FilterStack(this.factories.map((factory) => factory.createFilter(callStream)));
      }
    };
    exports2.FilterStackFactory = FilterStackFactory;
  }
});

// node_modules/@grpc/grpc-js/build/src/stream-decoder.js
var require_stream_decoder = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/stream-decoder.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StreamDecoder = void 0;
    var ReadState;
    (function(ReadState2) {
      ReadState2[ReadState2["NO_DATA"] = 0] = "NO_DATA";
      ReadState2[ReadState2["READING_SIZE"] = 1] = "READING_SIZE";
      ReadState2[ReadState2["READING_MESSAGE"] = 2] = "READING_MESSAGE";
    })(ReadState || (ReadState = {}));
    var StreamDecoder = class {
      constructor() {
        this.readState = ReadState.NO_DATA;
        this.readCompressFlag = Buffer.alloc(1);
        this.readPartialSize = Buffer.alloc(4);
        this.readSizeRemaining = 4;
        this.readMessageSize = 0;
        this.readPartialMessage = [];
        this.readMessageRemaining = 0;
      }
      write(data) {
        let readHead = 0;
        let toRead;
        const result = [];
        while (readHead < data.length) {
          switch (this.readState) {
            case ReadState.NO_DATA:
              this.readCompressFlag = data.slice(readHead, readHead + 1);
              readHead += 1;
              this.readState = ReadState.READING_SIZE;
              this.readPartialSize.fill(0);
              this.readSizeRemaining = 4;
              this.readMessageSize = 0;
              this.readMessageRemaining = 0;
              this.readPartialMessage = [];
              break;
            case ReadState.READING_SIZE:
              toRead = Math.min(data.length - readHead, this.readSizeRemaining);
              data.copy(this.readPartialSize, 4 - this.readSizeRemaining, readHead, readHead + toRead);
              this.readSizeRemaining -= toRead;
              readHead += toRead;
              if (this.readSizeRemaining === 0) {
                this.readMessageSize = this.readPartialSize.readUInt32BE(0);
                this.readMessageRemaining = this.readMessageSize;
                if (this.readMessageRemaining > 0) {
                  this.readState = ReadState.READING_MESSAGE;
                } else {
                  const message = Buffer.concat([this.readCompressFlag, this.readPartialSize], 5);
                  this.readState = ReadState.NO_DATA;
                  result.push(message);
                }
              }
              break;
            case ReadState.READING_MESSAGE:
              toRead = Math.min(data.length - readHead, this.readMessageRemaining);
              this.readPartialMessage.push(data.slice(readHead, readHead + toRead));
              this.readMessageRemaining -= toRead;
              readHead += toRead;
              if (this.readMessageRemaining === 0) {
                const framedMessageBuffers = [
                  this.readCompressFlag,
                  this.readPartialSize
                ].concat(this.readPartialMessage);
                const framedMessage = Buffer.concat(framedMessageBuffers, this.readMessageSize + 5);
                this.readState = ReadState.NO_DATA;
                result.push(framedMessage);
              }
              break;
            default:
              throw new Error("Unexpected read state");
          }
        }
        return result;
      }
    };
    exports2.StreamDecoder = StreamDecoder;
  }
});

// node_modules/@grpc/grpc-js/build/src/call-stream.js
var require_call_stream = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/call-stream.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Http2CallStream = exports2.InterceptingListenerImpl = exports2.isInterceptingListener = void 0;
    var http2 = require("http2");
    var os = require("os");
    var constants_1 = require_constants();
    var filter_stack_1 = require_filter_stack();
    var metadata_1 = require_metadata();
    var stream_decoder_1 = require_stream_decoder();
    var logging = require_logging();
    var constants_2 = require_constants();
    var TRACER_NAME = "call_stream";
    var { HTTP2_HEADER_STATUS, HTTP2_HEADER_CONTENT_TYPE, NGHTTP2_CANCEL } = http2.constants;
    function getSystemErrorName(errno) {
      for (const [name2, num] of Object.entries(os.constants.errno)) {
        if (num === errno) {
          return name2;
        }
      }
      return "Unknown system error " + errno;
    }
    function isInterceptingListener(listener) {
      return listener.onReceiveMetadata !== void 0 && listener.onReceiveMetadata.length === 1;
    }
    exports2.isInterceptingListener = isInterceptingListener;
    var InterceptingListenerImpl = class {
      constructor(listener, nextListener) {
        this.listener = listener;
        this.nextListener = nextListener;
        this.processingMessage = false;
        this.pendingStatus = null;
      }
      onReceiveMetadata(metadata) {
        this.listener.onReceiveMetadata(metadata, (metadata2) => {
          this.nextListener.onReceiveMetadata(metadata2);
        });
      }
      onReceiveMessage(message) {
        this.processingMessage = true;
        this.listener.onReceiveMessage(message, (msg) => {
          this.processingMessage = false;
          this.nextListener.onReceiveMessage(msg);
          if (this.pendingStatus) {
            this.nextListener.onReceiveStatus(this.pendingStatus);
          }
        });
      }
      onReceiveStatus(status) {
        this.listener.onReceiveStatus(status, (processedStatus) => {
          if (this.processingMessage) {
            this.pendingStatus = processedStatus;
          } else {
            this.nextListener.onReceiveStatus(processedStatus);
          }
        });
      }
    };
    exports2.InterceptingListenerImpl = InterceptingListenerImpl;
    var Http2CallStream = class {
      constructor(methodName, channel, options2, filterStackFactory, channelCallCredentials, callNumber) {
        this.methodName = methodName;
        this.channel = channel;
        this.options = options2;
        this.channelCallCredentials = channelCallCredentials;
        this.callNumber = callNumber;
        this.http2Stream = null;
        this.pendingRead = false;
        this.isWriteFilterPending = false;
        this.pendingWrite = null;
        this.pendingWriteCallback = null;
        this.writesClosed = false;
        this.decoder = new stream_decoder_1.StreamDecoder();
        this.isReadFilterPending = false;
        this.canPush = false;
        this.readsClosed = false;
        this.statusOutput = false;
        this.unpushedReadMessages = [];
        this.unfilteredReadMessages = [];
        this.mappedStatusCode = constants_1.Status.UNKNOWN;
        this.finalStatus = null;
        this.subchannel = null;
        this.listener = null;
        this.internalError = null;
        this.filterStack = filterStackFactory.createFilter(this);
        this.credentials = channelCallCredentials;
        this.disconnectListener = () => {
          this.endCall({
            code: constants_1.Status.UNAVAILABLE,
            details: "Connection dropped",
            metadata: new metadata_1.Metadata()
          });
        };
        if (this.options.parentCall && this.options.flags & constants_1.Propagate.CANCELLATION) {
          this.options.parentCall.on("cancelled", () => {
            this.cancelWithStatus(constants_1.Status.CANCELLED, "Cancelled by parent call");
          });
        }
      }
      outputStatus() {
        if (!this.statusOutput) {
          this.statusOutput = true;
          const filteredStatus = this.filterStack.receiveTrailers(this.finalStatus);
          process.nextTick(() => {
            var _a;
            (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveStatus(filteredStatus);
          });
          if (this.subchannel) {
            this.subchannel.callUnref();
            this.subchannel.removeDisconnectListener(this.disconnectListener);
          }
        }
      }
      trace(text) {
        logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, "[" + this.callNumber + "] " + text);
      }
      endCall(status) {
        if (this.finalStatus === null || this.finalStatus.code === constants_1.Status.OK) {
          this.trace("ended with status: code=" + status.code + ' details="' + status.details + '"');
          this.finalStatus = status;
          this.maybeOutputStatus();
        }
        this.destroyHttp2Stream();
      }
      maybeOutputStatus() {
        if (this.finalStatus !== null) {
          if (this.finalStatus.code !== constants_1.Status.OK || this.readsClosed && this.unpushedReadMessages.length === 0 && this.unfilteredReadMessages.length === 0 && !this.isReadFilterPending) {
            this.outputStatus();
          }
        }
      }
      push(message) {
        this.trace("pushing to reader message of length " + (message instanceof Buffer ? message.length : null));
        this.canPush = false;
        process.nextTick(() => {
          var _a;
          if (this.statusOutput) {
            return;
          }
          (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveMessage(message);
          this.maybeOutputStatus();
        });
      }
      handleFilterError(error2) {
        this.cancelWithStatus(constants_1.Status.INTERNAL, error2.message);
      }
      handleFilteredRead(message) {
        if (this.finalStatus !== null && this.finalStatus.code !== constants_1.Status.OK) {
          this.maybeOutputStatus();
          return;
        }
        this.isReadFilterPending = false;
        if (this.canPush) {
          this.http2Stream.pause();
          this.push(message);
        } else {
          this.trace("unpushedReadMessages.push message of length " + message.length);
          this.unpushedReadMessages.push(message);
        }
        if (this.unfilteredReadMessages.length > 0) {
          const nextMessage = this.unfilteredReadMessages.shift();
          this.filterReceivedMessage(nextMessage);
        }
      }
      filterReceivedMessage(framedMessage) {
        if (this.finalStatus !== null && this.finalStatus.code !== constants_1.Status.OK) {
          this.maybeOutputStatus();
          return;
        }
        this.trace("filterReceivedMessage of length " + framedMessage.length);
        this.isReadFilterPending = true;
        this.filterStack.receiveMessage(Promise.resolve(framedMessage)).then(this.handleFilteredRead.bind(this), this.handleFilterError.bind(this));
      }
      tryPush(messageBytes) {
        if (this.isReadFilterPending) {
          this.trace("unfilteredReadMessages.push message of length " + (messageBytes && messageBytes.length));
          this.unfilteredReadMessages.push(messageBytes);
        } else {
          this.filterReceivedMessage(messageBytes);
        }
      }
      handleTrailers(headers) {
        let headersString = "";
        for (const header of Object.keys(headers)) {
          headersString += "		" + header + ": " + headers[header] + "\n";
        }
        this.trace("Received server trailers:\n" + headersString);
        let metadata;
        try {
          metadata = metadata_1.Metadata.fromHttp2Headers(headers);
        } catch (e) {
          metadata = new metadata_1.Metadata();
        }
        const metadataMap = metadata.getMap();
        let code = this.mappedStatusCode;
        if (code === constants_1.Status.UNKNOWN && typeof metadataMap["grpc-status"] === "string") {
          const receivedStatus = Number(metadataMap["grpc-status"]);
          if (receivedStatus in constants_1.Status) {
            code = receivedStatus;
            this.trace("received status code " + receivedStatus + " from server");
          }
          metadata.remove("grpc-status");
        }
        let details = "";
        if (typeof metadataMap["grpc-message"] === "string") {
          details = decodeURI(metadataMap["grpc-message"]);
          metadata.remove("grpc-message");
          this.trace('received status details string "' + details + '" from server');
        }
        const status = { code, details, metadata };
        this.endCall(status);
      }
      attachHttp2Stream(stream, subchannel, extraFilterFactory) {
        if (extraFilterFactory !== void 0) {
          this.filterStack = new filter_stack_1.FilterStack([
            this.filterStack,
            extraFilterFactory.createFilter(this)
          ]);
        }
        if (this.finalStatus !== null) {
          stream.close(NGHTTP2_CANCEL);
        } else {
          this.trace("attachHttp2Stream from subchannel " + subchannel.getAddress());
          this.http2Stream = stream;
          this.subchannel = subchannel;
          subchannel.addDisconnectListener(this.disconnectListener);
          subchannel.callRef();
          stream.on("response", (headers, flags) => {
            var _a;
            let headersString = "";
            for (const header of Object.keys(headers)) {
              headersString += "		" + header + ": " + headers[header] + "\n";
            }
            this.trace("Received server headers:\n" + headersString);
            switch (headers[":status"]) {
              case 400:
                this.mappedStatusCode = constants_1.Status.INTERNAL;
                break;
              case 401:
                this.mappedStatusCode = constants_1.Status.UNAUTHENTICATED;
                break;
              case 403:
                this.mappedStatusCode = constants_1.Status.PERMISSION_DENIED;
                break;
              case 404:
                this.mappedStatusCode = constants_1.Status.UNIMPLEMENTED;
                break;
              case 429:
              case 502:
              case 503:
              case 504:
                this.mappedStatusCode = constants_1.Status.UNAVAILABLE;
                break;
              default:
                this.mappedStatusCode = constants_1.Status.UNKNOWN;
            }
            if (flags & http2.constants.NGHTTP2_FLAG_END_STREAM) {
              this.handleTrailers(headers);
            } else {
              let metadata;
              try {
                metadata = metadata_1.Metadata.fromHttp2Headers(headers);
              } catch (error2) {
                this.endCall({
                  code: constants_1.Status.UNKNOWN,
                  details: error2.message,
                  metadata: new metadata_1.Metadata()
                });
                return;
              }
              try {
                const finalMetadata = this.filterStack.receiveMetadata(metadata);
                (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveMetadata(finalMetadata);
              } catch (error2) {
                this.endCall({
                  code: constants_1.Status.UNKNOWN,
                  details: error2.message,
                  metadata: new metadata_1.Metadata()
                });
              }
            }
          });
          stream.on("trailers", this.handleTrailers.bind(this));
          stream.on("data", (data) => {
            this.trace("receive HTTP/2 data frame of length " + data.length);
            const messages = this.decoder.write(data);
            for (const message of messages) {
              this.trace("parsed message of length " + message.length);
              this.tryPush(message);
            }
          });
          stream.on("end", () => {
            this.readsClosed = true;
            this.maybeOutputStatus();
          });
          stream.on("close", () => {
            process.nextTick(() => {
              var _a;
              this.trace("HTTP/2 stream closed with code " + stream.rstCode);
              if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1.Status.OK) {
                return;
              }
              let code;
              let details = "";
              switch (stream.rstCode) {
                case http2.constants.NGHTTP2_NO_ERROR:
                  if (this.finalStatus !== null) {
                    return;
                  }
                  code = constants_1.Status.INTERNAL;
                  details = `Received RST_STREAM with code ${stream.rstCode}`;
                  break;
                case http2.constants.NGHTTP2_REFUSED_STREAM:
                  code = constants_1.Status.UNAVAILABLE;
                  details = "Stream refused by server";
                  break;
                case http2.constants.NGHTTP2_CANCEL:
                  code = constants_1.Status.CANCELLED;
                  details = "Call cancelled";
                  break;
                case http2.constants.NGHTTP2_ENHANCE_YOUR_CALM:
                  code = constants_1.Status.RESOURCE_EXHAUSTED;
                  details = "Bandwidth exhausted";
                  break;
                case http2.constants.NGHTTP2_INADEQUATE_SECURITY:
                  code = constants_1.Status.PERMISSION_DENIED;
                  details = "Protocol not secure enough";
                  break;
                case http2.constants.NGHTTP2_INTERNAL_ERROR:
                  code = constants_1.Status.INTERNAL;
                  if (this.internalError === null) {
                    details = `Received RST_STREAM with code ${stream.rstCode} (Internal server error)`;
                  } else {
                    if (this.internalError.code === "ECONNRESET") {
                      code = constants_1.Status.UNAVAILABLE;
                      details = this.internalError.message;
                    } else {
                      details = `Received RST_STREAM with code ${stream.rstCode} triggered by internal client error: ${this.internalError.message}`;
                    }
                  }
                  break;
                default:
                  code = constants_1.Status.INTERNAL;
                  details = `Received RST_STREAM with code ${stream.rstCode}`;
              }
              this.endCall({ code, details, metadata: new metadata_1.Metadata() });
            });
          });
          stream.on("error", (err) => {
            if (err.code !== "ERR_HTTP2_STREAM_ERROR") {
              this.trace("Node error event: message=" + err.message + " code=" + err.code + " errno=" + getSystemErrorName(err.errno) + " syscall=" + err.syscall);
              this.internalError = err;
            }
          });
          if (!this.pendingRead) {
            stream.pause();
          }
          if (this.pendingWrite) {
            if (!this.pendingWriteCallback) {
              throw new Error("Invalid state in write handling code");
            }
            this.trace("sending data chunk of length " + this.pendingWrite.length + " (deferred)");
            try {
              stream.write(this.pendingWrite, this.pendingWriteCallback);
            } catch (error2) {
              this.endCall({
                code: constants_1.Status.UNAVAILABLE,
                details: `Write failed with error ${error2.message}`,
                metadata: new metadata_1.Metadata()
              });
            }
          }
          this.maybeCloseWrites();
        }
      }
      start(metadata, listener) {
        this.trace("Sending metadata");
        this.listener = listener;
        this.channel._startCallStream(this, metadata);
      }
      destroyHttp2Stream() {
        var _a;
        if (this.http2Stream !== null && !this.http2Stream.destroyed) {
          let code;
          if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1.Status.OK) {
            code = http2.constants.NGHTTP2_NO_ERROR;
          } else {
            code = http2.constants.NGHTTP2_CANCEL;
          }
          this.trace("close http2 stream with code " + code);
          this.http2Stream.close(code);
        }
      }
      cancelWithStatus(status, details) {
        this.trace("cancelWithStatus code: " + status + ' details: "' + details + '"');
        this.endCall({ code: status, details, metadata: new metadata_1.Metadata() });
      }
      getDeadline() {
        if (this.options.parentCall && this.options.flags & constants_1.Propagate.DEADLINE) {
          const parentDeadline = this.options.parentCall.getDeadline();
          const selfDeadline = this.options.deadline;
          const parentDeadlineMsecs = parentDeadline instanceof Date ? parentDeadline.getTime() : parentDeadline;
          const selfDeadlineMsecs = selfDeadline instanceof Date ? selfDeadline.getTime() : selfDeadline;
          return Math.min(parentDeadlineMsecs, selfDeadlineMsecs);
        } else {
          return this.options.deadline;
        }
      }
      getCredentials() {
        return this.credentials;
      }
      setCredentials(credentials) {
        this.credentials = this.channelCallCredentials.compose(credentials);
      }
      getStatus() {
        return this.finalStatus;
      }
      getPeer() {
        var _a, _b;
        return (_b = (_a = this.subchannel) === null || _a === void 0 ? void 0 : _a.getAddress()) !== null && _b !== void 0 ? _b : this.channel.getTarget();
      }
      getMethod() {
        return this.methodName;
      }
      getHost() {
        return this.options.host;
      }
      startRead() {
        if (this.finalStatus !== null && this.finalStatus.code !== constants_1.Status.OK) {
          this.readsClosed = true;
          this.maybeOutputStatus();
          return;
        }
        this.canPush = true;
        if (this.http2Stream === null) {
          this.pendingRead = true;
        } else {
          if (this.unpushedReadMessages.length > 0) {
            const nextMessage = this.unpushedReadMessages.shift();
            this.push(nextMessage);
            return;
          }
          this.http2Stream.resume();
        }
      }
      maybeCloseWrites() {
        if (this.writesClosed && !this.isWriteFilterPending && this.http2Stream !== null) {
          this.trace("calling end() on HTTP/2 stream");
          this.http2Stream.end();
        }
      }
      sendMessageWithContext(context, message) {
        var _a;
        this.trace("write() called with message of length " + message.length);
        const writeObj = {
          message,
          flags: context.flags
        };
        const cb = (_a = context.callback) !== null && _a !== void 0 ? _a : () => {
        };
        this.isWriteFilterPending = true;
        this.filterStack.sendMessage(Promise.resolve(writeObj)).then((message2) => {
          this.isWriteFilterPending = false;
          if (this.http2Stream === null) {
            this.trace("deferring writing data chunk of length " + message2.message.length);
            this.pendingWrite = message2.message;
            this.pendingWriteCallback = cb;
          } else {
            this.trace("sending data chunk of length " + message2.message.length);
            try {
              this.http2Stream.write(message2.message, cb);
            } catch (error2) {
              this.endCall({
                code: constants_1.Status.UNAVAILABLE,
                details: `Write failed with error ${error2.message}`,
                metadata: new metadata_1.Metadata()
              });
            }
            this.maybeCloseWrites();
          }
        }, this.handleFilterError.bind(this));
      }
      halfClose() {
        this.trace("end() called");
        this.writesClosed = true;
        this.maybeCloseWrites();
      }
    };
    exports2.Http2CallStream = Http2CallStream;
  }
});

// node_modules/@grpc/grpc-js/build/src/tls-helpers.js
var require_tls_helpers = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/tls-helpers.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getDefaultRootsData = exports2.CIPHER_SUITES = void 0;
    var fs = require("fs");
    exports2.CIPHER_SUITES = process.env.GRPC_SSL_CIPHER_SUITES;
    var DEFAULT_ROOTS_FILE_PATH = process.env.GRPC_DEFAULT_SSL_ROOTS_FILE_PATH;
    var defaultRootsData = null;
    function getDefaultRootsData() {
      if (DEFAULT_ROOTS_FILE_PATH) {
        if (defaultRootsData === null) {
          defaultRootsData = fs.readFileSync(DEFAULT_ROOTS_FILE_PATH);
        }
        return defaultRootsData;
      }
      return null;
    }
    exports2.getDefaultRootsData = getDefaultRootsData;
  }
});

// node_modules/@grpc/grpc-js/build/src/channel-credentials.js
var require_channel_credentials = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/channel-credentials.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChannelCredentials = void 0;
    var tls_1 = require("tls");
    var call_credentials_1 = require_call_credentials();
    var tls_helpers_1 = require_tls_helpers();
    function verifyIsBufferOrNull(obj, friendlyName) {
      if (obj && !(obj instanceof Buffer)) {
        throw new TypeError(`${friendlyName}, if provided, must be a Buffer.`);
      }
    }
    function bufferOrNullEqual(buf1, buf2) {
      if (buf1 === null && buf2 === null) {
        return true;
      } else {
        return buf1 !== null && buf2 !== null && buf1.equals(buf2);
      }
    }
    var ChannelCredentials = class {
      constructor(callCredentials) {
        this.callCredentials = callCredentials || call_credentials_1.CallCredentials.createEmpty();
      }
      _getCallCredentials() {
        return this.callCredentials;
      }
      static createSsl(rootCerts, privateKey, certChain, verifyOptions) {
        verifyIsBufferOrNull(rootCerts, "Root certificate");
        verifyIsBufferOrNull(privateKey, "Private key");
        verifyIsBufferOrNull(certChain, "Certificate chain");
        if (privateKey && !certChain) {
          throw new Error("Private key must be given with accompanying certificate chain");
        }
        if (!privateKey && certChain) {
          throw new Error("Certificate chain must be given with accompanying private key");
        }
        return new SecureChannelCredentialsImpl(rootCerts || tls_helpers_1.getDefaultRootsData(), privateKey || null, certChain || null, verifyOptions || {});
      }
      static createInsecure() {
        return new InsecureChannelCredentialsImpl();
      }
    };
    exports2.ChannelCredentials = ChannelCredentials;
    var InsecureChannelCredentialsImpl = class extends ChannelCredentials {
      constructor(callCredentials) {
        super(callCredentials);
      }
      compose(callCredentials) {
        throw new Error("Cannot compose insecure credentials");
      }
      _getConnectionOptions() {
        return null;
      }
      _isSecure() {
        return false;
      }
      _equals(other) {
        return other instanceof InsecureChannelCredentialsImpl;
      }
    };
    var SecureChannelCredentialsImpl = class extends ChannelCredentials {
      constructor(rootCerts, privateKey, certChain, verifyOptions) {
        super();
        this.rootCerts = rootCerts;
        this.privateKey = privateKey;
        this.certChain = certChain;
        this.verifyOptions = verifyOptions;
        const secureContext = tls_1.createSecureContext({
          ca: rootCerts || void 0,
          key: privateKey || void 0,
          cert: certChain || void 0,
          ciphers: tls_helpers_1.CIPHER_SUITES
        });
        this.connectionOptions = { secureContext };
        if (verifyOptions && verifyOptions.checkServerIdentity) {
          this.connectionOptions.checkServerIdentity = (host, cert) => {
            return verifyOptions.checkServerIdentity(host, { raw: cert.raw });
          };
        }
      }
      compose(callCredentials) {
        const combinedCallCredentials = this.callCredentials.compose(callCredentials);
        return new ComposedChannelCredentialsImpl(this, combinedCallCredentials);
      }
      _getConnectionOptions() {
        return Object.assign({}, this.connectionOptions);
      }
      _isSecure() {
        return true;
      }
      _equals(other) {
        if (this === other) {
          return true;
        }
        if (other instanceof SecureChannelCredentialsImpl) {
          if (!bufferOrNullEqual(this.rootCerts, other.rootCerts)) {
            return false;
          }
          if (!bufferOrNullEqual(this.privateKey, other.privateKey)) {
            return false;
          }
          if (!bufferOrNullEqual(this.certChain, other.certChain)) {
            return false;
          }
          return this.verifyOptions.checkServerIdentity === other.verifyOptions.checkServerIdentity;
        } else {
          return false;
        }
      }
    };
    var ComposedChannelCredentialsImpl = class extends ChannelCredentials {
      constructor(channelCredentials, callCreds) {
        super(callCreds);
        this.channelCredentials = channelCredentials;
      }
      compose(callCredentials) {
        const combinedCallCredentials = this.callCredentials.compose(callCredentials);
        return new ComposedChannelCredentialsImpl(this.channelCredentials, combinedCallCredentials);
      }
      _getConnectionOptions() {
        return this.channelCredentials._getConnectionOptions();
      }
      _isSecure() {
        return true;
      }
      _equals(other) {
        if (this === other) {
          return true;
        }
        if (other instanceof ComposedChannelCredentialsImpl) {
          return this.channelCredentials._equals(other.channelCredentials) && this.callCredentials._equals(other.callCredentials);
        } else {
          return false;
        }
      }
    };
  }
});

// node_modules/@grpc/grpc-js/build/src/picker.js
var require_picker = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/picker.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.QueuePicker = exports2.UnavailablePicker = exports2.PickResultType = void 0;
    var metadata_1 = require_metadata();
    var constants_1 = require_constants();
    var PickResultType;
    (function(PickResultType2) {
      PickResultType2[PickResultType2["COMPLETE"] = 0] = "COMPLETE";
      PickResultType2[PickResultType2["QUEUE"] = 1] = "QUEUE";
      PickResultType2[PickResultType2["TRANSIENT_FAILURE"] = 2] = "TRANSIENT_FAILURE";
      PickResultType2[PickResultType2["DROP"] = 3] = "DROP";
    })(PickResultType = exports2.PickResultType || (exports2.PickResultType = {}));
    var UnavailablePicker = class {
      constructor(status) {
        if (status !== void 0) {
          this.status = status;
        } else {
          this.status = {
            code: constants_1.Status.UNAVAILABLE,
            details: "No connection established",
            metadata: new metadata_1.Metadata()
          };
        }
      }
      pick(pickArgs) {
        return {
          pickResultType: PickResultType.TRANSIENT_FAILURE,
          subchannel: null,
          status: this.status,
          extraFilterFactory: null,
          onCallStarted: null
        };
      }
    };
    exports2.UnavailablePicker = UnavailablePicker;
    var QueuePicker = class {
      constructor(loadBalancer) {
        this.loadBalancer = loadBalancer;
        this.calledExitIdle = false;
      }
      pick(pickArgs) {
        if (!this.calledExitIdle) {
          process.nextTick(() => {
            this.loadBalancer.exitIdle();
          });
          this.calledExitIdle = true;
        }
        return {
          pickResultType: PickResultType.QUEUE,
          subchannel: null,
          status: null,
          extraFilterFactory: null,
          onCallStarted: null
        };
      }
    };
    exports2.QueuePicker = QueuePicker;
  }
});

// node_modules/@grpc/grpc-js/build/src/backoff-timeout.js
var require_backoff_timeout = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/backoff-timeout.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BackoffTimeout = void 0;
    var INITIAL_BACKOFF_MS = 1e3;
    var BACKOFF_MULTIPLIER = 1.6;
    var MAX_BACKOFF_MS = 12e4;
    var BACKOFF_JITTER = 0.2;
    function uniformRandom(min, max) {
      return Math.random() * (max - min) + min;
    }
    var BackoffTimeout = class {
      constructor(callback, options2) {
        this.callback = callback;
        this.initialDelay = INITIAL_BACKOFF_MS;
        this.multiplier = BACKOFF_MULTIPLIER;
        this.maxDelay = MAX_BACKOFF_MS;
        this.jitter = BACKOFF_JITTER;
        this.running = false;
        this.hasRef = true;
        if (options2) {
          if (options2.initialDelay) {
            this.initialDelay = options2.initialDelay;
          }
          if (options2.multiplier) {
            this.multiplier = options2.multiplier;
          }
          if (options2.jitter) {
            this.jitter = options2.jitter;
          }
          if (options2.maxDelay) {
            this.maxDelay = options2.maxDelay;
          }
        }
        this.nextDelay = this.initialDelay;
        this.timerId = setTimeout(() => {
        }, 0);
        clearTimeout(this.timerId);
      }
      runOnce() {
        var _a, _b;
        this.running = true;
        this.timerId = setTimeout(() => {
          this.callback();
          this.running = false;
        }, this.nextDelay);
        if (!this.hasRef) {
          (_b = (_a = this.timerId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
        }
        const nextBackoff = Math.min(this.nextDelay * this.multiplier, this.maxDelay);
        const jitterMagnitude = nextBackoff * this.jitter;
        this.nextDelay = nextBackoff + uniformRandom(-jitterMagnitude, jitterMagnitude);
      }
      stop() {
        clearTimeout(this.timerId);
        this.running = false;
      }
      reset() {
        this.nextDelay = this.initialDelay;
      }
      isRunning() {
        return this.running;
      }
      ref() {
        var _a, _b;
        this.hasRef = true;
        (_b = (_a = this.timerId).ref) === null || _b === void 0 ? void 0 : _b.call(_a);
      }
      unref() {
        var _a, _b;
        this.hasRef = false;
        (_b = (_a = this.timerId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
      }
    };
    exports2.BackoffTimeout = BackoffTimeout;
  }
});

// node_modules/@grpc/grpc-js/build/src/service-config.js
var require_service_config = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/service-config.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.extractAndSelectServiceConfig = exports2.validateServiceConfig = void 0;
    var os = require("os");
    var load_balancer_1 = require_load_balancer();
    var TIMEOUT_REGEX = /^\d+(\.\d{1,9})?s$/;
    var CLIENT_LANGUAGE_STRING = "node";
    function validateName(obj) {
      if (!("service" in obj) || typeof obj.service !== "string") {
        throw new Error("Invalid method config name: invalid service");
      }
      const result = {
        service: obj.service
      };
      if ("method" in obj) {
        if (typeof obj.method === "string") {
          result.method = obj.method;
        } else {
          throw new Error("Invalid method config name: invalid method");
        }
      }
      return result;
    }
    function validateMethodConfig(obj) {
      const result = {
        name: []
      };
      if (!("name" in obj) || !Array.isArray(obj.name)) {
        throw new Error("Invalid method config: invalid name array");
      }
      for (const name2 of obj.name) {
        result.name.push(validateName(name2));
      }
      if ("waitForReady" in obj) {
        if (typeof obj.waitForReady !== "boolean") {
          throw new Error("Invalid method config: invalid waitForReady");
        }
        result.waitForReady = obj.waitForReady;
      }
      if ("timeout" in obj) {
        if (!(typeof obj.timeout === "string") || !TIMEOUT_REGEX.test(obj.timeout)) {
          throw new Error("Invalid method config: invalid timeout");
        }
        result.timeout = obj.timeout;
      }
      if ("maxRequestBytes" in obj) {
        if (typeof obj.maxRequestBytes !== "number") {
          throw new Error("Invalid method config: invalid maxRequestBytes");
        }
        result.maxRequestBytes = obj.maxRequestBytes;
      }
      if ("maxResponseBytes" in obj) {
        if (typeof obj.maxResponseBytes !== "number") {
          throw new Error("Invalid method config: invalid maxRequestBytes");
        }
        result.maxResponseBytes = obj.maxResponseBytes;
      }
      return result;
    }
    function validateServiceConfig(obj) {
      const result = {
        loadBalancingConfig: [],
        methodConfig: []
      };
      if ("loadBalancingPolicy" in obj) {
        if (typeof obj.loadBalancingPolicy === "string") {
          result.loadBalancingPolicy = obj.loadBalancingPolicy;
        } else {
          throw new Error("Invalid service config: invalid loadBalancingPolicy");
        }
      }
      if ("loadBalancingConfig" in obj) {
        if (Array.isArray(obj.loadBalancingConfig)) {
          for (const config of obj.loadBalancingConfig) {
            result.loadBalancingConfig.push(load_balancer_1.validateLoadBalancingConfig(config));
          }
        } else {
          throw new Error("Invalid service config: invalid loadBalancingConfig");
        }
      }
      if ("methodConfig" in obj) {
        if (Array.isArray(obj.methodConfig)) {
          for (const methodConfig of obj.methodConfig) {
            result.methodConfig.push(validateMethodConfig(methodConfig));
          }
        }
      }
      const seenMethodNames = [];
      for (const methodConfig of result.methodConfig) {
        for (const name2 of methodConfig.name) {
          for (const seenName of seenMethodNames) {
            if (name2.service === seenName.service && name2.method === seenName.method) {
              throw new Error(`Invalid service config: duplicate name ${name2.service}/${name2.method}`);
            }
          }
          seenMethodNames.push(name2);
        }
      }
      return result;
    }
    exports2.validateServiceConfig = validateServiceConfig;
    function validateCanaryConfig(obj) {
      if (!("serviceConfig" in obj)) {
        throw new Error("Invalid service config choice: missing service config");
      }
      const result = {
        serviceConfig: validateServiceConfig(obj.serviceConfig)
      };
      if ("clientLanguage" in obj) {
        if (Array.isArray(obj.clientLanguage)) {
          result.clientLanguage = [];
          for (const lang of obj.clientLanguage) {
            if (typeof lang === "string") {
              result.clientLanguage.push(lang);
            } else {
              throw new Error("Invalid service config choice: invalid clientLanguage");
            }
          }
        } else {
          throw new Error("Invalid service config choice: invalid clientLanguage");
        }
      }
      if ("clientHostname" in obj) {
        if (Array.isArray(obj.clientHostname)) {
          result.clientHostname = [];
          for (const lang of obj.clientHostname) {
            if (typeof lang === "string") {
              result.clientHostname.push(lang);
            } else {
              throw new Error("Invalid service config choice: invalid clientHostname");
            }
          }
        } else {
          throw new Error("Invalid service config choice: invalid clientHostname");
        }
      }
      if ("percentage" in obj) {
        if (typeof obj.percentage === "number" && 0 <= obj.percentage && obj.percentage <= 100) {
          result.percentage = obj.percentage;
        } else {
          throw new Error("Invalid service config choice: invalid percentage");
        }
      }
      const allowedFields = [
        "clientLanguage",
        "percentage",
        "clientHostname",
        "serviceConfig"
      ];
      for (const field in obj) {
        if (!allowedFields.includes(field)) {
          throw new Error(`Invalid service config choice: unexpected field ${field}`);
        }
      }
      return result;
    }
    function validateAndSelectCanaryConfig(obj, percentage) {
      if (!Array.isArray(obj)) {
        throw new Error("Invalid service config list");
      }
      for (const config of obj) {
        const validatedConfig = validateCanaryConfig(config);
        if (typeof validatedConfig.percentage === "number" && percentage > validatedConfig.percentage) {
          continue;
        }
        if (Array.isArray(validatedConfig.clientHostname)) {
          let hostnameMatched = false;
          for (const hostname of validatedConfig.clientHostname) {
            if (hostname === os.hostname()) {
              hostnameMatched = true;
            }
          }
          if (!hostnameMatched) {
            continue;
          }
        }
        if (Array.isArray(validatedConfig.clientLanguage)) {
          let languageMatched = false;
          for (const language of validatedConfig.clientLanguage) {
            if (language === CLIENT_LANGUAGE_STRING) {
              languageMatched = true;
            }
          }
          if (!languageMatched) {
            continue;
          }
        }
        return validatedConfig.serviceConfig;
      }
      throw new Error("No matching service config found");
    }
    function extractAndSelectServiceConfig(txtRecord, percentage) {
      for (const record of txtRecord) {
        if (record.length > 0 && record[0].startsWith("grpc_config=")) {
          const recordString = record.join("").substring("grpc_config=".length);
          const recordJson = JSON.parse(recordString);
          return validateAndSelectCanaryConfig(recordJson, percentage);
        }
      }
      return null;
    }
    exports2.extractAndSelectServiceConfig = extractAndSelectServiceConfig;
  }
});

// node_modules/@grpc/grpc-js/build/src/uri-parser.js
var require_uri_parser = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/uri-parser.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.uriToString = exports2.splitHostPort = exports2.parseUri = void 0;
    var URI_REGEX = /^(?:([A-Za-z0-9+.-]+):)?(?:\/\/([^/]*)\/)?(.+)$/;
    function parseUri(uriString) {
      const parsedUri = URI_REGEX.exec(uriString);
      if (parsedUri === null) {
        return null;
      }
      return {
        scheme: parsedUri[1],
        authority: parsedUri[2],
        path: parsedUri[3]
      };
    }
    exports2.parseUri = parseUri;
    var NUMBER_REGEX = /^\d+$/;
    function splitHostPort(path) {
      if (path.startsWith("[")) {
        const hostEnd = path.indexOf("]");
        if (hostEnd === -1) {
          return null;
        }
        const host = path.substring(1, hostEnd);
        if (host.indexOf(":") === -1) {
          return null;
        }
        if (path.length > hostEnd + 1) {
          if (path[hostEnd + 1] === ":") {
            const portString = path.substring(hostEnd + 2);
            if (NUMBER_REGEX.test(portString)) {
              return {
                host,
                port: +portString
              };
            } else {
              return null;
            }
          } else {
            return null;
          }
        } else {
          return {
            host
          };
        }
      } else {
        const splitPath = path.split(":");
        if (splitPath.length === 2) {
          if (NUMBER_REGEX.test(splitPath[1])) {
            return {
              host: splitPath[0],
              port: +splitPath[1]
            };
          } else {
            return null;
          }
        } else {
          return {
            host: path
          };
        }
      }
    }
    exports2.splitHostPort = splitHostPort;
    function uriToString(uri) {
      let result = "";
      if (uri.scheme !== void 0) {
        result += uri.scheme + ":";
      }
      if (uri.authority !== void 0) {
        result += "//" + uri.authority + "/";
      }
      result += uri.path;
      return result;
    }
    exports2.uriToString = uriToString;
  }
});

// node_modules/@grpc/grpc-js/build/src/resolver-dns.js
var require_resolver_dns = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/resolver-dns.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setup = void 0;
    var resolver_1 = require_resolver();
    var dns = require("dns");
    var util = require("util");
    var service_config_1 = require_service_config();
    var constants_1 = require_constants();
    var metadata_1 = require_metadata();
    var logging = require_logging();
    var constants_2 = require_constants();
    var uri_parser_1 = require_uri_parser();
    var net_1 = require("net");
    var TRACER_NAME = "dns_resolver";
    function trace(text) {
      logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, text);
    }
    var DEFAULT_PORT = 443;
    var resolveTxtPromise = util.promisify(dns.resolveTxt);
    var dnsLookupPromise = util.promisify(dns.lookup);
    function mergeArrays(...arrays) {
      const result = [];
      for (let i = 0; i < Math.max.apply(null, arrays.map((array) => array.length)); i++) {
        for (const array of arrays) {
          if (i < array.length) {
            result.push(array[i]);
          }
        }
      }
      return result;
    }
    var DnsResolver = class {
      constructor(target, listener, channelOptions) {
        var _a, _b;
        this.target = target;
        this.listener = listener;
        this.pendingLookupPromise = null;
        this.pendingTxtPromise = null;
        this.latestLookupResult = null;
        this.latestServiceConfig = null;
        this.latestServiceConfigError = null;
        trace("Resolver constructed for target " + uri_parser_1.uriToString(target));
        const hostPort = uri_parser_1.splitHostPort(target.path);
        if (hostPort === null) {
          this.ipResult = null;
          this.dnsHostname = null;
          this.port = null;
        } else {
          if (net_1.isIPv4(hostPort.host) || net_1.isIPv6(hostPort.host)) {
            this.ipResult = [
              {
                host: hostPort.host,
                port: (_a = hostPort.port) !== null && _a !== void 0 ? _a : DEFAULT_PORT
              }
            ];
            this.dnsHostname = null;
            this.port = null;
          } else {
            this.ipResult = null;
            this.dnsHostname = hostPort.host;
            this.port = (_b = hostPort.port) !== null && _b !== void 0 ? _b : DEFAULT_PORT;
          }
        }
        this.percentage = Math.random() * 100;
        this.defaultResolutionError = {
          code: constants_1.Status.UNAVAILABLE,
          details: `Name resolution failed for target ${uri_parser_1.uriToString(this.target)}`,
          metadata: new metadata_1.Metadata()
        };
      }
      startResolution() {
        if (this.ipResult !== null) {
          trace("Returning IP address for target " + uri_parser_1.uriToString(this.target));
          setImmediate(() => {
            this.listener.onSuccessfulResolution(this.ipResult, null, null, null, {});
          });
          return;
        }
        if (this.dnsHostname === null) {
          setImmediate(() => {
            this.listener.onError({
              code: constants_1.Status.UNAVAILABLE,
              details: `Failed to parse DNS address ${uri_parser_1.uriToString(this.target)}`,
              metadata: new metadata_1.Metadata()
            });
          });
        } else {
          this.latestLookupResult = null;
          const hostname = this.dnsHostname;
          this.pendingLookupPromise = dnsLookupPromise(hostname, { all: true });
          this.pendingLookupPromise.then((addressList) => {
            this.pendingLookupPromise = null;
            const ip4Addresses = addressList.filter((addr) => addr.family === 4);
            const ip6Addresses = addressList.filter((addr) => addr.family === 6);
            this.latestLookupResult = mergeArrays(ip6Addresses, ip4Addresses).map((addr) => ({ host: addr.address, port: +this.port }));
            const allAddressesString = "[" + this.latestLookupResult.map((addr) => addr.host + ":" + addr.port).join(",") + "]";
            trace("Resolved addresses for target " + uri_parser_1.uriToString(this.target) + ": " + allAddressesString);
            if (this.latestLookupResult.length === 0) {
              this.listener.onError(this.defaultResolutionError);
              return;
            }
            this.listener.onSuccessfulResolution(this.latestLookupResult, this.latestServiceConfig, this.latestServiceConfigError, null, {});
          }, (err) => {
            trace("Resolution error for target " + uri_parser_1.uriToString(this.target) + ": " + err.message);
            this.pendingLookupPromise = null;
            this.listener.onError(this.defaultResolutionError);
          });
          if (this.pendingTxtPromise === null) {
            this.pendingTxtPromise = resolveTxtPromise(hostname);
            this.pendingTxtPromise.then((txtRecord) => {
              this.pendingTxtPromise = null;
              try {
                this.latestServiceConfig = service_config_1.extractAndSelectServiceConfig(txtRecord, this.percentage);
              } catch (err) {
                this.latestServiceConfigError = {
                  code: constants_1.Status.UNAVAILABLE,
                  details: "Parsing service config failed",
                  metadata: new metadata_1.Metadata()
                };
              }
              if (this.latestLookupResult !== null) {
                this.listener.onSuccessfulResolution(this.latestLookupResult, this.latestServiceConfig, this.latestServiceConfigError, null, {});
              }
            }, (err) => {
            });
          }
        }
      }
      updateResolution() {
        trace("Resolution update requested for target " + uri_parser_1.uriToString(this.target));
        if (this.pendingLookupPromise === null) {
          this.startResolution();
        }
      }
      destroy() {
      }
      static getDefaultAuthority(target) {
        return target.path;
      }
    };
    function setup() {
      resolver_1.registerResolver("dns", DnsResolver);
      resolver_1.registerDefaultScheme("dns");
    }
    exports2.setup = setup;
  }
});

// node_modules/@grpc/grpc-js/build/src/resolver-uds.js
var require_resolver_uds = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/resolver-uds.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setup = void 0;
    var resolver_1 = require_resolver();
    var UdsResolver = class {
      constructor(target, listener, channelOptions) {
        this.listener = listener;
        this.addresses = [];
        let path;
        if (target.authority === "") {
          path = "/" + target.path;
        } else {
          path = target.path;
        }
        this.addresses = [{ path }];
      }
      updateResolution() {
        process.nextTick(this.listener.onSuccessfulResolution, this.addresses, null, null, null, {});
      }
      destroy() {
      }
      static getDefaultAuthority(target) {
        return "localhost";
      }
    };
    function setup() {
      resolver_1.registerResolver("unix", UdsResolver);
    }
    exports2.setup = setup;
  }
});

// node_modules/@grpc/grpc-js/build/src/resolver-ip.js
var require_resolver_ip = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/resolver-ip.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setup = void 0;
    var net_1 = require("net");
    var constants_1 = require_constants();
    var metadata_1 = require_metadata();
    var resolver_1 = require_resolver();
    var uri_parser_1 = require_uri_parser();
    var logging = require_logging();
    var TRACER_NAME = "ip_resolver";
    function trace(text) {
      logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);
    }
    var IPV4_SCHEME = "ipv4";
    var IPV6_SCHEME = "ipv6";
    var DEFAULT_PORT = 443;
    var IpResolver = class {
      constructor(target, listener, channelOptions) {
        var _a;
        this.target = target;
        this.listener = listener;
        this.addresses = [];
        this.error = null;
        trace("Resolver constructed for target " + uri_parser_1.uriToString(target));
        const addresses = [];
        if (!(target.scheme === IPV4_SCHEME || target.scheme === IPV6_SCHEME)) {
          this.error = {
            code: constants_1.Status.UNAVAILABLE,
            details: `Unrecognized scheme ${target.scheme} in IP resolver`,
            metadata: new metadata_1.Metadata()
          };
          return;
        }
        const pathList = target.path.split(",");
        for (const path of pathList) {
          const hostPort = uri_parser_1.splitHostPort(path);
          if (hostPort === null) {
            this.error = {
              code: constants_1.Status.UNAVAILABLE,
              details: `Failed to parse ${target.scheme} address ${path}`,
              metadata: new metadata_1.Metadata()
            };
            return;
          }
          if (target.scheme === IPV4_SCHEME && !net_1.isIPv4(hostPort.host) || target.scheme === IPV6_SCHEME && !net_1.isIPv6(hostPort.host)) {
            this.error = {
              code: constants_1.Status.UNAVAILABLE,
              details: `Failed to parse ${target.scheme} address ${path}`,
              metadata: new metadata_1.Metadata()
            };
            return;
          }
          addresses.push({
            host: hostPort.host,
            port: (_a = hostPort.port) !== null && _a !== void 0 ? _a : DEFAULT_PORT
          });
        }
        this.addresses = addresses;
        trace("Parsed " + target.scheme + " address list " + this.addresses);
      }
      updateResolution() {
        process.nextTick(() => {
          if (this.error) {
            this.listener.onError(this.error);
          } else {
            this.listener.onSuccessfulResolution(this.addresses, null, null, null, {});
          }
        });
      }
      destroy() {
      }
      static getDefaultAuthority(target) {
        return target.path.split(",")[0];
      }
    };
    function setup() {
      resolver_1.registerResolver(IPV4_SCHEME, IpResolver);
      resolver_1.registerResolver(IPV6_SCHEME, IpResolver);
    }
    exports2.setup = setup;
  }
});

// node_modules/@grpc/grpc-js/build/src/resolver.js
var require_resolver = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/resolver.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.registerAll = exports2.mapUriDefaultScheme = exports2.getDefaultAuthority = exports2.createResolver = exports2.registerDefaultScheme = exports2.registerResolver = void 0;
    var resolver_dns = require_resolver_dns();
    var resolver_uds = require_resolver_uds();
    var resolver_ip = require_resolver_ip();
    var uri_parser_1 = require_uri_parser();
    var registeredResolvers = {};
    var defaultScheme = null;
    function registerResolver(scheme, resolverClass) {
      registeredResolvers[scheme] = resolverClass;
    }
    exports2.registerResolver = registerResolver;
    function registerDefaultScheme(scheme) {
      defaultScheme = scheme;
    }
    exports2.registerDefaultScheme = registerDefaultScheme;
    function createResolver(target, listener, options2) {
      if (target.scheme !== void 0 && target.scheme in registeredResolvers) {
        return new registeredResolvers[target.scheme](target, listener, options2);
      } else {
        throw new Error(`No resolver could be created for target ${uri_parser_1.uriToString(target)}`);
      }
    }
    exports2.createResolver = createResolver;
    function getDefaultAuthority(target) {
      if (target.scheme !== void 0 && target.scheme in registeredResolvers) {
        return registeredResolvers[target.scheme].getDefaultAuthority(target);
      } else {
        throw new Error(`Invalid target ${uri_parser_1.uriToString(target)}`);
      }
    }
    exports2.getDefaultAuthority = getDefaultAuthority;
    function mapUriDefaultScheme(target) {
      if (target.scheme === void 0 || !(target.scheme in registeredResolvers)) {
        if (defaultScheme !== null) {
          return {
            scheme: defaultScheme,
            authority: void 0,
            path: uri_parser_1.uriToString(target)
          };
        } else {
          return null;
        }
      }
      return target;
    }
    exports2.mapUriDefaultScheme = mapUriDefaultScheme;
    function registerAll() {
      resolver_dns.setup();
      resolver_uds.setup();
      resolver_ip.setup();
    }
    exports2.registerAll = registerAll;
  }
});

// node_modules/@grpc/grpc-js/build/src/http_proxy.js
var require_http_proxy = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/http_proxy.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getProxiedConnection = exports2.mapProxyName = void 0;
    var logging_1 = require_logging();
    var constants_1 = require_constants();
    var resolver_1 = require_resolver();
    var http2 = require("http");
    var tls = require("tls");
    var logging = require_logging();
    var subchannel_1 = require_subchannel();
    var uri_parser_1 = require_uri_parser();
    var url_1 = require("url");
    var TRACER_NAME = "proxy";
    function trace(text) {
      logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);
    }
    function getProxyInfo() {
      let proxyEnv = "";
      let envVar = "";
      if (process.env.grpc_proxy) {
        envVar = "grpc_proxy";
        proxyEnv = process.env.grpc_proxy;
      } else if (process.env.https_proxy) {
        envVar = "https_proxy";
        proxyEnv = process.env.https_proxy;
      } else if (process.env.http_proxy) {
        envVar = "http_proxy";
        proxyEnv = process.env.http_proxy;
      } else {
        return {};
      }
      let proxyUrl;
      try {
        proxyUrl = new url_1.URL(proxyEnv);
      } catch (e) {
        logging_1.log(constants_1.LogVerbosity.ERROR, `cannot parse value of "${envVar}" env var`);
        return {};
      }
      if (proxyUrl.protocol !== "http:") {
        logging_1.log(constants_1.LogVerbosity.ERROR, `"${proxyUrl.protocol}" scheme not supported in proxy URI`);
        return {};
      }
      let userCred = null;
      if (proxyUrl.username) {
        if (proxyUrl.password) {
          logging_1.log(constants_1.LogVerbosity.INFO, "userinfo found in proxy URI");
          userCred = `${proxyUrl.username}:${proxyUrl.password}`;
        } else {
          userCred = proxyUrl.username;
        }
      }
      const hostname = proxyUrl.hostname;
      let port = proxyUrl.port;
      if (port === "") {
        port = "80";
      }
      const result = {
        address: `${hostname}:${port}`
      };
      if (userCred) {
        result.creds = userCred;
      }
      trace("Proxy server " + result.address + " set by environment variable " + envVar);
      return result;
    }
    function getNoProxyHostList() {
      let noProxyStr = process.env.no_grpc_proxy;
      let envVar = "no_grpc_proxy";
      if (!noProxyStr) {
        noProxyStr = process.env.no_proxy;
        envVar = "no_proxy";
      }
      if (noProxyStr) {
        trace("No proxy server list set by environment variable " + envVar);
        return noProxyStr.split(",");
      } else {
        return [];
      }
    }
    function mapProxyName(target, options2) {
      var _a;
      const noProxyResult = {
        target,
        extraOptions: {}
      };
      if (((_a = options2["grpc.enable_http_proxy"]) !== null && _a !== void 0 ? _a : 1) === 0) {
        return noProxyResult;
      }
      const proxyInfo = getProxyInfo();
      if (!proxyInfo.address) {
        return noProxyResult;
      }
      const hostPort = uri_parser_1.splitHostPort(target.path);
      if (!hostPort) {
        return noProxyResult;
      }
      const serverHost = hostPort.host;
      for (const host of getNoProxyHostList()) {
        if (host === serverHost) {
          trace("Not using proxy for target in no_proxy list: " + uri_parser_1.uriToString(target));
          return noProxyResult;
        }
      }
      const extraOptions = {
        "grpc.http_connect_target": uri_parser_1.uriToString(target)
      };
      if (proxyInfo.creds) {
        extraOptions["grpc.http_connect_creds"] = proxyInfo.creds;
      }
      return {
        target: {
          scheme: "dns",
          path: proxyInfo.address
        },
        extraOptions
      };
    }
    exports2.mapProxyName = mapProxyName;
    function getProxiedConnection(address, channelOptions, connectionOptions) {
      if (!("grpc.http_connect_target" in channelOptions)) {
        return Promise.resolve({});
      }
      const realTarget = channelOptions["grpc.http_connect_target"];
      const parsedTarget = uri_parser_1.parseUri(realTarget);
      if (parsedTarget === null) {
        return Promise.resolve({});
      }
      const options2 = {
        method: "CONNECT",
        path: parsedTarget.path
      };
      if (subchannel_1.isTcpSubchannelAddress(address)) {
        options2.host = address.host;
        options2.port = address.port;
      } else {
        options2.socketPath = address.path;
      }
      if ("grpc.http_connect_creds" in channelOptions) {
        options2.headers = {
          "Proxy-Authorization": "Basic " + Buffer.from(channelOptions["grpc.http_connect_creds"]).toString("base64")
        };
      }
      const proxyAddressString = subchannel_1.subchannelAddressToString(address);
      trace("Using proxy " + proxyAddressString + " to connect to " + options2.path);
      return new Promise((resolve2, reject) => {
        const request = http2.request(options2);
        request.once("connect", (res, socket, head) => {
          var _a;
          request.removeAllListeners();
          socket.removeAllListeners();
          if (res.statusCode === 200) {
            trace("Successfully connected to " + options2.path + " through proxy " + proxyAddressString);
            if ("secureContext" in connectionOptions) {
              const targetPath = resolver_1.getDefaultAuthority(parsedTarget);
              const hostPort = uri_parser_1.splitHostPort(targetPath);
              const remoteHost = (_a = hostPort === null || hostPort === void 0 ? void 0 : hostPort.host) !== null && _a !== void 0 ? _a : targetPath;
              const cts = tls.connect(Object.assign({ host: remoteHost, servername: remoteHost, socket }, connectionOptions), () => {
                trace("Successfully established a TLS connection to " + options2.path + " through proxy " + proxyAddressString);
                resolve2({ socket: cts, realTarget: parsedTarget });
              });
              cts.on("error", (error2) => {
                trace("Failed to establish a TLS connection to " + options2.path + " through proxy " + proxyAddressString + " with error " + error2.message);
                reject();
              });
            } else {
              trace("Successfully established a plaintext connection to " + options2.path + " through proxy " + proxyAddressString);
              resolve2({
                socket,
                realTarget: parsedTarget
              });
            }
          } else {
            logging_1.log(constants_1.LogVerbosity.ERROR, "Failed to connect to " + options2.path + " through proxy " + proxyAddressString + " with status " + res.statusCode);
            reject();
          }
        });
        request.once("error", (err) => {
          request.removeAllListeners();
          logging_1.log(constants_1.LogVerbosity.ERROR, "Failed to connect to proxy " + proxyAddressString + " with error " + err.message);
          reject();
        });
        request.end();
      });
    }
    exports2.getProxiedConnection = getProxiedConnection;
  }
});

// node_modules/@grpc/grpc-js/package.json
var require_package = __commonJS({
  "node_modules/@grpc/grpc-js/package.json"(exports2, module2) {
    module2.exports = {
      name: "@grpc/grpc-js",
      version: "1.3.7",
      description: "gRPC Library for Node - pure JS implementation",
      homepage: "https://grpc.io/",
      repository: "https://github.com/grpc/grpc-node/tree/master/packages/grpc-js",
      main: "build/src/index.js",
      engines: {
        node: "^8.13.0 || >=10.10.0"
      },
      keywords: [],
      author: {
        name: "Google Inc."
      },
      types: "build/src/index.d.ts",
      license: "Apache-2.0",
      devDependencies: {
        "@grpc/proto-loader": "^0.5.5",
        "@types/gulp": "^4.0.6",
        "@types/gulp-mocha": "0.0.32",
        "@types/lodash": "^4.14.108",
        "@types/mocha": "^5.2.6",
        "@types/ncp": "^2.0.1",
        "@types/pify": "^3.0.2",
        "@types/yargs": "^15.0.5",
        "clang-format": "^1.0.55",
        execa: "^2.0.3",
        gts: "^2.0.0",
        gulp: "^4.0.2",
        "gulp-mocha": "^6.0.0",
        lodash: "^4.17.4",
        "mocha-jenkins-reporter": "^0.4.1",
        ncp: "^2.0.0",
        pify: "^4.0.1",
        rimraf: "^3.0.2",
        "ts-node": "^8.3.0",
        typescript: "^3.7.2",
        yargs: "^15.4.1"
      },
      contributors: [
        {
          name: "Google Inc."
        }
      ],
      scripts: {
        build: "npm run compile",
        clean: `node -e 'require("rimraf")("./build", () => {})'`,
        compile: "tsc -p .",
        format: 'clang-format -i -style="{Language: JavaScript, BasedOnStyle: Google, ColumnLimit: 80}" src/*.ts test/*.ts',
        lint: "npm run check",
        prepare: "npm run compile",
        test: "gulp test",
        check: "gts check src/**/*.ts",
        fix: "gts fix src/*.ts",
        pretest: "npm run compile",
        posttest: "npm run check"
      },
      dependencies: {
        "@types/node": ">=12.12.47"
      },
      files: [
        "src/**/*.ts",
        "build/src/*.{js,d.ts,js.map}",
        "LICENSE",
        "deps/envoy-api/envoy/api/v2/**/*.proto",
        "deps/envoy-api/envoy/config/**/*.proto",
        "deps/envoy-api/envoy/service/**/*.proto",
        "deps/envoy-api/envoy/type/**/*.proto",
        "deps/udpa/udpa/**/*.proto",
        "deps/googleapis/google/api/*.proto",
        "deps/googleapis/google/rpc/*.proto",
        "deps/protoc-gen-validate/validate/**/*.proto"
      ]
    };
  }
});

// node_modules/@grpc/grpc-js/build/src/subchannel.js
var require_subchannel = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/subchannel.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Subchannel = exports2.subchannelAddressToString = exports2.subchannelAddressEqual = exports2.isTcpSubchannelAddress = void 0;
    var http2 = require("http2");
    var tls_1 = require("tls");
    var channel_1 = require_channel();
    var backoff_timeout_1 = require_backoff_timeout();
    var resolver_1 = require_resolver();
    var logging = require_logging();
    var constants_1 = require_constants();
    var http_proxy_1 = require_http_proxy();
    var net = require("net");
    var uri_parser_1 = require_uri_parser();
    var clientVersion = require_package().version;
    var TRACER_NAME = "subchannel";
    function trace(text) {
      logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);
    }
    function refTrace(text) {
      logging.trace(constants_1.LogVerbosity.DEBUG, "subchannel_refcount", text);
    }
    var KEEPALIVE_MAX_TIME_MS = ~(1 << 31);
    var KEEPALIVE_TIMEOUT_MS = 2e4;
    var { HTTP2_HEADER_AUTHORITY, HTTP2_HEADER_CONTENT_TYPE, HTTP2_HEADER_METHOD, HTTP2_HEADER_PATH, HTTP2_HEADER_TE, HTTP2_HEADER_USER_AGENT } = http2.constants;
    var tooManyPingsData = Buffer.from("too_many_pings", "ascii");
    function isTcpSubchannelAddress(address) {
      return "port" in address;
    }
    exports2.isTcpSubchannelAddress = isTcpSubchannelAddress;
    function subchannelAddressEqual(address1, address2) {
      if (isTcpSubchannelAddress(address1)) {
        return isTcpSubchannelAddress(address2) && address1.host === address2.host && address1.port === address2.port;
      } else {
        return !isTcpSubchannelAddress(address2) && address1.path === address2.path;
      }
    }
    exports2.subchannelAddressEqual = subchannelAddressEqual;
    function subchannelAddressToString(address) {
      if (isTcpSubchannelAddress(address)) {
        return address.host + ":" + address.port;
      } else {
        return address.path;
      }
    }
    exports2.subchannelAddressToString = subchannelAddressToString;
    var Subchannel = class {
      constructor(channelTarget, subchannelAddress, options2, credentials) {
        this.channelTarget = channelTarget;
        this.subchannelAddress = subchannelAddress;
        this.options = options2;
        this.credentials = credentials;
        this.connectivityState = channel_1.ConnectivityState.IDLE;
        this.session = null;
        this.continueConnecting = false;
        this.stateListeners = [];
        this.disconnectListeners = [];
        this.keepaliveTimeMs = KEEPALIVE_MAX_TIME_MS;
        this.keepaliveTimeoutMs = KEEPALIVE_TIMEOUT_MS;
        this.keepaliveWithoutCalls = false;
        this.callRefcount = 0;
        this.refcount = 0;
        this.userAgent = [
          options2["grpc.primary_user_agent"],
          `grpc-node-js/${clientVersion}`,
          options2["grpc.secondary_user_agent"]
        ].filter((e) => e).join(" ");
        if ("grpc.keepalive_time_ms" in options2) {
          this.keepaliveTimeMs = options2["grpc.keepalive_time_ms"];
        }
        if ("grpc.keepalive_timeout_ms" in options2) {
          this.keepaliveTimeoutMs = options2["grpc.keepalive_timeout_ms"];
        }
        if ("grpc.keepalive_permit_without_calls" in options2) {
          this.keepaliveWithoutCalls = options2["grpc.keepalive_permit_without_calls"] === 1;
        } else {
          this.keepaliveWithoutCalls = false;
        }
        this.keepaliveIntervalId = setTimeout(() => {
        }, 0);
        clearTimeout(this.keepaliveIntervalId);
        this.keepaliveTimeoutId = setTimeout(() => {
        }, 0);
        clearTimeout(this.keepaliveTimeoutId);
        const backoffOptions = {
          initialDelay: options2["grpc.initial_reconnect_backoff_ms"],
          maxDelay: options2["grpc.max_reconnect_backoff_ms"]
        };
        this.backoffTimeout = new backoff_timeout_1.BackoffTimeout(() => {
          this.handleBackoffTimer();
        }, backoffOptions);
        this.subchannelAddressString = subchannelAddressToString(subchannelAddress);
      }
      handleBackoffTimer() {
        if (this.continueConnecting) {
          this.transitionToState([channel_1.ConnectivityState.TRANSIENT_FAILURE], channel_1.ConnectivityState.CONNECTING);
        } else {
          this.transitionToState([channel_1.ConnectivityState.TRANSIENT_FAILURE], channel_1.ConnectivityState.IDLE);
        }
      }
      startBackoff() {
        this.backoffTimeout.runOnce();
      }
      stopBackoff() {
        this.backoffTimeout.stop();
        this.backoffTimeout.reset();
      }
      sendPing() {
        var _a, _b;
        logging.trace(constants_1.LogVerbosity.DEBUG, "keepalive", "Sending ping to " + this.subchannelAddressString);
        this.keepaliveTimeoutId = setTimeout(() => {
          this.transitionToState([channel_1.ConnectivityState.READY], channel_1.ConnectivityState.IDLE);
        }, this.keepaliveTimeoutMs);
        (_b = (_a = this.keepaliveTimeoutId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
        this.session.ping((err, duration, payload) => {
          clearTimeout(this.keepaliveTimeoutId);
        });
      }
      startKeepalivePings() {
        var _a, _b;
        this.keepaliveIntervalId = setInterval(() => {
          this.sendPing();
        }, this.keepaliveTimeMs);
        (_b = (_a = this.keepaliveIntervalId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
      }
      stopKeepalivePings() {
        clearInterval(this.keepaliveIntervalId);
        clearTimeout(this.keepaliveTimeoutId);
      }
      createSession(proxyConnectionResult) {
        var _a, _b, _c;
        if (proxyConnectionResult.realTarget) {
          trace(this.subchannelAddressString + " creating HTTP/2 session through proxy to " + proxyConnectionResult.realTarget);
        } else {
          trace(this.subchannelAddressString + " creating HTTP/2 session");
        }
        const targetAuthority = resolver_1.getDefaultAuthority((_a = proxyConnectionResult.realTarget) !== null && _a !== void 0 ? _a : this.channelTarget);
        let connectionOptions = this.credentials._getConnectionOptions() || {};
        connectionOptions.maxSendHeaderBlockLength = Number.MAX_SAFE_INTEGER;
        if ("grpc-node.max_session_memory" in this.options) {
          connectionOptions.maxSessionMemory = this.options["grpc-node.max_session_memory"];
        }
        let addressScheme = "http://";
        if ("secureContext" in connectionOptions) {
          addressScheme = "https://";
          if (this.options["grpc.ssl_target_name_override"]) {
            const sslTargetNameOverride = this.options["grpc.ssl_target_name_override"];
            connectionOptions.checkServerIdentity = (host, cert) => {
              return tls_1.checkServerIdentity(sslTargetNameOverride, cert);
            };
            connectionOptions.servername = sslTargetNameOverride;
          } else {
            const authorityHostname = (_c = (_b = uri_parser_1.splitHostPort(targetAuthority)) === null || _b === void 0 ? void 0 : _b.host) !== null && _c !== void 0 ? _c : "localhost";
            connectionOptions.servername = authorityHostname;
          }
          if (proxyConnectionResult.socket) {
            connectionOptions.createConnection = (authority, option) => {
              return proxyConnectionResult.socket;
            };
          }
        } else {
          connectionOptions.createConnection = (authority, option) => {
            if (proxyConnectionResult.socket) {
              return proxyConnectionResult.socket;
            } else {
              return net.connect(this.subchannelAddress);
            }
          };
        }
        connectionOptions = Object.assign(Object.assign({}, connectionOptions), this.subchannelAddress);
        const session = http2.connect(addressScheme + targetAuthority, connectionOptions);
        this.session = session;
        session.unref();
        session.once("connect", () => {
          if (this.session === session) {
            this.transitionToState([channel_1.ConnectivityState.CONNECTING], channel_1.ConnectivityState.READY);
          }
        });
        session.once("close", () => {
          if (this.session === session) {
            trace(this.subchannelAddressString + " connection closed");
            this.transitionToState([channel_1.ConnectivityState.CONNECTING], channel_1.ConnectivityState.TRANSIENT_FAILURE);
            this.transitionToState([channel_1.ConnectivityState.READY], channel_1.ConnectivityState.IDLE);
          }
        });
        session.once("goaway", (errorCode, lastStreamID, opaqueData) => {
          if (this.session === session) {
            if (errorCode === http2.constants.NGHTTP2_ENHANCE_YOUR_CALM && opaqueData.equals(tooManyPingsData)) {
              this.keepaliveTimeMs = Math.min(2 * this.keepaliveTimeMs, KEEPALIVE_MAX_TIME_MS);
              logging.log(constants_1.LogVerbosity.ERROR, `Connection to ${uri_parser_1.uriToString(this.channelTarget)} at ${this.subchannelAddressString} rejected by server because of excess pings. Increasing ping interval to ${this.keepaliveTimeMs} ms`);
            }
            trace(this.subchannelAddressString + " connection closed by GOAWAY with code " + errorCode);
            this.transitionToState([channel_1.ConnectivityState.CONNECTING, channel_1.ConnectivityState.READY], channel_1.ConnectivityState.IDLE);
          }
        });
        session.once("error", (error2) => {
          trace(this.subchannelAddressString + " connection closed with error " + error2.message);
        });
      }
      startConnectingInternal() {
        var _a, _b;
        const connectionOptions = this.credentials._getConnectionOptions() || {};
        if ("secureContext" in connectionOptions) {
          connectionOptions.ALPNProtocols = ["h2"];
          if (this.options["grpc.ssl_target_name_override"]) {
            const sslTargetNameOverride = this.options["grpc.ssl_target_name_override"];
            connectionOptions.checkServerIdentity = (host, cert) => {
              return tls_1.checkServerIdentity(sslTargetNameOverride, cert);
            };
            connectionOptions.servername = sslTargetNameOverride;
          } else {
            if ("grpc.http_connect_target" in this.options) {
              const targetPath = resolver_1.getDefaultAuthority((_a = uri_parser_1.parseUri(this.options["grpc.http_connect_target"])) !== null && _a !== void 0 ? _a : {
                path: "localhost"
              });
              const hostPort = uri_parser_1.splitHostPort(targetPath);
              connectionOptions.servername = (_b = hostPort === null || hostPort === void 0 ? void 0 : hostPort.host) !== null && _b !== void 0 ? _b : targetPath;
            }
          }
        }
        http_proxy_1.getProxiedConnection(this.subchannelAddress, this.options, connectionOptions).then((result) => {
          this.createSession(result);
        }, (reason) => {
          this.transitionToState([channel_1.ConnectivityState.CONNECTING], channel_1.ConnectivityState.TRANSIENT_FAILURE);
        });
      }
      transitionToState(oldStates, newState) {
        if (oldStates.indexOf(this.connectivityState) === -1) {
          return false;
        }
        trace(this.subchannelAddressString + " " + channel_1.ConnectivityState[this.connectivityState] + " -> " + channel_1.ConnectivityState[newState]);
        const previousState = this.connectivityState;
        this.connectivityState = newState;
        switch (newState) {
          case channel_1.ConnectivityState.READY:
            this.stopBackoff();
            this.session.socket.once("close", () => {
              for (const listener of this.disconnectListeners) {
                listener();
              }
            });
            if (this.keepaliveWithoutCalls) {
              this.startKeepalivePings();
            }
            break;
          case channel_1.ConnectivityState.CONNECTING:
            this.startBackoff();
            this.startConnectingInternal();
            this.continueConnecting = false;
            break;
          case channel_1.ConnectivityState.TRANSIENT_FAILURE:
            if (this.session) {
              this.session.close();
            }
            this.session = null;
            this.stopKeepalivePings();
            if (!this.backoffTimeout.isRunning()) {
              process.nextTick(() => {
                this.handleBackoffTimer();
              });
            }
            break;
          case channel_1.ConnectivityState.IDLE:
            if (this.session) {
              this.session.close();
            }
            this.session = null;
            this.stopKeepalivePings();
            break;
          default:
            throw new Error(`Invalid state: unknown ConnectivityState ${newState}`);
        }
        for (const listener of [...this.stateListeners]) {
          listener(this, previousState, newState);
        }
        return true;
      }
      checkBothRefcounts() {
        if (this.callRefcount === 0 && this.refcount === 0) {
          this.transitionToState([
            channel_1.ConnectivityState.CONNECTING,
            channel_1.ConnectivityState.READY
          ], channel_1.ConnectivityState.TRANSIENT_FAILURE);
        }
      }
      callRef() {
        refTrace(this.subchannelAddressString + " callRefcount " + this.callRefcount + " -> " + (this.callRefcount + 1));
        if (this.callRefcount === 0) {
          if (this.session) {
            this.session.ref();
          }
          this.backoffTimeout.ref();
          if (!this.keepaliveWithoutCalls) {
            this.startKeepalivePings();
          }
        }
        this.callRefcount += 1;
      }
      callUnref() {
        refTrace(this.subchannelAddressString + " callRefcount " + this.callRefcount + " -> " + (this.callRefcount - 1));
        this.callRefcount -= 1;
        if (this.callRefcount === 0) {
          if (this.session) {
            this.session.unref();
          }
          this.backoffTimeout.unref();
          if (!this.keepaliveWithoutCalls) {
            this.stopKeepalivePings();
          }
          this.checkBothRefcounts();
        }
      }
      ref() {
        refTrace(this.subchannelAddressString + " refcount " + this.refcount + " -> " + (this.refcount + 1));
        this.refcount += 1;
      }
      unref() {
        refTrace(this.subchannelAddressString + " refcount " + this.refcount + " -> " + (this.refcount - 1));
        this.refcount -= 1;
        this.checkBothRefcounts();
      }
      unrefIfOneRef() {
        if (this.refcount === 1) {
          this.unref();
          return true;
        }
        return false;
      }
      startCallStream(metadata, callStream, extraFilterFactory) {
        const headers = metadata.toHttp2Headers();
        headers[HTTP2_HEADER_AUTHORITY] = callStream.getHost();
        headers[HTTP2_HEADER_USER_AGENT] = this.userAgent;
        headers[HTTP2_HEADER_CONTENT_TYPE] = "application/grpc";
        headers[HTTP2_HEADER_METHOD] = "POST";
        headers[HTTP2_HEADER_PATH] = callStream.getMethod();
        headers[HTTP2_HEADER_TE] = "trailers";
        let http2Stream;
        try {
          http2Stream = this.session.request(headers);
        } catch (e) {
          this.transitionToState([channel_1.ConnectivityState.READY], channel_1.ConnectivityState.TRANSIENT_FAILURE);
          throw e;
        }
        let headersString = "";
        for (const header of Object.keys(headers)) {
          headersString += "		" + header + ": " + headers[header] + "\n";
        }
        logging.trace(constants_1.LogVerbosity.DEBUG, "call_stream", "Starting stream on subchannel " + this.subchannelAddressString + " with headers\n" + headersString);
        callStream.attachHttp2Stream(http2Stream, this, extraFilterFactory);
      }
      startConnecting() {
        if (!this.transitionToState([channel_1.ConnectivityState.IDLE], channel_1.ConnectivityState.CONNECTING)) {
          if (this.connectivityState === channel_1.ConnectivityState.TRANSIENT_FAILURE) {
            this.continueConnecting = true;
          }
        }
      }
      getConnectivityState() {
        return this.connectivityState;
      }
      addConnectivityStateListener(listener) {
        this.stateListeners.push(listener);
      }
      removeConnectivityStateListener(listener) {
        const listenerIndex = this.stateListeners.indexOf(listener);
        if (listenerIndex > -1) {
          this.stateListeners.splice(listenerIndex, 1);
        }
      }
      addDisconnectListener(listener) {
        this.disconnectListeners.push(listener);
      }
      removeDisconnectListener(listener) {
        const listenerIndex = this.disconnectListeners.indexOf(listener);
        if (listenerIndex > -1) {
          this.disconnectListeners.splice(listenerIndex, 1);
        }
      }
      resetBackoff() {
        this.backoffTimeout.reset();
        this.transitionToState([channel_1.ConnectivityState.TRANSIENT_FAILURE], channel_1.ConnectivityState.CONNECTING);
      }
      getAddress() {
        return this.subchannelAddressString;
      }
    };
    exports2.Subchannel = Subchannel;
  }
});

// node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js
var require_load_balancer_pick_first = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setup = exports2.PickFirstLoadBalancer = exports2.PickFirstLoadBalancingConfig = void 0;
    var load_balancer_1 = require_load_balancer();
    var channel_1 = require_channel();
    var picker_1 = require_picker();
    var subchannel_1 = require_subchannel();
    var logging = require_logging();
    var constants_1 = require_constants();
    var TRACER_NAME = "pick_first";
    function trace(text) {
      logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);
    }
    var TYPE_NAME = "pick_first";
    var CONNECTION_DELAY_INTERVAL_MS = 250;
    var PickFirstLoadBalancingConfig = class {
      getLoadBalancerName() {
        return TYPE_NAME;
      }
      constructor() {
      }
      toJsonObject() {
        return {
          [TYPE_NAME]: {}
        };
      }
      static createFromJson(obj) {
        return new PickFirstLoadBalancingConfig();
      }
    };
    exports2.PickFirstLoadBalancingConfig = PickFirstLoadBalancingConfig;
    var PickFirstPicker = class {
      constructor(subchannel) {
        this.subchannel = subchannel;
      }
      pick(pickArgs) {
        return {
          pickResultType: picker_1.PickResultType.COMPLETE,
          subchannel: this.subchannel,
          status: null,
          extraFilterFactory: null,
          onCallStarted: null
        };
      }
    };
    var PickFirstLoadBalancer = class {
      constructor(channelControlHelper) {
        this.channelControlHelper = channelControlHelper;
        this.latestAddressList = [];
        this.subchannels = [];
        this.currentState = channel_1.ConnectivityState.IDLE;
        this.currentSubchannelIndex = 0;
        this.currentPick = null;
        this.triedAllSubchannels = false;
        this.subchannelStateCounts = {
          [channel_1.ConnectivityState.CONNECTING]: 0,
          [channel_1.ConnectivityState.IDLE]: 0,
          [channel_1.ConnectivityState.READY]: 0,
          [channel_1.ConnectivityState.SHUTDOWN]: 0,
          [channel_1.ConnectivityState.TRANSIENT_FAILURE]: 0
        };
        this.subchannelStateListener = (subchannel, previousState, newState) => {
          this.subchannelStateCounts[previousState] -= 1;
          this.subchannelStateCounts[newState] += 1;
          if (subchannel === this.subchannels[this.currentSubchannelIndex] && newState === channel_1.ConnectivityState.TRANSIENT_FAILURE) {
            this.startNextSubchannelConnecting();
          }
          if (newState === channel_1.ConnectivityState.READY) {
            this.pickSubchannel(subchannel);
            return;
          } else {
            if (this.triedAllSubchannels && this.subchannelStateCounts[channel_1.ConnectivityState.IDLE] === this.subchannels.length) {
              this.resetSubchannelList();
              this.updateState(channel_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this));
              return;
            }
            if (this.currentPick === null) {
              if (this.triedAllSubchannels) {
                let newLBState;
                if (this.subchannelStateCounts[channel_1.ConnectivityState.CONNECTING] > 0) {
                  newLBState = channel_1.ConnectivityState.CONNECTING;
                } else if (this.subchannelStateCounts[channel_1.ConnectivityState.TRANSIENT_FAILURE] > 0) {
                  newLBState = channel_1.ConnectivityState.TRANSIENT_FAILURE;
                } else {
                  newLBState = channel_1.ConnectivityState.IDLE;
                }
                if (newLBState !== this.currentState) {
                  if (newLBState === channel_1.ConnectivityState.TRANSIENT_FAILURE) {
                    this.updateState(newLBState, new picker_1.UnavailablePicker());
                  } else {
                    this.updateState(newLBState, new picker_1.QueuePicker(this));
                  }
                }
              } else {
                this.updateState(channel_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));
              }
            }
          }
        };
        this.pickedSubchannelStateListener = (subchannel, previousState, newState) => {
          if (newState !== channel_1.ConnectivityState.READY) {
            this.currentPick = null;
            subchannel.unref();
            subchannel.removeConnectivityStateListener(this.pickedSubchannelStateListener);
            if (this.subchannels.length > 0) {
              if (this.triedAllSubchannels) {
                let newLBState;
                if (this.subchannelStateCounts[channel_1.ConnectivityState.CONNECTING] > 0) {
                  newLBState = channel_1.ConnectivityState.CONNECTING;
                } else if (this.subchannelStateCounts[channel_1.ConnectivityState.TRANSIENT_FAILURE] > 0) {
                  newLBState = channel_1.ConnectivityState.TRANSIENT_FAILURE;
                } else {
                  newLBState = channel_1.ConnectivityState.IDLE;
                }
                if (newLBState === channel_1.ConnectivityState.TRANSIENT_FAILURE) {
                  this.updateState(newLBState, new picker_1.UnavailablePicker());
                } else {
                  this.updateState(newLBState, new picker_1.QueuePicker(this));
                }
              } else {
                this.updateState(channel_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));
              }
            } else {
              this.updateState(channel_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this));
            }
          }
        };
        this.connectionDelayTimeout = setTimeout(() => {
        }, 0);
        clearTimeout(this.connectionDelayTimeout);
      }
      startNextSubchannelConnecting() {
        if (this.triedAllSubchannels) {
          return;
        }
        for (const [index2, subchannel] of this.subchannels.entries()) {
          if (index2 > this.currentSubchannelIndex) {
            const subchannelState = subchannel.getConnectivityState();
            if (subchannelState === channel_1.ConnectivityState.IDLE || subchannelState === channel_1.ConnectivityState.CONNECTING) {
              this.startConnecting(index2);
              return;
            }
          }
        }
        this.triedAllSubchannels = true;
      }
      startConnecting(subchannelIndex) {
        clearTimeout(this.connectionDelayTimeout);
        this.currentSubchannelIndex = subchannelIndex;
        if (this.subchannels[subchannelIndex].getConnectivityState() === channel_1.ConnectivityState.IDLE) {
          trace("Start connecting to subchannel with address " + this.subchannels[subchannelIndex].getAddress());
          process.nextTick(() => {
            this.subchannels[subchannelIndex].startConnecting();
          });
        }
        this.connectionDelayTimeout = setTimeout(() => {
          this.startNextSubchannelConnecting();
        }, CONNECTION_DELAY_INTERVAL_MS);
      }
      pickSubchannel(subchannel) {
        trace("Pick subchannel with address " + subchannel.getAddress());
        if (this.currentPick !== null) {
          this.currentPick.unref();
          this.currentPick.removeConnectivityStateListener(this.pickedSubchannelStateListener);
        }
        this.currentPick = subchannel;
        this.updateState(channel_1.ConnectivityState.READY, new PickFirstPicker(subchannel));
        subchannel.addConnectivityStateListener(this.pickedSubchannelStateListener);
        subchannel.ref();
        this.resetSubchannelList();
        clearTimeout(this.connectionDelayTimeout);
      }
      updateState(newState, picker) {
        trace(channel_1.ConnectivityState[this.currentState] + " -> " + channel_1.ConnectivityState[newState]);
        this.currentState = newState;
        this.channelControlHelper.updateState(newState, picker);
      }
      resetSubchannelList() {
        for (const subchannel of this.subchannels) {
          subchannel.removeConnectivityStateListener(this.subchannelStateListener);
          subchannel.unref();
        }
        this.currentSubchannelIndex = 0;
        this.subchannelStateCounts = {
          [channel_1.ConnectivityState.CONNECTING]: 0,
          [channel_1.ConnectivityState.IDLE]: 0,
          [channel_1.ConnectivityState.READY]: 0,
          [channel_1.ConnectivityState.SHUTDOWN]: 0,
          [channel_1.ConnectivityState.TRANSIENT_FAILURE]: 0
        };
        this.subchannels = [];
        this.triedAllSubchannels = false;
      }
      connectToAddressList() {
        this.resetSubchannelList();
        trace("Connect to address list " + this.latestAddressList.map((address) => subchannel_1.subchannelAddressToString(address)));
        this.subchannels = this.latestAddressList.map((address) => this.channelControlHelper.createSubchannel(address, {}));
        for (const subchannel of this.subchannels) {
          subchannel.ref();
        }
        for (const subchannel of this.subchannels) {
          subchannel.addConnectivityStateListener(this.subchannelStateListener);
          this.subchannelStateCounts[subchannel.getConnectivityState()] += 1;
          if (subchannel.getConnectivityState() === channel_1.ConnectivityState.READY) {
            this.pickSubchannel(subchannel);
            this.resetSubchannelList();
            return;
          }
        }
        for (const [index2, subchannel] of this.subchannels.entries()) {
          const subchannelState = subchannel.getConnectivityState();
          if (subchannelState === channel_1.ConnectivityState.IDLE || subchannelState === channel_1.ConnectivityState.CONNECTING) {
            this.startConnecting(index2);
            if (this.currentPick === null) {
              this.updateState(channel_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));
            }
            return;
          }
        }
        if (this.currentPick === null) {
          this.updateState(channel_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker());
        }
      }
      updateAddressList(addressList, lbConfig) {
        if (this.subchannels.length === 0 || !this.latestAddressList.every((value, index2) => addressList[index2] === value)) {
          this.latestAddressList = addressList;
          this.connectToAddressList();
        }
      }
      exitIdle() {
        for (const subchannel of this.subchannels) {
          subchannel.startConnecting();
        }
        if (this.currentState === channel_1.ConnectivityState.IDLE) {
          if (this.latestAddressList.length > 0) {
            this.connectToAddressList();
          }
        }
        if (this.currentState === channel_1.ConnectivityState.IDLE || this.triedAllSubchannels) {
          this.channelControlHelper.requestReresolution();
        }
      }
      resetBackoff() {
      }
      destroy() {
        this.resetSubchannelList();
        if (this.currentPick !== null) {
          this.currentPick.unref();
          this.currentPick.removeConnectivityStateListener(this.pickedSubchannelStateListener);
        }
      }
      getTypeName() {
        return TYPE_NAME;
      }
    };
    exports2.PickFirstLoadBalancer = PickFirstLoadBalancer;
    function setup() {
      load_balancer_1.registerLoadBalancerType(TYPE_NAME, PickFirstLoadBalancer, PickFirstLoadBalancingConfig);
    }
    exports2.setup = setup;
  }
});

// node_modules/@grpc/grpc-js/build/src/load-balancer-round-robin.js
var require_load_balancer_round_robin = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/load-balancer-round-robin.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setup = exports2.RoundRobinLoadBalancer = void 0;
    var load_balancer_1 = require_load_balancer();
    var channel_1 = require_channel();
    var picker_1 = require_picker();
    var subchannel_1 = require_subchannel();
    var logging = require_logging();
    var constants_1 = require_constants();
    var TRACER_NAME = "round_robin";
    function trace(text) {
      logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);
    }
    var TYPE_NAME = "round_robin";
    var RoundRobinLoadBalancingConfig = class {
      getLoadBalancerName() {
        return TYPE_NAME;
      }
      constructor() {
      }
      toJsonObject() {
        return {
          [TYPE_NAME]: {}
        };
      }
      static createFromJson(obj) {
        return new RoundRobinLoadBalancingConfig();
      }
    };
    var RoundRobinPicker = class {
      constructor(subchannelList, nextIndex = 0) {
        this.subchannelList = subchannelList;
        this.nextIndex = nextIndex;
      }
      pick(pickArgs) {
        const pickedSubchannel = this.subchannelList[this.nextIndex];
        this.nextIndex = (this.nextIndex + 1) % this.subchannelList.length;
        return {
          pickResultType: picker_1.PickResultType.COMPLETE,
          subchannel: pickedSubchannel,
          status: null,
          extraFilterFactory: null,
          onCallStarted: null
        };
      }
      peekNextSubchannel() {
        return this.subchannelList[this.nextIndex];
      }
    };
    var RoundRobinLoadBalancer = class {
      constructor(channelControlHelper) {
        this.channelControlHelper = channelControlHelper;
        this.subchannels = [];
        this.currentState = channel_1.ConnectivityState.IDLE;
        this.currentReadyPicker = null;
        this.subchannelStateCounts = {
          [channel_1.ConnectivityState.CONNECTING]: 0,
          [channel_1.ConnectivityState.IDLE]: 0,
          [channel_1.ConnectivityState.READY]: 0,
          [channel_1.ConnectivityState.SHUTDOWN]: 0,
          [channel_1.ConnectivityState.TRANSIENT_FAILURE]: 0
        };
        this.subchannelStateListener = (subchannel, previousState, newState) => {
          this.subchannelStateCounts[previousState] -= 1;
          this.subchannelStateCounts[newState] += 1;
          this.calculateAndUpdateState();
          if (newState === channel_1.ConnectivityState.TRANSIENT_FAILURE || newState === channel_1.ConnectivityState.IDLE) {
            this.channelControlHelper.requestReresolution();
            subchannel.startConnecting();
          }
        };
      }
      calculateAndUpdateState() {
        if (this.subchannelStateCounts[channel_1.ConnectivityState.READY] > 0) {
          const readySubchannels = this.subchannels.filter((subchannel) => subchannel.getConnectivityState() === channel_1.ConnectivityState.READY);
          let index2 = 0;
          if (this.currentReadyPicker !== null) {
            index2 = readySubchannels.indexOf(this.currentReadyPicker.peekNextSubchannel());
            if (index2 < 0) {
              index2 = 0;
            }
          }
          this.updateState(channel_1.ConnectivityState.READY, new RoundRobinPicker(readySubchannels, index2));
        } else if (this.subchannelStateCounts[channel_1.ConnectivityState.CONNECTING] > 0) {
          this.updateState(channel_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));
        } else if (this.subchannelStateCounts[channel_1.ConnectivityState.TRANSIENT_FAILURE] > 0) {
          this.updateState(channel_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker());
        } else {
          this.updateState(channel_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this));
        }
      }
      updateState(newState, picker) {
        trace(channel_1.ConnectivityState[this.currentState] + " -> " + channel_1.ConnectivityState[newState]);
        if (newState === channel_1.ConnectivityState.READY) {
          this.currentReadyPicker = picker;
        } else {
          this.currentReadyPicker = null;
        }
        this.currentState = newState;
        this.channelControlHelper.updateState(newState, picker);
      }
      resetSubchannelList() {
        for (const subchannel of this.subchannels) {
          subchannel.removeConnectivityStateListener(this.subchannelStateListener);
          subchannel.unref();
        }
        this.subchannelStateCounts = {
          [channel_1.ConnectivityState.CONNECTING]: 0,
          [channel_1.ConnectivityState.IDLE]: 0,
          [channel_1.ConnectivityState.READY]: 0,
          [channel_1.ConnectivityState.SHUTDOWN]: 0,
          [channel_1.ConnectivityState.TRANSIENT_FAILURE]: 0
        };
        this.subchannels = [];
      }
      updateAddressList(addressList, lbConfig) {
        this.resetSubchannelList();
        trace("Connect to address list " + addressList.map((address) => subchannel_1.subchannelAddressToString(address)));
        this.subchannels = addressList.map((address) => this.channelControlHelper.createSubchannel(address, {}));
        for (const subchannel of this.subchannels) {
          subchannel.ref();
          subchannel.addConnectivityStateListener(this.subchannelStateListener);
          const subchannelState = subchannel.getConnectivityState();
          this.subchannelStateCounts[subchannelState] += 1;
          if (subchannelState === channel_1.ConnectivityState.IDLE || subchannelState === channel_1.ConnectivityState.TRANSIENT_FAILURE) {
            subchannel.startConnecting();
          }
        }
        this.calculateAndUpdateState();
      }
      exitIdle() {
        for (const subchannel of this.subchannels) {
          subchannel.startConnecting();
        }
      }
      resetBackoff() {
      }
      destroy() {
        this.resetSubchannelList();
      }
      getTypeName() {
        return TYPE_NAME;
      }
    };
    exports2.RoundRobinLoadBalancer = RoundRobinLoadBalancer;
    function setup() {
      load_balancer_1.registerLoadBalancerType(TYPE_NAME, RoundRobinLoadBalancer, RoundRobinLoadBalancingConfig);
    }
    exports2.setup = setup;
  }
});

// node_modules/@grpc/grpc-js/build/src/load-balancer.js
var require_load_balancer = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/load-balancer.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.registerAll = exports2.validateLoadBalancingConfig = exports2.getFirstUsableConfig = exports2.isLoadBalancerNameRegistered = exports2.createLoadBalancer = exports2.registerLoadBalancerType = void 0;
    var load_balancer_pick_first = require_load_balancer_pick_first();
    var load_balancer_round_robin = require_load_balancer_round_robin();
    var registeredLoadBalancerTypes = {};
    function registerLoadBalancerType(typeName, loadBalancerType, loadBalancingConfigType) {
      registeredLoadBalancerTypes[typeName] = {
        LoadBalancer: loadBalancerType,
        LoadBalancingConfig: loadBalancingConfigType
      };
    }
    exports2.registerLoadBalancerType = registerLoadBalancerType;
    function createLoadBalancer(config, channelControlHelper) {
      const typeName = config.getLoadBalancerName();
      if (typeName in registeredLoadBalancerTypes) {
        return new registeredLoadBalancerTypes[typeName].LoadBalancer(channelControlHelper);
      } else {
        return null;
      }
    }
    exports2.createLoadBalancer = createLoadBalancer;
    function isLoadBalancerNameRegistered(typeName) {
      return typeName in registeredLoadBalancerTypes;
    }
    exports2.isLoadBalancerNameRegistered = isLoadBalancerNameRegistered;
    function getFirstUsableConfig(configs, defaultPickFirst = false) {
      for (const config of configs) {
        if (config.getLoadBalancerName() in registeredLoadBalancerTypes) {
          return config;
        }
      }
      if (defaultPickFirst) {
        return new load_balancer_pick_first.PickFirstLoadBalancingConfig();
      } else {
        return null;
      }
    }
    exports2.getFirstUsableConfig = getFirstUsableConfig;
    function validateLoadBalancingConfig(obj) {
      if (!(obj !== null && typeof obj === "object")) {
        throw new Error("Load balancing config must be an object");
      }
      const keys = Object.keys(obj);
      if (keys.length !== 1) {
        throw new Error("Provided load balancing config has multiple conflicting entries");
      }
      const typeName = keys[0];
      if (typeName in registeredLoadBalancerTypes) {
        return registeredLoadBalancerTypes[typeName].LoadBalancingConfig.createFromJson(obj[typeName]);
      } else {
        throw new Error(`Unrecognized load balancing config name ${typeName}`);
      }
    }
    exports2.validateLoadBalancingConfig = validateLoadBalancingConfig;
    function registerAll() {
      load_balancer_pick_first.setup();
      load_balancer_round_robin.setup();
    }
    exports2.registerAll = registerAll;
  }
});

// node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js
var require_load_balancer_child_handler = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChildLoadBalancerHandler = void 0;
    var load_balancer_1 = require_load_balancer();
    var channel_1 = require_channel();
    var TYPE_NAME = "child_load_balancer_helper";
    var ChildLoadBalancerHandler = class {
      constructor(channelControlHelper) {
        this.channelControlHelper = channelControlHelper;
        this.currentChild = null;
        this.pendingChild = null;
        this.ChildPolicyHelper = class {
          constructor(parent) {
            this.parent = parent;
            this.child = null;
          }
          createSubchannel(subchannelAddress, subchannelArgs) {
            return this.parent.channelControlHelper.createSubchannel(subchannelAddress, subchannelArgs);
          }
          updateState(connectivityState, picker) {
            var _a;
            if (this.calledByPendingChild()) {
              if (connectivityState !== channel_1.ConnectivityState.READY) {
                return;
              }
              (_a = this.parent.currentChild) === null || _a === void 0 ? void 0 : _a.destroy();
              this.parent.currentChild = this.parent.pendingChild;
              this.parent.pendingChild = null;
            } else if (!this.calledByCurrentChild()) {
              return;
            }
            this.parent.channelControlHelper.updateState(connectivityState, picker);
          }
          requestReresolution() {
            var _a;
            const latestChild = (_a = this.parent.pendingChild) !== null && _a !== void 0 ? _a : this.parent.currentChild;
            if (this.child === latestChild) {
              this.parent.channelControlHelper.requestReresolution();
            }
          }
          setChild(newChild) {
            this.child = newChild;
          }
          calledByPendingChild() {
            return this.child === this.parent.pendingChild;
          }
          calledByCurrentChild() {
            return this.child === this.parent.currentChild;
          }
        };
      }
      updateAddressList(addressList, lbConfig, attributes) {
        let childToUpdate;
        if (this.currentChild === null || this.currentChild.getTypeName() !== lbConfig.getLoadBalancerName()) {
          const newHelper = new this.ChildPolicyHelper(this);
          const newChild = load_balancer_1.createLoadBalancer(lbConfig, newHelper);
          newHelper.setChild(newChild);
          if (this.currentChild === null) {
            this.currentChild = newChild;
            childToUpdate = this.currentChild;
          } else {
            if (this.pendingChild) {
              this.pendingChild.destroy();
            }
            this.pendingChild = newChild;
            childToUpdate = this.pendingChild;
          }
        } else {
          if (this.pendingChild === null) {
            childToUpdate = this.currentChild;
          } else {
            childToUpdate = this.pendingChild;
          }
        }
        childToUpdate.updateAddressList(addressList, lbConfig, attributes);
      }
      exitIdle() {
        if (this.currentChild) {
          this.currentChild.resetBackoff();
          if (this.pendingChild) {
            this.pendingChild.resetBackoff();
          }
        }
      }
      resetBackoff() {
        if (this.currentChild) {
          this.currentChild.resetBackoff();
          if (this.pendingChild) {
            this.pendingChild.resetBackoff();
          }
        }
      }
      destroy() {
        if (this.currentChild) {
          this.currentChild.destroy();
          this.currentChild = null;
        }
        if (this.pendingChild) {
          this.pendingChild.destroy();
          this.pendingChild = null;
        }
      }
      getTypeName() {
        return TYPE_NAME;
      }
    };
    exports2.ChildLoadBalancerHandler = ChildLoadBalancerHandler;
  }
});

// node_modules/@grpc/grpc-js/build/src/resolving-load-balancer.js
var require_resolving_load_balancer = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/resolving-load-balancer.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ResolvingLoadBalancer = void 0;
    var load_balancer_1 = require_load_balancer();
    var service_config_1 = require_service_config();
    var channel_1 = require_channel();
    var resolver_1 = require_resolver();
    var picker_1 = require_picker();
    var backoff_timeout_1 = require_backoff_timeout();
    var constants_1 = require_constants();
    var metadata_1 = require_metadata();
    var logging = require_logging();
    var constants_2 = require_constants();
    var uri_parser_1 = require_uri_parser();
    var load_balancer_child_handler_1 = require_load_balancer_child_handler();
    var TRACER_NAME = "resolving_load_balancer";
    function trace(text) {
      logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, text);
    }
    function getDefaultConfigSelector(serviceConfig) {
      return function defaultConfigSelector(methodName, metadata) {
        var _a, _b;
        const splitName = methodName.split("/").filter((x) => x.length > 0);
        const service = (_a = splitName[0]) !== null && _a !== void 0 ? _a : "";
        const method = (_b = splitName[1]) !== null && _b !== void 0 ? _b : "";
        if (serviceConfig && serviceConfig.methodConfig) {
          for (const methodConfig of serviceConfig.methodConfig) {
            for (const name2 of methodConfig.name) {
              if (name2.service === service && (name2.method === void 0 || name2.method === method)) {
                return {
                  methodConfig,
                  pickInformation: {},
                  status: constants_1.Status.OK
                };
              }
            }
          }
        }
        return {
          methodConfig: { name: [] },
          pickInformation: {},
          status: constants_1.Status.OK
        };
      };
    }
    var ResolvingLoadBalancer = class {
      constructor(target, channelControlHelper, channelOptions, onSuccessfulResolution, onFailedResolution) {
        this.target = target;
        this.channelControlHelper = channelControlHelper;
        this.channelOptions = channelOptions;
        this.onSuccessfulResolution = onSuccessfulResolution;
        this.onFailedResolution = onFailedResolution;
        this.latestChildState = channel_1.ConnectivityState.IDLE;
        this.latestChildPicker = new picker_1.QueuePicker(this);
        this.currentState = channel_1.ConnectivityState.IDLE;
        this.previousServiceConfig = null;
        this.continueResolving = false;
        if (channelOptions["grpc.service_config"]) {
          this.defaultServiceConfig = service_config_1.validateServiceConfig(JSON.parse(channelOptions["grpc.service_config"]));
        } else {
          this.defaultServiceConfig = {
            loadBalancingConfig: [],
            methodConfig: []
          };
        }
        this.updateState(channel_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this));
        this.childLoadBalancer = new load_balancer_child_handler_1.ChildLoadBalancerHandler({
          createSubchannel: channelControlHelper.createSubchannel.bind(channelControlHelper),
          requestReresolution: () => {
            if (this.backoffTimeout.isRunning()) {
              this.continueResolving = true;
            } else {
              this.updateResolution();
            }
          },
          updateState: (newState, picker) => {
            this.latestChildState = newState;
            this.latestChildPicker = picker;
            this.updateState(newState, picker);
          }
        });
        this.innerResolver = resolver_1.createResolver(target, {
          onSuccessfulResolution: (addressList, serviceConfig, serviceConfigError, configSelector, attributes) => {
            var _a;
            let workingServiceConfig = null;
            if (serviceConfig === null) {
              if (serviceConfigError === null) {
                this.previousServiceConfig = null;
                workingServiceConfig = this.defaultServiceConfig;
              } else {
                if (this.previousServiceConfig === null) {
                  this.handleResolutionFailure(serviceConfigError);
                } else {
                  workingServiceConfig = this.previousServiceConfig;
                }
              }
            } else {
              workingServiceConfig = serviceConfig;
              this.previousServiceConfig = serviceConfig;
            }
            const workingConfigList = (_a = workingServiceConfig === null || workingServiceConfig === void 0 ? void 0 : workingServiceConfig.loadBalancingConfig) !== null && _a !== void 0 ? _a : [];
            const loadBalancingConfig = load_balancer_1.getFirstUsableConfig(workingConfigList, true);
            if (loadBalancingConfig === null) {
              this.handleResolutionFailure({
                code: constants_1.Status.UNAVAILABLE,
                details: "All load balancer options in service config are not compatible",
                metadata: new metadata_1.Metadata()
              });
              return;
            }
            this.childLoadBalancer.updateAddressList(addressList, loadBalancingConfig, attributes);
            const finalServiceConfig = workingServiceConfig !== null && workingServiceConfig !== void 0 ? workingServiceConfig : this.defaultServiceConfig;
            this.onSuccessfulResolution(configSelector !== null && configSelector !== void 0 ? configSelector : getDefaultConfigSelector(finalServiceConfig));
          },
          onError: (error2) => {
            this.handleResolutionFailure(error2);
          }
        }, channelOptions);
        this.backoffTimeout = new backoff_timeout_1.BackoffTimeout(() => {
          if (this.continueResolving) {
            this.updateResolution();
            this.continueResolving = false;
          } else {
            this.updateState(this.latestChildState, this.latestChildPicker);
          }
        });
        this.backoffTimeout.unref();
      }
      updateResolution() {
        this.innerResolver.updateResolution();
        if (this.currentState === channel_1.ConnectivityState.IDLE) {
          this.updateState(channel_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));
        }
      }
      updateState(connectivityState, picker) {
        trace(uri_parser_1.uriToString(this.target) + " " + channel_1.ConnectivityState[this.currentState] + " -> " + channel_1.ConnectivityState[connectivityState]);
        if (connectivityState === channel_1.ConnectivityState.IDLE) {
          picker = new picker_1.QueuePicker(this);
        }
        this.currentState = connectivityState;
        this.channelControlHelper.updateState(connectivityState, picker);
      }
      handleResolutionFailure(error2) {
        if (this.latestChildState === channel_1.ConnectivityState.IDLE) {
          this.updateState(channel_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker(error2));
          this.onFailedResolution(error2);
        }
        this.backoffTimeout.runOnce();
      }
      exitIdle() {
        this.childLoadBalancer.exitIdle();
        if (this.currentState === channel_1.ConnectivityState.IDLE) {
          if (this.backoffTimeout.isRunning()) {
            this.continueResolving = true;
          } else {
            this.updateResolution();
          }
          this.updateState(channel_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));
        }
      }
      updateAddressList(addressList, lbConfig) {
        throw new Error("updateAddressList not supported on ResolvingLoadBalancer");
      }
      resetBackoff() {
        this.backoffTimeout.reset();
        this.childLoadBalancer.resetBackoff();
      }
      destroy() {
        this.childLoadBalancer.destroy();
        this.innerResolver.destroy();
        this.updateState(channel_1.ConnectivityState.SHUTDOWN, new picker_1.UnavailablePicker());
      }
      getTypeName() {
        return "resolving_load_balancer";
      }
    };
    exports2.ResolvingLoadBalancer = ResolvingLoadBalancer;
  }
});

// node_modules/@grpc/grpc-js/build/src/channel-options.js
var require_channel_options = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/channel-options.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.channelOptionsEqual = exports2.recognizedOptions = void 0;
    exports2.recognizedOptions = {
      "grpc.ssl_target_name_override": true,
      "grpc.primary_user_agent": true,
      "grpc.secondary_user_agent": true,
      "grpc.default_authority": true,
      "grpc.keepalive_time_ms": true,
      "grpc.keepalive_timeout_ms": true,
      "grpc.keepalive_permit_without_calls": true,
      "grpc.service_config": true,
      "grpc.max_concurrent_streams": true,
      "grpc.initial_reconnect_backoff_ms": true,
      "grpc.max_reconnect_backoff_ms": true,
      "grpc.use_local_subchannel_pool": true,
      "grpc.max_send_message_length": true,
      "grpc.max_receive_message_length": true,
      "grpc.enable_http_proxy": true,
      "grpc-node.max_session_memory": true
    };
    function channelOptionsEqual(options1, options2) {
      const keys1 = Object.keys(options1).sort();
      const keys2 = Object.keys(options2).sort();
      if (keys1.length !== keys2.length) {
        return false;
      }
      for (let i = 0; i < keys1.length; i += 1) {
        if (keys1[i] !== keys2[i]) {
          return false;
        }
        if (options1[keys1[i]] !== options2[keys2[i]]) {
          return false;
        }
      }
      return true;
    }
    exports2.channelOptionsEqual = channelOptionsEqual;
  }
});

// node_modules/@grpc/grpc-js/build/src/subchannel-pool.js
var require_subchannel_pool = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/subchannel-pool.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSubchannelPool = exports2.SubchannelPool = void 0;
    var channel_options_1 = require_channel_options();
    var subchannel_1 = require_subchannel();
    var uri_parser_1 = require_uri_parser();
    var REF_CHECK_INTERVAL = 1e4;
    var SubchannelPool = class {
      constructor(global2) {
        this.global = global2;
        this.pool = Object.create(null);
        this.cleanupTimer = null;
      }
      unrefUnusedSubchannels() {
        let allSubchannelsUnrefed = true;
        for (const channelTarget in this.pool) {
          const subchannelObjArray = this.pool[channelTarget];
          const refedSubchannels = subchannelObjArray.filter((value) => !value.subchannel.unrefIfOneRef());
          if (refedSubchannels.length > 0) {
            allSubchannelsUnrefed = false;
          }
          this.pool[channelTarget] = refedSubchannels;
        }
        if (allSubchannelsUnrefed && this.cleanupTimer !== null) {
          clearInterval(this.cleanupTimer);
          this.cleanupTimer = null;
        }
      }
      ensureCleanupTask() {
        var _a, _b;
        if (this.global && this.cleanupTimer === null) {
          this.cleanupTimer = setInterval(() => {
            this.unrefUnusedSubchannels();
          }, REF_CHECK_INTERVAL);
          (_b = (_a = this.cleanupTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
        }
      }
      getOrCreateSubchannel(channelTargetUri, subchannelTarget, channelArguments, channelCredentials) {
        this.ensureCleanupTask();
        const channelTarget = uri_parser_1.uriToString(channelTargetUri);
        if (channelTarget in this.pool) {
          const subchannelObjArray = this.pool[channelTarget];
          for (const subchannelObj of subchannelObjArray) {
            if (subchannel_1.subchannelAddressEqual(subchannelTarget, subchannelObj.subchannelAddress) && channel_options_1.channelOptionsEqual(channelArguments, subchannelObj.channelArguments) && channelCredentials._equals(subchannelObj.channelCredentials)) {
              return subchannelObj.subchannel;
            }
          }
        }
        const subchannel = new subchannel_1.Subchannel(channelTargetUri, subchannelTarget, channelArguments, channelCredentials);
        if (!(channelTarget in this.pool)) {
          this.pool[channelTarget] = [];
        }
        this.pool[channelTarget].push({
          subchannelAddress: subchannelTarget,
          channelArguments,
          channelCredentials,
          subchannel
        });
        if (this.global) {
          subchannel.ref();
        }
        return subchannel;
      }
    };
    exports2.SubchannelPool = SubchannelPool;
    var globalSubchannelPool = new SubchannelPool(true);
    function getSubchannelPool(global2) {
      if (global2) {
        return globalSubchannelPool;
      } else {
        return new SubchannelPool(false);
      }
    }
    exports2.getSubchannelPool = getSubchannelPool;
  }
});

// node_modules/@grpc/grpc-js/build/src/filter.js
var require_filter = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/filter.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BaseFilter = void 0;
    var BaseFilter = class {
      async sendMetadata(metadata) {
        return metadata;
      }
      receiveMetadata(metadata) {
        return metadata;
      }
      async sendMessage(message) {
        return message;
      }
      async receiveMessage(message) {
        return message;
      }
      receiveTrailers(status) {
        return status;
      }
    };
    exports2.BaseFilter = BaseFilter;
  }
});

// node_modules/@grpc/grpc-js/build/src/call-credentials-filter.js
var require_call_credentials_filter = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/call-credentials-filter.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CallCredentialsFilterFactory = exports2.CallCredentialsFilter = void 0;
    var filter_1 = require_filter();
    var constants_1 = require_constants();
    var uri_parser_1 = require_uri_parser();
    var CallCredentialsFilter = class extends filter_1.BaseFilter {
      constructor(channel, stream) {
        var _a, _b;
        super();
        this.channel = channel;
        this.stream = stream;
        this.channel = channel;
        this.stream = stream;
        const splitPath = stream.getMethod().split("/");
        let serviceName = "";
        if (splitPath.length >= 2) {
          serviceName = splitPath[1];
        }
        const hostname = (_b = (_a = uri_parser_1.splitHostPort(stream.getHost())) === null || _a === void 0 ? void 0 : _a.host) !== null && _b !== void 0 ? _b : "localhost";
        this.serviceUrl = `https://${hostname}/${serviceName}`;
      }
      async sendMetadata(metadata) {
        const credentials = this.stream.getCredentials();
        const credsMetadata = credentials.generateMetadata({
          service_url: this.serviceUrl
        });
        const resultMetadata = await metadata;
        try {
          resultMetadata.merge(await credsMetadata);
        } catch (error2) {
          this.stream.cancelWithStatus(constants_1.Status.UNAUTHENTICATED, `Failed to retrieve auth metadata with error: ${error2.message}`);
          return Promise.reject("Failed to retrieve auth metadata");
        }
        if (resultMetadata.get("authorization").length > 1) {
          this.stream.cancelWithStatus(constants_1.Status.INTERNAL, '"authorization" metadata cannot have multiple values');
          return Promise.reject('"authorization" metadata cannot have multiple values');
        }
        return resultMetadata;
      }
    };
    exports2.CallCredentialsFilter = CallCredentialsFilter;
    var CallCredentialsFilterFactory = class {
      constructor(channel) {
        this.channel = channel;
        this.channel = channel;
      }
      createFilter(callStream) {
        return new CallCredentialsFilter(this.channel, callStream);
      }
    };
    exports2.CallCredentialsFilterFactory = CallCredentialsFilterFactory;
  }
});

// node_modules/@grpc/grpc-js/build/src/deadline-filter.js
var require_deadline_filter = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/deadline-filter.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeadlineFilterFactory = exports2.DeadlineFilter = void 0;
    var constants_1 = require_constants();
    var filter_1 = require_filter();
    var units = [
      ["m", 1],
      ["S", 1e3],
      ["M", 60 * 1e3],
      ["H", 60 * 60 * 1e3]
    ];
    function getDeadline(deadline) {
      const now = new Date().getTime();
      const timeoutMs = Math.max(deadline - now, 0);
      for (const [unit, factor] of units) {
        const amount = timeoutMs / factor;
        if (amount < 1e8) {
          return String(Math.ceil(amount)) + unit;
        }
      }
      throw new Error("Deadline is too far in the future");
    }
    var DeadlineFilter = class extends filter_1.BaseFilter {
      constructor(channel, callStream) {
        var _a, _b;
        super();
        this.channel = channel;
        this.callStream = callStream;
        this.timer = null;
        const callDeadline = callStream.getDeadline();
        if (callDeadline instanceof Date) {
          this.deadline = callDeadline.getTime();
        } else {
          this.deadline = callDeadline;
        }
        const now = new Date().getTime();
        let timeout = this.deadline - now;
        if (timeout <= 0) {
          process.nextTick(() => {
            callStream.cancelWithStatus(constants_1.Status.DEADLINE_EXCEEDED, "Deadline exceeded");
          });
        } else if (this.deadline !== Infinity) {
          this.timer = setTimeout(() => {
            callStream.cancelWithStatus(constants_1.Status.DEADLINE_EXCEEDED, "Deadline exceeded");
          }, timeout);
          (_b = (_a = this.timer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
        }
      }
      async sendMetadata(metadata) {
        if (this.deadline === Infinity) {
          return metadata;
        }
        const finalMetadata = await metadata;
        const timeoutString = getDeadline(this.deadline);
        finalMetadata.set("grpc-timeout", timeoutString);
        return finalMetadata;
      }
      receiveTrailers(status) {
        if (this.timer) {
          clearTimeout(this.timer);
        }
        return status;
      }
    };
    exports2.DeadlineFilter = DeadlineFilter;
    var DeadlineFilterFactory = class {
      constructor(channel) {
        this.channel = channel;
      }
      createFilter(callStream) {
        return new DeadlineFilter(this.channel, callStream);
      }
    };
    exports2.DeadlineFilterFactory = DeadlineFilterFactory;
  }
});

// node_modules/@grpc/grpc-js/build/src/compression-filter.js
var require_compression_filter = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/compression-filter.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CompressionFilterFactory = exports2.CompressionFilter = void 0;
    var zlib2 = require("zlib");
    var filter_1 = require_filter();
    var CompressionHandler = class {
      async writeMessage(message, compress) {
        let messageBuffer = message;
        if (compress) {
          messageBuffer = await this.compressMessage(messageBuffer);
        }
        const output = Buffer.allocUnsafe(messageBuffer.length + 5);
        output.writeUInt8(compress ? 1 : 0, 0);
        output.writeUInt32BE(messageBuffer.length, 1);
        messageBuffer.copy(output, 5);
        return output;
      }
      async readMessage(data) {
        const compressed = data.readUInt8(0) === 1;
        let messageBuffer = data.slice(5);
        if (compressed) {
          messageBuffer = await this.decompressMessage(messageBuffer);
        }
        return messageBuffer;
      }
    };
    var IdentityHandler = class extends CompressionHandler {
      async compressMessage(message) {
        return message;
      }
      async writeMessage(message, compress) {
        const output = Buffer.allocUnsafe(message.length + 5);
        output.writeUInt8(0, 0);
        output.writeUInt32BE(message.length, 1);
        message.copy(output, 5);
        return output;
      }
      decompressMessage(message) {
        return Promise.reject(new Error('Received compressed message but "grpc-encoding" header was identity'));
      }
    };
    var DeflateHandler = class extends CompressionHandler {
      compressMessage(message) {
        return new Promise((resolve2, reject) => {
          zlib2.deflate(message, (err, output) => {
            if (err) {
              reject(err);
            } else {
              resolve2(output);
            }
          });
        });
      }
      decompressMessage(message) {
        return new Promise((resolve2, reject) => {
          zlib2.inflate(message, (err, output) => {
            if (err) {
              reject(err);
            } else {
              resolve2(output);
            }
          });
        });
      }
    };
    var GzipHandler = class extends CompressionHandler {
      compressMessage(message) {
        return new Promise((resolve2, reject) => {
          zlib2.gzip(message, (err, output) => {
            if (err) {
              reject(err);
            } else {
              resolve2(output);
            }
          });
        });
      }
      decompressMessage(message) {
        return new Promise((resolve2, reject) => {
          zlib2.unzip(message, (err, output) => {
            if (err) {
              reject(err);
            } else {
              resolve2(output);
            }
          });
        });
      }
    };
    var UnknownHandler = class extends CompressionHandler {
      constructor(compressionName) {
        super();
        this.compressionName = compressionName;
      }
      compressMessage(message) {
        return Promise.reject(new Error(`Received message compressed with unsupported compression method ${this.compressionName}`));
      }
      decompressMessage(message) {
        return Promise.reject(new Error(`Compression method not supported: ${this.compressionName}`));
      }
    };
    function getCompressionHandler(compressionName) {
      switch (compressionName) {
        case "identity":
          return new IdentityHandler();
        case "deflate":
          return new DeflateHandler();
        case "gzip":
          return new GzipHandler();
        default:
          return new UnknownHandler(compressionName);
      }
    }
    var CompressionFilter = class extends filter_1.BaseFilter {
      constructor() {
        super(...arguments);
        this.sendCompression = new IdentityHandler();
        this.receiveCompression = new IdentityHandler();
      }
      async sendMetadata(metadata) {
        const headers = await metadata;
        headers.set("grpc-accept-encoding", "identity,deflate,gzip");
        headers.set("accept-encoding", "identity");
        return headers;
      }
      receiveMetadata(metadata) {
        const receiveEncoding = metadata.get("grpc-encoding");
        if (receiveEncoding.length > 0) {
          const encoding = receiveEncoding[0];
          if (typeof encoding === "string") {
            this.receiveCompression = getCompressionHandler(encoding);
          }
        }
        metadata.remove("grpc-encoding");
        metadata.remove("grpc-accept-encoding");
        return metadata;
      }
      async sendMessage(message) {
        const resolvedMessage = await message;
        const compress = resolvedMessage.flags === void 0 ? false : (resolvedMessage.flags & 2) === 0;
        return {
          message: await this.sendCompression.writeMessage(resolvedMessage.message, compress),
          flags: resolvedMessage.flags
        };
      }
      async receiveMessage(message) {
        return this.receiveCompression.readMessage(await message);
      }
    };
    exports2.CompressionFilter = CompressionFilter;
    var CompressionFilterFactory = class {
      constructor(channel) {
        this.channel = channel;
      }
      createFilter(callStream) {
        return new CompressionFilter();
      }
    };
    exports2.CompressionFilterFactory = CompressionFilterFactory;
  }
});

// node_modules/@grpc/grpc-js/build/src/max-message-size-filter.js
var require_max_message_size_filter = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/max-message-size-filter.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MaxMessageSizeFilterFactory = exports2.MaxMessageSizeFilter = void 0;
    var filter_1 = require_filter();
    var constants_1 = require_constants();
    var MaxMessageSizeFilter = class extends filter_1.BaseFilter {
      constructor(options2, callStream) {
        super();
        this.options = options2;
        this.callStream = callStream;
        this.maxSendMessageSize = constants_1.DEFAULT_MAX_SEND_MESSAGE_LENGTH;
        this.maxReceiveMessageSize = constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;
        if ("grpc.max_send_message_length" in options2) {
          this.maxSendMessageSize = options2["grpc.max_send_message_length"];
        }
        if ("grpc.max_receive_message_length" in options2) {
          this.maxReceiveMessageSize = options2["grpc.max_receive_message_length"];
        }
      }
      async sendMessage(message) {
        if (this.maxSendMessageSize === -1) {
          return message;
        } else {
          const concreteMessage = await message;
          if (concreteMessage.message.length > this.maxSendMessageSize) {
            this.callStream.cancelWithStatus(constants_1.Status.RESOURCE_EXHAUSTED, `Sent message larger than max (${concreteMessage.message.length} vs. ${this.maxSendMessageSize})`);
            return Promise.reject("Message too large");
          } else {
            return concreteMessage;
          }
        }
      }
      async receiveMessage(message) {
        if (this.maxReceiveMessageSize === -1) {
          return message;
        } else {
          const concreteMessage = await message;
          if (concreteMessage.length > this.maxReceiveMessageSize) {
            this.callStream.cancelWithStatus(constants_1.Status.RESOURCE_EXHAUSTED, `Received message larger than max (${concreteMessage.length} vs. ${this.maxReceiveMessageSize})`);
            return Promise.reject("Message too large");
          } else {
            return concreteMessage;
          }
        }
      }
    };
    exports2.MaxMessageSizeFilter = MaxMessageSizeFilter;
    var MaxMessageSizeFilterFactory = class {
      constructor(options2) {
        this.options = options2;
      }
      createFilter(callStream) {
        return new MaxMessageSizeFilter(this.options, callStream);
      }
    };
    exports2.MaxMessageSizeFilterFactory = MaxMessageSizeFilterFactory;
  }
});

// node_modules/@grpc/grpc-js/build/src/channel.js
var require_channel = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/channel.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChannelImplementation = exports2.ConnectivityState = void 0;
    var call_stream_1 = require_call_stream();
    var channel_credentials_1 = require_channel_credentials();
    var resolving_load_balancer_1 = require_resolving_load_balancer();
    var subchannel_pool_1 = require_subchannel_pool();
    var picker_1 = require_picker();
    var constants_1 = require_constants();
    var filter_stack_1 = require_filter_stack();
    var call_credentials_filter_1 = require_call_credentials_filter();
    var deadline_filter_1 = require_deadline_filter();
    var compression_filter_1 = require_compression_filter();
    var resolver_1 = require_resolver();
    var logging_1 = require_logging();
    var max_message_size_filter_1 = require_max_message_size_filter();
    var http_proxy_1 = require_http_proxy();
    var uri_parser_1 = require_uri_parser();
    var ConnectivityState;
    (function(ConnectivityState2) {
      ConnectivityState2[ConnectivityState2["IDLE"] = 0] = "IDLE";
      ConnectivityState2[ConnectivityState2["CONNECTING"] = 1] = "CONNECTING";
      ConnectivityState2[ConnectivityState2["READY"] = 2] = "READY";
      ConnectivityState2[ConnectivityState2["TRANSIENT_FAILURE"] = 3] = "TRANSIENT_FAILURE";
      ConnectivityState2[ConnectivityState2["SHUTDOWN"] = 4] = "SHUTDOWN";
    })(ConnectivityState = exports2.ConnectivityState || (exports2.ConnectivityState = {}));
    var MAX_TIMEOUT_TIME = 2147483647;
    var nextCallNumber = 0;
    function getNewCallNumber() {
      const callNumber = nextCallNumber;
      nextCallNumber += 1;
      if (nextCallNumber >= Number.MAX_SAFE_INTEGER) {
        nextCallNumber = 0;
      }
      return callNumber;
    }
    var ChannelImplementation = class {
      constructor(target, credentials, options2) {
        var _a, _b, _c;
        this.credentials = credentials;
        this.options = options2;
        this.connectivityState = ConnectivityState.IDLE;
        this.currentPicker = new picker_1.UnavailablePicker();
        this.configSelectionQueue = [];
        this.pickQueue = [];
        this.connectivityStateWatchers = [];
        this.configSelector = null;
        if (typeof target !== "string") {
          throw new TypeError("Channel target must be a string");
        }
        if (!(credentials instanceof channel_credentials_1.ChannelCredentials)) {
          throw new TypeError("Channel credentials must be a ChannelCredentials object");
        }
        if (options2) {
          if (typeof options2 !== "object" || !Object.values(options2).every((value) => typeof value === "string" || typeof value === "number" || typeof value === "undefined")) {
            throw new TypeError("Channel options must be an object with string or number values");
          }
        }
        const originalTargetUri = uri_parser_1.parseUri(target);
        if (originalTargetUri === null) {
          throw new Error(`Could not parse target name "${target}"`);
        }
        const defaultSchemeMapResult = resolver_1.mapUriDefaultScheme(originalTargetUri);
        if (defaultSchemeMapResult === null) {
          throw new Error(`Could not find a default scheme for target name "${target}"`);
        }
        this.callRefTimer = setInterval(() => {
        }, MAX_TIMEOUT_TIME);
        (_b = (_a = this.callRefTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
        if (this.options["grpc.default_authority"]) {
          this.defaultAuthority = this.options["grpc.default_authority"];
        } else {
          this.defaultAuthority = resolver_1.getDefaultAuthority(defaultSchemeMapResult);
        }
        const proxyMapResult = http_proxy_1.mapProxyName(defaultSchemeMapResult, options2);
        this.target = proxyMapResult.target;
        this.options = Object.assign({}, this.options, proxyMapResult.extraOptions);
        this.subchannelPool = subchannel_pool_1.getSubchannelPool(((_c = options2["grpc.use_local_subchannel_pool"]) !== null && _c !== void 0 ? _c : 0) === 0);
        const channelControlHelper = {
          createSubchannel: (subchannelAddress, subchannelArgs) => {
            return this.subchannelPool.getOrCreateSubchannel(this.target, subchannelAddress, Object.assign({}, this.options, subchannelArgs), this.credentials);
          },
          updateState: (connectivityState, picker) => {
            this.currentPicker = picker;
            const queueCopy = this.pickQueue.slice();
            this.pickQueue = [];
            this.callRefTimerUnref();
            for (const { callStream, callMetadata, callConfig } of queueCopy) {
              this.tryPick(callStream, callMetadata, callConfig);
            }
            this.updateState(connectivityState);
          },
          requestReresolution: () => {
            throw new Error("Resolving load balancer should never call requestReresolution");
          }
        };
        this.resolvingLoadBalancer = new resolving_load_balancer_1.ResolvingLoadBalancer(this.target, channelControlHelper, options2, (configSelector) => {
          this.configSelector = configSelector;
          process.nextTick(() => {
            const localQueue = this.configSelectionQueue;
            this.configSelectionQueue = [];
            this.callRefTimerUnref();
            for (const { callStream, callMetadata } of localQueue) {
              this.tryGetConfig(callStream, callMetadata);
            }
            this.configSelectionQueue = [];
          });
        }, (status) => {
          if (this.configSelectionQueue.length > 0) {
            logging_1.trace(constants_1.LogVerbosity.DEBUG, "channel", "Name resolution failed for target " + uri_parser_1.uriToString(this.target) + " with calls queued for config selection");
          }
          const localQueue = this.configSelectionQueue;
          this.configSelectionQueue = [];
          this.callRefTimerUnref();
          for (const { callStream, callMetadata } of localQueue) {
            if (callMetadata.getOptions().waitForReady) {
              this.callRefTimerRef();
              this.configSelectionQueue.push({ callStream, callMetadata });
            } else {
              callStream.cancelWithStatus(status.code, status.details);
            }
          }
        });
        this.filterStackFactory = new filter_stack_1.FilterStackFactory([
          new call_credentials_filter_1.CallCredentialsFilterFactory(this),
          new deadline_filter_1.DeadlineFilterFactory(this),
          new max_message_size_filter_1.MaxMessageSizeFilterFactory(this.options),
          new compression_filter_1.CompressionFilterFactory(this)
        ]);
      }
      callRefTimerRef() {
        var _a, _b, _c, _d;
        if (!((_b = (_a = this.callRefTimer).hasRef) === null || _b === void 0 ? void 0 : _b.call(_a))) {
          logging_1.trace(constants_1.LogVerbosity.DEBUG, "channel", "callRefTimer.ref | configSelectionQueue.length=" + this.configSelectionQueue.length + " pickQueue.length=" + this.pickQueue.length);
          (_d = (_c = this.callRefTimer).ref) === null || _d === void 0 ? void 0 : _d.call(_c);
        }
      }
      callRefTimerUnref() {
        var _a, _b;
        if (!this.callRefTimer.hasRef || this.callRefTimer.hasRef()) {
          logging_1.trace(constants_1.LogVerbosity.DEBUG, "channel", "callRefTimer.unref | configSelectionQueue.length=" + this.configSelectionQueue.length + " pickQueue.length=" + this.pickQueue.length);
          (_b = (_a = this.callRefTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
        }
      }
      pushPick(callStream, callMetadata, callConfig) {
        this.pickQueue.push({ callStream, callMetadata, callConfig });
        this.callRefTimerRef();
      }
      tryPick(callStream, callMetadata, callConfig) {
        var _a, _b, _c;
        const pickResult = this.currentPicker.pick({ metadata: callMetadata, extraPickInfo: callConfig.pickInformation });
        logging_1.trace(constants_1.LogVerbosity.DEBUG, "channel", "Pick result: " + picker_1.PickResultType[pickResult.pickResultType] + " subchannel: " + ((_a = pickResult.subchannel) === null || _a === void 0 ? void 0 : _a.getAddress()) + " status: " + ((_b = pickResult.status) === null || _b === void 0 ? void 0 : _b.code) + " " + ((_c = pickResult.status) === null || _c === void 0 ? void 0 : _c.details));
        switch (pickResult.pickResultType) {
          case picker_1.PickResultType.COMPLETE:
            if (pickResult.subchannel === null) {
              callStream.cancelWithStatus(constants_1.Status.UNAVAILABLE, "Request dropped by load balancing policy");
            } else {
              if (pickResult.subchannel.getConnectivityState() !== ConnectivityState.READY) {
                logging_1.log(constants_1.LogVerbosity.ERROR, "Error: COMPLETE pick result subchannel " + pickResult.subchannel.getAddress() + " has state " + ConnectivityState[pickResult.subchannel.getConnectivityState()]);
                this.pushPick(callStream, callMetadata, callConfig);
                break;
              }
              callStream.filterStack.sendMetadata(Promise.resolve(callMetadata.clone())).then((finalMetadata) => {
                var _a2, _b2, _c2;
                const subchannelState = pickResult.subchannel.getConnectivityState();
                if (subchannelState === ConnectivityState.READY) {
                  try {
                    pickResult.subchannel.startCallStream(finalMetadata, callStream, (_a2 = pickResult.extraFilterFactory) !== null && _a2 !== void 0 ? _a2 : void 0);
                    (_b2 = callConfig.onCommitted) === null || _b2 === void 0 ? void 0 : _b2.call(callConfig);
                    (_c2 = pickResult.onCallStarted) === null || _c2 === void 0 ? void 0 : _c2.call(pickResult);
                  } catch (error2) {
                    if (error2.code === "ERR_HTTP2_GOAWAY_SESSION") {
                      logging_1.trace(constants_1.LogVerbosity.INFO, "channel", "Failed to start call on picked subchannel " + pickResult.subchannel.getAddress() + " with error " + error2.message + ". Retrying pick");
                      this.tryPick(callStream, callMetadata, callConfig);
                    } else {
                      logging_1.trace(constants_1.LogVerbosity.INFO, "channel", "Failed to start call on picked subchanel " + pickResult.subchannel.getAddress() + " with error " + error2.message + ". Ending call");
                      callStream.cancelWithStatus(constants_1.Status.INTERNAL, `Failed to start HTTP/2 stream with error: ${error2.message}`);
                    }
                  }
                } else {
                  logging_1.trace(constants_1.LogVerbosity.INFO, "channel", "Picked subchannel " + pickResult.subchannel.getAddress() + " has state " + ConnectivityState[subchannelState] + " after metadata filters. Retrying pick");
                  this.tryPick(callStream, callMetadata, callConfig);
                }
              }, (error2) => {
                callStream.cancelWithStatus(typeof error2.code === "number" ? error2.code : constants_1.Status.UNKNOWN, `Getting metadata from plugin failed with error: ${error2.message}`);
              });
            }
            break;
          case picker_1.PickResultType.QUEUE:
            this.pushPick(callStream, callMetadata, callConfig);
            break;
          case picker_1.PickResultType.TRANSIENT_FAILURE:
            if (callMetadata.getOptions().waitForReady) {
              this.pushPick(callStream, callMetadata, callConfig);
            } else {
              callStream.cancelWithStatus(pickResult.status.code, pickResult.status.details);
            }
            break;
          case picker_1.PickResultType.DROP:
            callStream.cancelWithStatus(pickResult.status.code, pickResult.status.details);
            break;
          default:
            throw new Error(`Invalid state: unknown pickResultType ${pickResult.pickResultType}`);
        }
      }
      removeConnectivityStateWatcher(watcherObject) {
        const watcherIndex = this.connectivityStateWatchers.findIndex((value) => value === watcherObject);
        if (watcherIndex >= 0) {
          this.connectivityStateWatchers.splice(watcherIndex, 1);
        }
      }
      updateState(newState) {
        logging_1.trace(constants_1.LogVerbosity.DEBUG, "connectivity_state", uri_parser_1.uriToString(this.target) + " " + ConnectivityState[this.connectivityState] + " -> " + ConnectivityState[newState]);
        this.connectivityState = newState;
        const watchersCopy = this.connectivityStateWatchers.slice();
        for (const watcherObject of watchersCopy) {
          if (newState !== watcherObject.currentState) {
            if (watcherObject.timer) {
              clearTimeout(watcherObject.timer);
            }
            this.removeConnectivityStateWatcher(watcherObject);
            watcherObject.callback();
          }
        }
      }
      tryGetConfig(stream, metadata) {
        if (this.configSelector === null) {
          this.resolvingLoadBalancer.exitIdle();
          this.configSelectionQueue.push({
            callStream: stream,
            callMetadata: metadata
          });
          this.callRefTimerRef();
        } else {
          const callConfig = this.configSelector(stream.getMethod(), metadata);
          if (callConfig.status === constants_1.Status.OK) {
            this.tryPick(stream, metadata, callConfig);
          } else {
            stream.cancelWithStatus(callConfig.status, "Failed to route call to method " + stream.getMethod());
          }
        }
      }
      _startCallStream(stream, metadata) {
        this.tryGetConfig(stream, metadata.clone());
      }
      close() {
        this.resolvingLoadBalancer.destroy();
        this.updateState(ConnectivityState.SHUTDOWN);
        clearInterval(this.callRefTimer);
        this.subchannelPool.unrefUnusedSubchannels();
      }
      getTarget() {
        return uri_parser_1.uriToString(this.target);
      }
      getConnectivityState(tryToConnect) {
        const connectivityState = this.connectivityState;
        if (tryToConnect) {
          this.resolvingLoadBalancer.exitIdle();
        }
        return connectivityState;
      }
      watchConnectivityState(currentState, deadline, callback) {
        if (this.connectivityState === ConnectivityState.SHUTDOWN) {
          throw new Error("Channel has been shut down");
        }
        let timer = null;
        if (deadline !== Infinity) {
          const deadlineDate = deadline instanceof Date ? deadline : new Date(deadline);
          const now = new Date();
          if (deadline === -Infinity || deadlineDate <= now) {
            process.nextTick(callback, new Error("Deadline passed without connectivity state change"));
            return;
          }
          timer = setTimeout(() => {
            this.removeConnectivityStateWatcher(watcherObject);
            callback(new Error("Deadline passed without connectivity state change"));
          }, deadlineDate.getTime() - now.getTime());
        }
        const watcherObject = {
          currentState,
          callback,
          timer
        };
        this.connectivityStateWatchers.push(watcherObject);
      }
      createCall(method, deadline, host, parentCall, propagateFlags) {
        if (typeof method !== "string") {
          throw new TypeError("Channel#createCall: method must be a string");
        }
        if (!(typeof deadline === "number" || deadline instanceof Date)) {
          throw new TypeError("Channel#createCall: deadline must be a number or Date");
        }
        if (this.connectivityState === ConnectivityState.SHUTDOWN) {
          throw new Error("Channel has been shut down");
        }
        const callNumber = getNewCallNumber();
        logging_1.trace(constants_1.LogVerbosity.DEBUG, "channel", uri_parser_1.uriToString(this.target) + " createCall [" + callNumber + '] method="' + method + '", deadline=' + deadline);
        const finalOptions = {
          deadline,
          flags: propagateFlags !== null && propagateFlags !== void 0 ? propagateFlags : constants_1.Propagate.DEFAULTS,
          host: host !== null && host !== void 0 ? host : this.defaultAuthority,
          parentCall
        };
        const stream = new call_stream_1.Http2CallStream(method, this, finalOptions, this.filterStackFactory, this.credentials._getCallCredentials(), callNumber);
        return stream;
      }
    };
    exports2.ChannelImplementation = ChannelImplementation;
  }
});

// node_modules/@grpc/grpc-js/build/src/call.js
var require_call = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/call.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ClientDuplexStreamImpl = exports2.ClientWritableStreamImpl = exports2.ClientReadableStreamImpl = exports2.ClientUnaryCallImpl = exports2.callErrorFromStatus = void 0;
    var events_1 = require("events");
    var stream_1 = require("stream");
    var constants_1 = require_constants();
    function callErrorFromStatus(status) {
      const message = `${status.code} ${constants_1.Status[status.code]}: ${status.details}`;
      return Object.assign(new Error(message), status);
    }
    exports2.callErrorFromStatus = callErrorFromStatus;
    var ClientUnaryCallImpl = class extends events_1.EventEmitter {
      constructor() {
        super();
      }
      cancel() {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, "Cancelled on client");
      }
      getPeer() {
        var _a, _b;
        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : "unknown";
      }
    };
    exports2.ClientUnaryCallImpl = ClientUnaryCallImpl;
    var ClientReadableStreamImpl = class extends stream_1.Readable {
      constructor(deserialize) {
        super({ objectMode: true });
        this.deserialize = deserialize;
      }
      cancel() {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, "Cancelled on client");
      }
      getPeer() {
        var _a, _b;
        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : "unknown";
      }
      _read(_size) {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.startRead();
      }
    };
    exports2.ClientReadableStreamImpl = ClientReadableStreamImpl;
    var ClientWritableStreamImpl = class extends stream_1.Writable {
      constructor(serialize) {
        super({ objectMode: true });
        this.serialize = serialize;
      }
      cancel() {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, "Cancelled on client");
      }
      getPeer() {
        var _a, _b;
        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : "unknown";
      }
      _write(chunk, encoding, cb) {
        var _a;
        const context = {
          callback: cb
        };
        const flags = Number(encoding);
        if (!Number.isNaN(flags)) {
          context.flags = flags;
        }
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.sendMessageWithContext(context, chunk);
      }
      _final(cb) {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.halfClose();
        cb();
      }
    };
    exports2.ClientWritableStreamImpl = ClientWritableStreamImpl;
    var ClientDuplexStreamImpl = class extends stream_1.Duplex {
      constructor(serialize, deserialize) {
        super({ objectMode: true });
        this.serialize = serialize;
        this.deserialize = deserialize;
      }
      cancel() {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, "Cancelled on client");
      }
      getPeer() {
        var _a, _b;
        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : "unknown";
      }
      _read(_size) {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.startRead();
      }
      _write(chunk, encoding, cb) {
        var _a;
        const context = {
          callback: cb
        };
        const flags = Number(encoding);
        if (!Number.isNaN(flags)) {
          context.flags = flags;
        }
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.sendMessageWithContext(context, chunk);
      }
      _final(cb) {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.halfClose();
        cb();
      }
    };
    exports2.ClientDuplexStreamImpl = ClientDuplexStreamImpl;
  }
});

// node_modules/@grpc/grpc-js/build/src/client-interceptors.js
var require_client_interceptors = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/client-interceptors.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getInterceptingCall = exports2.InterceptingCall = exports2.RequesterBuilder = exports2.ListenerBuilder = exports2.InterceptorConfigurationError = void 0;
    var metadata_1 = require_metadata();
    var call_stream_1 = require_call_stream();
    var constants_1 = require_constants();
    var InterceptorConfigurationError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "InterceptorConfigurationError";
        Error.captureStackTrace(this, InterceptorConfigurationError);
      }
    };
    exports2.InterceptorConfigurationError = InterceptorConfigurationError;
    var ListenerBuilder = class {
      constructor() {
        this.metadata = void 0;
        this.message = void 0;
        this.status = void 0;
      }
      withOnReceiveMetadata(onReceiveMetadata) {
        this.metadata = onReceiveMetadata;
        return this;
      }
      withOnReceiveMessage(onReceiveMessage) {
        this.message = onReceiveMessage;
        return this;
      }
      withOnReceiveStatus(onReceiveStatus) {
        this.status = onReceiveStatus;
        return this;
      }
      build() {
        return {
          onReceiveMetadata: this.metadata,
          onReceiveMessage: this.message,
          onReceiveStatus: this.status
        };
      }
    };
    exports2.ListenerBuilder = ListenerBuilder;
    var RequesterBuilder = class {
      constructor() {
        this.start = void 0;
        this.message = void 0;
        this.halfClose = void 0;
        this.cancel = void 0;
      }
      withStart(start) {
        this.start = start;
        return this;
      }
      withSendMessage(sendMessage) {
        this.message = sendMessage;
        return this;
      }
      withHalfClose(halfClose) {
        this.halfClose = halfClose;
        return this;
      }
      withCancel(cancel) {
        this.cancel = cancel;
        return this;
      }
      build() {
        return {
          start: this.start,
          sendMessage: this.message,
          halfClose: this.halfClose,
          cancel: this.cancel
        };
      }
    };
    exports2.RequesterBuilder = RequesterBuilder;
    var defaultListener = {
      onReceiveMetadata: (metadata, next) => {
        next(metadata);
      },
      onReceiveMessage: (message, next) => {
        next(message);
      },
      onReceiveStatus: (status, next) => {
        next(status);
      }
    };
    var defaultRequester = {
      start: (metadata, listener, next) => {
        next(metadata, listener);
      },
      sendMessage: (message, next) => {
        next(message);
      },
      halfClose: (next) => {
        next();
      },
      cancel: (next) => {
        next();
      }
    };
    var InterceptingCall = class {
      constructor(nextCall, requester) {
        var _a, _b, _c, _d;
        this.nextCall = nextCall;
        this.processingMessage = false;
        this.pendingHalfClose = false;
        if (requester) {
          this.requester = {
            start: (_a = requester.start) !== null && _a !== void 0 ? _a : defaultRequester.start,
            sendMessage: (_b = requester.sendMessage) !== null && _b !== void 0 ? _b : defaultRequester.sendMessage,
            halfClose: (_c = requester.halfClose) !== null && _c !== void 0 ? _c : defaultRequester.halfClose,
            cancel: (_d = requester.cancel) !== null && _d !== void 0 ? _d : defaultRequester.cancel
          };
        } else {
          this.requester = defaultRequester;
        }
      }
      cancelWithStatus(status, details) {
        this.requester.cancel(() => {
          this.nextCall.cancelWithStatus(status, details);
        });
      }
      getPeer() {
        return this.nextCall.getPeer();
      }
      start(metadata, interceptingListener) {
        var _a, _b, _c, _d, _e, _f;
        const fullInterceptingListener = {
          onReceiveMetadata: (_b = (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.bind(interceptingListener)) !== null && _b !== void 0 ? _b : (metadata2) => {
          },
          onReceiveMessage: (_d = (_c = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMessage) === null || _c === void 0 ? void 0 : _c.bind(interceptingListener)) !== null && _d !== void 0 ? _d : (message) => {
          },
          onReceiveStatus: (_f = (_e = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _e === void 0 ? void 0 : _e.bind(interceptingListener)) !== null && _f !== void 0 ? _f : (status) => {
          }
        };
        this.requester.start(metadata, fullInterceptingListener, (md, listener) => {
          var _a2, _b2, _c2;
          let finalInterceptingListener;
          if (call_stream_1.isInterceptingListener(listener)) {
            finalInterceptingListener = listener;
          } else {
            const fullListener = {
              onReceiveMetadata: (_a2 = listener.onReceiveMetadata) !== null && _a2 !== void 0 ? _a2 : defaultListener.onReceiveMetadata,
              onReceiveMessage: (_b2 = listener.onReceiveMessage) !== null && _b2 !== void 0 ? _b2 : defaultListener.onReceiveMessage,
              onReceiveStatus: (_c2 = listener.onReceiveStatus) !== null && _c2 !== void 0 ? _c2 : defaultListener.onReceiveStatus
            };
            finalInterceptingListener = new call_stream_1.InterceptingListenerImpl(fullListener, fullInterceptingListener);
          }
          this.nextCall.start(md, finalInterceptingListener);
        });
      }
      sendMessageWithContext(context, message) {
        this.processingMessage = true;
        this.requester.sendMessage(message, (finalMessage) => {
          this.processingMessage = false;
          this.nextCall.sendMessageWithContext(context, finalMessage);
          if (this.pendingHalfClose) {
            this.nextCall.halfClose();
          }
        });
      }
      sendMessage(message) {
        this.sendMessageWithContext({}, message);
      }
      startRead() {
        this.nextCall.startRead();
      }
      halfClose() {
        this.requester.halfClose(() => {
          if (this.processingMessage) {
            this.pendingHalfClose = true;
          } else {
            this.nextCall.halfClose();
          }
        });
      }
      setCredentials(credentials) {
        this.nextCall.setCredentials(credentials);
      }
    };
    exports2.InterceptingCall = InterceptingCall;
    function getCall(channel, path, options2) {
      var _a, _b;
      const deadline = (_a = options2.deadline) !== null && _a !== void 0 ? _a : Infinity;
      const host = options2.host;
      const parent = (_b = options2.parent) !== null && _b !== void 0 ? _b : null;
      const propagateFlags = options2.propagate_flags;
      const credentials = options2.credentials;
      const call = channel.createCall(path, deadline, host, parent, propagateFlags);
      if (credentials) {
        call.setCredentials(credentials);
      }
      return call;
    }
    var BaseInterceptingCall = class {
      constructor(call, methodDefinition) {
        this.call = call;
        this.methodDefinition = methodDefinition;
      }
      cancelWithStatus(status, details) {
        this.call.cancelWithStatus(status, details);
      }
      getPeer() {
        return this.call.getPeer();
      }
      setCredentials(credentials) {
        this.call.setCredentials(credentials);
      }
      sendMessageWithContext(context, message) {
        let serialized;
        try {
          serialized = this.methodDefinition.requestSerialize(message);
        } catch (e) {
          this.call.cancelWithStatus(constants_1.Status.INTERNAL, `Request message serialization failure: ${e.message}`);
          return;
        }
        this.call.sendMessageWithContext(context, serialized);
      }
      sendMessage(message) {
        this.sendMessageWithContext({}, message);
      }
      start(metadata, interceptingListener) {
        let readError = null;
        this.call.start(metadata, {
          onReceiveMetadata: (metadata2) => {
            var _a;
            (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, metadata2);
          },
          onReceiveMessage: (message) => {
            var _a;
            let deserialized;
            try {
              deserialized = this.methodDefinition.responseDeserialize(message);
            } catch (e) {
              readError = {
                code: constants_1.Status.INTERNAL,
                details: `Response message parsing error: ${e.message}`,
                metadata: new metadata_1.Metadata()
              };
              this.call.cancelWithStatus(readError.code, readError.details);
              return;
            }
            (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMessage) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, deserialized);
          },
          onReceiveStatus: (status) => {
            var _a, _b;
            if (readError) {
              (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, readError);
            } else {
              (_b = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _b === void 0 ? void 0 : _b.call(interceptingListener, status);
            }
          }
        });
      }
      startRead() {
        this.call.startRead();
      }
      halfClose() {
        this.call.halfClose();
      }
    };
    var BaseUnaryInterceptingCall = class extends BaseInterceptingCall {
      constructor(call, methodDefinition) {
        super(call, methodDefinition);
      }
      start(metadata, listener) {
        var _a, _b;
        let receivedMessage = false;
        const wrapperListener = {
          onReceiveMetadata: (_b = (_a = listener === null || listener === void 0 ? void 0 : listener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.bind(listener)) !== null && _b !== void 0 ? _b : (metadata2) => {
          },
          onReceiveMessage: (message) => {
            var _a2;
            receivedMessage = true;
            (_a2 = listener === null || listener === void 0 ? void 0 : listener.onReceiveMessage) === null || _a2 === void 0 ? void 0 : _a2.call(listener, message);
          },
          onReceiveStatus: (status) => {
            var _a2, _b2;
            if (!receivedMessage) {
              (_a2 = listener === null || listener === void 0 ? void 0 : listener.onReceiveMessage) === null || _a2 === void 0 ? void 0 : _a2.call(listener, null);
            }
            (_b2 = listener === null || listener === void 0 ? void 0 : listener.onReceiveStatus) === null || _b2 === void 0 ? void 0 : _b2.call(listener, status);
          }
        };
        super.start(metadata, wrapperListener);
        this.call.startRead();
      }
    };
    var BaseStreamingInterceptingCall = class extends BaseInterceptingCall {
    };
    function getBottomInterceptingCall(channel, options2, methodDefinition) {
      const call = getCall(channel, methodDefinition.path, options2);
      if (methodDefinition.responseStream) {
        return new BaseStreamingInterceptingCall(call, methodDefinition);
      } else {
        return new BaseUnaryInterceptingCall(call, methodDefinition);
      }
    }
    function getInterceptingCall(interceptorArgs, methodDefinition, options2, channel) {
      if (interceptorArgs.clientInterceptors.length > 0 && interceptorArgs.clientInterceptorProviders.length > 0) {
        throw new InterceptorConfigurationError("Both interceptors and interceptor_providers were passed as options to the client constructor. Only one of these is allowed.");
      }
      if (interceptorArgs.callInterceptors.length > 0 && interceptorArgs.callInterceptorProviders.length > 0) {
        throw new InterceptorConfigurationError("Both interceptors and interceptor_providers were passed as call options. Only one of these is allowed.");
      }
      let interceptors = [];
      if (interceptorArgs.callInterceptors.length > 0 || interceptorArgs.callInterceptorProviders.length > 0) {
        interceptors = [].concat(interceptorArgs.callInterceptors, interceptorArgs.callInterceptorProviders.map((provider) => provider(methodDefinition))).filter((interceptor) => interceptor);
      } else {
        interceptors = [].concat(interceptorArgs.clientInterceptors, interceptorArgs.clientInterceptorProviders.map((provider) => provider(methodDefinition))).filter((interceptor) => interceptor);
      }
      const interceptorOptions = Object.assign({}, options2, {
        method_definition: methodDefinition
      });
      const getCall2 = interceptors.reduceRight((nextCall, nextInterceptor) => {
        return (currentOptions) => nextInterceptor(currentOptions, nextCall);
      }, (finalOptions) => getBottomInterceptingCall(channel, finalOptions, methodDefinition));
      return getCall2(interceptorOptions);
    }
    exports2.getInterceptingCall = getInterceptingCall;
  }
});

// node_modules/@grpc/grpc-js/build/src/client.js
var require_client = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/client.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Client = void 0;
    var call_1 = require_call();
    var channel_1 = require_channel();
    var constants_1 = require_constants();
    var metadata_1 = require_metadata();
    var client_interceptors_1 = require_client_interceptors();
    var CHANNEL_SYMBOL = Symbol();
    var INTERCEPTOR_SYMBOL = Symbol();
    var INTERCEPTOR_PROVIDER_SYMBOL = Symbol();
    var CALL_INVOCATION_TRANSFORMER_SYMBOL = Symbol();
    function isFunction(arg) {
      return typeof arg === "function";
    }
    var Client = class {
      constructor(address, credentials, options2 = {}) {
        var _a, _b;
        options2 = Object.assign({}, options2);
        this[INTERCEPTOR_SYMBOL] = (_a = options2.interceptors) !== null && _a !== void 0 ? _a : [];
        delete options2.interceptors;
        this[INTERCEPTOR_PROVIDER_SYMBOL] = (_b = options2.interceptor_providers) !== null && _b !== void 0 ? _b : [];
        delete options2.interceptor_providers;
        if (this[INTERCEPTOR_SYMBOL].length > 0 && this[INTERCEPTOR_PROVIDER_SYMBOL].length > 0) {
          throw new Error("Both interceptors and interceptor_providers were passed as options to the client constructor. Only one of these is allowed.");
        }
        this[CALL_INVOCATION_TRANSFORMER_SYMBOL] = options2.callInvocationTransformer;
        delete options2.callInvocationTransformer;
        if (options2.channelOverride) {
          this[CHANNEL_SYMBOL] = options2.channelOverride;
        } else if (options2.channelFactoryOverride) {
          const channelFactoryOverride = options2.channelFactoryOverride;
          delete options2.channelFactoryOverride;
          this[CHANNEL_SYMBOL] = channelFactoryOverride(address, credentials, options2);
        } else {
          this[CHANNEL_SYMBOL] = new channel_1.ChannelImplementation(address, credentials, options2);
        }
      }
      close() {
        this[CHANNEL_SYMBOL].close();
      }
      getChannel() {
        return this[CHANNEL_SYMBOL];
      }
      waitForReady(deadline, callback) {
        const checkState = (err) => {
          if (err) {
            callback(new Error("Failed to connect before the deadline"));
            return;
          }
          let newState;
          try {
            newState = this[CHANNEL_SYMBOL].getConnectivityState(true);
          } catch (e) {
            callback(new Error("The channel has been closed"));
            return;
          }
          if (newState === channel_1.ConnectivityState.READY) {
            callback();
          } else {
            try {
              this[CHANNEL_SYMBOL].watchConnectivityState(newState, deadline, checkState);
            } catch (e) {
              callback(new Error("The channel has been closed"));
            }
          }
        };
        setImmediate(checkState);
      }
      checkOptionalUnaryResponseArguments(arg1, arg2, arg3) {
        if (isFunction(arg1)) {
          return { metadata: new metadata_1.Metadata(), options: {}, callback: arg1 };
        } else if (isFunction(arg2)) {
          if (arg1 instanceof metadata_1.Metadata) {
            return { metadata: arg1, options: {}, callback: arg2 };
          } else {
            return { metadata: new metadata_1.Metadata(), options: arg1, callback: arg2 };
          }
        } else {
          if (!(arg1 instanceof metadata_1.Metadata && arg2 instanceof Object && isFunction(arg3))) {
            throw new Error("Incorrect arguments passed");
          }
          return { metadata: arg1, options: arg2, callback: arg3 };
        }
      }
      makeUnaryRequest(method, serialize, deserialize, argument, metadata, options2, callback) {
        var _a, _b;
        const checkedArguments = this.checkOptionalUnaryResponseArguments(metadata, options2, callback);
        const methodDefinition = {
          path: method,
          requestStream: false,
          responseStream: false,
          requestSerialize: serialize,
          responseDeserialize: deserialize
        };
        let callProperties = {
          argument,
          metadata: checkedArguments.metadata,
          call: new call_1.ClientUnaryCallImpl(),
          channel: this[CHANNEL_SYMBOL],
          methodDefinition,
          callOptions: checkedArguments.options,
          callback: checkedArguments.callback
        };
        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {
          callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);
        }
        const emitter = callProperties.call;
        const interceptorArgs = {
          clientInterceptors: this[INTERCEPTOR_SYMBOL],
          clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],
          callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],
          callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []
        };
        const call = client_interceptors_1.getInterceptingCall(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);
        emitter.call = call;
        if (callProperties.callOptions.credentials) {
          call.setCredentials(callProperties.callOptions.credentials);
        }
        let responseMessage = null;
        let receivedStatus = false;
        call.start(callProperties.metadata, {
          onReceiveMetadata: (metadata2) => {
            emitter.emit("metadata", metadata2);
          },
          onReceiveMessage(message) {
            if (responseMessage !== null) {
              call.cancelWithStatus(constants_1.Status.INTERNAL, "Too many responses received");
            }
            responseMessage = message;
          },
          onReceiveStatus(status) {
            if (receivedStatus) {
              return;
            }
            receivedStatus = true;
            if (status.code === constants_1.Status.OK) {
              callProperties.callback(null, responseMessage);
            } else {
              callProperties.callback(call_1.callErrorFromStatus(status));
            }
            emitter.emit("status", status);
          }
        });
        call.sendMessage(argument);
        call.halfClose();
        return emitter;
      }
      makeClientStreamRequest(method, serialize, deserialize, metadata, options2, callback) {
        var _a, _b;
        const checkedArguments = this.checkOptionalUnaryResponseArguments(metadata, options2, callback);
        const methodDefinition = {
          path: method,
          requestStream: true,
          responseStream: false,
          requestSerialize: serialize,
          responseDeserialize: deserialize
        };
        let callProperties = {
          metadata: checkedArguments.metadata,
          call: new call_1.ClientWritableStreamImpl(serialize),
          channel: this[CHANNEL_SYMBOL],
          methodDefinition,
          callOptions: checkedArguments.options,
          callback: checkedArguments.callback
        };
        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {
          callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);
        }
        const emitter = callProperties.call;
        const interceptorArgs = {
          clientInterceptors: this[INTERCEPTOR_SYMBOL],
          clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],
          callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],
          callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []
        };
        const call = client_interceptors_1.getInterceptingCall(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);
        emitter.call = call;
        if (callProperties.callOptions.credentials) {
          call.setCredentials(callProperties.callOptions.credentials);
        }
        let responseMessage = null;
        let receivedStatus = false;
        call.start(callProperties.metadata, {
          onReceiveMetadata: (metadata2) => {
            emitter.emit("metadata", metadata2);
          },
          onReceiveMessage(message) {
            if (responseMessage !== null) {
              call.cancelWithStatus(constants_1.Status.INTERNAL, "Too many responses received");
            }
            responseMessage = message;
          },
          onReceiveStatus(status) {
            if (receivedStatus) {
              return;
            }
            receivedStatus = true;
            if (status.code === constants_1.Status.OK) {
              callProperties.callback(null, responseMessage);
            } else {
              callProperties.callback(call_1.callErrorFromStatus(status));
            }
            emitter.emit("status", status);
          }
        });
        return emitter;
      }
      checkMetadataAndOptions(arg1, arg2) {
        let metadata;
        let options2;
        if (arg1 instanceof metadata_1.Metadata) {
          metadata = arg1;
          if (arg2) {
            options2 = arg2;
          } else {
            options2 = {};
          }
        } else {
          if (arg1) {
            options2 = arg1;
          } else {
            options2 = {};
          }
          metadata = new metadata_1.Metadata();
        }
        return { metadata, options: options2 };
      }
      makeServerStreamRequest(method, serialize, deserialize, argument, metadata, options2) {
        var _a, _b;
        const checkedArguments = this.checkMetadataAndOptions(metadata, options2);
        const methodDefinition = {
          path: method,
          requestStream: false,
          responseStream: true,
          requestSerialize: serialize,
          responseDeserialize: deserialize
        };
        let callProperties = {
          argument,
          metadata: checkedArguments.metadata,
          call: new call_1.ClientReadableStreamImpl(deserialize),
          channel: this[CHANNEL_SYMBOL],
          methodDefinition,
          callOptions: checkedArguments.options
        };
        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {
          callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);
        }
        const stream = callProperties.call;
        const interceptorArgs = {
          clientInterceptors: this[INTERCEPTOR_SYMBOL],
          clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],
          callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],
          callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []
        };
        const call = client_interceptors_1.getInterceptingCall(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);
        stream.call = call;
        if (callProperties.callOptions.credentials) {
          call.setCredentials(callProperties.callOptions.credentials);
        }
        let receivedStatus = false;
        call.start(callProperties.metadata, {
          onReceiveMetadata(metadata2) {
            stream.emit("metadata", metadata2);
          },
          onReceiveMessage(message) {
            stream.push(message);
          },
          onReceiveStatus(status) {
            if (receivedStatus) {
              return;
            }
            receivedStatus = true;
            stream.push(null);
            if (status.code !== constants_1.Status.OK) {
              stream.emit("error", call_1.callErrorFromStatus(status));
            }
            stream.emit("status", status);
          }
        });
        call.sendMessage(argument);
        call.halfClose();
        return stream;
      }
      makeBidiStreamRequest(method, serialize, deserialize, metadata, options2) {
        var _a, _b;
        const checkedArguments = this.checkMetadataAndOptions(metadata, options2);
        const methodDefinition = {
          path: method,
          requestStream: true,
          responseStream: true,
          requestSerialize: serialize,
          responseDeserialize: deserialize
        };
        let callProperties = {
          metadata: checkedArguments.metadata,
          call: new call_1.ClientDuplexStreamImpl(serialize, deserialize),
          channel: this[CHANNEL_SYMBOL],
          methodDefinition,
          callOptions: checkedArguments.options
        };
        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {
          callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);
        }
        const stream = callProperties.call;
        const interceptorArgs = {
          clientInterceptors: this[INTERCEPTOR_SYMBOL],
          clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],
          callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],
          callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []
        };
        const call = client_interceptors_1.getInterceptingCall(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);
        stream.call = call;
        if (callProperties.callOptions.credentials) {
          call.setCredentials(callProperties.callOptions.credentials);
        }
        let receivedStatus = false;
        call.start(callProperties.metadata, {
          onReceiveMetadata(metadata2) {
            stream.emit("metadata", metadata2);
          },
          onReceiveMessage(message) {
            stream.push(message);
          },
          onReceiveStatus(status) {
            if (receivedStatus) {
              return;
            }
            receivedStatus = true;
            stream.push(null);
            if (status.code !== constants_1.Status.OK) {
              stream.emit("error", call_1.callErrorFromStatus(status));
            }
            stream.emit("status", status);
          }
        });
        return stream;
      }
    };
    exports2.Client = Client;
  }
});

// node_modules/@grpc/grpc-js/build/src/make-client.js
var require_make_client = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/make-client.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.loadPackageDefinition = exports2.makeClientConstructor = void 0;
    var client_1 = require_client();
    var requesterFuncs = {
      unary: client_1.Client.prototype.makeUnaryRequest,
      server_stream: client_1.Client.prototype.makeServerStreamRequest,
      client_stream: client_1.Client.prototype.makeClientStreamRequest,
      bidi: client_1.Client.prototype.makeBidiStreamRequest
    };
    function isPrototypePolluted(key) {
      return ["__proto__", "prototype", "constructor"].includes(key);
    }
    function makeClientConstructor(methods, serviceName, classOptions) {
      if (!classOptions) {
        classOptions = {};
      }
      class ServiceClientImpl extends client_1.Client {
      }
      Object.keys(methods).forEach((name2) => {
        if (isPrototypePolluted(name2)) {
          return;
        }
        const attrs = methods[name2];
        let methodType;
        if (typeof name2 === "string" && name2.charAt(0) === "$") {
          throw new Error("Method names cannot start with $");
        }
        if (attrs.requestStream) {
          if (attrs.responseStream) {
            methodType = "bidi";
          } else {
            methodType = "client_stream";
          }
        } else {
          if (attrs.responseStream) {
            methodType = "server_stream";
          } else {
            methodType = "unary";
          }
        }
        const serialize = attrs.requestSerialize;
        const deserialize = attrs.responseDeserialize;
        const methodFunc = partial(requesterFuncs[methodType], attrs.path, serialize, deserialize);
        ServiceClientImpl.prototype[name2] = methodFunc;
        Object.assign(ServiceClientImpl.prototype[name2], attrs);
        if (attrs.originalName && !isPrototypePolluted(attrs.originalName)) {
          ServiceClientImpl.prototype[attrs.originalName] = ServiceClientImpl.prototype[name2];
        }
      });
      ServiceClientImpl.service = methods;
      return ServiceClientImpl;
    }
    exports2.makeClientConstructor = makeClientConstructor;
    function partial(fn, path, serialize, deserialize) {
      return function(...args) {
        return fn.call(this, path, serialize, deserialize, ...args);
      };
    }
    function isProtobufTypeDefinition(obj) {
      return "format" in obj;
    }
    function loadPackageDefinition(packageDef) {
      const result = {};
      for (const serviceFqn in packageDef) {
        if (Object.prototype.hasOwnProperty.call(packageDef, serviceFqn)) {
          const service = packageDef[serviceFqn];
          const nameComponents = serviceFqn.split(".");
          if (nameComponents.some((comp) => isPrototypePolluted(comp))) {
            continue;
          }
          const serviceName = nameComponents[nameComponents.length - 1];
          let current = result;
          for (const packageName of nameComponents.slice(0, -1)) {
            if (!current[packageName]) {
              current[packageName] = {};
            }
            current = current[packageName];
          }
          if (isProtobufTypeDefinition(service)) {
            current[serviceName] = service;
          } else {
            current[serviceName] = makeClientConstructor(service, serviceName, {});
          }
        }
      }
      return result;
    }
    exports2.loadPackageDefinition = loadPackageDefinition;
  }
});

// node_modules/@grpc/grpc-js/build/src/server-call.js
var require_server_call = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/server-call.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Http2ServerCallStream = exports2.ServerDuplexStreamImpl = exports2.ServerWritableStreamImpl = exports2.ServerReadableStreamImpl = exports2.ServerUnaryCallImpl = void 0;
    var events_1 = require("events");
    var http2 = require("http2");
    var stream_1 = require("stream");
    var constants_1 = require_constants();
    var metadata_1 = require_metadata();
    var stream_decoder_1 = require_stream_decoder();
    var logging = require_logging();
    var TRACER_NAME = "server_call";
    function trace(text) {
      logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);
    }
    var GRPC_ACCEPT_ENCODING_HEADER = "grpc-accept-encoding";
    var GRPC_ENCODING_HEADER = "grpc-encoding";
    var GRPC_MESSAGE_HEADER = "grpc-message";
    var GRPC_STATUS_HEADER = "grpc-status";
    var GRPC_TIMEOUT_HEADER = "grpc-timeout";
    var DEADLINE_REGEX = /(\d{1,8})\s*([HMSmun])/;
    var deadlineUnitsToMs = {
      H: 36e5,
      M: 6e4,
      S: 1e3,
      m: 1,
      u: 1e-3,
      n: 1e-6
    };
    var defaultResponseHeaders = {
      [GRPC_ACCEPT_ENCODING_HEADER]: "identity",
      [GRPC_ENCODING_HEADER]: "identity",
      [http2.constants.HTTP2_HEADER_STATUS]: http2.constants.HTTP_STATUS_OK,
      [http2.constants.HTTP2_HEADER_CONTENT_TYPE]: "application/grpc+proto"
    };
    var defaultResponseOptions = {
      waitForTrailers: true
    };
    var ServerUnaryCallImpl = class extends events_1.EventEmitter {
      constructor(call, metadata, request) {
        super();
        this.call = call;
        this.metadata = metadata;
        this.request = request;
        this.cancelled = false;
        this.call.setupSurfaceCall(this);
      }
      getPeer() {
        return this.call.getPeer();
      }
      sendMetadata(responseMetadata) {
        this.call.sendMetadata(responseMetadata);
      }
      getDeadline() {
        return this.call.getDeadline();
      }
    };
    exports2.ServerUnaryCallImpl = ServerUnaryCallImpl;
    var ServerReadableStreamImpl = class extends stream_1.Readable {
      constructor(call, metadata, deserialize) {
        super({ objectMode: true });
        this.call = call;
        this.metadata = metadata;
        this.deserialize = deserialize;
        this.cancelled = false;
        this.call.setupSurfaceCall(this);
        this.call.setupReadable(this);
      }
      _read(size) {
        if (!this.call.consumeUnpushedMessages(this)) {
          return;
        }
        this.call.resume();
      }
      getPeer() {
        return this.call.getPeer();
      }
      sendMetadata(responseMetadata) {
        this.call.sendMetadata(responseMetadata);
      }
      getDeadline() {
        return this.call.getDeadline();
      }
    };
    exports2.ServerReadableStreamImpl = ServerReadableStreamImpl;
    var ServerWritableStreamImpl = class extends stream_1.Writable {
      constructor(call, metadata, serialize, request) {
        super({ objectMode: true });
        this.call = call;
        this.metadata = metadata;
        this.serialize = serialize;
        this.request = request;
        this.cancelled = false;
        this.trailingMetadata = new metadata_1.Metadata();
        this.call.setupSurfaceCall(this);
        this.on("error", (err) => {
          this.call.sendError(err);
          this.end();
        });
      }
      getPeer() {
        return this.call.getPeer();
      }
      sendMetadata(responseMetadata) {
        this.call.sendMetadata(responseMetadata);
      }
      getDeadline() {
        return this.call.getDeadline();
      }
      _write(chunk, encoding, callback) {
        try {
          const response = this.call.serializeMessage(chunk);
          if (!this.call.write(response)) {
            this.call.once("drain", callback);
            return;
          }
        } catch (err) {
          err.code = constants_1.Status.INTERNAL;
          this.emit("error", err);
        }
        callback();
      }
      _final(callback) {
        this.call.sendStatus({
          code: constants_1.Status.OK,
          details: "OK",
          metadata: this.trailingMetadata
        });
        callback(null);
      }
      end(metadata) {
        if (metadata) {
          this.trailingMetadata = metadata;
        }
        super.end();
      }
    };
    exports2.ServerWritableStreamImpl = ServerWritableStreamImpl;
    var ServerDuplexStreamImpl = class extends stream_1.Duplex {
      constructor(call, metadata, serialize, deserialize) {
        super({ objectMode: true });
        this.call = call;
        this.metadata = metadata;
        this.serialize = serialize;
        this.deserialize = deserialize;
        this.cancelled = false;
        this.trailingMetadata = new metadata_1.Metadata();
        this.call.setupSurfaceCall(this);
        this.call.setupReadable(this);
        this.on("error", (err) => {
          this.call.sendError(err);
          this.end();
        });
      }
      getPeer() {
        return this.call.getPeer();
      }
      sendMetadata(responseMetadata) {
        this.call.sendMetadata(responseMetadata);
      }
      getDeadline() {
        return this.call.getDeadline();
      }
      end(metadata) {
        if (metadata) {
          this.trailingMetadata = metadata;
        }
        super.end();
      }
    };
    exports2.ServerDuplexStreamImpl = ServerDuplexStreamImpl;
    ServerDuplexStreamImpl.prototype._read = ServerReadableStreamImpl.prototype._read;
    ServerDuplexStreamImpl.prototype._write = ServerWritableStreamImpl.prototype._write;
    ServerDuplexStreamImpl.prototype._final = ServerWritableStreamImpl.prototype._final;
    ServerDuplexStreamImpl.prototype.end = ServerWritableStreamImpl.prototype.end;
    var Http2ServerCallStream = class extends events_1.EventEmitter {
      constructor(stream, handler, options2) {
        super();
        this.stream = stream;
        this.handler = handler;
        this.options = options2;
        this.cancelled = false;
        this.deadlineTimer = setTimeout(() => {
        }, 0);
        this.deadline = Infinity;
        this.wantTrailers = false;
        this.metadataSent = false;
        this.canPush = false;
        this.isPushPending = false;
        this.bufferedMessages = [];
        this.messagesToPush = [];
        this.maxSendMessageSize = constants_1.DEFAULT_MAX_SEND_MESSAGE_LENGTH;
        this.maxReceiveMessageSize = constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;
        this.stream.once("error", (err) => {
        });
        this.stream.once("close", () => {
          var _a;
          trace("Request to method " + ((_a = this.handler) === null || _a === void 0 ? void 0 : _a.path) + " stream closed with rstCode " + this.stream.rstCode);
          this.cancelled = true;
          this.emit("cancelled", "cancelled");
        });
        this.stream.on("drain", () => {
          this.emit("drain");
        });
        if ("grpc.max_send_message_length" in options2) {
          this.maxSendMessageSize = options2["grpc.max_send_message_length"];
        }
        if ("grpc.max_receive_message_length" in options2) {
          this.maxReceiveMessageSize = options2["grpc.max_receive_message_length"];
        }
        clearTimeout(this.deadlineTimer);
      }
      checkCancelled() {
        if (this.stream.destroyed || this.stream.closed) {
          this.cancelled = true;
        }
        return this.cancelled;
      }
      sendMetadata(customMetadata) {
        if (this.checkCancelled()) {
          return;
        }
        if (this.metadataSent) {
          return;
        }
        this.metadataSent = true;
        const custom = customMetadata ? customMetadata.toHttp2Headers() : null;
        const headers = Object.assign({}, defaultResponseHeaders, custom);
        this.stream.respond(headers, defaultResponseOptions);
      }
      receiveMetadata(headers) {
        const metadata = metadata_1.Metadata.fromHttp2Headers(headers);
        const timeoutHeader = metadata.get(GRPC_TIMEOUT_HEADER);
        if (timeoutHeader.length > 0) {
          const match = timeoutHeader[0].toString().match(DEADLINE_REGEX);
          if (match === null) {
            const err = new Error("Invalid deadline");
            err.code = constants_1.Status.OUT_OF_RANGE;
            this.sendError(err);
            return;
          }
          const timeout = +match[1] * deadlineUnitsToMs[match[2]] | 0;
          const now = new Date();
          this.deadline = now.setMilliseconds(now.getMilliseconds() + timeout);
          this.deadlineTimer = setTimeout(handleExpiredDeadline, timeout, this);
          metadata.remove(GRPC_TIMEOUT_HEADER);
        }
        metadata.remove(http2.constants.HTTP2_HEADER_ACCEPT_ENCODING);
        metadata.remove(http2.constants.HTTP2_HEADER_TE);
        metadata.remove(http2.constants.HTTP2_HEADER_CONTENT_TYPE);
        metadata.remove("grpc-encoding");
        metadata.remove("grpc-accept-encoding");
        return metadata;
      }
      receiveUnaryMessage() {
        return new Promise((resolve2, reject) => {
          const stream = this.stream;
          const chunks = [];
          let totalLength = 0;
          stream.on("data", (data) => {
            chunks.push(data);
            totalLength += data.byteLength;
          });
          stream.once("end", async () => {
            try {
              const requestBytes = Buffer.concat(chunks, totalLength);
              if (this.maxReceiveMessageSize !== -1 && requestBytes.length > this.maxReceiveMessageSize) {
                this.sendError({
                  code: constants_1.Status.RESOURCE_EXHAUSTED,
                  details: `Received message larger than max (${requestBytes.length} vs. ${this.maxReceiveMessageSize})`
                });
                resolve2();
              }
              resolve2(this.deserializeMessage(requestBytes));
            } catch (err) {
              err.code = constants_1.Status.INTERNAL;
              this.sendError(err);
              resolve2();
            }
          });
        });
      }
      serializeMessage(value) {
        const messageBuffer = this.handler.serialize(value);
        const byteLength = messageBuffer.byteLength;
        const output = Buffer.allocUnsafe(byteLength + 5);
        output.writeUInt8(0, 0);
        output.writeUInt32BE(byteLength, 1);
        messageBuffer.copy(output, 5);
        return output;
      }
      deserializeMessage(bytes) {
        const receivedMessage = bytes.slice(5);
        return this.handler.deserialize(receivedMessage);
      }
      async sendUnaryMessage(err, value, metadata, flags) {
        if (this.checkCancelled()) {
          return;
        }
        if (!metadata) {
          metadata = new metadata_1.Metadata();
        }
        if (err) {
          if (!Object.prototype.hasOwnProperty.call(err, "metadata")) {
            err.metadata = metadata;
          }
          this.sendError(err);
          return;
        }
        try {
          const response = this.serializeMessage(value);
          this.write(response);
          this.sendStatus({ code: constants_1.Status.OK, details: "OK", metadata });
        } catch (err2) {
          err2.code = constants_1.Status.INTERNAL;
          this.sendError(err2);
        }
      }
      sendStatus(statusObj) {
        var _a;
        if (this.checkCancelled()) {
          return;
        }
        trace("Request to method " + ((_a = this.handler) === null || _a === void 0 ? void 0 : _a.path) + " ended with status code: " + constants_1.Status[statusObj.code] + " details: " + statusObj.details);
        clearTimeout(this.deadlineTimer);
        if (!this.wantTrailers) {
          this.wantTrailers = true;
          this.stream.once("wantTrailers", () => {
            const trailersToSend = Object.assign({
              [GRPC_STATUS_HEADER]: statusObj.code,
              [GRPC_MESSAGE_HEADER]: encodeURI(statusObj.details)
            }, statusObj.metadata.toHttp2Headers());
            this.stream.sendTrailers(trailersToSend);
          });
          this.sendMetadata();
          this.stream.end();
        }
      }
      sendError(error2) {
        if (this.checkCancelled()) {
          return;
        }
        const status = {
          code: constants_1.Status.UNKNOWN,
          details: "message" in error2 ? error2.message : "Unknown Error",
          metadata: "metadata" in error2 && error2.metadata !== void 0 ? error2.metadata : new metadata_1.Metadata()
        };
        if ("code" in error2 && typeof error2.code === "number" && Number.isInteger(error2.code)) {
          status.code = error2.code;
          if ("details" in error2 && typeof error2.details === "string") {
            status.details = error2.details;
          }
        }
        this.sendStatus(status);
      }
      write(chunk) {
        if (this.checkCancelled()) {
          return;
        }
        if (this.maxSendMessageSize !== -1 && chunk.length > this.maxSendMessageSize) {
          this.sendError({
            code: constants_1.Status.RESOURCE_EXHAUSTED,
            details: `Sent message larger than max (${chunk.length} vs. ${this.maxSendMessageSize})`
          });
          return;
        }
        this.sendMetadata();
        return this.stream.write(chunk);
      }
      resume() {
        this.stream.resume();
      }
      setupSurfaceCall(call) {
        this.once("cancelled", (reason) => {
          call.cancelled = true;
          call.emit("cancelled", reason);
        });
      }
      setupReadable(readable2) {
        const decoder = new stream_decoder_1.StreamDecoder();
        this.stream.on("data", async (data) => {
          const messages = decoder.write(data);
          for (const message of messages) {
            if (this.maxReceiveMessageSize !== -1 && message.length > this.maxReceiveMessageSize) {
              this.sendError({
                code: constants_1.Status.RESOURCE_EXHAUSTED,
                details: `Received message larger than max (${message.length} vs. ${this.maxReceiveMessageSize})`
              });
              return;
            }
            this.pushOrBufferMessage(readable2, message);
          }
        });
        this.stream.once("end", () => {
          this.pushOrBufferMessage(readable2, null);
        });
      }
      consumeUnpushedMessages(readable2) {
        this.canPush = true;
        while (this.messagesToPush.length > 0) {
          const nextMessage = this.messagesToPush.shift();
          const canPush = readable2.push(nextMessage);
          if (nextMessage === null || canPush === false) {
            this.canPush = false;
            break;
          }
        }
        return this.canPush;
      }
      pushOrBufferMessage(readable2, messageBytes) {
        if (this.isPushPending) {
          this.bufferedMessages.push(messageBytes);
        } else {
          this.pushMessage(readable2, messageBytes);
        }
      }
      async pushMessage(readable2, messageBytes) {
        if (messageBytes === null) {
          if (this.canPush) {
            readable2.push(null);
          } else {
            this.messagesToPush.push(null);
          }
          return;
        }
        this.isPushPending = true;
        try {
          const deserialized = await this.deserializeMessage(messageBytes);
          if (this.canPush) {
            if (!readable2.push(deserialized)) {
              this.canPush = false;
              this.stream.pause();
            }
          } else {
            this.messagesToPush.push(deserialized);
          }
        } catch (error2) {
          this.bufferedMessages.length = 0;
          if (!("code" in error2 && typeof error2.code === "number" && Number.isInteger(error2.code) && error2.code >= constants_1.Status.OK && error2.code <= constants_1.Status.UNAUTHENTICATED)) {
            error2.code = constants_1.Status.INTERNAL;
          }
          readable2.emit("error", error2);
        }
        this.isPushPending = false;
        if (this.bufferedMessages.length > 0) {
          this.pushMessage(readable2, this.bufferedMessages.shift());
        }
      }
      getPeer() {
        const socket = this.stream.session.socket;
        if (socket.remoteAddress) {
          if (socket.remotePort) {
            return `${socket.remoteAddress}:${socket.remotePort}`;
          } else {
            return socket.remoteAddress;
          }
        } else {
          return "unknown";
        }
      }
      getDeadline() {
        return this.deadline;
      }
    };
    exports2.Http2ServerCallStream = Http2ServerCallStream;
    function handleExpiredDeadline(call) {
      const err = new Error("Deadline exceeded");
      err.code = constants_1.Status.DEADLINE_EXCEEDED;
      call.sendError(err);
      call.cancelled = true;
      call.emit("cancelled", "deadline");
    }
  }
});

// node_modules/@grpc/grpc-js/build/src/server.js
var require_server = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/server.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Server = void 0;
    var http2 = require("http2");
    var constants_1 = require_constants();
    var metadata_1 = require_metadata();
    var server_call_1 = require_server_call();
    var resolver_1 = require_resolver();
    var logging = require_logging();
    var subchannel_1 = require_subchannel();
    var uri_parser_1 = require_uri_parser();
    var TRACER_NAME = "server";
    function trace(text) {
      logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);
    }
    function noop2() {
    }
    function getUnimplementedStatusResponse(methodName) {
      return {
        code: constants_1.Status.UNIMPLEMENTED,
        details: `The server does not implement the method ${methodName}`,
        metadata: new metadata_1.Metadata()
      };
    }
    function getDefaultHandler(handlerType, methodName) {
      const unimplementedStatusResponse = getUnimplementedStatusResponse(methodName);
      switch (handlerType) {
        case "unary":
          return (call, callback) => {
            callback(unimplementedStatusResponse, null);
          };
        case "clientStream":
          return (call, callback) => {
            callback(unimplementedStatusResponse, null);
          };
        case "serverStream":
          return (call) => {
            call.emit("error", unimplementedStatusResponse);
          };
        case "bidi":
          return (call) => {
            call.emit("error", unimplementedStatusResponse);
          };
        default:
          throw new Error(`Invalid handlerType ${handlerType}`);
      }
    }
    var Server = class {
      constructor(options2) {
        this.http2ServerList = [];
        this.handlers = new Map();
        this.sessions = new Set();
        this.started = false;
        this.options = options2 !== null && options2 !== void 0 ? options2 : {};
      }
      addProtoService() {
        throw new Error("Not implemented. Use addService() instead");
      }
      addService(service, implementation) {
        if (service === null || typeof service !== "object" || implementation === null || typeof implementation !== "object") {
          throw new Error("addService() requires two objects as arguments");
        }
        const serviceKeys = Object.keys(service);
        if (serviceKeys.length === 0) {
          throw new Error("Cannot add an empty service to a server");
        }
        serviceKeys.forEach((name2) => {
          const attrs = service[name2];
          let methodType;
          if (attrs.requestStream) {
            if (attrs.responseStream) {
              methodType = "bidi";
            } else {
              methodType = "clientStream";
            }
          } else {
            if (attrs.responseStream) {
              methodType = "serverStream";
            } else {
              methodType = "unary";
            }
          }
          let implFn = implementation[name2];
          let impl;
          if (implFn === void 0 && typeof attrs.originalName === "string") {
            implFn = implementation[attrs.originalName];
          }
          if (implFn !== void 0) {
            impl = implFn.bind(implementation);
          } else {
            impl = getDefaultHandler(methodType, name2);
          }
          const success = this.register(attrs.path, impl, attrs.responseSerialize, attrs.requestDeserialize, methodType);
          if (success === false) {
            throw new Error(`Method handler for ${attrs.path} already provided.`);
          }
        });
      }
      removeService(service) {
        if (service === null || typeof service !== "object") {
          throw new Error("removeService() requires object as argument");
        }
        const serviceKeys = Object.keys(service);
        serviceKeys.forEach((name2) => {
          const attrs = service[name2];
          this.unregister(attrs.path);
        });
      }
      bind(port, creds) {
        throw new Error("Not implemented. Use bindAsync() instead");
      }
      bindAsync(port, creds, callback) {
        if (this.started === true) {
          throw new Error("server is already started");
        }
        if (typeof port !== "string") {
          throw new TypeError("port must be a string");
        }
        if (creds === null || typeof creds !== "object") {
          throw new TypeError("creds must be an object");
        }
        if (typeof callback !== "function") {
          throw new TypeError("callback must be a function");
        }
        const initialPortUri = uri_parser_1.parseUri(port);
        if (initialPortUri === null) {
          throw new Error(`Could not parse port "${port}"`);
        }
        const portUri = resolver_1.mapUriDefaultScheme(initialPortUri);
        if (portUri === null) {
          throw new Error(`Could not get a default scheme for port "${port}"`);
        }
        const serverOptions = {
          maxSendHeaderBlockLength: Number.MAX_SAFE_INTEGER
        };
        if ("grpc-node.max_session_memory" in this.options) {
          serverOptions.maxSessionMemory = this.options["grpc-node.max_session_memory"];
        }
        if ("grpc.max_concurrent_streams" in this.options) {
          serverOptions.settings = {
            maxConcurrentStreams: this.options["grpc.max_concurrent_streams"]
          };
        }
        const setupServer = () => {
          let http2Server;
          if (creds._isSecure()) {
            const secureServerOptions = Object.assign(serverOptions, creds._getSettings());
            http2Server = http2.createSecureServer(secureServerOptions);
          } else {
            http2Server = http2.createServer(serverOptions);
          }
          http2Server.setTimeout(0, noop2);
          this._setupHandlers(http2Server);
          return http2Server;
        };
        const bindSpecificPort = (addressList, portNum, previousCount) => {
          if (addressList.length === 0) {
            return Promise.resolve({ port: portNum, count: previousCount });
          }
          return Promise.all(addressList.map((address) => {
            trace("Attempting to bind " + subchannel_1.subchannelAddressToString(address));
            let addr;
            if (subchannel_1.isTcpSubchannelAddress(address)) {
              addr = {
                host: address.host,
                port: portNum
              };
            } else {
              addr = address;
            }
            const http2Server = setupServer();
            return new Promise((resolve2, reject) => {
              function onError(err) {
                resolve2(err);
              }
              http2Server.once("error", onError);
              http2Server.listen(addr, () => {
                trace("Successfully bound " + subchannel_1.subchannelAddressToString(address));
                this.http2ServerList.push(http2Server);
                const boundAddress = http2Server.address();
                if (typeof boundAddress === "string") {
                  resolve2(portNum);
                } else {
                  resolve2(boundAddress.port);
                }
                http2Server.removeListener("error", onError);
              });
            });
          })).then((results) => {
            let count = 0;
            for (const result of results) {
              if (typeof result === "number") {
                count += 1;
                if (result !== portNum) {
                  throw new Error("Invalid state: multiple port numbers added from single address");
                }
              }
            }
            return {
              port: portNum,
              count: count + previousCount
            };
          });
        };
        const bindWildcardPort = (addressList) => {
          if (addressList.length === 0) {
            return Promise.resolve({ port: 0, count: 0 });
          }
          const address = addressList[0];
          const http2Server = setupServer();
          return new Promise((resolve2, reject) => {
            function onError(err) {
              resolve2(bindWildcardPort(addressList.slice(1)));
            }
            http2Server.once("error", onError);
            http2Server.listen(address, () => {
              this.http2ServerList.push(http2Server);
              resolve2(bindSpecificPort(addressList.slice(1), http2Server.address().port, 1));
              http2Server.removeListener("error", onError);
            });
          });
        };
        const resolverListener = {
          onSuccessfulResolution: (addressList, serviceConfig, serviceConfigError) => {
            resolverListener.onSuccessfulResolution = () => {
            };
            if (addressList.length === 0) {
              callback(new Error(`No addresses resolved for port ${port}`), 0);
              return;
            }
            let bindResultPromise;
            if (subchannel_1.isTcpSubchannelAddress(addressList[0])) {
              if (addressList[0].port === 0) {
                bindResultPromise = bindWildcardPort(addressList);
              } else {
                bindResultPromise = bindSpecificPort(addressList, addressList[0].port, 0);
              }
            } else {
              bindResultPromise = bindSpecificPort(addressList, 1, 0);
            }
            bindResultPromise.then((bindResult) => {
              if (bindResult.count === 0) {
                const errorString = `No address added out of total ${addressList.length} resolved`;
                logging.log(constants_1.LogVerbosity.ERROR, errorString);
                callback(new Error(errorString), 0);
              } else {
                if (bindResult.count < addressList.length) {
                  logging.log(constants_1.LogVerbosity.INFO, `WARNING Only ${bindResult.count} addresses added out of total ${addressList.length} resolved`);
                }
                callback(null, bindResult.port);
              }
            }, (error2) => {
              const errorString = `No address added out of total ${addressList.length} resolved`;
              logging.log(constants_1.LogVerbosity.ERROR, errorString);
              callback(new Error(errorString), 0);
            });
          },
          onError: (error2) => {
            callback(new Error(error2.details), 0);
          }
        };
        const resolver = resolver_1.createResolver(portUri, resolverListener, this.options);
        resolver.updateResolution();
      }
      forceShutdown() {
        for (const http2Server of this.http2ServerList) {
          if (http2Server.listening) {
            http2Server.close();
          }
        }
        this.started = false;
        this.sessions.forEach((session) => {
          session.destroy(http2.constants.NGHTTP2_CANCEL);
        });
        this.sessions.clear();
      }
      register(name2, handler, serialize, deserialize, type) {
        if (this.handlers.has(name2)) {
          return false;
        }
        this.handlers.set(name2, {
          func: handler,
          serialize,
          deserialize,
          type,
          path: name2
        });
        return true;
      }
      unregister(name2) {
        return this.handlers.delete(name2);
      }
      start() {
        if (this.http2ServerList.length === 0 || this.http2ServerList.every((http2Server) => http2Server.listening !== true)) {
          throw new Error("server must be bound in order to start");
        }
        if (this.started === true) {
          throw new Error("server is already started");
        }
        this.started = true;
      }
      tryShutdown(callback) {
        let pendingChecks = 0;
        function maybeCallback() {
          pendingChecks--;
          if (pendingChecks === 0) {
            callback();
          }
        }
        this.started = false;
        for (const http2Server of this.http2ServerList) {
          if (http2Server.listening) {
            pendingChecks++;
            http2Server.close(maybeCallback);
          }
        }
        this.sessions.forEach((session) => {
          if (!session.closed) {
            pendingChecks += 1;
            session.close(maybeCallback);
          }
        });
        if (pendingChecks === 0) {
          callback();
        }
      }
      addHttp2Port() {
        throw new Error("Not yet implemented");
      }
      _setupHandlers(http2Server) {
        if (http2Server === null) {
          return;
        }
        http2Server.on("stream", (stream, headers) => {
          const contentType = headers[http2.constants.HTTP2_HEADER_CONTENT_TYPE];
          if (typeof contentType !== "string" || !contentType.startsWith("application/grpc")) {
            stream.respond({
              [http2.constants.HTTP2_HEADER_STATUS]: http2.constants.HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE
            }, { endStream: true });
            return;
          }
          try {
            const path = headers[http2.constants.HTTP2_HEADER_PATH];
            const serverAddress = http2Server.address();
            let serverAddressString = "null";
            if (serverAddress) {
              if (typeof serverAddress === "string") {
                serverAddressString = serverAddress;
              } else {
                serverAddressString = serverAddress.address + ":" + serverAddress.port;
              }
            }
            trace("Received call to method " + path + " at address " + serverAddressString);
            const handler = this.handlers.get(path);
            if (handler === void 0) {
              trace("No handler registered for method " + path + ". Sending UNIMPLEMENTED status.");
              throw getUnimplementedStatusResponse(path);
            }
            const call = new server_call_1.Http2ServerCallStream(stream, handler, this.options);
            const metadata = call.receiveMetadata(headers);
            switch (handler.type) {
              case "unary":
                handleUnary(call, handler, metadata);
                break;
              case "clientStream":
                handleClientStreaming(call, handler, metadata);
                break;
              case "serverStream":
                handleServerStreaming(call, handler, metadata);
                break;
              case "bidi":
                handleBidiStreaming(call, handler, metadata);
                break;
              default:
                throw new Error(`Unknown handler type: ${handler.type}`);
            }
          } catch (err) {
            const call = new server_call_1.Http2ServerCallStream(stream, null, this.options);
            if (err.code === void 0) {
              err.code = constants_1.Status.INTERNAL;
            }
            call.sendError(err);
          }
        });
        http2Server.on("session", (session) => {
          if (!this.started) {
            session.destroy();
            return;
          }
          this.sessions.add(session);
          session.on("close", () => {
            this.sessions.delete(session);
          });
        });
      }
    };
    exports2.Server = Server;
    async function handleUnary(call, handler, metadata) {
      const request = await call.receiveUnaryMessage();
      if (request === void 0 || call.cancelled) {
        return;
      }
      const emitter = new server_call_1.ServerUnaryCallImpl(call, metadata, request);
      handler.func(emitter, (err, value, trailer, flags) => {
        call.sendUnaryMessage(err, value, trailer, flags);
      });
    }
    function handleClientStreaming(call, handler, metadata) {
      const stream = new server_call_1.ServerReadableStreamImpl(call, metadata, handler.deserialize);
      function respond2(err, value, trailer, flags) {
        stream.destroy();
        call.sendUnaryMessage(err, value, trailer, flags);
      }
      if (call.cancelled) {
        return;
      }
      stream.on("error", respond2);
      handler.func(stream, respond2);
    }
    async function handleServerStreaming(call, handler, metadata) {
      const request = await call.receiveUnaryMessage();
      if (request === void 0 || call.cancelled) {
        return;
      }
      const stream = new server_call_1.ServerWritableStreamImpl(call, metadata, handler.serialize, request);
      handler.func(stream);
    }
    function handleBidiStreaming(call, handler, metadata) {
      const stream = new server_call_1.ServerDuplexStreamImpl(call, metadata, handler.serialize, handler.deserialize);
      if (call.cancelled) {
        return;
      }
      handler.func(stream);
    }
  }
});

// node_modules/@grpc/grpc-js/build/src/server-credentials.js
var require_server_credentials = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/server-credentials.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ServerCredentials = void 0;
    var tls_helpers_1 = require_tls_helpers();
    var ServerCredentials = class {
      static createInsecure() {
        return new InsecureServerCredentials();
      }
      static createSsl(rootCerts, keyCertPairs, checkClientCertificate = false) {
        if (rootCerts !== null && !Buffer.isBuffer(rootCerts)) {
          throw new TypeError("rootCerts must be null or a Buffer");
        }
        if (!Array.isArray(keyCertPairs)) {
          throw new TypeError("keyCertPairs must be an array");
        }
        if (typeof checkClientCertificate !== "boolean") {
          throw new TypeError("checkClientCertificate must be a boolean");
        }
        const cert = [];
        const key = [];
        for (let i = 0; i < keyCertPairs.length; i++) {
          const pair = keyCertPairs[i];
          if (pair === null || typeof pair !== "object") {
            throw new TypeError(`keyCertPair[${i}] must be an object`);
          }
          if (!Buffer.isBuffer(pair.private_key)) {
            throw new TypeError(`keyCertPair[${i}].private_key must be a Buffer`);
          }
          if (!Buffer.isBuffer(pair.cert_chain)) {
            throw new TypeError(`keyCertPair[${i}].cert_chain must be a Buffer`);
          }
          cert.push(pair.cert_chain);
          key.push(pair.private_key);
        }
        return new SecureServerCredentials({
          ca: rootCerts || tls_helpers_1.getDefaultRootsData() || void 0,
          cert,
          key,
          requestCert: checkClientCertificate,
          ciphers: tls_helpers_1.CIPHER_SUITES
        });
      }
    };
    exports2.ServerCredentials = ServerCredentials;
    var InsecureServerCredentials = class extends ServerCredentials {
      _isSecure() {
        return false;
      }
      _getSettings() {
        return null;
      }
    };
    var SecureServerCredentials = class extends ServerCredentials {
      constructor(options2) {
        super();
        this.options = options2;
      }
      _isSecure() {
        return true;
      }
      _getSettings() {
        return this.options;
      }
    };
  }
});

// node_modules/@grpc/grpc-js/build/src/status-builder.js
var require_status_builder = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/status-builder.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StatusBuilder = void 0;
    var StatusBuilder = class {
      constructor() {
        this.code = null;
        this.details = null;
        this.metadata = null;
      }
      withCode(code) {
        this.code = code;
        return this;
      }
      withDetails(details) {
        this.details = details;
        return this;
      }
      withMetadata(metadata) {
        this.metadata = metadata;
        return this;
      }
      build() {
        const status = {};
        if (this.code !== null) {
          status.code = this.code;
        }
        if (this.details !== null) {
          status.details = this.details;
        }
        if (this.metadata !== null) {
          status.metadata = this.metadata;
        }
        return status;
      }
    };
    exports2.StatusBuilder = StatusBuilder;
  }
});

// node_modules/@grpc/grpc-js/build/src/experimental.js
var require_experimental = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/experimental.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var logging_1 = require_logging();
    Object.defineProperty(exports2, "trace", { enumerable: true, get: function() {
      return logging_1.trace;
    } });
    var resolver_1 = require_resolver();
    Object.defineProperty(exports2, "registerResolver", { enumerable: true, get: function() {
      return resolver_1.registerResolver;
    } });
    var uri_parser_1 = require_uri_parser();
    Object.defineProperty(exports2, "uriToString", { enumerable: true, get: function() {
      return uri_parser_1.uriToString;
    } });
    var backoff_timeout_1 = require_backoff_timeout();
    Object.defineProperty(exports2, "BackoffTimeout", { enumerable: true, get: function() {
      return backoff_timeout_1.BackoffTimeout;
    } });
    var load_balancer_1 = require_load_balancer();
    Object.defineProperty(exports2, "registerLoadBalancerType", { enumerable: true, get: function() {
      return load_balancer_1.registerLoadBalancerType;
    } });
    Object.defineProperty(exports2, "getFirstUsableConfig", { enumerable: true, get: function() {
      return load_balancer_1.getFirstUsableConfig;
    } });
    Object.defineProperty(exports2, "validateLoadBalancingConfig", { enumerable: true, get: function() {
      return load_balancer_1.validateLoadBalancingConfig;
    } });
    var subchannel_1 = require_subchannel();
    Object.defineProperty(exports2, "subchannelAddressToString", { enumerable: true, get: function() {
      return subchannel_1.subchannelAddressToString;
    } });
    var load_balancer_child_handler_1 = require_load_balancer_child_handler();
    Object.defineProperty(exports2, "ChildLoadBalancerHandler", { enumerable: true, get: function() {
      return load_balancer_child_handler_1.ChildLoadBalancerHandler;
    } });
    var picker_1 = require_picker();
    Object.defineProperty(exports2, "UnavailablePicker", { enumerable: true, get: function() {
      return picker_1.UnavailablePicker;
    } });
    Object.defineProperty(exports2, "QueuePicker", { enumerable: true, get: function() {
      return picker_1.QueuePicker;
    } });
    Object.defineProperty(exports2, "PickResultType", { enumerable: true, get: function() {
      return picker_1.PickResultType;
    } });
    var filter_1 = require_filter();
    Object.defineProperty(exports2, "BaseFilter", { enumerable: true, get: function() {
      return filter_1.BaseFilter;
    } });
    var filter_stack_1 = require_filter_stack();
    Object.defineProperty(exports2, "FilterStackFactory", { enumerable: true, get: function() {
      return filter_stack_1.FilterStackFactory;
    } });
  }
});

// node_modules/@grpc/grpc-js/build/src/index.js
var require_src3 = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/index.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.experimental = exports2.StatusBuilder = exports2.getClientChannel = exports2.ServerCredentials = exports2.Server = exports2.setLogVerbosity = exports2.setLogger = exports2.load = exports2.loadObject = exports2.CallCredentials = exports2.ChannelCredentials = exports2.waitForClientReady = exports2.closeClient = exports2.Channel = exports2.makeGenericClientConstructor = exports2.makeClientConstructor = exports2.loadPackageDefinition = exports2.Client = exports2.propagate = exports2.connectivityState = exports2.status = exports2.logVerbosity = exports2.Metadata = exports2.credentials = void 0;
    var call_credentials_1 = require_call_credentials();
    Object.defineProperty(exports2, "CallCredentials", { enumerable: true, get: function() {
      return call_credentials_1.CallCredentials;
    } });
    var channel_1 = require_channel();
    Object.defineProperty(exports2, "connectivityState", { enumerable: true, get: function() {
      return channel_1.ConnectivityState;
    } });
    Object.defineProperty(exports2, "Channel", { enumerable: true, get: function() {
      return channel_1.ChannelImplementation;
    } });
    var channel_credentials_1 = require_channel_credentials();
    Object.defineProperty(exports2, "ChannelCredentials", { enumerable: true, get: function() {
      return channel_credentials_1.ChannelCredentials;
    } });
    var client_1 = require_client();
    Object.defineProperty(exports2, "Client", { enumerable: true, get: function() {
      return client_1.Client;
    } });
    var constants_1 = require_constants();
    Object.defineProperty(exports2, "logVerbosity", { enumerable: true, get: function() {
      return constants_1.LogVerbosity;
    } });
    Object.defineProperty(exports2, "status", { enumerable: true, get: function() {
      return constants_1.Status;
    } });
    Object.defineProperty(exports2, "propagate", { enumerable: true, get: function() {
      return constants_1.Propagate;
    } });
    var logging = require_logging();
    var make_client_1 = require_make_client();
    Object.defineProperty(exports2, "loadPackageDefinition", { enumerable: true, get: function() {
      return make_client_1.loadPackageDefinition;
    } });
    Object.defineProperty(exports2, "makeClientConstructor", { enumerable: true, get: function() {
      return make_client_1.makeClientConstructor;
    } });
    Object.defineProperty(exports2, "makeGenericClientConstructor", { enumerable: true, get: function() {
      return make_client_1.makeClientConstructor;
    } });
    var metadata_1 = require_metadata();
    Object.defineProperty(exports2, "Metadata", { enumerable: true, get: function() {
      return metadata_1.Metadata;
    } });
    var server_1 = require_server();
    Object.defineProperty(exports2, "Server", { enumerable: true, get: function() {
      return server_1.Server;
    } });
    var server_credentials_1 = require_server_credentials();
    Object.defineProperty(exports2, "ServerCredentials", { enumerable: true, get: function() {
      return server_credentials_1.ServerCredentials;
    } });
    var status_builder_1 = require_status_builder();
    Object.defineProperty(exports2, "StatusBuilder", { enumerable: true, get: function() {
      return status_builder_1.StatusBuilder;
    } });
    exports2.credentials = {
      combineChannelCredentials: (channelCredentials, ...callCredentials) => {
        return callCredentials.reduce((acc, other) => acc.compose(other), channelCredentials);
      },
      combineCallCredentials: (first, ...additional) => {
        return additional.reduce((acc, other) => acc.compose(other), first);
      },
      createInsecure: channel_credentials_1.ChannelCredentials.createInsecure,
      createSsl: channel_credentials_1.ChannelCredentials.createSsl,
      createFromMetadataGenerator: call_credentials_1.CallCredentials.createFromMetadataGenerator,
      createFromGoogleCredential: call_credentials_1.CallCredentials.createFromGoogleCredential,
      createEmpty: call_credentials_1.CallCredentials.createEmpty
    };
    exports2.closeClient = (client) => client.close();
    exports2.waitForClientReady = (client, deadline, callback) => client.waitForReady(deadline, callback);
    exports2.loadObject = (value, options2) => {
      throw new Error("Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead");
    };
    exports2.load = (filename, format2, options2) => {
      throw new Error("Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead");
    };
    exports2.setLogger = (logger) => {
      logging.setLogger(logger);
    };
    exports2.setLogVerbosity = (verbosity) => {
      logging.setLoggerVerbosity(verbosity);
    };
    exports2.getClientChannel = (client) => {
      return client_1.Client.prototype.getChannel.call(client);
    };
    var client_interceptors_1 = require_client_interceptors();
    Object.defineProperty(exports2, "ListenerBuilder", { enumerable: true, get: function() {
      return client_interceptors_1.ListenerBuilder;
    } });
    Object.defineProperty(exports2, "RequesterBuilder", { enumerable: true, get: function() {
      return client_interceptors_1.RequesterBuilder;
    } });
    Object.defineProperty(exports2, "InterceptingCall", { enumerable: true, get: function() {
      return client_interceptors_1.InterceptingCall;
    } });
    Object.defineProperty(exports2, "InterceptorConfigurationError", { enumerable: true, get: function() {
      return client_interceptors_1.InterceptorConfigurationError;
    } });
    var experimental = require_experimental();
    exports2.experimental = experimental;
    var resolver = require_resolver();
    var load_balancer = require_load_balancer();
    var clientVersion = require_package().version;
    (() => {
      logging.trace(constants_1.LogVerbosity.DEBUG, "index", "Loading @grpc/grpc-js version " + clientVersion);
      resolver.registerAll();
      load_balancer.registerAll();
    })();
  }
});

// node_modules/firebase/node_modules/@firebase/firestore/dist/index.node.cjs.js
var require_index_node_cjs3 = __commonJS({
  "node_modules/firebase/node_modules/@firebase/firestore/dist/index.node.cjs.js"(exports2) {
    init_shims();
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib = require_tslib();
    var firebase = require_index_node_cjs2();
    var logger = require_index_cjs2();
    var util$1 = require("util");
    var crypto = require("crypto");
    var util = require_index_node_cjs();
    var protoLoader = require_src2();
    var grpcJs = require_src3();
    var path = require("path");
    var package_json = require_package();
    var component = require_index_cjs();
    function _interopDefaultLegacy(e) {
      return e && typeof e === "object" && "default" in e ? e : { "default": e };
    }
    var firebase__default = /* @__PURE__ */ _interopDefaultLegacy(firebase);
    var Code = {
      OK: "ok",
      CANCELLED: "cancelled",
      UNKNOWN: "unknown",
      INVALID_ARGUMENT: "invalid-argument",
      DEADLINE_EXCEEDED: "deadline-exceeded",
      NOT_FOUND: "not-found",
      ALREADY_EXISTS: "already-exists",
      PERMISSION_DENIED: "permission-denied",
      UNAUTHENTICATED: "unauthenticated",
      RESOURCE_EXHAUSTED: "resource-exhausted",
      FAILED_PRECONDITION: "failed-precondition",
      ABORTED: "aborted",
      OUT_OF_RANGE: "out-of-range",
      UNIMPLEMENTED: "unimplemented",
      INTERNAL: "internal",
      UNAVAILABLE: "unavailable",
      DATA_LOSS: "data-loss"
    };
    var FirestoreError = function(_super) {
      tslib.__extends(FirestoreError2, _super);
      function FirestoreError2(code, message) {
        var _this = _super.call(this, message) || this;
        _this.code = code;
        _this.message = message;
        _this.name = "FirebaseError";
        _this.toString = function() {
          return _this.name + ": [code=" + _this.code + "]: " + _this.message;
        };
        return _this;
      }
      return FirestoreError2;
    }(Error);
    function decodeBase64(encoded) {
      if (/[^-A-Za-z0-9+/=]/.test(encoded)) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Not a valid Base64 string: " + encoded);
      }
      return new Buffer(encoded, "base64").toString("binary");
    }
    function encodeBase64(raw) {
      return new Buffer(raw, "binary").toString("base64");
    }
    var version = "7.24.0";
    function formatJSON(value) {
      return util$1.inspect(value, { depth: 100 });
    }
    var logClient = new logger.Logger("@firebase/firestore");
    function getLogLevel() {
      return logClient.logLevel;
    }
    function setLogLevel(logLevel) {
      logClient.setLogLevel(logLevel);
    }
    function logDebug(msg) {
      var obj = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        obj[_i - 1] = arguments[_i];
      }
      if (logClient.logLevel <= logger.LogLevel.DEBUG) {
        var args = obj.map(argToString);
        logClient.debug.apply(logClient, tslib.__spreadArrays(["Firestore (" + version + "): " + msg], args));
      }
    }
    function logError(msg) {
      var obj = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        obj[_i - 1] = arguments[_i];
      }
      if (logClient.logLevel <= logger.LogLevel.ERROR) {
        var args = obj.map(argToString);
        logClient.error.apply(logClient, tslib.__spreadArrays(["Firestore (" + version + "): " + msg], args));
      }
    }
    function logWarn(msg) {
      var obj = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        obj[_i - 1] = arguments[_i];
      }
      if (logClient.logLevel <= logger.LogLevel.WARN) {
        var args = obj.map(argToString);
        logClient.warn.apply(logClient, tslib.__spreadArrays(["Firestore (" + version + "): " + msg], args));
      }
    }
    function argToString(obj) {
      if (typeof obj === "string") {
        return obj;
      } else {
        try {
          return formatJSON(obj);
        } catch (e) {
          return obj;
        }
      }
    }
    function fail(failure) {
      if (failure === void 0) {
        failure = "Unexpected state";
      }
      var message = "FIRESTORE (" + version + ") INTERNAL ASSERTION FAILED: " + failure;
      logError(message);
      throw new Error(message);
    }
    function hardAssert(assertion, message) {
      if (!assertion) {
        fail();
      }
    }
    function debugCast(obj, constructor) {
      return obj;
    }
    function objectSize(obj) {
      var count = 0;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          count++;
        }
      }
      return count;
    }
    function forEach(obj, fn) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          fn(key, obj[key]);
        }
      }
    }
    function isEmpty(obj) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          return false;
        }
      }
      return true;
    }
    var DOCUMENT_KEY_NAME = "__name__";
    var BasePath = function() {
      function BasePath2(segments, offset, length) {
        if (offset === void 0) {
          offset = 0;
        } else if (offset > segments.length) {
          fail();
        }
        if (length === void 0) {
          length = segments.length - offset;
        } else if (length > segments.length - offset) {
          fail();
        }
        this.segments = segments;
        this.offset = offset;
        this.len = length;
      }
      Object.defineProperty(BasePath2.prototype, "length", {
        get: function() {
          return this.len;
        },
        enumerable: false,
        configurable: true
      });
      BasePath2.prototype.isEqual = function(other) {
        return BasePath2.comparator(this, other) === 0;
      };
      BasePath2.prototype.child = function(nameOrPath) {
        var segments = this.segments.slice(this.offset, this.limit());
        if (nameOrPath instanceof BasePath2) {
          nameOrPath.forEach(function(segment) {
            segments.push(segment);
          });
        } else {
          segments.push(nameOrPath);
        }
        return this.construct(segments);
      };
      BasePath2.prototype.limit = function() {
        return this.offset + this.length;
      };
      BasePath2.prototype.popFirst = function(size) {
        size = size === void 0 ? 1 : size;
        return this.construct(this.segments, this.offset + size, this.length - size);
      };
      BasePath2.prototype.popLast = function() {
        return this.construct(this.segments, this.offset, this.length - 1);
      };
      BasePath2.prototype.firstSegment = function() {
        return this.segments[this.offset];
      };
      BasePath2.prototype.lastSegment = function() {
        return this.get(this.length - 1);
      };
      BasePath2.prototype.get = function(index2) {
        return this.segments[this.offset + index2];
      };
      BasePath2.prototype.isEmpty = function() {
        return this.length === 0;
      };
      BasePath2.prototype.isPrefixOf = function(other) {
        if (other.length < this.length) {
          return false;
        }
        for (var i = 0; i < this.length; i++) {
          if (this.get(i) !== other.get(i)) {
            return false;
          }
        }
        return true;
      };
      BasePath2.prototype.isImmediateParentOf = function(potentialChild) {
        if (this.length + 1 !== potentialChild.length) {
          return false;
        }
        for (var i = 0; i < this.length; i++) {
          if (this.get(i) !== potentialChild.get(i)) {
            return false;
          }
        }
        return true;
      };
      BasePath2.prototype.forEach = function(fn) {
        for (var i = this.offset, end = this.limit(); i < end; i++) {
          fn(this.segments[i]);
        }
      };
      BasePath2.prototype.toArray = function() {
        return this.segments.slice(this.offset, this.limit());
      };
      BasePath2.comparator = function(p1, p2) {
        var len = Math.min(p1.length, p2.length);
        for (var i = 0; i < len; i++) {
          var left = p1.get(i);
          var right = p2.get(i);
          if (left < right) {
            return -1;
          }
          if (left > right) {
            return 1;
          }
        }
        if (p1.length < p2.length) {
          return -1;
        }
        if (p1.length > p2.length) {
          return 1;
        }
        return 0;
      };
      return BasePath2;
    }();
    var ResourcePath = function(_super) {
      tslib.__extends(ResourcePath2, _super);
      function ResourcePath2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ResourcePath2.prototype.construct = function(segments, offset, length) {
        return new ResourcePath2(segments, offset, length);
      };
      ResourcePath2.prototype.canonicalString = function() {
        return this.toArray().join("/");
      };
      ResourcePath2.prototype.toString = function() {
        return this.canonicalString();
      };
      ResourcePath2.fromString = function() {
        var pathComponents = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          pathComponents[_i] = arguments[_i];
        }
        var segments = [];
        for (var _f = 0, pathComponents_1 = pathComponents; _f < pathComponents_1.length; _f++) {
          var path2 = pathComponents_1[_f];
          if (path2.indexOf("//") >= 0) {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid segment (" + path2 + "). Paths must not contain // in them.");
          }
          segments.push.apply(segments, path2.split("/").filter(function(segment) {
            return segment.length > 0;
          }));
        }
        return new ResourcePath2(segments);
      };
      ResourcePath2.emptyPath = function() {
        return new ResourcePath2([]);
      };
      return ResourcePath2;
    }(BasePath);
    var identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
    var FieldPath = function(_super) {
      tslib.__extends(FieldPath2, _super);
      function FieldPath2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      FieldPath2.prototype.construct = function(segments, offset, length) {
        return new FieldPath2(segments, offset, length);
      };
      FieldPath2.isValidIdentifier = function(segment) {
        return identifierRegExp.test(segment);
      };
      FieldPath2.prototype.canonicalString = function() {
        return this.toArray().map(function(str) {
          str = str.replace("\\", "\\\\").replace("`", "\\`");
          if (!FieldPath2.isValidIdentifier(str)) {
            str = "`" + str + "`";
          }
          return str;
        }).join(".");
      };
      FieldPath2.prototype.toString = function() {
        return this.canonicalString();
      };
      FieldPath2.prototype.isKeyField = function() {
        return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;
      };
      FieldPath2.keyField = function() {
        return new FieldPath2([DOCUMENT_KEY_NAME]);
      };
      FieldPath2.fromServerFormat = function(path2) {
        var segments = [];
        var current = "";
        var i = 0;
        var addCurrentSegment = function() {
          if (current.length === 0) {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid field path (" + path2 + "). Paths must not be empty, begin with '.', end with '.', or contain '..'");
          }
          segments.push(current);
          current = "";
        };
        var inBackticks = false;
        while (i < path2.length) {
          var c = path2[i];
          if (c === "\\") {
            if (i + 1 === path2.length) {
              throw new FirestoreError(Code.INVALID_ARGUMENT, "Path has trailing escape character: " + path2);
            }
            var next = path2[i + 1];
            if (!(next === "\\" || next === "." || next === "`")) {
              throw new FirestoreError(Code.INVALID_ARGUMENT, "Path has invalid escape sequence: " + path2);
            }
            current += next;
            i += 2;
          } else if (c === "`") {
            inBackticks = !inBackticks;
            i++;
          } else if (c === "." && !inBackticks) {
            addCurrentSegment();
            i++;
          } else {
            current += c;
            i++;
          }
        }
        addCurrentSegment();
        if (inBackticks) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Unterminated ` in path: " + path2);
        }
        return new FieldPath2(segments);
      };
      FieldPath2.emptyPath = function() {
        return new FieldPath2([]);
      };
      return FieldPath2;
    }(BasePath);
    var DocumentKey = function() {
      function DocumentKey2(path2) {
        this.path = path2;
      }
      DocumentKey2.fromPath = function(path2) {
        return new DocumentKey2(ResourcePath.fromString(path2));
      };
      DocumentKey2.fromName = function(name3) {
        return new DocumentKey2(ResourcePath.fromString(name3).popFirst(5));
      };
      DocumentKey2.prototype.hasCollectionId = function(collectionId) {
        return this.path.length >= 2 && this.path.get(this.path.length - 2) === collectionId;
      };
      DocumentKey2.prototype.isEqual = function(other) {
        return other !== null && ResourcePath.comparator(this.path, other.path) === 0;
      };
      DocumentKey2.prototype.toString = function() {
        return this.path.toString();
      };
      DocumentKey2.comparator = function(k1, k2) {
        return ResourcePath.comparator(k1.path, k2.path);
      };
      DocumentKey2.isDocumentKey = function(path2) {
        return path2.length % 2 === 0;
      };
      DocumentKey2.fromSegments = function(segments) {
        return new DocumentKey2(new ResourcePath(segments.slice()));
      };
      return DocumentKey2;
    }();
    function validateNoArgs(functionName, args) {
      if (args.length !== 0) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() does not support arguments, but was called with " + formatPlural(args.length, "argument") + ".");
      }
    }
    function validateExactNumberOfArgs(functionName, args, numberOfArgs) {
      if (args.length !== numberOfArgs) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires " + formatPlural(numberOfArgs, "argument") + ", but was called with " + formatPlural(args.length, "argument") + ".");
      }
    }
    function validateAtLeastNumberOfArgs(functionName, args, minNumberOfArgs) {
      if (args.length < minNumberOfArgs) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires at least " + formatPlural(minNumberOfArgs, "argument") + ", but was called with " + formatPlural(args.length, "argument") + ".");
      }
    }
    function validateBetweenNumberOfArgs(functionName, args, minNumberOfArgs, maxNumberOfArgs) {
      if (args.length < minNumberOfArgs || args.length > maxNumberOfArgs) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires between " + minNumberOfArgs + " and " + (maxNumberOfArgs + " arguments, but was called with ") + formatPlural(args.length, "argument") + ".");
      }
    }
    function validateNamedArrayAtLeastNumberOfElements(functionName, value, name3, minNumberOfElements) {
      if (!(value instanceof Array) || value.length < minNumberOfElements) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires its " + name3 + " argument to be an array with at least " + (formatPlural(minNumberOfElements, "element") + "."));
      }
    }
    function validateArgType(functionName, type, position, argument) {
      validateType(functionName, type, ordinal(position) + " argument", argument);
    }
    function validateOptionalArgType(functionName, type, position, argument) {
      if (argument !== void 0) {
        validateArgType(functionName, type, position, argument);
      }
    }
    function validateNamedType(functionName, type, optionName, argument) {
      validateType(functionName, type, optionName + " option", argument);
    }
    function validateNamedOptionalType(functionName, type, optionName, argument) {
      if (argument !== void 0) {
        validateNamedType(functionName, type, optionName, argument);
      }
    }
    function validateIsNotUsedTogether(optionName1, argument1, optionName2, argument2) {
      if (argument1 === true && argument2 === true) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, optionName1 + " and " + optionName2 + " cannot be used together.");
      }
    }
    function validateArrayElements(functionName, optionName, typeDescription, argument, validator) {
      if (!(argument instanceof Array)) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires its " + optionName + " " + ("option to be an array, but it was: " + valueDescription(argument)));
      }
      for (var i = 0; i < argument.length; ++i) {
        if (!validator(argument[i])) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires all " + optionName + " " + ("elements to be " + typeDescription + ", but the value at index " + i + " ") + ("was: " + valueDescription(argument[i])));
        }
      }
    }
    function validateOptionalArrayElements(functionName, optionName, typeDescription, argument, validator) {
      if (argument !== void 0) {
        validateArrayElements(functionName, optionName, typeDescription, argument, validator);
      }
    }
    function validateNamedPropertyEquals(functionName, inputName, optionName, input, expected) {
      var expectedDescription = [];
      for (var _i = 0, expected_1 = expected; _i < expected_1.length; _i++) {
        var val = expected_1[_i];
        if (val === input) {
          return;
        }
        expectedDescription.push(valueDescription(val));
      }
      var actualDescription = valueDescription(input);
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid value " + actualDescription + " provided to function " + functionName + "() for option " + ('"' + optionName + '". Acceptable values: ' + expectedDescription.join(", ")));
    }
    function validateNamedOptionalPropertyEquals(functionName, inputName, optionName, input, expected) {
      if (input !== void 0) {
        validateNamedPropertyEquals(functionName, inputName, optionName, input, expected);
      }
    }
    function validateStringEnum(functionName, enums, position, argument) {
      if (!enums.some(function(element) {
        return element === argument;
      })) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid value " + valueDescription(argument) + " provided to function " + (functionName + "() for its " + ordinal(position) + " argument. Acceptable ") + ("values: " + enums.join(", ")));
      }
      return argument;
    }
    function validateType(functionName, type, inputName, input) {
      var valid = false;
      if (type === "object") {
        valid = isPlainObject(input);
      } else if (type === "non-empty string") {
        valid = typeof input === "string" && input !== "";
      } else {
        valid = typeof input === type;
      }
      if (!valid) {
        var description = valueDescription(input);
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires its " + inputName + " " + ("to be of type " + type + ", but it was: " + description));
      }
    }
    function isPlainObject(input) {
      return typeof input === "object" && input !== null && (Object.getPrototypeOf(input) === Object.prototype || Object.getPrototypeOf(input) === null);
    }
    function valueDescription(input) {
      if (input === void 0) {
        return "undefined";
      } else if (input === null) {
        return "null";
      } else if (typeof input === "string") {
        if (input.length > 20) {
          input = input.substring(0, 20) + "...";
        }
        return JSON.stringify(input);
      } else if (typeof input === "number" || typeof input === "boolean") {
        return "" + input;
      } else if (typeof input === "object") {
        if (input instanceof Array) {
          return "an array";
        } else {
          var customObjectName = tryGetCustomObjectType(input);
          if (customObjectName) {
            return "a custom " + customObjectName + " object";
          } else {
            return "an object";
          }
        }
      } else if (typeof input === "function") {
        return "a function";
      } else {
        return fail();
      }
    }
    function tryGetCustomObjectType(input) {
      if (input.constructor) {
        var funcNameRegex = /function\s+([^\s(]+)\s*\(/;
        var results = funcNameRegex.exec(input.constructor.toString());
        if (results && results.length > 1) {
          return results[1];
        }
      }
      return null;
    }
    function validateDefined(functionName, position, argument) {
      if (argument === void 0) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires a valid " + ordinal(position) + " argument, but it was undefined.");
      }
    }
    function validateOptionNames(functionName, options2, optionNames) {
      forEach(options2, function(key, _) {
        if (optionNames.indexOf(key) < 0) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Unknown option '" + key + "' passed to function " + functionName + "(). Available options: " + optionNames.join(", "));
        }
      });
    }
    function invalidClassError(functionName, type, position, argument) {
      var description = valueDescription(argument);
      return new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires its " + ordinal(position) + " " + ("argument to be a " + type + ", but it was: " + description));
    }
    function validatePositiveNumber(functionName, position, n) {
      if (n <= 0) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires its " + ordinal(position) + " argument to be a positive number, but it was: " + n + ".");
      }
    }
    function ordinal(num) {
      switch (num) {
        case 1:
          return "first";
        case 2:
          return "second";
        case 3:
          return "third";
        default:
          return num + "th";
      }
    }
    function formatPlural(num, str) {
      return num + " " + str + (num === 1 ? "" : "s");
    }
    function randomBytes2(nBytes) {
      return crypto.randomBytes(nBytes);
    }
    var AutoId = function() {
      function AutoId2() {
      }
      AutoId2.newId = function() {
        var chars2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        var maxMultiple = Math.floor(256 / chars2.length) * chars2.length;
        var autoId = "";
        var targetLength = 20;
        while (autoId.length < targetLength) {
          var bytes = randomBytes2(40);
          for (var i = 0; i < bytes.length; ++i) {
            if (autoId.length < targetLength && bytes[i] < maxMultiple) {
              autoId += chars2.charAt(bytes[i] % chars2.length);
            }
          }
        }
        return autoId;
      };
      return AutoId2;
    }();
    function primitiveComparator(left, right) {
      if (left < right) {
        return -1;
      }
      if (left > right) {
        return 1;
      }
      return 0;
    }
    function arrayEquals(left, right, comparator) {
      if (left.length !== right.length) {
        return false;
      }
      return left.every(function(value, index2) {
        return comparator(value, right[index2]);
      });
    }
    function immediateSuccessor(s2) {
      return s2 + "\0";
    }
    var ByteString = function() {
      function ByteString2(binaryString) {
        this.binaryString = binaryString;
      }
      ByteString2.fromBase64String = function(base64) {
        var binaryString = decodeBase64(base64);
        return new ByteString2(binaryString);
      };
      ByteString2.fromUint8Array = function(array) {
        var binaryString = binaryStringFromUint8Array(array);
        return new ByteString2(binaryString);
      };
      ByteString2.prototype.toBase64 = function() {
        return encodeBase64(this.binaryString);
      };
      ByteString2.prototype.toUint8Array = function() {
        return uint8ArrayFromBinaryString(this.binaryString);
      };
      ByteString2.prototype.approximateByteSize = function() {
        return this.binaryString.length * 2;
      };
      ByteString2.prototype.compareTo = function(other) {
        return primitiveComparator(this.binaryString, other.binaryString);
      };
      ByteString2.prototype.isEqual = function(other) {
        return this.binaryString === other.binaryString;
      };
      return ByteString2;
    }();
    ByteString.EMPTY_BYTE_STRING = new ByteString("");
    function binaryStringFromUint8Array(array) {
      var binaryString = "";
      for (var i = 0; i < array.length; ++i) {
        binaryString += String.fromCharCode(array[i]);
      }
      return binaryString;
    }
    function uint8ArrayFromBinaryString(binaryString) {
      var buffer = new Uint8Array(binaryString.length);
      for (var i = 0; i < binaryString.length; i++) {
        buffer[i] = binaryString.charCodeAt(i);
      }
      return buffer;
    }
    var Bytes = function() {
      function Bytes2(byteString) {
        this._byteString = byteString;
      }
      Bytes2.fromBase64String = function(base64) {
        try {
          return new Bytes2(ByteString.fromBase64String(base64));
        } catch (e) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Failed to construct Bytes from Base64 string: " + e);
        }
      };
      Bytes2.fromUint8Array = function(array) {
        return new Bytes2(ByteString.fromUint8Array(array));
      };
      Bytes2.prototype.toBase64 = function() {
        return this._byteString.toBase64();
      };
      Bytes2.prototype.toUint8Array = function() {
        return this._byteString.toUint8Array();
      };
      Bytes2.prototype.toString = function() {
        return "Bytes(base64: " + this.toBase64() + ")";
      };
      Bytes2.prototype.isEqual = function(other) {
        return this._byteString.isEqual(other._byteString);
      };
      return Bytes2;
    }();
    function assertUint8ArrayAvailable() {
      if (typeof Uint8Array === "undefined") {
        throw new FirestoreError(Code.UNIMPLEMENTED, "Uint8Arrays are not available in this environment.");
      }
    }
    var Blob2 = function(_super) {
      tslib.__extends(Blob3, _super);
      function Blob3() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      Blob3.fromBase64String = function(base64) {
        validateExactNumberOfArgs("Blob.fromBase64String", arguments, 1);
        validateArgType("Blob.fromBase64String", "string", 1, base64);
        try {
          return new Blob3(ByteString.fromBase64String(base64));
        } catch (e) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Failed to construct Blob from Base64 string: " + e);
        }
      };
      Blob3.fromUint8Array = function(array) {
        validateExactNumberOfArgs("Blob.fromUint8Array", arguments, 1);
        assertUint8ArrayAvailable();
        if (!(array instanceof Uint8Array)) {
          throw invalidClassError("Blob.fromUint8Array", "Uint8Array", 1, array);
        }
        return new Blob3(ByteString.fromUint8Array(array));
      };
      Blob3.prototype.toBase64 = function() {
        validateExactNumberOfArgs("Blob.toBase64", arguments, 0);
        return _super.prototype.toBase64.call(this);
      };
      Blob3.prototype.toUint8Array = function() {
        validateExactNumberOfArgs("Blob.toUint8Array", arguments, 0);
        assertUint8ArrayAvailable();
        return _super.prototype.toUint8Array.call(this);
      };
      Blob3.prototype.toString = function() {
        return "Blob(base64: " + this.toBase64() + ")";
      };
      return Blob3;
    }(Bytes);
    var DatabaseInfo = function() {
      function DatabaseInfo2(databaseId, persistenceKey, host, ssl, forceLongPolling, autoDetectLongPolling) {
        this.databaseId = databaseId;
        this.persistenceKey = persistenceKey;
        this.host = host;
        this.ssl = ssl;
        this.forceLongPolling = forceLongPolling;
        this.autoDetectLongPolling = autoDetectLongPolling;
      }
      return DatabaseInfo2;
    }();
    var DEFAULT_DATABASE_NAME = "(default)";
    var DatabaseId = function() {
      function DatabaseId2(projectId, database) {
        this.projectId = projectId;
        this.database = database ? database : DEFAULT_DATABASE_NAME;
      }
      Object.defineProperty(DatabaseId2.prototype, "isDefaultDatabase", {
        get: function() {
          return this.database === DEFAULT_DATABASE_NAME;
        },
        enumerable: false,
        configurable: true
      });
      DatabaseId2.prototype.isEqual = function(other) {
        return other instanceof DatabaseId2 && other.projectId === this.projectId && other.database === this.database;
      };
      DatabaseId2.prototype.compareTo = function(other) {
        return primitiveComparator(this.projectId, other.projectId) || primitiveComparator(this.database, other.database);
      };
      return DatabaseId2;
    }();
    var User = function() {
      function User2(uid) {
        this.uid = uid;
      }
      User2.prototype.isAuthenticated = function() {
        return this.uid != null;
      };
      User2.prototype.toKey = function() {
        if (this.isAuthenticated()) {
          return "uid:" + this.uid;
        } else {
          return "anonymous-user";
        }
      };
      User2.prototype.isEqual = function(otherUser) {
        return otherUser.uid === this.uid;
      };
      return User2;
    }();
    User.UNAUTHENTICATED = new User(null);
    User.GOOGLE_CREDENTIALS = new User("google-credentials-uid");
    User.FIRST_PARTY = new User("first-party-uid");
    var ListenSequence = function() {
      function ListenSequence2(previousValue, sequenceNumberSyncer) {
        var _this = this;
        this.previousValue = previousValue;
        if (sequenceNumberSyncer) {
          sequenceNumberSyncer.sequenceNumberHandler = function(sequenceNumber) {
            return _this.setPreviousValue(sequenceNumber);
          };
          this.writeNewSequenceNumber = function(sequenceNumber) {
            return sequenceNumberSyncer.writeSequenceNumber(sequenceNumber);
          };
        }
      }
      ListenSequence2.prototype.setPreviousValue = function(externalPreviousValue) {
        this.previousValue = Math.max(externalPreviousValue, this.previousValue);
        return this.previousValue;
      };
      ListenSequence2.prototype.next = function() {
        var nextValue = ++this.previousValue;
        if (this.writeNewSequenceNumber) {
          this.writeNewSequenceNumber(nextValue);
        }
        return nextValue;
      };
      return ListenSequence2;
    }();
    ListenSequence.INVALID = -1;
    var SortedMap = function() {
      function SortedMap2(comparator, root) {
        this.comparator = comparator;
        this.root = root ? root : LLRBNode.EMPTY;
      }
      SortedMap2.prototype.insert = function(key, value) {
        return new SortedMap2(this.comparator, this.root.insert(key, value, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));
      };
      SortedMap2.prototype.remove = function(key) {
        return new SortedMap2(this.comparator, this.root.remove(key, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));
      };
      SortedMap2.prototype.get = function(key) {
        var node = this.root;
        while (!node.isEmpty()) {
          var cmp = this.comparator(key, node.key);
          if (cmp === 0) {
            return node.value;
          } else if (cmp < 0) {
            node = node.left;
          } else if (cmp > 0) {
            node = node.right;
          }
        }
        return null;
      };
      SortedMap2.prototype.indexOf = function(key) {
        var prunedNodes = 0;
        var node = this.root;
        while (!node.isEmpty()) {
          var cmp = this.comparator(key, node.key);
          if (cmp === 0) {
            return prunedNodes + node.left.size;
          } else if (cmp < 0) {
            node = node.left;
          } else {
            prunedNodes += node.left.size + 1;
            node = node.right;
          }
        }
        return -1;
      };
      SortedMap2.prototype.isEmpty = function() {
        return this.root.isEmpty();
      };
      Object.defineProperty(SortedMap2.prototype, "size", {
        get: function() {
          return this.root.size;
        },
        enumerable: false,
        configurable: true
      });
      SortedMap2.prototype.minKey = function() {
        return this.root.minKey();
      };
      SortedMap2.prototype.maxKey = function() {
        return this.root.maxKey();
      };
      SortedMap2.prototype.inorderTraversal = function(action) {
        return this.root.inorderTraversal(action);
      };
      SortedMap2.prototype.forEach = function(fn) {
        this.inorderTraversal(function(k, v) {
          fn(k, v);
          return false;
        });
      };
      SortedMap2.prototype.toString = function() {
        var descriptions = [];
        this.inorderTraversal(function(k, v) {
          descriptions.push(k + ":" + v);
          return false;
        });
        return "{" + descriptions.join(", ") + "}";
      };
      SortedMap2.prototype.reverseTraversal = function(action) {
        return this.root.reverseTraversal(action);
      };
      SortedMap2.prototype.getIterator = function() {
        return new SortedMapIterator(this.root, null, this.comparator, false);
      };
      SortedMap2.prototype.getIteratorFrom = function(key) {
        return new SortedMapIterator(this.root, key, this.comparator, false);
      };
      SortedMap2.prototype.getReverseIterator = function() {
        return new SortedMapIterator(this.root, null, this.comparator, true);
      };
      SortedMap2.prototype.getReverseIteratorFrom = function(key) {
        return new SortedMapIterator(this.root, key, this.comparator, true);
      };
      return SortedMap2;
    }();
    var SortedMapIterator = function() {
      function SortedMapIterator2(node, startKey, comparator, isReverse) {
        this.isReverse = isReverse;
        this.nodeStack = [];
        var cmp = 1;
        while (!node.isEmpty()) {
          cmp = startKey ? comparator(node.key, startKey) : 1;
          if (isReverse) {
            cmp *= -1;
          }
          if (cmp < 0) {
            if (this.isReverse) {
              node = node.left;
            } else {
              node = node.right;
            }
          } else if (cmp === 0) {
            this.nodeStack.push(node);
            break;
          } else {
            this.nodeStack.push(node);
            if (this.isReverse) {
              node = node.right;
            } else {
              node = node.left;
            }
          }
        }
      }
      SortedMapIterator2.prototype.getNext = function() {
        var node = this.nodeStack.pop();
        var result = { key: node.key, value: node.value };
        if (this.isReverse) {
          node = node.left;
          while (!node.isEmpty()) {
            this.nodeStack.push(node);
            node = node.right;
          }
        } else {
          node = node.right;
          while (!node.isEmpty()) {
            this.nodeStack.push(node);
            node = node.left;
          }
        }
        return result;
      };
      SortedMapIterator2.prototype.hasNext = function() {
        return this.nodeStack.length > 0;
      };
      SortedMapIterator2.prototype.peek = function() {
        if (this.nodeStack.length === 0) {
          return null;
        }
        var node = this.nodeStack[this.nodeStack.length - 1];
        return { key: node.key, value: node.value };
      };
      return SortedMapIterator2;
    }();
    var LLRBNode = function() {
      function LLRBNode2(key, value, color, left, right) {
        this.key = key;
        this.value = value;
        this.color = color != null ? color : LLRBNode2.RED;
        this.left = left != null ? left : LLRBNode2.EMPTY;
        this.right = right != null ? right : LLRBNode2.EMPTY;
        this.size = this.left.size + 1 + this.right.size;
      }
      LLRBNode2.prototype.copy = function(key, value, color, left, right) {
        return new LLRBNode2(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);
      };
      LLRBNode2.prototype.isEmpty = function() {
        return false;
      };
      LLRBNode2.prototype.inorderTraversal = function(action) {
        return this.left.inorderTraversal(action) || action(this.key, this.value) || this.right.inorderTraversal(action);
      };
      LLRBNode2.prototype.reverseTraversal = function(action) {
        return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);
      };
      LLRBNode2.prototype.min = function() {
        if (this.left.isEmpty()) {
          return this;
        } else {
          return this.left.min();
        }
      };
      LLRBNode2.prototype.minKey = function() {
        return this.min().key;
      };
      LLRBNode2.prototype.maxKey = function() {
        if (this.right.isEmpty()) {
          return this.key;
        } else {
          return this.right.maxKey();
        }
      };
      LLRBNode2.prototype.insert = function(key, value, comparator) {
        var n = this;
        var cmp = comparator(key, n.key);
        if (cmp < 0) {
          n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);
        } else if (cmp === 0) {
          n = n.copy(null, value, null, null, null);
        } else {
          n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));
        }
        return n.fixUp();
      };
      LLRBNode2.prototype.removeMin = function() {
        if (this.left.isEmpty()) {
          return LLRBNode2.EMPTY;
        }
        var n = this;
        if (!n.left.isRed() && !n.left.left.isRed()) {
          n = n.moveRedLeft();
        }
        n = n.copy(null, null, null, n.left.removeMin(), null);
        return n.fixUp();
      };
      LLRBNode2.prototype.remove = function(key, comparator) {
        var smallest;
        var n = this;
        if (comparator(key, n.key) < 0) {
          if (!n.left.isEmpty() && !n.left.isRed() && !n.left.left.isRed()) {
            n = n.moveRedLeft();
          }
          n = n.copy(null, null, null, n.left.remove(key, comparator), null);
        } else {
          if (n.left.isRed()) {
            n = n.rotateRight();
          }
          if (!n.right.isEmpty() && !n.right.isRed() && !n.right.left.isRed()) {
            n = n.moveRedRight();
          }
          if (comparator(key, n.key) === 0) {
            if (n.right.isEmpty()) {
              return LLRBNode2.EMPTY;
            } else {
              smallest = n.right.min();
              n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin());
            }
          }
          n = n.copy(null, null, null, null, n.right.remove(key, comparator));
        }
        return n.fixUp();
      };
      LLRBNode2.prototype.isRed = function() {
        return this.color;
      };
      LLRBNode2.prototype.fixUp = function() {
        var n = this;
        if (n.right.isRed() && !n.left.isRed()) {
          n = n.rotateLeft();
        }
        if (n.left.isRed() && n.left.left.isRed()) {
          n = n.rotateRight();
        }
        if (n.left.isRed() && n.right.isRed()) {
          n = n.colorFlip();
        }
        return n;
      };
      LLRBNode2.prototype.moveRedLeft = function() {
        var n = this.colorFlip();
        if (n.right.left.isRed()) {
          n = n.copy(null, null, null, null, n.right.rotateRight());
          n = n.rotateLeft();
          n = n.colorFlip();
        }
        return n;
      };
      LLRBNode2.prototype.moveRedRight = function() {
        var n = this.colorFlip();
        if (n.left.left.isRed()) {
          n = n.rotateRight();
          n = n.colorFlip();
        }
        return n;
      };
      LLRBNode2.prototype.rotateLeft = function() {
        var nl = this.copy(null, null, LLRBNode2.RED, null, this.right.left);
        return this.right.copy(null, null, this.color, nl, null);
      };
      LLRBNode2.prototype.rotateRight = function() {
        var nr = this.copy(null, null, LLRBNode2.RED, this.left.right, null);
        return this.left.copy(null, null, this.color, null, nr);
      };
      LLRBNode2.prototype.colorFlip = function() {
        var left = this.left.copy(null, null, !this.left.color, null, null);
        var right = this.right.copy(null, null, !this.right.color, null, null);
        return this.copy(null, null, !this.color, left, right);
      };
      LLRBNode2.prototype.checkMaxDepth = function() {
        var blackDepth = this.check();
        if (Math.pow(2, blackDepth) <= this.size + 1) {
          return true;
        } else {
          return false;
        }
      };
      LLRBNode2.prototype.check = function() {
        if (this.isRed() && this.left.isRed()) {
          throw fail();
        }
        if (this.right.isRed()) {
          throw fail();
        }
        var blackDepth = this.left.check();
        if (blackDepth !== this.right.check()) {
          throw fail();
        } else {
          return blackDepth + (this.isRed() ? 0 : 1);
        }
      };
      return LLRBNode2;
    }();
    LLRBNode.EMPTY = null;
    LLRBNode.RED = true;
    LLRBNode.BLACK = false;
    var LLRBEmptyNode = function() {
      function LLRBEmptyNode2() {
        this.size = 0;
      }
      Object.defineProperty(LLRBEmptyNode2.prototype, "key", {
        get: function() {
          throw fail();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(LLRBEmptyNode2.prototype, "value", {
        get: function() {
          throw fail();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(LLRBEmptyNode2.prototype, "color", {
        get: function() {
          throw fail();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(LLRBEmptyNode2.prototype, "left", {
        get: function() {
          throw fail();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(LLRBEmptyNode2.prototype, "right", {
        get: function() {
          throw fail();
        },
        enumerable: false,
        configurable: true
      });
      LLRBEmptyNode2.prototype.copy = function(key, value, color, left, right) {
        return this;
      };
      LLRBEmptyNode2.prototype.insert = function(key, value, comparator) {
        return new LLRBNode(key, value);
      };
      LLRBEmptyNode2.prototype.remove = function(key, comparator) {
        return this;
      };
      LLRBEmptyNode2.prototype.isEmpty = function() {
        return true;
      };
      LLRBEmptyNode2.prototype.inorderTraversal = function(action) {
        return false;
      };
      LLRBEmptyNode2.prototype.reverseTraversal = function(action) {
        return false;
      };
      LLRBEmptyNode2.prototype.minKey = function() {
        return null;
      };
      LLRBEmptyNode2.prototype.maxKey = function() {
        return null;
      };
      LLRBEmptyNode2.prototype.isRed = function() {
        return false;
      };
      LLRBEmptyNode2.prototype.checkMaxDepth = function() {
        return true;
      };
      LLRBEmptyNode2.prototype.check = function() {
        return 0;
      };
      return LLRBEmptyNode2;
    }();
    LLRBNode.EMPTY = new LLRBEmptyNode();
    var SortedSet = function() {
      function SortedSet2(comparator) {
        this.comparator = comparator;
        this.data = new SortedMap(this.comparator);
      }
      SortedSet2.prototype.has = function(elem) {
        return this.data.get(elem) !== null;
      };
      SortedSet2.prototype.first = function() {
        return this.data.minKey();
      };
      SortedSet2.prototype.last = function() {
        return this.data.maxKey();
      };
      Object.defineProperty(SortedSet2.prototype, "size", {
        get: function() {
          return this.data.size;
        },
        enumerable: false,
        configurable: true
      });
      SortedSet2.prototype.indexOf = function(elem) {
        return this.data.indexOf(elem);
      };
      SortedSet2.prototype.forEach = function(cb) {
        this.data.inorderTraversal(function(k, v) {
          cb(k);
          return false;
        });
      };
      SortedSet2.prototype.forEachInRange = function(range, cb) {
        var iter = this.data.getIteratorFrom(range[0]);
        while (iter.hasNext()) {
          var elem = iter.getNext();
          if (this.comparator(elem.key, range[1]) >= 0) {
            return;
          }
          cb(elem.key);
        }
      };
      SortedSet2.prototype.forEachWhile = function(cb, start) {
        var iter;
        if (start !== void 0) {
          iter = this.data.getIteratorFrom(start);
        } else {
          iter = this.data.getIterator();
        }
        while (iter.hasNext()) {
          var elem = iter.getNext();
          var result = cb(elem.key);
          if (!result) {
            return;
          }
        }
      };
      SortedSet2.prototype.firstAfterOrEqual = function(elem) {
        var iter = this.data.getIteratorFrom(elem);
        return iter.hasNext() ? iter.getNext().key : null;
      };
      SortedSet2.prototype.getIterator = function() {
        return new SortedSetIterator(this.data.getIterator());
      };
      SortedSet2.prototype.getIteratorFrom = function(key) {
        return new SortedSetIterator(this.data.getIteratorFrom(key));
      };
      SortedSet2.prototype.add = function(elem) {
        return this.copy(this.data.remove(elem).insert(elem, true));
      };
      SortedSet2.prototype.delete = function(elem) {
        if (!this.has(elem)) {
          return this;
        }
        return this.copy(this.data.remove(elem));
      };
      SortedSet2.prototype.isEmpty = function() {
        return this.data.isEmpty();
      };
      SortedSet2.prototype.unionWith = function(other) {
        var result = this;
        if (result.size < other.size) {
          result = other;
          other = this;
        }
        other.forEach(function(elem) {
          result = result.add(elem);
        });
        return result;
      };
      SortedSet2.prototype.isEqual = function(other) {
        if (!(other instanceof SortedSet2)) {
          return false;
        }
        if (this.size !== other.size) {
          return false;
        }
        var thisIt = this.data.getIterator();
        var otherIt = other.data.getIterator();
        while (thisIt.hasNext()) {
          var thisElem = thisIt.getNext().key;
          var otherElem = otherIt.getNext().key;
          if (this.comparator(thisElem, otherElem) !== 0) {
            return false;
          }
        }
        return true;
      };
      SortedSet2.prototype.toArray = function() {
        var res = [];
        this.forEach(function(targetId) {
          res.push(targetId);
        });
        return res;
      };
      SortedSet2.prototype.toString = function() {
        var result = [];
        this.forEach(function(elem) {
          return result.push(elem);
        });
        return "SortedSet(" + result.toString() + ")";
      };
      SortedSet2.prototype.copy = function(data) {
        var result = new SortedSet2(this.comparator);
        result.data = data;
        return result;
      };
      return SortedSet2;
    }();
    var SortedSetIterator = function() {
      function SortedSetIterator2(iter) {
        this.iter = iter;
      }
      SortedSetIterator2.prototype.getNext = function() {
        return this.iter.getNext().key;
      };
      SortedSetIterator2.prototype.hasNext = function() {
        return this.iter.hasNext();
      };
      return SortedSetIterator2;
    }();
    var EMPTY_MAYBE_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);
    function maybeDocumentMap() {
      return EMPTY_MAYBE_DOCUMENT_MAP;
    }
    function nullableMaybeDocumentMap() {
      return maybeDocumentMap();
    }
    var EMPTY_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);
    function documentMap() {
      return EMPTY_DOCUMENT_MAP;
    }
    var EMPTY_DOCUMENT_VERSION_MAP = new SortedMap(DocumentKey.comparator);
    function documentVersionMap() {
      return EMPTY_DOCUMENT_VERSION_MAP;
    }
    var EMPTY_DOCUMENT_KEY_SET = new SortedSet(DocumentKey.comparator);
    function documentKeySet() {
      var keys = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        keys[_i] = arguments[_i];
      }
      var set = EMPTY_DOCUMENT_KEY_SET;
      for (var _f = 0, keys_1 = keys; _f < keys_1.length; _f++) {
        var key = keys_1[_f];
        set = set.add(key);
      }
      return set;
    }
    var EMPTY_TARGET_ID_SET = new SortedSet(primitiveComparator);
    function targetIdSet() {
      return EMPTY_TARGET_ID_SET;
    }
    function isNullOrUndefined(value) {
      return value === null || value === void 0;
    }
    function isNegativeZero(value) {
      return value === 0 && 1 / value === 1 / -0;
    }
    function isSafeInteger(value) {
      return typeof value === "number" && Number.isInteger(value) && !isNegativeZero(value) && value <= Number.MAX_SAFE_INTEGER && value >= Number.MIN_SAFE_INTEGER;
    }
    var CLIENT_STATE_KEY_PREFIX = "firestore_clients";
    function createWebStorageClientStateKey(persistenceKey, clientId) {
      return CLIENT_STATE_KEY_PREFIX + "_" + persistenceKey + "_" + clientId;
    }
    var MUTATION_BATCH_KEY_PREFIX = "firestore_mutations";
    function createWebStorageMutationBatchKey(persistenceKey, user, batchId) {
      var mutationKey = MUTATION_BATCH_KEY_PREFIX + "_" + persistenceKey + "_" + batchId;
      if (user.isAuthenticated()) {
        mutationKey += "_" + user.uid;
      }
      return mutationKey;
    }
    var QUERY_TARGET_KEY_PREFIX = "firestore_targets";
    function createWebStorageQueryTargetMetadataKey(persistenceKey, targetId) {
      return QUERY_TARGET_KEY_PREFIX + "_" + persistenceKey + "_" + targetId;
    }
    var ONLINE_STATE_KEY_PREFIX = "firestore_online_state";
    function createWebStorageOnlineStateKey(persistenceKey) {
      return ONLINE_STATE_KEY_PREFIX + "_" + persistenceKey;
    }
    var SEQUENCE_NUMBER_KEY_PREFIX = "firestore_sequence_number";
    function createWebStorageSequenceNumberKey(persistenceKey) {
      return SEQUENCE_NUMBER_KEY_PREFIX + "_" + persistenceKey;
    }
    var LOG_TAG = "SharedClientState";
    var MutationMetadata = function() {
      function MutationMetadata2(user, batchId, state, error2) {
        this.user = user;
        this.batchId = batchId;
        this.state = state;
        this.error = error2;
      }
      MutationMetadata2.fromWebStorageEntry = function(user, batchId, value) {
        var mutationBatch = JSON.parse(value);
        var validData = typeof mutationBatch === "object" && ["pending", "acknowledged", "rejected"].indexOf(mutationBatch.state) !== -1 && (mutationBatch.error === void 0 || typeof mutationBatch.error === "object");
        var firestoreError = void 0;
        if (validData && mutationBatch.error) {
          validData = typeof mutationBatch.error.message === "string" && typeof mutationBatch.error.code === "string";
          if (validData) {
            firestoreError = new FirestoreError(mutationBatch.error.code, mutationBatch.error.message);
          }
        }
        if (validData) {
          return new MutationMetadata2(user, batchId, mutationBatch.state, firestoreError);
        } else {
          logError(LOG_TAG, "Failed to parse mutation state for ID '" + batchId + "': " + value);
          return null;
        }
      };
      MutationMetadata2.prototype.toWebStorageJSON = function() {
        var batchMetadata = {
          state: this.state,
          updateTimeMs: Date.now()
        };
        if (this.error) {
          batchMetadata.error = {
            code: this.error.code,
            message: this.error.message
          };
        }
        return JSON.stringify(batchMetadata);
      };
      return MutationMetadata2;
    }();
    var QueryTargetMetadata = function() {
      function QueryTargetMetadata2(targetId, state, error2) {
        this.targetId = targetId;
        this.state = state;
        this.error = error2;
      }
      QueryTargetMetadata2.fromWebStorageEntry = function(targetId, value) {
        var targetState = JSON.parse(value);
        var validData = typeof targetState === "object" && ["not-current", "current", "rejected"].indexOf(targetState.state) !== -1 && (targetState.error === void 0 || typeof targetState.error === "object");
        var firestoreError = void 0;
        if (validData && targetState.error) {
          validData = typeof targetState.error.message === "string" && typeof targetState.error.code === "string";
          if (validData) {
            firestoreError = new FirestoreError(targetState.error.code, targetState.error.message);
          }
        }
        if (validData) {
          return new QueryTargetMetadata2(targetId, targetState.state, firestoreError);
        } else {
          logError(LOG_TAG, "Failed to parse target state for ID '" + targetId + "': " + value);
          return null;
        }
      };
      QueryTargetMetadata2.prototype.toWebStorageJSON = function() {
        var targetState = {
          state: this.state,
          updateTimeMs: Date.now()
        };
        if (this.error) {
          targetState.error = {
            code: this.error.code,
            message: this.error.message
          };
        }
        return JSON.stringify(targetState);
      };
      return QueryTargetMetadata2;
    }();
    var RemoteClientState = function() {
      function RemoteClientState2(clientId, activeTargetIds) {
        this.clientId = clientId;
        this.activeTargetIds = activeTargetIds;
      }
      RemoteClientState2.fromWebStorageEntry = function(clientId, value) {
        var clientState = JSON.parse(value);
        var validData = typeof clientState === "object" && clientState.activeTargetIds instanceof Array;
        var activeTargetIdsSet = targetIdSet();
        for (var i = 0; validData && i < clientState.activeTargetIds.length; ++i) {
          validData = isSafeInteger(clientState.activeTargetIds[i]);
          activeTargetIdsSet = activeTargetIdsSet.add(clientState.activeTargetIds[i]);
        }
        if (validData) {
          return new RemoteClientState2(clientId, activeTargetIdsSet);
        } else {
          logError(LOG_TAG, "Failed to parse client data for instance '" + clientId + "': " + value);
          return null;
        }
      };
      return RemoteClientState2;
    }();
    var SharedOnlineState = function() {
      function SharedOnlineState2(clientId, onlineState) {
        this.clientId = clientId;
        this.onlineState = onlineState;
      }
      SharedOnlineState2.fromWebStorageEntry = function(value) {
        var onlineState = JSON.parse(value);
        var validData = typeof onlineState === "object" && ["Unknown", "Online", "Offline"].indexOf(onlineState.onlineState) !== -1 && typeof onlineState.clientId === "string";
        if (validData) {
          return new SharedOnlineState2(onlineState.clientId, onlineState.onlineState);
        } else {
          logError(LOG_TAG, "Failed to parse online state: " + value);
          return null;
        }
      };
      return SharedOnlineState2;
    }();
    var LocalClientState = function() {
      function LocalClientState2() {
        this.activeTargetIds = targetIdSet();
      }
      LocalClientState2.prototype.addQueryTarget = function(targetId) {
        this.activeTargetIds = this.activeTargetIds.add(targetId);
      };
      LocalClientState2.prototype.removeQueryTarget = function(targetId) {
        this.activeTargetIds = this.activeTargetIds.delete(targetId);
      };
      LocalClientState2.prototype.toWebStorageJSON = function() {
        var data = {
          activeTargetIds: this.activeTargetIds.toArray(),
          updateTimeMs: Date.now()
        };
        return JSON.stringify(data);
      };
      return LocalClientState2;
    }();
    var WebStorageSharedClientState = function() {
      function WebStorageSharedClientState2(window2, queue, persistenceKey, localClientId, initialUser) {
        this.window = window2;
        this.queue = queue;
        this.persistenceKey = persistenceKey;
        this.localClientId = localClientId;
        this.syncEngine = null;
        this.onlineStateHandler = null;
        this.sequenceNumberHandler = null;
        this.storageListener = this.handleWebStorageEvent.bind(this);
        this.activeClients = new SortedMap(primitiveComparator);
        this.started = false;
        this.earlyEvents = [];
        var escapedPersistenceKey = persistenceKey.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
        this.storage = this.window.localStorage;
        this.currentUser = initialUser;
        this.localClientStorageKey = createWebStorageClientStateKey(this.persistenceKey, this.localClientId);
        this.sequenceNumberKey = createWebStorageSequenceNumberKey(this.persistenceKey);
        this.activeClients = this.activeClients.insert(this.localClientId, new LocalClientState());
        this.clientStateKeyRe = new RegExp("^" + CLIENT_STATE_KEY_PREFIX + "_" + escapedPersistenceKey + "_([^_]*)$");
        this.mutationBatchKeyRe = new RegExp("^" + MUTATION_BATCH_KEY_PREFIX + "_" + escapedPersistenceKey + "_(\\d+)(?:_(.*))?$");
        this.queryTargetKeyRe = new RegExp("^" + QUERY_TARGET_KEY_PREFIX + "_" + escapedPersistenceKey + "_(\\d+)$");
        this.onlineStateKey = createWebStorageOnlineStateKey(this.persistenceKey);
        this.window.addEventListener("storage", this.storageListener);
      }
      WebStorageSharedClientState2.isAvailable = function(window2) {
        return !!(window2 && window2.localStorage);
      };
      WebStorageSharedClientState2.prototype.start = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var existingClients, _i, existingClients_1, clientId, storageItem, clientState, onlineStateJSON, onlineState, _f, _g, event_1;
          var _this = this;
          return tslib.__generator(this, function(_h) {
            switch (_h.label) {
              case 0:
                return [4, this.syncEngine.getActiveClients()];
              case 1:
                existingClients = _h.sent();
                for (_i = 0, existingClients_1 = existingClients; _i < existingClients_1.length; _i++) {
                  clientId = existingClients_1[_i];
                  if (clientId === this.localClientId) {
                    continue;
                  }
                  storageItem = this.getItem(createWebStorageClientStateKey(this.persistenceKey, clientId));
                  if (storageItem) {
                    clientState = RemoteClientState.fromWebStorageEntry(clientId, storageItem);
                    if (clientState) {
                      this.activeClients = this.activeClients.insert(clientState.clientId, clientState);
                    }
                  }
                }
                this.persistClientState();
                onlineStateJSON = this.storage.getItem(this.onlineStateKey);
                if (onlineStateJSON) {
                  onlineState = this.fromWebStorageOnlineState(onlineStateJSON);
                  if (onlineState) {
                    this.handleOnlineStateEvent(onlineState);
                  }
                }
                for (_f = 0, _g = this.earlyEvents; _f < _g.length; _f++) {
                  event_1 = _g[_f];
                  this.handleWebStorageEvent(event_1);
                }
                this.earlyEvents = [];
                this.window.addEventListener("unload", function() {
                  return _this.shutdown();
                });
                this.started = true;
                return [2];
            }
          });
        });
      };
      WebStorageSharedClientState2.prototype.writeSequenceNumber = function(sequenceNumber) {
        this.setItem(this.sequenceNumberKey, JSON.stringify(sequenceNumber));
      };
      WebStorageSharedClientState2.prototype.getAllActiveQueryTargets = function() {
        return this.extractActiveQueryTargets(this.activeClients);
      };
      WebStorageSharedClientState2.prototype.isActiveQueryTarget = function(targetId) {
        var found = false;
        this.activeClients.forEach(function(key, value) {
          if (value.activeTargetIds.has(targetId)) {
            found = true;
          }
        });
        return found;
      };
      WebStorageSharedClientState2.prototype.addPendingMutation = function(batchId) {
        this.persistMutationState(batchId, "pending");
      };
      WebStorageSharedClientState2.prototype.updateMutationState = function(batchId, state, error2) {
        this.persistMutationState(batchId, state, error2);
        this.removeMutationState(batchId);
      };
      WebStorageSharedClientState2.prototype.addLocalQueryTarget = function(targetId) {
        var queryState = "not-current";
        if (this.isActiveQueryTarget(targetId)) {
          var storageItem = this.storage.getItem(createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId));
          if (storageItem) {
            var metadata = QueryTargetMetadata.fromWebStorageEntry(targetId, storageItem);
            if (metadata) {
              queryState = metadata.state;
            }
          }
        }
        this.localClientState.addQueryTarget(targetId);
        this.persistClientState();
        return queryState;
      };
      WebStorageSharedClientState2.prototype.removeLocalQueryTarget = function(targetId) {
        this.localClientState.removeQueryTarget(targetId);
        this.persistClientState();
      };
      WebStorageSharedClientState2.prototype.isLocalQueryTarget = function(targetId) {
        return this.localClientState.activeTargetIds.has(targetId);
      };
      WebStorageSharedClientState2.prototype.clearQueryState = function(targetId) {
        this.removeItem(createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId));
      };
      WebStorageSharedClientState2.prototype.updateQueryState = function(targetId, state, error2) {
        this.persistQueryTargetState(targetId, state, error2);
      };
      WebStorageSharedClientState2.prototype.handleUserChange = function(user, removedBatchIds, addedBatchIds) {
        var _this = this;
        removedBatchIds.forEach(function(batchId) {
          _this.removeMutationState(batchId);
        });
        this.currentUser = user;
        addedBatchIds.forEach(function(batchId) {
          _this.addPendingMutation(batchId);
        });
      };
      WebStorageSharedClientState2.prototype.setOnlineState = function(onlineState) {
        this.persistOnlineState(onlineState);
      };
      WebStorageSharedClientState2.prototype.shutdown = function() {
        if (this.started) {
          this.window.removeEventListener("storage", this.storageListener);
          this.removeItem(this.localClientStorageKey);
          this.started = false;
        }
      };
      WebStorageSharedClientState2.prototype.getItem = function(key) {
        var value = this.storage.getItem(key);
        logDebug(LOG_TAG, "READ", key, value);
        return value;
      };
      WebStorageSharedClientState2.prototype.setItem = function(key, value) {
        logDebug(LOG_TAG, "SET", key, value);
        this.storage.setItem(key, value);
      };
      WebStorageSharedClientState2.prototype.removeItem = function(key) {
        logDebug(LOG_TAG, "REMOVE", key);
        this.storage.removeItem(key);
      };
      WebStorageSharedClientState2.prototype.handleWebStorageEvent = function(event) {
        var _this = this;
        var storageEvent = event;
        if (storageEvent.storageArea === this.storage) {
          logDebug(LOG_TAG, "EVENT", storageEvent.key, storageEvent.newValue);
          if (storageEvent.key === this.localClientStorageKey) {
            logError("Received WebStorage notification for local change. Another client might have garbage-collected our state");
            return;
          }
          this.queue.enqueueRetryable(function() {
            return tslib.__awaiter(_this, void 0, void 0, function() {
              var clientState, clientId, mutationMetadata, queryTargetMetadata, onlineState, sequenceNumber;
              return tslib.__generator(this, function(_f) {
                if (!this.started) {
                  this.earlyEvents.push(storageEvent);
                  return [2];
                }
                if (storageEvent.key === null) {
                  return [2];
                }
                if (this.clientStateKeyRe.test(storageEvent.key)) {
                  if (storageEvent.newValue != null) {
                    clientState = this.fromWebStorageClientState(storageEvent.key, storageEvent.newValue);
                    if (clientState) {
                      return [2, this.handleClientStateEvent(clientState.clientId, clientState)];
                    }
                  } else {
                    clientId = this.fromWebStorageClientStateKey(storageEvent.key);
                    return [2, this.handleClientStateEvent(clientId, null)];
                  }
                } else if (this.mutationBatchKeyRe.test(storageEvent.key)) {
                  if (storageEvent.newValue !== null) {
                    mutationMetadata = this.fromWebStorageMutationMetadata(storageEvent.key, storageEvent.newValue);
                    if (mutationMetadata) {
                      return [2, this.handleMutationBatchEvent(mutationMetadata)];
                    }
                  }
                } else if (this.queryTargetKeyRe.test(storageEvent.key)) {
                  if (storageEvent.newValue !== null) {
                    queryTargetMetadata = this.fromWebStorageQueryTargetMetadata(storageEvent.key, storageEvent.newValue);
                    if (queryTargetMetadata) {
                      return [2, this.handleQueryTargetEvent(queryTargetMetadata)];
                    }
                  }
                } else if (storageEvent.key === this.onlineStateKey) {
                  if (storageEvent.newValue !== null) {
                    onlineState = this.fromWebStorageOnlineState(storageEvent.newValue);
                    if (onlineState) {
                      return [2, this.handleOnlineStateEvent(onlineState)];
                    }
                  }
                } else if (storageEvent.key === this.sequenceNumberKey) {
                  sequenceNumber = fromWebStorageSequenceNumber(storageEvent.newValue);
                  if (sequenceNumber !== ListenSequence.INVALID) {
                    this.sequenceNumberHandler(sequenceNumber);
                  }
                }
                return [2];
              });
            });
          });
        }
      };
      Object.defineProperty(WebStorageSharedClientState2.prototype, "localClientState", {
        get: function() {
          return this.activeClients.get(this.localClientId);
        },
        enumerable: false,
        configurable: true
      });
      WebStorageSharedClientState2.prototype.persistClientState = function() {
        this.setItem(this.localClientStorageKey, this.localClientState.toWebStorageJSON());
      };
      WebStorageSharedClientState2.prototype.persistMutationState = function(batchId, state, error2) {
        var mutationState = new MutationMetadata(this.currentUser, batchId, state, error2);
        var mutationKey = createWebStorageMutationBatchKey(this.persistenceKey, this.currentUser, batchId);
        this.setItem(mutationKey, mutationState.toWebStorageJSON());
      };
      WebStorageSharedClientState2.prototype.removeMutationState = function(batchId) {
        var mutationKey = createWebStorageMutationBatchKey(this.persistenceKey, this.currentUser, batchId);
        this.removeItem(mutationKey);
      };
      WebStorageSharedClientState2.prototype.persistOnlineState = function(onlineState) {
        var entry = {
          clientId: this.localClientId,
          onlineState
        };
        this.storage.setItem(this.onlineStateKey, JSON.stringify(entry));
      };
      WebStorageSharedClientState2.prototype.persistQueryTargetState = function(targetId, state, error2) {
        var targetKey = createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId);
        var targetMetadata = new QueryTargetMetadata(targetId, state, error2);
        this.setItem(targetKey, targetMetadata.toWebStorageJSON());
      };
      WebStorageSharedClientState2.prototype.fromWebStorageClientStateKey = function(key) {
        var match = this.clientStateKeyRe.exec(key);
        return match ? match[1] : null;
      };
      WebStorageSharedClientState2.prototype.fromWebStorageClientState = function(key, value) {
        var clientId = this.fromWebStorageClientStateKey(key);
        return RemoteClientState.fromWebStorageEntry(clientId, value);
      };
      WebStorageSharedClientState2.prototype.fromWebStorageMutationMetadata = function(key, value) {
        var match = this.mutationBatchKeyRe.exec(key);
        var batchId = Number(match[1]);
        var userId = match[2] !== void 0 ? match[2] : null;
        return MutationMetadata.fromWebStorageEntry(new User(userId), batchId, value);
      };
      WebStorageSharedClientState2.prototype.fromWebStorageQueryTargetMetadata = function(key, value) {
        var match = this.queryTargetKeyRe.exec(key);
        var targetId = Number(match[1]);
        return QueryTargetMetadata.fromWebStorageEntry(targetId, value);
      };
      WebStorageSharedClientState2.prototype.fromWebStorageOnlineState = function(value) {
        return SharedOnlineState.fromWebStorageEntry(value);
      };
      WebStorageSharedClientState2.prototype.handleMutationBatchEvent = function(mutationBatch) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          return tslib.__generator(this, function(_f) {
            if (mutationBatch.user.uid !== this.currentUser.uid) {
              logDebug(LOG_TAG, "Ignoring mutation for non-active user " + mutationBatch.user.uid);
              return [2];
            }
            return [2, this.syncEngine.applyBatchState(mutationBatch.batchId, mutationBatch.state, mutationBatch.error)];
          });
        });
      };
      WebStorageSharedClientState2.prototype.handleQueryTargetEvent = function(targetMetadata) {
        return this.syncEngine.applyTargetState(targetMetadata.targetId, targetMetadata.state, targetMetadata.error);
      };
      WebStorageSharedClientState2.prototype.handleClientStateEvent = function(clientId, clientState) {
        var _this = this;
        var updatedClients = clientState ? this.activeClients.insert(clientId, clientState) : this.activeClients.remove(clientId);
        var existingTargets = this.extractActiveQueryTargets(this.activeClients);
        var newTargets = this.extractActiveQueryTargets(updatedClients);
        var addedTargets = [];
        var removedTargets = [];
        newTargets.forEach(function(targetId) {
          if (!existingTargets.has(targetId)) {
            addedTargets.push(targetId);
          }
        });
        existingTargets.forEach(function(targetId) {
          if (!newTargets.has(targetId)) {
            removedTargets.push(targetId);
          }
        });
        return this.syncEngine.applyActiveTargetsChange(addedTargets, removedTargets).then(function() {
          _this.activeClients = updatedClients;
        });
      };
      WebStorageSharedClientState2.prototype.handleOnlineStateEvent = function(onlineState) {
        if (this.activeClients.get(onlineState.clientId)) {
          this.onlineStateHandler(onlineState.onlineState);
        }
      };
      WebStorageSharedClientState2.prototype.extractActiveQueryTargets = function(clients) {
        var activeTargets = targetIdSet();
        clients.forEach(function(kev, value) {
          activeTargets = activeTargets.unionWith(value.activeTargetIds);
        });
        return activeTargets;
      };
      return WebStorageSharedClientState2;
    }();
    function fromWebStorageSequenceNumber(seqString) {
      var sequenceNumber = ListenSequence.INVALID;
      if (seqString != null) {
        try {
          var parsed = JSON.parse(seqString);
          hardAssert(typeof parsed === "number");
          sequenceNumber = parsed;
        } catch (e) {
          logError(LOG_TAG, "Failed to read sequence number from WebStorage", e);
        }
      }
      return sequenceNumber;
    }
    var MemorySharedClientState = function() {
      function MemorySharedClientState2() {
        this.localState = new LocalClientState();
        this.queryState = {};
        this.onlineStateHandler = null;
        this.sequenceNumberHandler = null;
      }
      MemorySharedClientState2.prototype.addPendingMutation = function(batchId) {
      };
      MemorySharedClientState2.prototype.updateMutationState = function(batchId, state, error2) {
      };
      MemorySharedClientState2.prototype.addLocalQueryTarget = function(targetId) {
        this.localState.addQueryTarget(targetId);
        return this.queryState[targetId] || "not-current";
      };
      MemorySharedClientState2.prototype.updateQueryState = function(targetId, state, error2) {
        this.queryState[targetId] = state;
      };
      MemorySharedClientState2.prototype.removeLocalQueryTarget = function(targetId) {
        this.localState.removeQueryTarget(targetId);
      };
      MemorySharedClientState2.prototype.isLocalQueryTarget = function(targetId) {
        return this.localState.activeTargetIds.has(targetId);
      };
      MemorySharedClientState2.prototype.clearQueryState = function(targetId) {
        delete this.queryState[targetId];
      };
      MemorySharedClientState2.prototype.getAllActiveQueryTargets = function() {
        return this.localState.activeTargetIds;
      };
      MemorySharedClientState2.prototype.isActiveQueryTarget = function(targetId) {
        return this.localState.activeTargetIds.has(targetId);
      };
      MemorySharedClientState2.prototype.start = function() {
        this.localState = new LocalClientState();
        return Promise.resolve();
      };
      MemorySharedClientState2.prototype.handleUserChange = function(user, removedBatchIds, addedBatchIds) {
      };
      MemorySharedClientState2.prototype.setOnlineState = function(onlineState) {
      };
      MemorySharedClientState2.prototype.shutdown = function() {
      };
      MemorySharedClientState2.prototype.writeSequenceNumber = function(sequenceNumber) {
      };
      return MemorySharedClientState2;
    }();
    var MIN_SECONDS = -62135596800;
    var Timestamp = function() {
      function Timestamp2(seconds, nanoseconds) {
        this.seconds = seconds;
        this.nanoseconds = nanoseconds;
        if (nanoseconds < 0) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + nanoseconds);
        }
        if (nanoseconds >= 1e9) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + nanoseconds);
        }
        if (seconds < MIN_SECONDS) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Timestamp seconds out of range: " + seconds);
        }
        if (seconds >= 253402300800) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Timestamp seconds out of range: " + seconds);
        }
      }
      Timestamp2.now = function() {
        return Timestamp2.fromMillis(Date.now());
      };
      Timestamp2.fromDate = function(date) {
        return Timestamp2.fromMillis(date.getTime());
      };
      Timestamp2.fromMillis = function(milliseconds) {
        var seconds = Math.floor(milliseconds / 1e3);
        var nanos = (milliseconds - seconds * 1e3) * 1e6;
        return new Timestamp2(seconds, nanos);
      };
      Timestamp2.prototype.toDate = function() {
        return new Date(this.toMillis());
      };
      Timestamp2.prototype.toMillis = function() {
        return this.seconds * 1e3 + this.nanoseconds / 1e6;
      };
      Timestamp2.prototype._compareTo = function(other) {
        if (this.seconds === other.seconds) {
          return primitiveComparator(this.nanoseconds, other.nanoseconds);
        }
        return primitiveComparator(this.seconds, other.seconds);
      };
      Timestamp2.prototype.isEqual = function(other) {
        return other.seconds === this.seconds && other.nanoseconds === this.nanoseconds;
      };
      Timestamp2.prototype.toString = function() {
        return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
      };
      Timestamp2.prototype.toJSON = function() {
        return { seconds: this.seconds, nanoseconds: this.nanoseconds };
      };
      Timestamp2.prototype.valueOf = function() {
        var adjustedSeconds = this.seconds - MIN_SECONDS;
        var formattedSeconds = String(adjustedSeconds).padStart(12, "0");
        var formattedNanoseconds = String(this.nanoseconds).padStart(9, "0");
        return formattedSeconds + "." + formattedNanoseconds;
      };
      return Timestamp2;
    }();
    var SERVER_TIMESTAMP_SENTINEL = "server_timestamp";
    var TYPE_KEY = "__type__";
    var PREVIOUS_VALUE_KEY = "__previous_value__";
    var LOCAL_WRITE_TIME_KEY = "__local_write_time__";
    function isServerTimestamp(value) {
      var _a, _b;
      var type = (_b = (((_a = value === null || value === void 0 ? void 0 : value.mapValue) === null || _a === void 0 ? void 0 : _a.fields) || {})[TYPE_KEY]) === null || _b === void 0 ? void 0 : _b.stringValue;
      return type === SERVER_TIMESTAMP_SENTINEL;
    }
    function serverTimestamp(localWriteTime, previousValue) {
      var _f;
      var mapValue = {
        fields: (_f = {}, _f[TYPE_KEY] = {
          stringValue: SERVER_TIMESTAMP_SENTINEL
        }, _f[LOCAL_WRITE_TIME_KEY] = {
          timestampValue: {
            seconds: localWriteTime.seconds,
            nanos: localWriteTime.nanoseconds
          }
        }, _f)
      };
      if (previousValue) {
        mapValue.fields[PREVIOUS_VALUE_KEY] = previousValue;
      }
      return { mapValue };
    }
    function getPreviousValue(value) {
      var previousValue = value.mapValue.fields[PREVIOUS_VALUE_KEY];
      if (isServerTimestamp(previousValue)) {
        return getPreviousValue(previousValue);
      }
      return previousValue;
    }
    function getLocalWriteTime(value) {
      var localWriteTime = normalizeTimestamp(value.mapValue.fields[LOCAL_WRITE_TIME_KEY].timestampValue);
      return new Timestamp(localWriteTime.seconds, localWriteTime.nanos);
    }
    var ISO_TIMESTAMP_REG_EXP = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);
    function typeOrder(value) {
      if ("nullValue" in value) {
        return 0;
      } else if ("booleanValue" in value) {
        return 1;
      } else if ("integerValue" in value || "doubleValue" in value) {
        return 2;
      } else if ("timestampValue" in value) {
        return 3;
      } else if ("stringValue" in value) {
        return 5;
      } else if ("bytesValue" in value) {
        return 6;
      } else if ("referenceValue" in value) {
        return 7;
      } else if ("geoPointValue" in value) {
        return 8;
      } else if ("arrayValue" in value) {
        return 9;
      } else if ("mapValue" in value) {
        if (isServerTimestamp(value)) {
          return 4;
        }
        return 10;
      } else {
        return fail();
      }
    }
    function valueEquals(left, right) {
      var leftType = typeOrder(left);
      var rightType = typeOrder(right);
      if (leftType !== rightType) {
        return false;
      }
      switch (leftType) {
        case 0:
          return true;
        case 1:
          return left.booleanValue === right.booleanValue;
        case 4:
          return getLocalWriteTime(left).isEqual(getLocalWriteTime(right));
        case 3:
          return timestampEquals(left, right);
        case 5:
          return left.stringValue === right.stringValue;
        case 6:
          return blobEquals(left, right);
        case 7:
          return left.referenceValue === right.referenceValue;
        case 8:
          return geoPointEquals(left, right);
        case 2:
          return numberEquals(left, right);
        case 9:
          return arrayEquals(left.arrayValue.values || [], right.arrayValue.values || [], valueEquals);
        case 10:
          return objectEquals(left, right);
        default:
          return fail();
      }
    }
    function timestampEquals(left, right) {
      if (typeof left.timestampValue === "string" && typeof right.timestampValue === "string" && left.timestampValue.length === right.timestampValue.length) {
        return left.timestampValue === right.timestampValue;
      }
      var leftTimestamp = normalizeTimestamp(left.timestampValue);
      var rightTimestamp = normalizeTimestamp(right.timestampValue);
      return leftTimestamp.seconds === rightTimestamp.seconds && leftTimestamp.nanos === rightTimestamp.nanos;
    }
    function geoPointEquals(left, right) {
      return normalizeNumber(left.geoPointValue.latitude) === normalizeNumber(right.geoPointValue.latitude) && normalizeNumber(left.geoPointValue.longitude) === normalizeNumber(right.geoPointValue.longitude);
    }
    function blobEquals(left, right) {
      return normalizeByteString(left.bytesValue).isEqual(normalizeByteString(right.bytesValue));
    }
    function numberEquals(left, right) {
      if ("integerValue" in left && "integerValue" in right) {
        return normalizeNumber(left.integerValue) === normalizeNumber(right.integerValue);
      } else if ("doubleValue" in left && "doubleValue" in right) {
        var n1 = normalizeNumber(left.doubleValue);
        var n2 = normalizeNumber(right.doubleValue);
        if (n1 === n2) {
          return isNegativeZero(n1) === isNegativeZero(n2);
        } else {
          return isNaN(n1) && isNaN(n2);
        }
      }
      return false;
    }
    function objectEquals(left, right) {
      var leftMap = left.mapValue.fields || {};
      var rightMap = right.mapValue.fields || {};
      if (objectSize(leftMap) !== objectSize(rightMap)) {
        return false;
      }
      for (var key in leftMap) {
        if (leftMap.hasOwnProperty(key)) {
          if (rightMap[key] === void 0 || !valueEquals(leftMap[key], rightMap[key])) {
            return false;
          }
        }
      }
      return true;
    }
    function arrayValueContains(haystack, needle) {
      return (haystack.values || []).find(function(v) {
        return valueEquals(v, needle);
      }) !== void 0;
    }
    function valueCompare(left, right) {
      var leftType = typeOrder(left);
      var rightType = typeOrder(right);
      if (leftType !== rightType) {
        return primitiveComparator(leftType, rightType);
      }
      switch (leftType) {
        case 0:
          return 0;
        case 1:
          return primitiveComparator(left.booleanValue, right.booleanValue);
        case 2:
          return compareNumbers(left, right);
        case 3:
          return compareTimestamps(left.timestampValue, right.timestampValue);
        case 4:
          return compareTimestamps(getLocalWriteTime(left), getLocalWriteTime(right));
        case 5:
          return primitiveComparator(left.stringValue, right.stringValue);
        case 6:
          return compareBlobs(left.bytesValue, right.bytesValue);
        case 7:
          return compareReferences(left.referenceValue, right.referenceValue);
        case 8:
          return compareGeoPoints(left.geoPointValue, right.geoPointValue);
        case 9:
          return compareArrays(left.arrayValue, right.arrayValue);
        case 10:
          return compareMaps(left.mapValue, right.mapValue);
        default:
          throw fail();
      }
    }
    function compareNumbers(left, right) {
      var leftNumber = normalizeNumber(left.integerValue || left.doubleValue);
      var rightNumber = normalizeNumber(right.integerValue || right.doubleValue);
      if (leftNumber < rightNumber) {
        return -1;
      } else if (leftNumber > rightNumber) {
        return 1;
      } else if (leftNumber === rightNumber) {
        return 0;
      } else {
        if (isNaN(leftNumber)) {
          return isNaN(rightNumber) ? 0 : -1;
        } else {
          return 1;
        }
      }
    }
    function compareTimestamps(left, right) {
      if (typeof left === "string" && typeof right === "string" && left.length === right.length) {
        return primitiveComparator(left, right);
      }
      var leftTimestamp = normalizeTimestamp(left);
      var rightTimestamp = normalizeTimestamp(right);
      var comparison = primitiveComparator(leftTimestamp.seconds, rightTimestamp.seconds);
      if (comparison !== 0) {
        return comparison;
      }
      return primitiveComparator(leftTimestamp.nanos, rightTimestamp.nanos);
    }
    function compareReferences(leftPath, rightPath) {
      var leftSegments = leftPath.split("/");
      var rightSegments = rightPath.split("/");
      for (var i = 0; i < leftSegments.length && i < rightSegments.length; i++) {
        var comparison = primitiveComparator(leftSegments[i], rightSegments[i]);
        if (comparison !== 0) {
          return comparison;
        }
      }
      return primitiveComparator(leftSegments.length, rightSegments.length);
    }
    function compareGeoPoints(left, right) {
      var comparison = primitiveComparator(normalizeNumber(left.latitude), normalizeNumber(right.latitude));
      if (comparison !== 0) {
        return comparison;
      }
      return primitiveComparator(normalizeNumber(left.longitude), normalizeNumber(right.longitude));
    }
    function compareBlobs(left, right) {
      var leftBytes = normalizeByteString(left);
      var rightBytes = normalizeByteString(right);
      return leftBytes.compareTo(rightBytes);
    }
    function compareArrays(left, right) {
      var leftArray = left.values || [];
      var rightArray = right.values || [];
      for (var i = 0; i < leftArray.length && i < rightArray.length; ++i) {
        var compare = valueCompare(leftArray[i], rightArray[i]);
        if (compare) {
          return compare;
        }
      }
      return primitiveComparator(leftArray.length, rightArray.length);
    }
    function compareMaps(left, right) {
      var leftMap = left.fields || {};
      var leftKeys = Object.keys(leftMap);
      var rightMap = right.fields || {};
      var rightKeys = Object.keys(rightMap);
      leftKeys.sort();
      rightKeys.sort();
      for (var i = 0; i < leftKeys.length && i < rightKeys.length; ++i) {
        var keyCompare = primitiveComparator(leftKeys[i], rightKeys[i]);
        if (keyCompare !== 0) {
          return keyCompare;
        }
        var compare = valueCompare(leftMap[leftKeys[i]], rightMap[rightKeys[i]]);
        if (compare !== 0) {
          return compare;
        }
      }
      return primitiveComparator(leftKeys.length, rightKeys.length);
    }
    function canonicalId(value) {
      return canonifyValue(value);
    }
    function canonifyValue(value) {
      if ("nullValue" in value) {
        return "null";
      } else if ("booleanValue" in value) {
        return "" + value.booleanValue;
      } else if ("integerValue" in value) {
        return "" + value.integerValue;
      } else if ("doubleValue" in value) {
        return "" + value.doubleValue;
      } else if ("timestampValue" in value) {
        return canonifyTimestamp(value.timestampValue);
      } else if ("stringValue" in value) {
        return value.stringValue;
      } else if ("bytesValue" in value) {
        return canonifyByteString(value.bytesValue);
      } else if ("referenceValue" in value) {
        return canonifyReference(value.referenceValue);
      } else if ("geoPointValue" in value) {
        return canonifyGeoPoint(value.geoPointValue);
      } else if ("arrayValue" in value) {
        return canonifyArray(value.arrayValue);
      } else if ("mapValue" in value) {
        return canonifyMap(value.mapValue);
      } else {
        return fail();
      }
    }
    function canonifyByteString(byteString) {
      return normalizeByteString(byteString).toBase64();
    }
    function canonifyTimestamp(timestamp) {
      var normalizedTimestamp = normalizeTimestamp(timestamp);
      return "time(" + normalizedTimestamp.seconds + "," + normalizedTimestamp.nanos + ")";
    }
    function canonifyGeoPoint(geoPoint) {
      return "geo(" + geoPoint.latitude + "," + geoPoint.longitude + ")";
    }
    function canonifyReference(referenceValue) {
      return DocumentKey.fromName(referenceValue).toString();
    }
    function canonifyMap(mapValue) {
      var sortedKeys = Object.keys(mapValue.fields || {}).sort();
      var result = "{";
      var first = true;
      for (var _i = 0, sortedKeys_1 = sortedKeys; _i < sortedKeys_1.length; _i++) {
        var key = sortedKeys_1[_i];
        if (!first) {
          result += ",";
        } else {
          first = false;
        }
        result += key + ":" + canonifyValue(mapValue.fields[key]);
      }
      return result + "}";
    }
    function canonifyArray(arrayValue) {
      var result = "[";
      var first = true;
      for (var _i = 0, _f = arrayValue.values || []; _i < _f.length; _i++) {
        var value = _f[_i];
        if (!first) {
          result += ",";
        } else {
          first = false;
        }
        result += canonifyValue(value);
      }
      return result + "]";
    }
    function normalizeTimestamp(date) {
      hardAssert(!!date);
      if (typeof date === "string") {
        var nanos = 0;
        var fraction = ISO_TIMESTAMP_REG_EXP.exec(date);
        hardAssert(!!fraction);
        if (fraction[1]) {
          var nanoStr = fraction[1];
          nanoStr = (nanoStr + "000000000").substr(0, 9);
          nanos = Number(nanoStr);
        }
        var parsedDate = new Date(date);
        var seconds = Math.floor(parsedDate.getTime() / 1e3);
        return { seconds, nanos };
      } else {
        var seconds = normalizeNumber(date.seconds);
        var nanos = normalizeNumber(date.nanos);
        return { seconds, nanos };
      }
    }
    function normalizeNumber(value) {
      if (typeof value === "number") {
        return value;
      } else if (typeof value === "string") {
        return Number(value);
      } else {
        return 0;
      }
    }
    function normalizeByteString(blob) {
      if (typeof blob === "string") {
        return ByteString.fromBase64String(blob);
      } else {
        return ByteString.fromUint8Array(blob);
      }
    }
    function refValue(databaseId, key) {
      return {
        referenceValue: "projects/" + databaseId.projectId + "/databases/" + databaseId.database + "/documents/" + key.path.canonicalString()
      };
    }
    function isInteger(value) {
      return !!value && "integerValue" in value;
    }
    function isDouble(value) {
      return !!value && "doubleValue" in value;
    }
    function isNumber(value) {
      return isInteger(value) || isDouble(value);
    }
    function isArray(value) {
      return !!value && "arrayValue" in value;
    }
    function isNullValue(value) {
      return !!value && "nullValue" in value;
    }
    function isNanValue(value) {
      return !!value && "doubleValue" in value && isNaN(Number(value.doubleValue));
    }
    function isMapValue(value) {
      return !!value && "mapValue" in value;
    }
    var MaybeDocument = function() {
      function MaybeDocument2(key, version2) {
        this.key = key;
        this.version = version2;
      }
      return MaybeDocument2;
    }();
    var Document = function(_super) {
      tslib.__extends(Document2, _super);
      function Document2(key, version2, objectValue, options2) {
        var _this = _super.call(this, key, version2) || this;
        _this.objectValue = objectValue;
        _this.hasLocalMutations = !!options2.hasLocalMutations;
        _this.hasCommittedMutations = !!options2.hasCommittedMutations;
        return _this;
      }
      Document2.prototype.field = function(path2) {
        return this.objectValue.field(path2);
      };
      Document2.prototype.data = function() {
        return this.objectValue;
      };
      Document2.prototype.toProto = function() {
        return this.objectValue.proto;
      };
      Document2.prototype.isEqual = function(other) {
        return other instanceof Document2 && this.key.isEqual(other.key) && this.version.isEqual(other.version) && this.hasLocalMutations === other.hasLocalMutations && this.hasCommittedMutations === other.hasCommittedMutations && this.objectValue.isEqual(other.objectValue);
      };
      Document2.prototype.toString = function() {
        return "Document(" + this.key + ", " + this.version + ", " + this.objectValue.toString() + ", " + ("{hasLocalMutations: " + this.hasLocalMutations + "}), ") + ("{hasCommittedMutations: " + this.hasCommittedMutations + "})");
      };
      Object.defineProperty(Document2.prototype, "hasPendingWrites", {
        get: function() {
          return this.hasLocalMutations || this.hasCommittedMutations;
        },
        enumerable: false,
        configurable: true
      });
      return Document2;
    }(MaybeDocument);
    function compareDocumentsByField(field, d1, d2) {
      var v1 = d1.field(field);
      var v2 = d2.field(field);
      if (v1 !== null && v2 !== null) {
        return valueCompare(v1, v2);
      } else {
        return fail();
      }
    }
    var NoDocument = function(_super) {
      tslib.__extends(NoDocument2, _super);
      function NoDocument2(key, version2, options2) {
        var _this = _super.call(this, key, version2) || this;
        _this.hasCommittedMutations = !!(options2 && options2.hasCommittedMutations);
        return _this;
      }
      NoDocument2.prototype.toString = function() {
        return "NoDocument(" + this.key + ", " + this.version + ")";
      };
      Object.defineProperty(NoDocument2.prototype, "hasPendingWrites", {
        get: function() {
          return this.hasCommittedMutations;
        },
        enumerable: false,
        configurable: true
      });
      NoDocument2.prototype.isEqual = function(other) {
        return other instanceof NoDocument2 && other.hasCommittedMutations === this.hasCommittedMutations && other.version.isEqual(this.version) && other.key.isEqual(this.key);
      };
      return NoDocument2;
    }(MaybeDocument);
    var UnknownDocument = function(_super) {
      tslib.__extends(UnknownDocument2, _super);
      function UnknownDocument2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      UnknownDocument2.prototype.toString = function() {
        return "UnknownDocument(" + this.key + ", " + this.version + ")";
      };
      Object.defineProperty(UnknownDocument2.prototype, "hasPendingWrites", {
        get: function() {
          return true;
        },
        enumerable: false,
        configurable: true
      });
      UnknownDocument2.prototype.isEqual = function(other) {
        return other instanceof UnknownDocument2 && other.version.isEqual(this.version) && other.key.isEqual(this.key);
      };
      return UnknownDocument2;
    }(MaybeDocument);
    var TargetImpl = function() {
      function TargetImpl2(path2, collectionGroup, orderBy, filters, limit, startAt, endAt) {
        if (collectionGroup === void 0) {
          collectionGroup = null;
        }
        if (orderBy === void 0) {
          orderBy = [];
        }
        if (filters === void 0) {
          filters = [];
        }
        if (limit === void 0) {
          limit = null;
        }
        if (startAt === void 0) {
          startAt = null;
        }
        if (endAt === void 0) {
          endAt = null;
        }
        this.path = path2;
        this.collectionGroup = collectionGroup;
        this.orderBy = orderBy;
        this.filters = filters;
        this.limit = limit;
        this.startAt = startAt;
        this.endAt = endAt;
        this.memoizedCanonicalId = null;
      }
      return TargetImpl2;
    }();
    function newTarget(path2, collectionGroup, orderBy, filters, limit, startAt, endAt) {
      if (collectionGroup === void 0) {
        collectionGroup = null;
      }
      if (orderBy === void 0) {
        orderBy = [];
      }
      if (filters === void 0) {
        filters = [];
      }
      if (limit === void 0) {
        limit = null;
      }
      if (startAt === void 0) {
        startAt = null;
      }
      if (endAt === void 0) {
        endAt = null;
      }
      return new TargetImpl(path2, collectionGroup, orderBy, filters, limit, startAt, endAt);
    }
    function canonifyTarget(target) {
      var targetImpl = debugCast(target);
      if (targetImpl.memoizedCanonicalId === null) {
        var canonicalId_1 = targetImpl.path.canonicalString();
        if (targetImpl.collectionGroup !== null) {
          canonicalId_1 += "|cg:" + targetImpl.collectionGroup;
        }
        canonicalId_1 += "|f:";
        canonicalId_1 += targetImpl.filters.map(function(f) {
          return canonifyFilter(f);
        }).join(",");
        canonicalId_1 += "|ob:";
        canonicalId_1 += targetImpl.orderBy.map(function(o) {
          return canonifyOrderBy(o);
        }).join(",");
        if (!isNullOrUndefined(targetImpl.limit)) {
          canonicalId_1 += "|l:";
          canonicalId_1 += targetImpl.limit;
        }
        if (targetImpl.startAt) {
          canonicalId_1 += "|lb:";
          canonicalId_1 += canonifyBound(targetImpl.startAt);
        }
        if (targetImpl.endAt) {
          canonicalId_1 += "|ub:";
          canonicalId_1 += canonifyBound(targetImpl.endAt);
        }
        targetImpl.memoizedCanonicalId = canonicalId_1;
      }
      return targetImpl.memoizedCanonicalId;
    }
    function stringifyTarget(target) {
      var str = target.path.canonicalString();
      if (target.collectionGroup !== null) {
        str += " collectionGroup=" + target.collectionGroup;
      }
      if (target.filters.length > 0) {
        str += ", filters: [" + target.filters.map(function(f) {
          return stringifyFilter(f);
        }).join(", ") + "]";
      }
      if (!isNullOrUndefined(target.limit)) {
        str += ", limit: " + target.limit;
      }
      if (target.orderBy.length > 0) {
        str += ", orderBy: [" + target.orderBy.map(function(o) {
          return stringifyOrderBy(o);
        }).join(", ") + "]";
      }
      if (target.startAt) {
        str += ", startAt: " + canonifyBound(target.startAt);
      }
      if (target.endAt) {
        str += ", endAt: " + canonifyBound(target.endAt);
      }
      return "Target(" + str + ")";
    }
    function targetEquals(left, right) {
      if (left.limit !== right.limit) {
        return false;
      }
      if (left.orderBy.length !== right.orderBy.length) {
        return false;
      }
      for (var i = 0; i < left.orderBy.length; i++) {
        if (!orderByEquals(left.orderBy[i], right.orderBy[i])) {
          return false;
        }
      }
      if (left.filters.length !== right.filters.length) {
        return false;
      }
      for (var i = 0; i < left.filters.length; i++) {
        if (!filterEquals(left.filters[i], right.filters[i])) {
          return false;
        }
      }
      if (left.collectionGroup !== right.collectionGroup) {
        return false;
      }
      if (!left.path.isEqual(right.path)) {
        return false;
      }
      if (!boundEquals(left.startAt, right.startAt)) {
        return false;
      }
      return boundEquals(left.endAt, right.endAt);
    }
    function isDocumentTarget(target) {
      return DocumentKey.isDocumentKey(target.path) && target.collectionGroup === null && target.filters.length === 0;
    }
    var QueryImpl = function() {
      function QueryImpl2(path2, collectionGroup, explicitOrderBy, filters, limit, limitType, startAt, endAt) {
        if (collectionGroup === void 0) {
          collectionGroup = null;
        }
        if (explicitOrderBy === void 0) {
          explicitOrderBy = [];
        }
        if (filters === void 0) {
          filters = [];
        }
        if (limit === void 0) {
          limit = null;
        }
        if (limitType === void 0) {
          limitType = "F";
        }
        if (startAt === void 0) {
          startAt = null;
        }
        if (endAt === void 0) {
          endAt = null;
        }
        this.path = path2;
        this.collectionGroup = collectionGroup;
        this.explicitOrderBy = explicitOrderBy;
        this.filters = filters;
        this.limit = limit;
        this.limitType = limitType;
        this.startAt = startAt;
        this.endAt = endAt;
        this.memoizedOrderBy = null;
        this.memoizedTarget = null;
        if (this.startAt)
          ;
        if (this.endAt)
          ;
      }
      return QueryImpl2;
    }();
    function newQuery(path2, collectionGroup, explicitOrderBy, filters, limit, limitType, startAt, endAt) {
      return new QueryImpl(path2, collectionGroup, explicitOrderBy, filters, limit, limitType, startAt, endAt);
    }
    function newQueryForPath(path2) {
      return new QueryImpl(path2);
    }
    function asCollectionQueryAtPath(query, path2) {
      return new QueryImpl(path2, null, query.explicitOrderBy.slice(), query.filters.slice(), query.limit, query.limitType, query.startAt, query.endAt);
    }
    function matchesAllDocuments(query) {
      return query.filters.length === 0 && query.limit === null && query.startAt == null && query.endAt == null && (query.explicitOrderBy.length === 0 || query.explicitOrderBy.length === 1 && query.explicitOrderBy[0].field.isKeyField());
    }
    function hasLimitToFirst(query) {
      return !isNullOrUndefined(query.limit) && query.limitType === "F";
    }
    function hasLimitToLast(query) {
      return !isNullOrUndefined(query.limit) && query.limitType === "L";
    }
    function getFirstOrderByField(query) {
      return query.explicitOrderBy.length > 0 ? query.explicitOrderBy[0].field : null;
    }
    function getInequalityFilterField(query) {
      for (var _i = 0, _f = query.filters; _i < _f.length; _i++) {
        var filter = _f[_i];
        if (filter.isInequality()) {
          return filter.field;
        }
      }
      return null;
    }
    function findFilterOperator(query, operators) {
      for (var _i = 0, _f = query.filters; _i < _f.length; _i++) {
        var filter = _f[_i];
        if (operators.indexOf(filter.op) >= 0) {
          return filter.op;
        }
      }
      return null;
    }
    function newQueryForCollectionGroup(collectionId) {
      return new QueryImpl(ResourcePath.emptyPath(), collectionId);
    }
    function isDocumentQuery(query) {
      return DocumentKey.isDocumentKey(query.path) && query.collectionGroup === null && query.filters.length === 0;
    }
    function isCollectionGroupQuery(query) {
      return query.collectionGroup !== null;
    }
    function queryOrderBy(query) {
      var queryImpl = debugCast(query);
      if (queryImpl.memoizedOrderBy === null) {
        queryImpl.memoizedOrderBy = [];
        var inequalityField = getInequalityFilterField(queryImpl);
        var firstOrderByField = getFirstOrderByField(queryImpl);
        if (inequalityField !== null && firstOrderByField === null) {
          if (!inequalityField.isKeyField()) {
            queryImpl.memoizedOrderBy.push(new OrderBy(inequalityField));
          }
          queryImpl.memoizedOrderBy.push(new OrderBy(FieldPath.keyField(), "asc"));
        } else {
          var foundKeyOrdering = false;
          for (var _i = 0, _f = queryImpl.explicitOrderBy; _i < _f.length; _i++) {
            var orderBy = _f[_i];
            queryImpl.memoizedOrderBy.push(orderBy);
            if (orderBy.field.isKeyField()) {
              foundKeyOrdering = true;
            }
          }
          if (!foundKeyOrdering) {
            var lastDirection = queryImpl.explicitOrderBy.length > 0 ? queryImpl.explicitOrderBy[queryImpl.explicitOrderBy.length - 1].dir : "asc";
            queryImpl.memoizedOrderBy.push(new OrderBy(FieldPath.keyField(), lastDirection));
          }
        }
      }
      return queryImpl.memoizedOrderBy;
    }
    function queryToTarget(query) {
      var queryImpl = debugCast(query);
      if (!queryImpl.memoizedTarget) {
        if (queryImpl.limitType === "F") {
          queryImpl.memoizedTarget = newTarget(queryImpl.path, queryImpl.collectionGroup, queryOrderBy(queryImpl), queryImpl.filters, queryImpl.limit, queryImpl.startAt, queryImpl.endAt);
        } else {
          var orderBys = [];
          for (var _i = 0, _f = queryOrderBy(queryImpl); _i < _f.length; _i++) {
            var orderBy = _f[_i];
            var dir = orderBy.dir === "desc" ? "asc" : "desc";
            orderBys.push(new OrderBy(orderBy.field, dir));
          }
          var startAt = queryImpl.endAt ? new Bound(queryImpl.endAt.position, !queryImpl.endAt.before) : null;
          var endAt = queryImpl.startAt ? new Bound(queryImpl.startAt.position, !queryImpl.startAt.before) : null;
          queryImpl.memoizedTarget = newTarget(queryImpl.path, queryImpl.collectionGroup, orderBys, queryImpl.filters, queryImpl.limit, startAt, endAt);
        }
      }
      return queryImpl.memoizedTarget;
    }
    function queryWithAddedFilter(query, filter) {
      var newFilters = query.filters.concat([filter]);
      return new QueryImpl(query.path, query.collectionGroup, query.explicitOrderBy.slice(), newFilters, query.limit, query.limitType, query.startAt, query.endAt);
    }
    function queryWithAddedOrderBy(query, orderBy) {
      var newOrderBy = query.explicitOrderBy.concat([orderBy]);
      return new QueryImpl(query.path, query.collectionGroup, newOrderBy, query.filters.slice(), query.limit, query.limitType, query.startAt, query.endAt);
    }
    function queryWithLimit(query, limit, limitType) {
      return new QueryImpl(query.path, query.collectionGroup, query.explicitOrderBy.slice(), query.filters.slice(), limit, limitType, query.startAt, query.endAt);
    }
    function queryWithStartAt(query, bound) {
      return new QueryImpl(query.path, query.collectionGroup, query.explicitOrderBy.slice(), query.filters.slice(), query.limit, query.limitType, bound, query.endAt);
    }
    function queryWithEndAt(query, bound) {
      return new QueryImpl(query.path, query.collectionGroup, query.explicitOrderBy.slice(), query.filters.slice(), query.limit, query.limitType, query.startAt, bound);
    }
    function queryEquals(left, right) {
      return targetEquals(queryToTarget(left), queryToTarget(right)) && left.limitType === right.limitType;
    }
    function canonifyQuery(query) {
      return canonifyTarget(queryToTarget(query)) + "|lt:" + query.limitType;
    }
    function stringifyQuery(query) {
      return "Query(target=" + stringifyTarget(queryToTarget(query)) + "; limitType=" + query.limitType + ")";
    }
    function queryMatches(query, doc) {
      return queryMatchesPathAndCollectionGroup(query, doc) && queryMatchesOrderBy(query, doc) && queryMatchesFilters(query, doc) && queryMatchesBounds(query, doc);
    }
    function queryMatchesPathAndCollectionGroup(query, doc) {
      var docPath = doc.key.path;
      if (query.collectionGroup !== null) {
        return doc.key.hasCollectionId(query.collectionGroup) && query.path.isPrefixOf(docPath);
      } else if (DocumentKey.isDocumentKey(query.path)) {
        return query.path.isEqual(docPath);
      } else {
        return query.path.isImmediateParentOf(docPath);
      }
    }
    function queryMatchesOrderBy(query, doc) {
      for (var _i = 0, _f = query.explicitOrderBy; _i < _f.length; _i++) {
        var orderBy = _f[_i];
        if (!orderBy.field.isKeyField() && doc.field(orderBy.field) === null) {
          return false;
        }
      }
      return true;
    }
    function queryMatchesFilters(query, doc) {
      for (var _i = 0, _f = query.filters; _i < _f.length; _i++) {
        var filter = _f[_i];
        if (!filter.matches(doc)) {
          return false;
        }
      }
      return true;
    }
    function queryMatchesBounds(query, doc) {
      if (query.startAt && !sortsBeforeDocument(query.startAt, queryOrderBy(query), doc)) {
        return false;
      }
      if (query.endAt && sortsBeforeDocument(query.endAt, queryOrderBy(query), doc)) {
        return false;
      }
      return true;
    }
    function newQueryComparator(query) {
      return function(d1, d2) {
        var comparedOnKeyField = false;
        for (var _i = 0, _f = queryOrderBy(query); _i < _f.length; _i++) {
          var orderBy = _f[_i];
          var comp = compareDocs(orderBy, d1, d2);
          if (comp !== 0) {
            return comp;
          }
          comparedOnKeyField = comparedOnKeyField || orderBy.field.isKeyField();
        }
        return 0;
      };
    }
    var Filter = function() {
      function Filter2() {
      }
      return Filter2;
    }();
    var FieldFilter = function(_super) {
      tslib.__extends(FieldFilter2, _super);
      function FieldFilter2(field, op, value) {
        var _this = _super.call(this) || this;
        _this.field = field;
        _this.op = op;
        _this.value = value;
        return _this;
      }
      FieldFilter2.create = function(field, op, value) {
        if (field.isKeyField()) {
          if (op === "in" || op === "not-in") {
            return this.createKeyFieldInFilter(field, op, value);
          } else {
            return new KeyFieldFilter(field, op, value);
          }
        } else if (isNullValue(value)) {
          if (op !== "==" && op !== "!=") {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. Null only supports '==' and '!=' comparisons.");
          }
          return new FieldFilter2(field, op, value);
        } else if (isNanValue(value)) {
          if (op !== "==" && op !== "!=") {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. NaN only supports '==' and '!=' comparisons.");
          }
          return new FieldFilter2(field, op, value);
        } else if (op === "array-contains") {
          return new ArrayContainsFilter(field, value);
        } else if (op === "in") {
          return new InFilter(field, value);
        } else if (op === "not-in") {
          return new NotInFilter(field, value);
        } else if (op === "array-contains-any") {
          return new ArrayContainsAnyFilter(field, value);
        } else {
          return new FieldFilter2(field, op, value);
        }
      };
      FieldFilter2.createKeyFieldInFilter = function(field, op, value) {
        return op === "in" ? new KeyFieldInFilter(field, value) : new KeyFieldNotInFilter(field, value);
      };
      FieldFilter2.prototype.matches = function(doc) {
        var other = doc.field(this.field);
        if (this.op === "!=") {
          return other !== null && this.matchesComparison(valueCompare(other, this.value));
        }
        return other !== null && typeOrder(this.value) === typeOrder(other) && this.matchesComparison(valueCompare(other, this.value));
      };
      FieldFilter2.prototype.matchesComparison = function(comparison) {
        switch (this.op) {
          case "<":
            return comparison < 0;
          case "<=":
            return comparison <= 0;
          case "==":
            return comparison === 0;
          case "!=":
            return comparison !== 0;
          case ">":
            return comparison > 0;
          case ">=":
            return comparison >= 0;
          default:
            return fail();
        }
      };
      FieldFilter2.prototype.isInequality = function() {
        return [
          "<",
          "<=",
          ">",
          ">=",
          "!=",
          "not-in"
        ].indexOf(this.op) >= 0;
      };
      return FieldFilter2;
    }(Filter);
    function canonifyFilter(filter) {
      return filter.field.canonicalString() + filter.op.toString() + canonicalId(filter.value);
    }
    function filterEquals(f1, f2) {
      return f1.op === f2.op && f1.field.isEqual(f2.field) && valueEquals(f1.value, f2.value);
    }
    function stringifyFilter(filter) {
      return filter.field.canonicalString() + " " + filter.op + " " + canonicalId(filter.value);
    }
    var KeyFieldFilter = function(_super) {
      tslib.__extends(KeyFieldFilter2, _super);
      function KeyFieldFilter2(field, op, value) {
        var _this = _super.call(this, field, op, value) || this;
        _this.key = DocumentKey.fromName(value.referenceValue);
        return _this;
      }
      KeyFieldFilter2.prototype.matches = function(doc) {
        var comparison = DocumentKey.comparator(doc.key, this.key);
        return this.matchesComparison(comparison);
      };
      return KeyFieldFilter2;
    }(FieldFilter);
    var KeyFieldInFilter = function(_super) {
      tslib.__extends(KeyFieldInFilter2, _super);
      function KeyFieldInFilter2(field, value) {
        var _this = _super.call(this, field, "in", value) || this;
        _this.keys = extractDocumentKeysFromArrayValue("in", value);
        return _this;
      }
      KeyFieldInFilter2.prototype.matches = function(doc) {
        return this.keys.some(function(key) {
          return key.isEqual(doc.key);
        });
      };
      return KeyFieldInFilter2;
    }(FieldFilter);
    var KeyFieldNotInFilter = function(_super) {
      tslib.__extends(KeyFieldNotInFilter2, _super);
      function KeyFieldNotInFilter2(field, value) {
        var _this = _super.call(this, field, "not-in", value) || this;
        _this.keys = extractDocumentKeysFromArrayValue("not-in", value);
        return _this;
      }
      KeyFieldNotInFilter2.prototype.matches = function(doc) {
        return !this.keys.some(function(key) {
          return key.isEqual(doc.key);
        });
      };
      return KeyFieldNotInFilter2;
    }(FieldFilter);
    function extractDocumentKeysFromArrayValue(op, value) {
      var _a;
      return (((_a = value.arrayValue) === null || _a === void 0 ? void 0 : _a.values) || []).map(function(v) {
        return DocumentKey.fromName(v.referenceValue);
      });
    }
    var ArrayContainsFilter = function(_super) {
      tslib.__extends(ArrayContainsFilter2, _super);
      function ArrayContainsFilter2(field, value) {
        return _super.call(this, field, "array-contains", value) || this;
      }
      ArrayContainsFilter2.prototype.matches = function(doc) {
        var other = doc.field(this.field);
        return isArray(other) && arrayValueContains(other.arrayValue, this.value);
      };
      return ArrayContainsFilter2;
    }(FieldFilter);
    var InFilter = function(_super) {
      tslib.__extends(InFilter2, _super);
      function InFilter2(field, value) {
        return _super.call(this, field, "in", value) || this;
      }
      InFilter2.prototype.matches = function(doc) {
        var other = doc.field(this.field);
        return other !== null && arrayValueContains(this.value.arrayValue, other);
      };
      return InFilter2;
    }(FieldFilter);
    var NotInFilter = function(_super) {
      tslib.__extends(NotInFilter2, _super);
      function NotInFilter2(field, value) {
        return _super.call(this, field, "not-in", value) || this;
      }
      NotInFilter2.prototype.matches = function(doc) {
        if (arrayValueContains(this.value.arrayValue, { nullValue: "NULL_VALUE" })) {
          return false;
        }
        var other = doc.field(this.field);
        return other !== null && !arrayValueContains(this.value.arrayValue, other);
      };
      return NotInFilter2;
    }(FieldFilter);
    var ArrayContainsAnyFilter = function(_super) {
      tslib.__extends(ArrayContainsAnyFilter2, _super);
      function ArrayContainsAnyFilter2(field, value) {
        return _super.call(this, field, "array-contains-any", value) || this;
      }
      ArrayContainsAnyFilter2.prototype.matches = function(doc) {
        var _this = this;
        var other = doc.field(this.field);
        if (!isArray(other) || !other.arrayValue.values) {
          return false;
        }
        return other.arrayValue.values.some(function(val) {
          return arrayValueContains(_this.value.arrayValue, val);
        });
      };
      return ArrayContainsAnyFilter2;
    }(FieldFilter);
    var Bound = function() {
      function Bound2(position, before) {
        this.position = position;
        this.before = before;
      }
      return Bound2;
    }();
    function canonifyBound(bound) {
      return (bound.before ? "b" : "a") + ":" + bound.position.map(function(p) {
        return canonicalId(p);
      }).join(",");
    }
    function sortsBeforeDocument(bound, orderBy, doc) {
      var comparison = 0;
      for (var i = 0; i < bound.position.length; i++) {
        var orderByComponent = orderBy[i];
        var component2 = bound.position[i];
        if (orderByComponent.field.isKeyField()) {
          comparison = DocumentKey.comparator(DocumentKey.fromName(component2.referenceValue), doc.key);
        } else {
          var docValue = doc.field(orderByComponent.field);
          comparison = valueCompare(component2, docValue);
        }
        if (orderByComponent.dir === "desc") {
          comparison = comparison * -1;
        }
        if (comparison !== 0) {
          break;
        }
      }
      return bound.before ? comparison <= 0 : comparison < 0;
    }
    function boundEquals(left, right) {
      if (left === null) {
        return right === null;
      } else if (right === null) {
        return false;
      }
      if (left.before !== right.before || left.position.length !== right.position.length) {
        return false;
      }
      for (var i = 0; i < left.position.length; i++) {
        var leftPosition = left.position[i];
        var rightPosition = right.position[i];
        if (!valueEquals(leftPosition, rightPosition)) {
          return false;
        }
      }
      return true;
    }
    var OrderBy = function() {
      function OrderBy2(field, dir) {
        if (dir === void 0) {
          dir = "asc";
        }
        this.field = field;
        this.dir = dir;
      }
      return OrderBy2;
    }();
    function compareDocs(orderBy, d1, d2) {
      var comparison = orderBy.field.isKeyField() ? DocumentKey.comparator(d1.key, d2.key) : compareDocumentsByField(orderBy.field, d1, d2);
      switch (orderBy.dir) {
        case "asc":
          return comparison;
        case "desc":
          return -1 * comparison;
        default:
          return fail();
      }
    }
    function canonifyOrderBy(orderBy) {
      return orderBy.field.canonicalString() + orderBy.dir;
    }
    function stringifyOrderBy(orderBy) {
      return orderBy.field.canonicalString() + " (" + orderBy.dir + ")";
    }
    function orderByEquals(left, right) {
      return left.dir === right.dir && left.field.isEqual(right.field);
    }
    var SnapshotVersion = function() {
      function SnapshotVersion2(timestamp) {
        this.timestamp = timestamp;
      }
      SnapshotVersion2.fromTimestamp = function(value) {
        return new SnapshotVersion2(value);
      };
      SnapshotVersion2.min = function() {
        return new SnapshotVersion2(new Timestamp(0, 0));
      };
      SnapshotVersion2.prototype.compareTo = function(other) {
        return this.timestamp._compareTo(other.timestamp);
      };
      SnapshotVersion2.prototype.isEqual = function(other) {
        return this.timestamp.isEqual(other.timestamp);
      };
      SnapshotVersion2.prototype.toMicroseconds = function() {
        return this.timestamp.seconds * 1e6 + this.timestamp.nanoseconds / 1e3;
      };
      SnapshotVersion2.prototype.toString = function() {
        return "SnapshotVersion(" + this.timestamp.toString() + ")";
      };
      SnapshotVersion2.prototype.toTimestamp = function() {
        return this.timestamp;
      };
      return SnapshotVersion2;
    }();
    var ObjectValue = function() {
      function ObjectValue2(proto) {
        this.proto = proto;
      }
      ObjectValue2.empty = function() {
        return new ObjectValue2({ mapValue: {} });
      };
      ObjectValue2.prototype.field = function(path2) {
        if (path2.isEmpty()) {
          return this.proto;
        } else {
          var value = this.proto;
          for (var i = 0; i < path2.length - 1; ++i) {
            if (!value.mapValue.fields) {
              return null;
            }
            value = value.mapValue.fields[path2.get(i)];
            if (!isMapValue(value)) {
              return null;
            }
          }
          value = (value.mapValue.fields || {})[path2.lastSegment()];
          return value || null;
        }
      };
      ObjectValue2.prototype.isEqual = function(other) {
        return valueEquals(this.proto, other.proto);
      };
      return ObjectValue2;
    }();
    var ObjectValueBuilder = function() {
      function ObjectValueBuilder2(baseObject) {
        if (baseObject === void 0) {
          baseObject = ObjectValue.empty();
        }
        this.baseObject = baseObject;
        this.overlayMap = new Map();
      }
      ObjectValueBuilder2.prototype.set = function(path2, value) {
        this.setOverlay(path2, value);
        return this;
      };
      ObjectValueBuilder2.prototype.delete = function(path2) {
        this.setOverlay(path2, null);
        return this;
      };
      ObjectValueBuilder2.prototype.setOverlay = function(path2, value) {
        var currentLevel = this.overlayMap;
        for (var i = 0; i < path2.length - 1; ++i) {
          var currentSegment = path2.get(i);
          var currentValue = currentLevel.get(currentSegment);
          if (currentValue instanceof Map) {
            currentLevel = currentValue;
          } else if (currentValue && typeOrder(currentValue) === 10) {
            currentValue = new Map(Object.entries(currentValue.mapValue.fields || {}));
            currentLevel.set(currentSegment, currentValue);
            currentLevel = currentValue;
          } else {
            currentValue = new Map();
            currentLevel.set(currentSegment, currentValue);
            currentLevel = currentValue;
          }
        }
        currentLevel.set(path2.lastSegment(), value);
      };
      ObjectValueBuilder2.prototype.build = function() {
        var mergedResult = this.applyOverlay(FieldPath.emptyPath(), this.overlayMap);
        if (mergedResult != null) {
          return new ObjectValue(mergedResult);
        } else {
          return this.baseObject;
        }
      };
      ObjectValueBuilder2.prototype.applyOverlay = function(currentPath, currentOverlays) {
        var _this = this;
        var modified = false;
        var existingValue = this.baseObject.field(currentPath);
        var resultAtPath = isMapValue(existingValue) ? Object.assign({}, existingValue.mapValue.fields) : {};
        currentOverlays.forEach(function(value, pathSegment) {
          if (value instanceof Map) {
            var nested = _this.applyOverlay(currentPath.child(pathSegment), value);
            if (nested != null) {
              resultAtPath[pathSegment] = nested;
              modified = true;
            }
          } else if (value !== null) {
            resultAtPath[pathSegment] = value;
            modified = true;
          } else if (resultAtPath.hasOwnProperty(pathSegment)) {
            delete resultAtPath[pathSegment];
            modified = true;
          }
        });
        return modified ? { mapValue: { fields: resultAtPath } } : null;
      };
      return ObjectValueBuilder2;
    }();
    function extractFieldMask(value) {
      var fields = [];
      forEach(value.fields || {}, function(key, value2) {
        var currentPath = new FieldPath([key]);
        if (isMapValue(value2)) {
          var nestedMask = extractFieldMask(value2.mapValue);
          var nestedFields = nestedMask.fields;
          if (nestedFields.length === 0) {
            fields.push(currentPath);
          } else {
            for (var _i = 0, nestedFields_1 = nestedFields; _i < nestedFields_1.length; _i++) {
              var nestedPath = nestedFields_1[_i];
              fields.push(currentPath.child(nestedPath));
            }
          }
        } else {
          fields.push(currentPath);
        }
      });
      return new FieldMask(fields);
    }
    var ExistenceFilter = function() {
      function ExistenceFilter2(count) {
        this.count = count;
      }
      return ExistenceFilter2;
    }();
    var RpcCode;
    (function(RpcCode2) {
      RpcCode2[RpcCode2["OK"] = 0] = "OK";
      RpcCode2[RpcCode2["CANCELLED"] = 1] = "CANCELLED";
      RpcCode2[RpcCode2["UNKNOWN"] = 2] = "UNKNOWN";
      RpcCode2[RpcCode2["INVALID_ARGUMENT"] = 3] = "INVALID_ARGUMENT";
      RpcCode2[RpcCode2["DEADLINE_EXCEEDED"] = 4] = "DEADLINE_EXCEEDED";
      RpcCode2[RpcCode2["NOT_FOUND"] = 5] = "NOT_FOUND";
      RpcCode2[RpcCode2["ALREADY_EXISTS"] = 6] = "ALREADY_EXISTS";
      RpcCode2[RpcCode2["PERMISSION_DENIED"] = 7] = "PERMISSION_DENIED";
      RpcCode2[RpcCode2["UNAUTHENTICATED"] = 16] = "UNAUTHENTICATED";
      RpcCode2[RpcCode2["RESOURCE_EXHAUSTED"] = 8] = "RESOURCE_EXHAUSTED";
      RpcCode2[RpcCode2["FAILED_PRECONDITION"] = 9] = "FAILED_PRECONDITION";
      RpcCode2[RpcCode2["ABORTED"] = 10] = "ABORTED";
      RpcCode2[RpcCode2["OUT_OF_RANGE"] = 11] = "OUT_OF_RANGE";
      RpcCode2[RpcCode2["UNIMPLEMENTED"] = 12] = "UNIMPLEMENTED";
      RpcCode2[RpcCode2["INTERNAL"] = 13] = "INTERNAL";
      RpcCode2[RpcCode2["UNAVAILABLE"] = 14] = "UNAVAILABLE";
      RpcCode2[RpcCode2["DATA_LOSS"] = 15] = "DATA_LOSS";
    })(RpcCode || (RpcCode = {}));
    function isPermanentError(code) {
      switch (code) {
        case Code.OK:
          return fail();
        case Code.CANCELLED:
        case Code.UNKNOWN:
        case Code.DEADLINE_EXCEEDED:
        case Code.RESOURCE_EXHAUSTED:
        case Code.INTERNAL:
        case Code.UNAVAILABLE:
        case Code.UNAUTHENTICATED:
          return false;
        case Code.INVALID_ARGUMENT:
        case Code.NOT_FOUND:
        case Code.ALREADY_EXISTS:
        case Code.PERMISSION_DENIED:
        case Code.FAILED_PRECONDITION:
        case Code.ABORTED:
        case Code.OUT_OF_RANGE:
        case Code.UNIMPLEMENTED:
        case Code.DATA_LOSS:
          return true;
        default:
          return fail();
      }
    }
    function isPermanentWriteError(code) {
      return isPermanentError(code) && code !== Code.ABORTED;
    }
    function mapCodeFromRpcCode(code) {
      if (code === void 0) {
        logError("GRPC error has no .code");
        return Code.UNKNOWN;
      }
      switch (code) {
        case RpcCode.OK:
          return Code.OK;
        case RpcCode.CANCELLED:
          return Code.CANCELLED;
        case RpcCode.UNKNOWN:
          return Code.UNKNOWN;
        case RpcCode.DEADLINE_EXCEEDED:
          return Code.DEADLINE_EXCEEDED;
        case RpcCode.RESOURCE_EXHAUSTED:
          return Code.RESOURCE_EXHAUSTED;
        case RpcCode.INTERNAL:
          return Code.INTERNAL;
        case RpcCode.UNAVAILABLE:
          return Code.UNAVAILABLE;
        case RpcCode.UNAUTHENTICATED:
          return Code.UNAUTHENTICATED;
        case RpcCode.INVALID_ARGUMENT:
          return Code.INVALID_ARGUMENT;
        case RpcCode.NOT_FOUND:
          return Code.NOT_FOUND;
        case RpcCode.ALREADY_EXISTS:
          return Code.ALREADY_EXISTS;
        case RpcCode.PERMISSION_DENIED:
          return Code.PERMISSION_DENIED;
        case RpcCode.FAILED_PRECONDITION:
          return Code.FAILED_PRECONDITION;
        case RpcCode.ABORTED:
          return Code.ABORTED;
        case RpcCode.OUT_OF_RANGE:
          return Code.OUT_OF_RANGE;
        case RpcCode.UNIMPLEMENTED:
          return Code.UNIMPLEMENTED;
        case RpcCode.DATA_LOSS:
          return Code.DATA_LOSS;
        default:
          return fail();
      }
    }
    var RemoteEvent = function() {
      function RemoteEvent2(snapshotVersion, targetChanges, targetMismatches, documentUpdates, resolvedLimboDocuments) {
        this.snapshotVersion = snapshotVersion;
        this.targetChanges = targetChanges;
        this.targetMismatches = targetMismatches;
        this.documentUpdates = documentUpdates;
        this.resolvedLimboDocuments = resolvedLimboDocuments;
      }
      RemoteEvent2.createSynthesizedRemoteEventForCurrentChange = function(targetId, current) {
        var targetChanges = new Map();
        targetChanges.set(targetId, TargetChange.createSynthesizedTargetChangeForCurrentChange(targetId, current));
        return new RemoteEvent2(SnapshotVersion.min(), targetChanges, targetIdSet(), maybeDocumentMap(), documentKeySet());
      };
      return RemoteEvent2;
    }();
    var TargetChange = function() {
      function TargetChange2(resumeToken, current, addedDocuments, modifiedDocuments, removedDocuments) {
        this.resumeToken = resumeToken;
        this.current = current;
        this.addedDocuments = addedDocuments;
        this.modifiedDocuments = modifiedDocuments;
        this.removedDocuments = removedDocuments;
      }
      TargetChange2.createSynthesizedTargetChangeForCurrentChange = function(targetId, current) {
        return new TargetChange2(ByteString.EMPTY_BYTE_STRING, current, documentKeySet(), documentKeySet(), documentKeySet());
      };
      return TargetChange2;
    }();
    var DocumentWatchChange = function() {
      function DocumentWatchChange2(updatedTargetIds, removedTargetIds, key, newDoc) {
        this.updatedTargetIds = updatedTargetIds;
        this.removedTargetIds = removedTargetIds;
        this.key = key;
        this.newDoc = newDoc;
      }
      return DocumentWatchChange2;
    }();
    var ExistenceFilterChange = function() {
      function ExistenceFilterChange2(targetId, existenceFilter) {
        this.targetId = targetId;
        this.existenceFilter = existenceFilter;
      }
      return ExistenceFilterChange2;
    }();
    var WatchTargetChange = function() {
      function WatchTargetChange2(state, targetIds, resumeToken, cause) {
        if (resumeToken === void 0) {
          resumeToken = ByteString.EMPTY_BYTE_STRING;
        }
        if (cause === void 0) {
          cause = null;
        }
        this.state = state;
        this.targetIds = targetIds;
        this.resumeToken = resumeToken;
        this.cause = cause;
      }
      return WatchTargetChange2;
    }();
    var TargetState = function() {
      function TargetState2() {
        this.pendingResponses = 0;
        this.documentChanges = snapshotChangesMap();
        this._resumeToken = ByteString.EMPTY_BYTE_STRING;
        this._current = false;
        this._hasPendingChanges = true;
      }
      Object.defineProperty(TargetState2.prototype, "current", {
        get: function() {
          return this._current;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TargetState2.prototype, "resumeToken", {
        get: function() {
          return this._resumeToken;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TargetState2.prototype, "isPending", {
        get: function() {
          return this.pendingResponses !== 0;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TargetState2.prototype, "hasPendingChanges", {
        get: function() {
          return this._hasPendingChanges;
        },
        enumerable: false,
        configurable: true
      });
      TargetState2.prototype.updateResumeToken = function(resumeToken) {
        if (resumeToken.approximateByteSize() > 0) {
          this._hasPendingChanges = true;
          this._resumeToken = resumeToken;
        }
      };
      TargetState2.prototype.toTargetChange = function() {
        var addedDocuments = documentKeySet();
        var modifiedDocuments = documentKeySet();
        var removedDocuments = documentKeySet();
        this.documentChanges.forEach(function(key, changeType) {
          switch (changeType) {
            case 0:
              addedDocuments = addedDocuments.add(key);
              break;
            case 2:
              modifiedDocuments = modifiedDocuments.add(key);
              break;
            case 1:
              removedDocuments = removedDocuments.add(key);
              break;
            default:
              fail();
          }
        });
        return new TargetChange(this._resumeToken, this._current, addedDocuments, modifiedDocuments, removedDocuments);
      };
      TargetState2.prototype.clearPendingChanges = function() {
        this._hasPendingChanges = false;
        this.documentChanges = snapshotChangesMap();
      };
      TargetState2.prototype.addDocumentChange = function(key, changeType) {
        this._hasPendingChanges = true;
        this.documentChanges = this.documentChanges.insert(key, changeType);
      };
      TargetState2.prototype.removeDocumentChange = function(key) {
        this._hasPendingChanges = true;
        this.documentChanges = this.documentChanges.remove(key);
      };
      TargetState2.prototype.recordPendingTargetRequest = function() {
        this.pendingResponses += 1;
      };
      TargetState2.prototype.recordTargetResponse = function() {
        this.pendingResponses -= 1;
      };
      TargetState2.prototype.markCurrent = function() {
        this._hasPendingChanges = true;
        this._current = true;
      };
      return TargetState2;
    }();
    var LOG_TAG$1 = "WatchChangeAggregator";
    var WatchChangeAggregator = function() {
      function WatchChangeAggregator2(metadataProvider) {
        this.metadataProvider = metadataProvider;
        this.targetStates = new Map();
        this.pendingDocumentUpdates = maybeDocumentMap();
        this.pendingDocumentTargetMapping = documentTargetMap();
        this.pendingTargetResets = new SortedSet(primitiveComparator);
      }
      WatchChangeAggregator2.prototype.handleDocumentChange = function(docChange) {
        for (var _i = 0, _f = docChange.updatedTargetIds; _i < _f.length; _i++) {
          var targetId = _f[_i];
          if (docChange.newDoc instanceof Document) {
            this.addDocumentToTarget(targetId, docChange.newDoc);
          } else if (docChange.newDoc instanceof NoDocument) {
            this.removeDocumentFromTarget(targetId, docChange.key, docChange.newDoc);
          }
        }
        for (var _g = 0, _h = docChange.removedTargetIds; _g < _h.length; _g++) {
          var targetId = _h[_g];
          this.removeDocumentFromTarget(targetId, docChange.key, docChange.newDoc);
        }
      };
      WatchChangeAggregator2.prototype.handleTargetChange = function(targetChange) {
        var _this = this;
        this.forEachTarget(targetChange, function(targetId) {
          var targetState = _this.ensureTargetState(targetId);
          switch (targetChange.state) {
            case 0:
              if (_this.isActiveTarget(targetId)) {
                targetState.updateResumeToken(targetChange.resumeToken);
              }
              break;
            case 1:
              targetState.recordTargetResponse();
              if (!targetState.isPending) {
                targetState.clearPendingChanges();
              }
              targetState.updateResumeToken(targetChange.resumeToken);
              break;
            case 2:
              targetState.recordTargetResponse();
              if (!targetState.isPending) {
                _this.removeTarget(targetId);
              }
              break;
            case 3:
              if (_this.isActiveTarget(targetId)) {
                targetState.markCurrent();
                targetState.updateResumeToken(targetChange.resumeToken);
              }
              break;
            case 4:
              if (_this.isActiveTarget(targetId)) {
                _this.resetTarget(targetId);
                targetState.updateResumeToken(targetChange.resumeToken);
              }
              break;
            default:
              fail();
          }
        });
      };
      WatchChangeAggregator2.prototype.forEachTarget = function(targetChange, fn) {
        var _this = this;
        if (targetChange.targetIds.length > 0) {
          targetChange.targetIds.forEach(fn);
        } else {
          this.targetStates.forEach(function(_, targetId) {
            if (_this.isActiveTarget(targetId)) {
              fn(targetId);
            }
          });
        }
      };
      WatchChangeAggregator2.prototype.handleExistenceFilter = function(watchChange) {
        var targetId = watchChange.targetId;
        var expectedCount = watchChange.existenceFilter.count;
        var targetData = this.targetDataForActiveTarget(targetId);
        if (targetData) {
          var target = targetData.target;
          if (isDocumentTarget(target)) {
            if (expectedCount === 0) {
              var key = new DocumentKey(target.path);
              this.removeDocumentFromTarget(targetId, key, new NoDocument(key, SnapshotVersion.min()));
            } else {
              hardAssert(expectedCount === 1);
            }
          } else {
            var currentSize = this.getCurrentDocumentCountForTarget(targetId);
            if (currentSize !== expectedCount) {
              this.resetTarget(targetId);
              this.pendingTargetResets = this.pendingTargetResets.add(targetId);
            }
          }
        }
      };
      WatchChangeAggregator2.prototype.createRemoteEvent = function(snapshotVersion) {
        var _this = this;
        var targetChanges = new Map();
        this.targetStates.forEach(function(targetState, targetId) {
          var targetData = _this.targetDataForActiveTarget(targetId);
          if (targetData) {
            if (targetState.current && isDocumentTarget(targetData.target)) {
              var key = new DocumentKey(targetData.target.path);
              if (_this.pendingDocumentUpdates.get(key) === null && !_this.targetContainsDocument(targetId, key)) {
                _this.removeDocumentFromTarget(targetId, key, new NoDocument(key, snapshotVersion));
              }
            }
            if (targetState.hasPendingChanges) {
              targetChanges.set(targetId, targetState.toTargetChange());
              targetState.clearPendingChanges();
            }
          }
        });
        var resolvedLimboDocuments = documentKeySet();
        this.pendingDocumentTargetMapping.forEach(function(key, targets) {
          var isOnlyLimboTarget = true;
          targets.forEachWhile(function(targetId) {
            var targetData = _this.targetDataForActiveTarget(targetId);
            if (targetData && targetData.purpose !== 2) {
              isOnlyLimboTarget = false;
              return false;
            }
            return true;
          });
          if (isOnlyLimboTarget) {
            resolvedLimboDocuments = resolvedLimboDocuments.add(key);
          }
        });
        var remoteEvent = new RemoteEvent(snapshotVersion, targetChanges, this.pendingTargetResets, this.pendingDocumentUpdates, resolvedLimboDocuments);
        this.pendingDocumentUpdates = maybeDocumentMap();
        this.pendingDocumentTargetMapping = documentTargetMap();
        this.pendingTargetResets = new SortedSet(primitiveComparator);
        return remoteEvent;
      };
      WatchChangeAggregator2.prototype.addDocumentToTarget = function(targetId, document2) {
        if (!this.isActiveTarget(targetId)) {
          return;
        }
        var changeType = this.targetContainsDocument(targetId, document2.key) ? 2 : 0;
        var targetState = this.ensureTargetState(targetId);
        targetState.addDocumentChange(document2.key, changeType);
        this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(document2.key, document2);
        this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(document2.key, this.ensureDocumentTargetMapping(document2.key).add(targetId));
      };
      WatchChangeAggregator2.prototype.removeDocumentFromTarget = function(targetId, key, updatedDocument) {
        if (!this.isActiveTarget(targetId)) {
          return;
        }
        var targetState = this.ensureTargetState(targetId);
        if (this.targetContainsDocument(targetId, key)) {
          targetState.addDocumentChange(key, 1);
        } else {
          targetState.removeDocumentChange(key);
        }
        this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(key, this.ensureDocumentTargetMapping(key).delete(targetId));
        if (updatedDocument) {
          this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(key, updatedDocument);
        }
      };
      WatchChangeAggregator2.prototype.removeTarget = function(targetId) {
        this.targetStates.delete(targetId);
      };
      WatchChangeAggregator2.prototype.getCurrentDocumentCountForTarget = function(targetId) {
        var targetState = this.ensureTargetState(targetId);
        var targetChange = targetState.toTargetChange();
        return this.metadataProvider.getRemoteKeysForTarget(targetId).size + targetChange.addedDocuments.size - targetChange.removedDocuments.size;
      };
      WatchChangeAggregator2.prototype.recordPendingTargetRequest = function(targetId) {
        var targetState = this.ensureTargetState(targetId);
        targetState.recordPendingTargetRequest();
      };
      WatchChangeAggregator2.prototype.ensureTargetState = function(targetId) {
        var result = this.targetStates.get(targetId);
        if (!result) {
          result = new TargetState();
          this.targetStates.set(targetId, result);
        }
        return result;
      };
      WatchChangeAggregator2.prototype.ensureDocumentTargetMapping = function(key) {
        var targetMapping = this.pendingDocumentTargetMapping.get(key);
        if (!targetMapping) {
          targetMapping = new SortedSet(primitiveComparator);
          this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(key, targetMapping);
        }
        return targetMapping;
      };
      WatchChangeAggregator2.prototype.isActiveTarget = function(targetId) {
        var targetActive = this.targetDataForActiveTarget(targetId) !== null;
        if (!targetActive) {
          logDebug(LOG_TAG$1, "Detected inactive target", targetId);
        }
        return targetActive;
      };
      WatchChangeAggregator2.prototype.targetDataForActiveTarget = function(targetId) {
        var targetState = this.targetStates.get(targetId);
        return targetState && targetState.isPending ? null : this.metadataProvider.getTargetDataForTarget(targetId);
      };
      WatchChangeAggregator2.prototype.resetTarget = function(targetId) {
        var _this = this;
        this.targetStates.set(targetId, new TargetState());
        var existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);
        existingKeys.forEach(function(key) {
          _this.removeDocumentFromTarget(targetId, key, null);
        });
      };
      WatchChangeAggregator2.prototype.targetContainsDocument = function(targetId, key) {
        var existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);
        return existingKeys.has(key);
      };
      return WatchChangeAggregator2;
    }();
    function documentTargetMap() {
      return new SortedMap(DocumentKey.comparator);
    }
    function snapshotChangesMap() {
      return new SortedMap(DocumentKey.comparator);
    }
    var DIRECTIONS = function() {
      var dirs = {};
      dirs["asc"] = "ASCENDING";
      dirs["desc"] = "DESCENDING";
      return dirs;
    }();
    var OPERATORS = function() {
      var ops = {};
      ops["<"] = "LESS_THAN";
      ops["<="] = "LESS_THAN_OR_EQUAL";
      ops[">"] = "GREATER_THAN";
      ops[">="] = "GREATER_THAN_OR_EQUAL";
      ops["=="] = "EQUAL";
      ops["!="] = "NOT_EQUAL";
      ops["array-contains"] = "ARRAY_CONTAINS";
      ops["in"] = "IN";
      ops["not-in"] = "NOT_IN";
      ops["array-contains-any"] = "ARRAY_CONTAINS_ANY";
      return ops;
    }();
    function assertPresent(value, description) {
    }
    var JsonProtoSerializer = function() {
      function JsonProtoSerializer2(databaseId, useProto3Json) {
        this.databaseId = databaseId;
        this.useProto3Json = useProto3Json;
      }
      return JsonProtoSerializer2;
    }();
    function fromRpcStatus(status) {
      var code = status.code === void 0 ? Code.UNKNOWN : mapCodeFromRpcCode(status.code);
      return new FirestoreError(code, status.message || "");
    }
    function toInt32Proto(serializer, val) {
      if (serializer.useProto3Json || isNullOrUndefined(val)) {
        return val;
      } else {
        return { value: val };
      }
    }
    function fromInt32Proto(val) {
      var result;
      if (typeof val === "object") {
        result = val.value;
      } else {
        result = val;
      }
      return isNullOrUndefined(result) ? null : result;
    }
    function toInteger(value) {
      return { integerValue: "" + value };
    }
    function toDouble(serializer, value) {
      if (serializer.useProto3Json) {
        if (isNaN(value)) {
          return { doubleValue: "NaN" };
        } else if (value === Infinity) {
          return { doubleValue: "Infinity" };
        } else if (value === -Infinity) {
          return { doubleValue: "-Infinity" };
        }
      }
      return { doubleValue: isNegativeZero(value) ? "-0" : value };
    }
    function toNumber(serializer, value) {
      return isSafeInteger(value) ? toInteger(value) : toDouble(serializer, value);
    }
    function toTimestamp(serializer, timestamp) {
      if (serializer.useProto3Json) {
        var jsDateStr = new Date(timestamp.seconds * 1e3).toISOString();
        var strUntilSeconds = jsDateStr.replace(/\.\d*/, "").replace("Z", "");
        var nanoStr = ("000000000" + timestamp.nanoseconds).slice(-9);
        return strUntilSeconds + "." + nanoStr + "Z";
      } else {
        return {
          seconds: "" + timestamp.seconds,
          nanos: timestamp.nanoseconds
        };
      }
    }
    function fromTimestamp(date) {
      var timestamp = normalizeTimestamp(date);
      return new Timestamp(timestamp.seconds, timestamp.nanos);
    }
    function toBytes(serializer, bytes) {
      if (serializer.useProto3Json) {
        return bytes.toBase64();
      } else {
        return bytes.toUint8Array();
      }
    }
    function fromBytes(serializer, value) {
      if (serializer.useProto3Json) {
        hardAssert(value === void 0 || typeof value === "string");
        return ByteString.fromBase64String(value ? value : "");
      } else {
        hardAssert(value === void 0 || value instanceof Uint8Array);
        return ByteString.fromUint8Array(value ? value : new Uint8Array());
      }
    }
    function toVersion(serializer, version2) {
      return toTimestamp(serializer, version2.toTimestamp());
    }
    function fromVersion(version2) {
      hardAssert(!!version2);
      return SnapshotVersion.fromTimestamp(fromTimestamp(version2));
    }
    function toResourceName(databaseId, path2) {
      return fullyQualifiedPrefixPath(databaseId).child("documents").child(path2).canonicalString();
    }
    function fromResourceName(name3) {
      var resource = ResourcePath.fromString(name3);
      hardAssert(isValidResourceName(resource));
      return resource;
    }
    function toName(serializer, key) {
      return toResourceName(serializer.databaseId, key.path);
    }
    function fromName(serializer, name3) {
      var resource = fromResourceName(name3);
      hardAssert(resource.get(1) === serializer.databaseId.projectId);
      hardAssert(!resource.get(3) && !serializer.databaseId.database || resource.get(3) === serializer.databaseId.database);
      return new DocumentKey(extractLocalPathFromResourceName(resource));
    }
    function toQueryPath(serializer, path2) {
      return toResourceName(serializer.databaseId, path2);
    }
    function fromQueryPath(name3) {
      var resourceName = fromResourceName(name3);
      if (resourceName.length === 4) {
        return ResourcePath.emptyPath();
      }
      return extractLocalPathFromResourceName(resourceName);
    }
    function getEncodedDatabaseId(serializer) {
      var path2 = new ResourcePath([
        "projects",
        serializer.databaseId.projectId,
        "databases",
        serializer.databaseId.database
      ]);
      return path2.canonicalString();
    }
    function fullyQualifiedPrefixPath(databaseId) {
      return new ResourcePath([
        "projects",
        databaseId.projectId,
        "databases",
        databaseId.database
      ]);
    }
    function extractLocalPathFromResourceName(resourceName) {
      hardAssert(resourceName.length > 4 && resourceName.get(4) === "documents");
      return resourceName.popFirst(5);
    }
    function toMutationDocument(serializer, key, fields) {
      return {
        name: toName(serializer, key),
        fields: fields.proto.mapValue.fields
      };
    }
    function toDocument(serializer, document2) {
      return {
        name: toName(serializer, document2.key),
        fields: document2.toProto().mapValue.fields,
        updateTime: toTimestamp(serializer, document2.version.toTimestamp())
      };
    }
    function fromDocument(serializer, document2, hasCommittedMutations) {
      var key = fromName(serializer, document2.name);
      var version2 = fromVersion(document2.updateTime);
      var data = new ObjectValue({ mapValue: { fields: document2.fields } });
      return new Document(key, version2, data, {
        hasCommittedMutations: !!hasCommittedMutations
      });
    }
    function fromFound(serializer, doc) {
      hardAssert(!!doc.found);
      assertPresent(doc.found.name);
      assertPresent(doc.found.updateTime);
      var key = fromName(serializer, doc.found.name);
      var version2 = fromVersion(doc.found.updateTime);
      var data = new ObjectValue({ mapValue: { fields: doc.found.fields } });
      return new Document(key, version2, data, {});
    }
    function fromMissing(serializer, result) {
      hardAssert(!!result.missing);
      hardAssert(!!result.readTime);
      var key = fromName(serializer, result.missing);
      var version2 = fromVersion(result.readTime);
      return new NoDocument(key, version2);
    }
    function fromMaybeDocument(serializer, result) {
      if ("found" in result) {
        return fromFound(serializer, result);
      } else if ("missing" in result) {
        return fromMissing(serializer, result);
      }
      return fail();
    }
    function fromWatchChange(serializer, change) {
      var watchChange;
      if ("targetChange" in change) {
        assertPresent(change.targetChange);
        var state = fromWatchTargetChangeState(change.targetChange.targetChangeType || "NO_CHANGE");
        var targetIds = change.targetChange.targetIds || [];
        var resumeToken = fromBytes(serializer, change.targetChange.resumeToken);
        var causeProto = change.targetChange.cause;
        var cause = causeProto && fromRpcStatus(causeProto);
        watchChange = new WatchTargetChange(state, targetIds, resumeToken, cause || null);
      } else if ("documentChange" in change) {
        assertPresent(change.documentChange);
        var entityChange = change.documentChange;
        assertPresent(entityChange.document);
        assertPresent(entityChange.document.name);
        assertPresent(entityChange.document.updateTime);
        var key = fromName(serializer, entityChange.document.name);
        var version_1 = fromVersion(entityChange.document.updateTime);
        var data = new ObjectValue({
          mapValue: { fields: entityChange.document.fields }
        });
        var doc = new Document(key, version_1, data, {});
        var updatedTargetIds = entityChange.targetIds || [];
        var removedTargetIds = entityChange.removedTargetIds || [];
        watchChange = new DocumentWatchChange(updatedTargetIds, removedTargetIds, doc.key, doc);
      } else if ("documentDelete" in change) {
        assertPresent(change.documentDelete);
        var docDelete = change.documentDelete;
        assertPresent(docDelete.document);
        var key = fromName(serializer, docDelete.document);
        var version_2 = docDelete.readTime ? fromVersion(docDelete.readTime) : SnapshotVersion.min();
        var doc = new NoDocument(key, version_2);
        var removedTargetIds = docDelete.removedTargetIds || [];
        watchChange = new DocumentWatchChange([], removedTargetIds, doc.key, doc);
      } else if ("documentRemove" in change) {
        assertPresent(change.documentRemove);
        var docRemove = change.documentRemove;
        assertPresent(docRemove.document);
        var key = fromName(serializer, docRemove.document);
        var removedTargetIds = docRemove.removedTargetIds || [];
        watchChange = new DocumentWatchChange([], removedTargetIds, key, null);
      } else if ("filter" in change) {
        assertPresent(change.filter);
        var filter = change.filter;
        assertPresent(filter.targetId);
        var count = filter.count || 0;
        var existenceFilter = new ExistenceFilter(count);
        var targetId = filter.targetId;
        watchChange = new ExistenceFilterChange(targetId, existenceFilter);
      } else {
        return fail();
      }
      return watchChange;
    }
    function fromWatchTargetChangeState(state) {
      if (state === "NO_CHANGE") {
        return 0;
      } else if (state === "ADD") {
        return 1;
      } else if (state === "REMOVE") {
        return 2;
      } else if (state === "CURRENT") {
        return 3;
      } else if (state === "RESET") {
        return 4;
      } else {
        return fail();
      }
    }
    function versionFromListenResponse(change) {
      if (!("targetChange" in change)) {
        return SnapshotVersion.min();
      }
      var targetChange = change.targetChange;
      if (targetChange.targetIds && targetChange.targetIds.length) {
        return SnapshotVersion.min();
      }
      if (!targetChange.readTime) {
        return SnapshotVersion.min();
      }
      return fromVersion(targetChange.readTime);
    }
    function toMutation(serializer, mutation) {
      var result;
      if (mutation instanceof SetMutation) {
        result = {
          update: toMutationDocument(serializer, mutation.key, mutation.value)
        };
      } else if (mutation instanceof DeleteMutation) {
        result = { delete: toName(serializer, mutation.key) };
      } else if (mutation instanceof PatchMutation) {
        result = {
          update: toMutationDocument(serializer, mutation.key, mutation.data),
          updateMask: toDocumentMask(mutation.fieldMask)
        };
      } else if (mutation instanceof TransformMutation) {
        result = {
          transform: {
            document: toName(serializer, mutation.key),
            fieldTransforms: mutation.fieldTransforms.map(function(transform) {
              return toFieldTransform(serializer, transform);
            })
          }
        };
      } else if (mutation instanceof VerifyMutation) {
        result = {
          verify: toName(serializer, mutation.key)
        };
      } else {
        return fail();
      }
      if (!mutation.precondition.isNone) {
        result.currentDocument = toPrecondition(serializer, mutation.precondition);
      }
      return result;
    }
    function fromMutation(serializer, proto) {
      var precondition = proto.currentDocument ? fromPrecondition(proto.currentDocument) : Precondition.none();
      if (proto.update) {
        assertPresent(proto.update.name);
        var key = fromName(serializer, proto.update.name);
        var value = new ObjectValue({
          mapValue: { fields: proto.update.fields }
        });
        if (proto.updateMask) {
          var fieldMask = fromDocumentMask(proto.updateMask);
          return new PatchMutation(key, value, fieldMask, precondition);
        } else {
          return new SetMutation(key, value, precondition);
        }
      } else if (proto.delete) {
        var key = fromName(serializer, proto.delete);
        return new DeleteMutation(key, precondition);
      } else if (proto.transform) {
        var key = fromName(serializer, proto.transform.document);
        var fieldTransforms = proto.transform.fieldTransforms.map(function(transform) {
          return fromFieldTransform(serializer, transform);
        });
        hardAssert(precondition.exists === true);
        return new TransformMutation(key, fieldTransforms);
      } else if (proto.verify) {
        var key = fromName(serializer, proto.verify);
        return new VerifyMutation(key, precondition);
      } else {
        return fail();
      }
    }
    function toPrecondition(serializer, precondition) {
      if (precondition.updateTime !== void 0) {
        return {
          updateTime: toVersion(serializer, precondition.updateTime)
        };
      } else if (precondition.exists !== void 0) {
        return { exists: precondition.exists };
      } else {
        return fail();
      }
    }
    function fromPrecondition(precondition) {
      if (precondition.updateTime !== void 0) {
        return Precondition.updateTime(fromVersion(precondition.updateTime));
      } else if (precondition.exists !== void 0) {
        return Precondition.exists(precondition.exists);
      } else {
        return Precondition.none();
      }
    }
    function fromWriteResult(proto, commitTime) {
      var version2 = proto.updateTime ? fromVersion(proto.updateTime) : fromVersion(commitTime);
      if (version2.isEqual(SnapshotVersion.min())) {
        version2 = fromVersion(commitTime);
      }
      var transformResults = null;
      if (proto.transformResults && proto.transformResults.length > 0) {
        transformResults = proto.transformResults;
      }
      return new MutationResult(version2, transformResults);
    }
    function fromWriteResults(protos, commitTime) {
      if (protos && protos.length > 0) {
        hardAssert(commitTime !== void 0);
        return protos.map(function(proto) {
          return fromWriteResult(proto, commitTime);
        });
      } else {
        return [];
      }
    }
    function toFieldTransform(serializer, fieldTransform) {
      var transform = fieldTransform.transform;
      if (transform instanceof ServerTimestampTransform) {
        return {
          fieldPath: fieldTransform.field.canonicalString(),
          setToServerValue: "REQUEST_TIME"
        };
      } else if (transform instanceof ArrayUnionTransformOperation) {
        return {
          fieldPath: fieldTransform.field.canonicalString(),
          appendMissingElements: {
            values: transform.elements
          }
        };
      } else if (transform instanceof ArrayRemoveTransformOperation) {
        return {
          fieldPath: fieldTransform.field.canonicalString(),
          removeAllFromArray: {
            values: transform.elements
          }
        };
      } else if (transform instanceof NumericIncrementTransformOperation) {
        return {
          fieldPath: fieldTransform.field.canonicalString(),
          increment: transform.operand
        };
      } else {
        throw fail();
      }
    }
    function fromFieldTransform(serializer, proto) {
      var transform = null;
      if ("setToServerValue" in proto) {
        hardAssert(proto.setToServerValue === "REQUEST_TIME");
        transform = new ServerTimestampTransform();
      } else if ("appendMissingElements" in proto) {
        var values = proto.appendMissingElements.values || [];
        transform = new ArrayUnionTransformOperation(values);
      } else if ("removeAllFromArray" in proto) {
        var values = proto.removeAllFromArray.values || [];
        transform = new ArrayRemoveTransformOperation(values);
      } else if ("increment" in proto) {
        transform = new NumericIncrementTransformOperation(serializer, proto.increment);
      } else {
        fail();
      }
      var fieldPath = FieldPath.fromServerFormat(proto.fieldPath);
      return new FieldTransform(fieldPath, transform);
    }
    function toDocumentsTarget(serializer, target) {
      return { documents: [toQueryPath(serializer, target.path)] };
    }
    function fromDocumentsTarget(documentsTarget) {
      var count = documentsTarget.documents.length;
      hardAssert(count === 1);
      var name3 = documentsTarget.documents[0];
      return queryToTarget(newQueryForPath(fromQueryPath(name3)));
    }
    function toQueryTarget(serializer, target) {
      var result = { structuredQuery: {} };
      var path2 = target.path;
      if (target.collectionGroup !== null) {
        result.parent = toQueryPath(serializer, path2);
        result.structuredQuery.from = [
          {
            collectionId: target.collectionGroup,
            allDescendants: true
          }
        ];
      } else {
        result.parent = toQueryPath(serializer, path2.popLast());
        result.structuredQuery.from = [{ collectionId: path2.lastSegment() }];
      }
      var where = toFilter(target.filters);
      if (where) {
        result.structuredQuery.where = where;
      }
      var orderBy = toOrder(target.orderBy);
      if (orderBy) {
        result.structuredQuery.orderBy = orderBy;
      }
      var limit = toInt32Proto(serializer, target.limit);
      if (limit !== null) {
        result.structuredQuery.limit = limit;
      }
      if (target.startAt) {
        result.structuredQuery.startAt = toCursor(target.startAt);
      }
      if (target.endAt) {
        result.structuredQuery.endAt = toCursor(target.endAt);
      }
      return result;
    }
    function fromQueryTarget(target) {
      var path2 = fromQueryPath(target.parent);
      var query = target.structuredQuery;
      var fromCount = query.from ? query.from.length : 0;
      var collectionGroup = null;
      if (fromCount > 0) {
        hardAssert(fromCount === 1);
        var from = query.from[0];
        if (from.allDescendants) {
          collectionGroup = from.collectionId;
        } else {
          path2 = path2.child(from.collectionId);
        }
      }
      var filterBy = [];
      if (query.where) {
        filterBy = fromFilter(query.where);
      }
      var orderBy = [];
      if (query.orderBy) {
        orderBy = fromOrder(query.orderBy);
      }
      var limit = null;
      if (query.limit) {
        limit = fromInt32Proto(query.limit);
      }
      var startAt = null;
      if (query.startAt) {
        startAt = fromCursor(query.startAt);
      }
      var endAt = null;
      if (query.endAt) {
        endAt = fromCursor(query.endAt);
      }
      return queryToTarget(newQuery(path2, collectionGroup, orderBy, filterBy, limit, "F", startAt, endAt));
    }
    function toListenRequestLabels(serializer, targetData) {
      var value = toLabel(serializer, targetData.purpose);
      if (value == null) {
        return null;
      } else {
        return {
          "goog-listen-tags": value
        };
      }
    }
    function toLabel(serializer, purpose) {
      switch (purpose) {
        case 0:
          return null;
        case 1:
          return "existence-filter-mismatch";
        case 2:
          return "limbo-document";
        default:
          return fail();
      }
    }
    function toTarget(serializer, targetData) {
      var result;
      var target = targetData.target;
      if (isDocumentTarget(target)) {
        result = { documents: toDocumentsTarget(serializer, target) };
      } else {
        result = { query: toQueryTarget(serializer, target) };
      }
      result.targetId = targetData.targetId;
      if (targetData.resumeToken.approximateByteSize() > 0) {
        result.resumeToken = toBytes(serializer, targetData.resumeToken);
      }
      return result;
    }
    function toFilter(filters) {
      if (filters.length === 0) {
        return;
      }
      var protos = filters.map(function(filter) {
        return toUnaryOrFieldFilter(filter);
      });
      if (protos.length === 1) {
        return protos[0];
      }
      return { compositeFilter: { op: "AND", filters: protos } };
    }
    function fromFilter(filter) {
      if (!filter) {
        return [];
      } else if (filter.unaryFilter !== void 0) {
        return [fromUnaryFilter(filter)];
      } else if (filter.fieldFilter !== void 0) {
        return [fromFieldFilter(filter)];
      } else if (filter.compositeFilter !== void 0) {
        return filter.compositeFilter.filters.map(function(f) {
          return fromFilter(f);
        }).reduce(function(accum, current) {
          return accum.concat(current);
        });
      } else {
        return fail();
      }
    }
    function toOrder(orderBys) {
      if (orderBys.length === 0) {
        return;
      }
      return orderBys.map(function(order) {
        return toPropertyOrder(order);
      });
    }
    function fromOrder(orderBys) {
      return orderBys.map(function(order) {
        return fromPropertyOrder(order);
      });
    }
    function toCursor(cursor) {
      return {
        before: cursor.before,
        values: cursor.position
      };
    }
    function fromCursor(cursor) {
      var before = !!cursor.before;
      var position = cursor.values || [];
      return new Bound(position, before);
    }
    function toDirection(dir) {
      return DIRECTIONS[dir];
    }
    function fromDirection(dir) {
      switch (dir) {
        case "ASCENDING":
          return "asc";
        case "DESCENDING":
          return "desc";
        default:
          return void 0;
      }
    }
    function toOperatorName(op) {
      return OPERATORS[op];
    }
    function fromOperatorName(op) {
      switch (op) {
        case "EQUAL":
          return "==";
        case "NOT_EQUAL":
          return "!=";
        case "GREATER_THAN":
          return ">";
        case "GREATER_THAN_OR_EQUAL":
          return ">=";
        case "LESS_THAN":
          return "<";
        case "LESS_THAN_OR_EQUAL":
          return "<=";
        case "ARRAY_CONTAINS":
          return "array-contains";
        case "IN":
          return "in";
        case "NOT_IN":
          return "not-in";
        case "ARRAY_CONTAINS_ANY":
          return "array-contains-any";
        case "OPERATOR_UNSPECIFIED":
          return fail();
        default:
          return fail();
      }
    }
    function toFieldPathReference(path2) {
      return { fieldPath: path2.canonicalString() };
    }
    function fromFieldPathReference(fieldReference) {
      return FieldPath.fromServerFormat(fieldReference.fieldPath);
    }
    function toPropertyOrder(orderBy) {
      return {
        field: toFieldPathReference(orderBy.field),
        direction: toDirection(orderBy.dir)
      };
    }
    function fromPropertyOrder(orderBy) {
      return new OrderBy(fromFieldPathReference(orderBy.field), fromDirection(orderBy.direction));
    }
    function fromFieldFilter(filter) {
      return FieldFilter.create(fromFieldPathReference(filter.fieldFilter.field), fromOperatorName(filter.fieldFilter.op), filter.fieldFilter.value);
    }
    function toUnaryOrFieldFilter(filter) {
      if (filter.op === "==") {
        if (isNanValue(filter.value)) {
          return {
            unaryFilter: {
              field: toFieldPathReference(filter.field),
              op: "IS_NAN"
            }
          };
        } else if (isNullValue(filter.value)) {
          return {
            unaryFilter: {
              field: toFieldPathReference(filter.field),
              op: "IS_NULL"
            }
          };
        }
      } else if (filter.op === "!=") {
        if (isNanValue(filter.value)) {
          return {
            unaryFilter: {
              field: toFieldPathReference(filter.field),
              op: "IS_NOT_NAN"
            }
          };
        } else if (isNullValue(filter.value)) {
          return {
            unaryFilter: {
              field: toFieldPathReference(filter.field),
              op: "IS_NOT_NULL"
            }
          };
        }
      }
      return {
        fieldFilter: {
          field: toFieldPathReference(filter.field),
          op: toOperatorName(filter.op),
          value: filter.value
        }
      };
    }
    function fromUnaryFilter(filter) {
      switch (filter.unaryFilter.op) {
        case "IS_NAN":
          var nanField = fromFieldPathReference(filter.unaryFilter.field);
          return FieldFilter.create(nanField, "==", {
            doubleValue: NaN
          });
        case "IS_NULL":
          var nullField = fromFieldPathReference(filter.unaryFilter.field);
          return FieldFilter.create(nullField, "==", {
            nullValue: "NULL_VALUE"
          });
        case "IS_NOT_NAN":
          var notNanField = fromFieldPathReference(filter.unaryFilter.field);
          return FieldFilter.create(notNanField, "!=", {
            doubleValue: NaN
          });
        case "IS_NOT_NULL":
          var notNullField = fromFieldPathReference(filter.unaryFilter.field);
          return FieldFilter.create(notNullField, "!=", {
            nullValue: "NULL_VALUE"
          });
        case "OPERATOR_UNSPECIFIED":
          return fail();
        default:
          return fail();
      }
    }
    function toDocumentMask(fieldMask) {
      var canonicalFields = [];
      fieldMask.fields.forEach(function(field) {
        return canonicalFields.push(field.canonicalString());
      });
      return {
        fieldPaths: canonicalFields
      };
    }
    function fromDocumentMask(proto) {
      var paths = proto.fieldPaths || [];
      return new FieldMask(paths.map(function(path2) {
        return FieldPath.fromServerFormat(path2);
      }));
    }
    function isValidResourceName(path2) {
      return path2.length >= 4 && path2.get(0) === "projects" && path2.get(2) === "databases";
    }
    var TransformOperation = function() {
      function TransformOperation2() {
        this._ = void 0;
      }
      return TransformOperation2;
    }();
    function applyTransformOperationToLocalView(transform, previousValue, localWriteTime) {
      if (transform instanceof ServerTimestampTransform) {
        return serverTimestamp(localWriteTime, previousValue);
      } else if (transform instanceof ArrayUnionTransformOperation) {
        return applyArrayUnionTransformOperation(transform, previousValue);
      } else if (transform instanceof ArrayRemoveTransformOperation) {
        return applyArrayRemoveTransformOperation(transform, previousValue);
      } else {
        return applyNumericIncrementTransformOperationToLocalView(transform, previousValue);
      }
    }
    function applyTransformOperationToRemoteDocument(transform, previousValue, transformResult) {
      if (transform instanceof ArrayUnionTransformOperation) {
        return applyArrayUnionTransformOperation(transform, previousValue);
      } else if (transform instanceof ArrayRemoveTransformOperation) {
        return applyArrayRemoveTransformOperation(transform, previousValue);
      }
      return transformResult;
    }
    function computeTransformOperationBaseValue(transform, previousValue) {
      if (transform instanceof NumericIncrementTransformOperation) {
        return isNumber(previousValue) ? previousValue : { integerValue: 0 };
      }
      return null;
    }
    function transformOperationEquals(left, right) {
      if (left instanceof ArrayUnionTransformOperation && right instanceof ArrayUnionTransformOperation) {
        return arrayEquals(left.elements, right.elements, valueEquals);
      } else if (left instanceof ArrayRemoveTransformOperation && right instanceof ArrayRemoveTransformOperation) {
        return arrayEquals(left.elements, right.elements, valueEquals);
      } else if (left instanceof NumericIncrementTransformOperation && right instanceof NumericIncrementTransformOperation) {
        return valueEquals(left.operand, right.operand);
      }
      return left instanceof ServerTimestampTransform && right instanceof ServerTimestampTransform;
    }
    var ServerTimestampTransform = function(_super) {
      tslib.__extends(ServerTimestampTransform2, _super);
      function ServerTimestampTransform2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      return ServerTimestampTransform2;
    }(TransformOperation);
    var ArrayUnionTransformOperation = function(_super) {
      tslib.__extends(ArrayUnionTransformOperation2, _super);
      function ArrayUnionTransformOperation2(elements) {
        var _this = _super.call(this) || this;
        _this.elements = elements;
        return _this;
      }
      return ArrayUnionTransformOperation2;
    }(TransformOperation);
    function applyArrayUnionTransformOperation(transform, previousValue) {
      var values = coercedFieldValuesArray(previousValue);
      var _loop_1 = function(toUnion2) {
        if (!values.some(function(element) {
          return valueEquals(element, toUnion2);
        })) {
          values.push(toUnion2);
        }
      };
      for (var _i = 0, _f = transform.elements; _i < _f.length; _i++) {
        var toUnion = _f[_i];
        _loop_1(toUnion);
      }
      return { arrayValue: { values } };
    }
    var ArrayRemoveTransformOperation = function(_super) {
      tslib.__extends(ArrayRemoveTransformOperation2, _super);
      function ArrayRemoveTransformOperation2(elements) {
        var _this = _super.call(this) || this;
        _this.elements = elements;
        return _this;
      }
      return ArrayRemoveTransformOperation2;
    }(TransformOperation);
    function applyArrayRemoveTransformOperation(transform, previousValue) {
      var values = coercedFieldValuesArray(previousValue);
      var _loop_2 = function(toRemove2) {
        values = values.filter(function(element) {
          return !valueEquals(element, toRemove2);
        });
      };
      for (var _i = 0, _f = transform.elements; _i < _f.length; _i++) {
        var toRemove = _f[_i];
        _loop_2(toRemove);
      }
      return { arrayValue: { values } };
    }
    var NumericIncrementTransformOperation = function(_super) {
      tslib.__extends(NumericIncrementTransformOperation2, _super);
      function NumericIncrementTransformOperation2(serializer, operand) {
        var _this = _super.call(this) || this;
        _this.serializer = serializer;
        _this.operand = operand;
        return _this;
      }
      return NumericIncrementTransformOperation2;
    }(TransformOperation);
    function applyNumericIncrementTransformOperationToLocalView(transform, previousValue) {
      var baseValue = computeTransformOperationBaseValue(transform, previousValue);
      var sum = asNumber(baseValue) + asNumber(transform.operand);
      if (isInteger(baseValue) && isInteger(transform.operand)) {
        return toInteger(sum);
      } else {
        return toDouble(transform.serializer, sum);
      }
    }
    function asNumber(value) {
      return normalizeNumber(value.integerValue || value.doubleValue);
    }
    function coercedFieldValuesArray(value) {
      return isArray(value) && value.arrayValue.values ? value.arrayValue.values.slice() : [];
    }
    var FieldMask = function() {
      function FieldMask2(fields) {
        this.fields = fields;
        fields.sort(FieldPath.comparator);
      }
      FieldMask2.prototype.covers = function(fieldPath) {
        for (var _i = 0, _f = this.fields; _i < _f.length; _i++) {
          var fieldMaskPath = _f[_i];
          if (fieldMaskPath.isPrefixOf(fieldPath)) {
            return true;
          }
        }
        return false;
      };
      FieldMask2.prototype.isEqual = function(other) {
        return arrayEquals(this.fields, other.fields, function(l, r) {
          return l.isEqual(r);
        });
      };
      return FieldMask2;
    }();
    var FieldTransform = function() {
      function FieldTransform2(field, transform) {
        this.field = field;
        this.transform = transform;
      }
      return FieldTransform2;
    }();
    function fieldTransformEquals(left, right) {
      return left.field.isEqual(right.field) && transformOperationEquals(left.transform, right.transform);
    }
    var MutationResult = function() {
      function MutationResult2(version2, transformResults) {
        this.version = version2;
        this.transformResults = transformResults;
      }
      return MutationResult2;
    }();
    var Precondition = function() {
      function Precondition2(updateTime, exists) {
        this.updateTime = updateTime;
        this.exists = exists;
      }
      Precondition2.none = function() {
        return new Precondition2();
      };
      Precondition2.exists = function(exists) {
        return new Precondition2(void 0, exists);
      };
      Precondition2.updateTime = function(version2) {
        return new Precondition2(version2);
      };
      Object.defineProperty(Precondition2.prototype, "isNone", {
        get: function() {
          return this.updateTime === void 0 && this.exists === void 0;
        },
        enumerable: false,
        configurable: true
      });
      Precondition2.prototype.isEqual = function(other) {
        return this.exists === other.exists && (this.updateTime ? !!other.updateTime && this.updateTime.isEqual(other.updateTime) : !other.updateTime);
      };
      return Precondition2;
    }();
    function preconditionIsValidForDocument(precondition, maybeDoc) {
      if (precondition.updateTime !== void 0) {
        return maybeDoc instanceof Document && maybeDoc.version.isEqual(precondition.updateTime);
      } else if (precondition.exists !== void 0) {
        return precondition.exists === maybeDoc instanceof Document;
      } else {
        return true;
      }
    }
    var Mutation = function() {
      function Mutation2() {
      }
      return Mutation2;
    }();
    function applyMutationToRemoteDocument(mutation, maybeDoc, mutationResult) {
      if (mutation instanceof SetMutation) {
        return applySetMutationToRemoteDocument(mutation, maybeDoc, mutationResult);
      } else if (mutation instanceof PatchMutation) {
        return applyPatchMutationToRemoteDocument(mutation, maybeDoc, mutationResult);
      } else if (mutation instanceof TransformMutation) {
        return applyTransformMutationToRemoteDocument(mutation, maybeDoc, mutationResult);
      } else {
        return applyDeleteMutationToRemoteDocument(mutation, maybeDoc, mutationResult);
      }
    }
    function applyMutationToLocalView(mutation, maybeDoc, baseDoc, localWriteTime) {
      if (mutation instanceof SetMutation) {
        return applySetMutationToLocalView(mutation, maybeDoc);
      } else if (mutation instanceof PatchMutation) {
        return applyPatchMutationToLocalView(mutation, maybeDoc);
      } else if (mutation instanceof TransformMutation) {
        return applyTransformMutationToLocalView(mutation, maybeDoc, localWriteTime, baseDoc);
      } else {
        return applyDeleteMutationToLocalView(mutation, maybeDoc);
      }
    }
    function extractMutationBaseValue(mutation, maybeDoc) {
      if (mutation instanceof TransformMutation) {
        return extractTransformMutationBaseValue(mutation, maybeDoc);
      }
      return null;
    }
    function mutationEquals(left, right) {
      if (left.type !== right.type) {
        return false;
      }
      if (!left.key.isEqual(right.key)) {
        return false;
      }
      if (!left.precondition.isEqual(right.precondition)) {
        return false;
      }
      if (left.type === 0) {
        return left.value.isEqual(right.value);
      }
      if (left.type === 1) {
        return left.data.isEqual(right.data) && left.fieldMask.isEqual(right.fieldMask);
      }
      if (left.type === 2) {
        return arrayEquals(left.fieldTransforms, left.fieldTransforms, function(l, r) {
          return fieldTransformEquals(l, r);
        });
      }
      return true;
    }
    function getPostMutationVersion(maybeDoc) {
      if (maybeDoc instanceof Document) {
        return maybeDoc.version;
      } else {
        return SnapshotVersion.min();
      }
    }
    var SetMutation = function(_super) {
      tslib.__extends(SetMutation2, _super);
      function SetMutation2(key, value, precondition) {
        var _this = _super.call(this) || this;
        _this.key = key;
        _this.value = value;
        _this.precondition = precondition;
        _this.type = 0;
        return _this;
      }
      return SetMutation2;
    }(Mutation);
    function applySetMutationToRemoteDocument(mutation, maybeDoc, mutationResult) {
      return new Document(mutation.key, mutationResult.version, mutation.value, {
        hasCommittedMutations: true
      });
    }
    function applySetMutationToLocalView(mutation, maybeDoc) {
      if (!preconditionIsValidForDocument(mutation.precondition, maybeDoc)) {
        return maybeDoc;
      }
      var version2 = getPostMutationVersion(maybeDoc);
      return new Document(mutation.key, version2, mutation.value, {
        hasLocalMutations: true
      });
    }
    var PatchMutation = function(_super) {
      tslib.__extends(PatchMutation2, _super);
      function PatchMutation2(key, data, fieldMask, precondition) {
        var _this = _super.call(this) || this;
        _this.key = key;
        _this.data = data;
        _this.fieldMask = fieldMask;
        _this.precondition = precondition;
        _this.type = 1;
        return _this;
      }
      return PatchMutation2;
    }(Mutation);
    function applyPatchMutationToRemoteDocument(mutation, maybeDoc, mutationResult) {
      if (!preconditionIsValidForDocument(mutation.precondition, maybeDoc)) {
        return new UnknownDocument(mutation.key, mutationResult.version);
      }
      var newData = patchDocument(mutation, maybeDoc);
      return new Document(mutation.key, mutationResult.version, newData, {
        hasCommittedMutations: true
      });
    }
    function applyPatchMutationToLocalView(mutation, maybeDoc) {
      if (!preconditionIsValidForDocument(mutation.precondition, maybeDoc)) {
        return maybeDoc;
      }
      var version2 = getPostMutationVersion(maybeDoc);
      var newData = patchDocument(mutation, maybeDoc);
      return new Document(mutation.key, version2, newData, {
        hasLocalMutations: true
      });
    }
    function patchDocument(mutation, maybeDoc) {
      var data;
      if (maybeDoc instanceof Document) {
        data = maybeDoc.data();
      } else {
        data = ObjectValue.empty();
      }
      return patchObject(mutation, data);
    }
    function patchObject(mutation, data) {
      var builder = new ObjectValueBuilder(data);
      mutation.fieldMask.fields.forEach(function(fieldPath) {
        if (!fieldPath.isEmpty()) {
          var newValue = mutation.data.field(fieldPath);
          if (newValue !== null) {
            builder.set(fieldPath, newValue);
          } else {
            builder.delete(fieldPath);
          }
        }
      });
      return builder.build();
    }
    var TransformMutation = function(_super) {
      tslib.__extends(TransformMutation2, _super);
      function TransformMutation2(key, fieldTransforms) {
        var _this = _super.call(this) || this;
        _this.key = key;
        _this.fieldTransforms = fieldTransforms;
        _this.type = 2;
        _this.precondition = Precondition.exists(true);
        return _this;
      }
      return TransformMutation2;
    }(Mutation);
    function applyTransformMutationToRemoteDocument(mutation, maybeDoc, mutationResult) {
      hardAssert(mutationResult.transformResults != null);
      if (!preconditionIsValidForDocument(mutation.precondition, maybeDoc)) {
        return new UnknownDocument(mutation.key, mutationResult.version);
      }
      var doc = requireDocument(mutation, maybeDoc);
      var transformResults = serverTransformResults(mutation.fieldTransforms, maybeDoc, mutationResult.transformResults);
      var version2 = mutationResult.version;
      var newData = transformObject(mutation, doc.data(), transformResults);
      return new Document(mutation.key, version2, newData, {
        hasCommittedMutations: true
      });
    }
    function applyTransformMutationToLocalView(mutation, maybeDoc, localWriteTime, baseDoc) {
      if (!preconditionIsValidForDocument(mutation.precondition, maybeDoc)) {
        return maybeDoc;
      }
      var doc = requireDocument(mutation, maybeDoc);
      var transformResults = localTransformResults(mutation.fieldTransforms, localWriteTime, maybeDoc, baseDoc);
      var newData = transformObject(mutation, doc.data(), transformResults);
      return new Document(mutation.key, doc.version, newData, {
        hasLocalMutations: true
      });
    }
    function extractTransformMutationBaseValue(mutation, maybeDoc) {
      var baseObject = null;
      for (var _i = 0, _f = mutation.fieldTransforms; _i < _f.length; _i++) {
        var fieldTransform = _f[_i];
        var existingValue = maybeDoc instanceof Document ? maybeDoc.field(fieldTransform.field) : void 0;
        var coercedValue = computeTransformOperationBaseValue(fieldTransform.transform, existingValue || null);
        if (coercedValue != null) {
          if (baseObject == null) {
            baseObject = new ObjectValueBuilder().set(fieldTransform.field, coercedValue);
          } else {
            baseObject = baseObject.set(fieldTransform.field, coercedValue);
          }
        }
      }
      return baseObject ? baseObject.build() : null;
    }
    function requireDocument(mutation, maybeDoc) {
      return maybeDoc;
    }
    function serverTransformResults(fieldTransforms, baseDoc, serverTransformResults2) {
      var transformResults = [];
      hardAssert(fieldTransforms.length === serverTransformResults2.length);
      for (var i = 0; i < serverTransformResults2.length; i++) {
        var fieldTransform = fieldTransforms[i];
        var transform = fieldTransform.transform;
        var previousValue = null;
        if (baseDoc instanceof Document) {
          previousValue = baseDoc.field(fieldTransform.field);
        }
        transformResults.push(applyTransformOperationToRemoteDocument(transform, previousValue, serverTransformResults2[i]));
      }
      return transformResults;
    }
    function localTransformResults(fieldTransforms, localWriteTime, maybeDoc, baseDoc) {
      var transformResults = [];
      for (var _i = 0, fieldTransforms_1 = fieldTransforms; _i < fieldTransforms_1.length; _i++) {
        var fieldTransform = fieldTransforms_1[_i];
        var transform = fieldTransform.transform;
        var previousValue = null;
        if (maybeDoc instanceof Document) {
          previousValue = maybeDoc.field(fieldTransform.field);
        }
        if (previousValue === null && baseDoc instanceof Document) {
          previousValue = baseDoc.field(fieldTransform.field);
        }
        transformResults.push(applyTransformOperationToLocalView(transform, previousValue, localWriteTime));
      }
      return transformResults;
    }
    function transformObject(mutation, data, transformResults) {
      var builder = new ObjectValueBuilder(data);
      for (var i = 0; i < mutation.fieldTransforms.length; i++) {
        var fieldTransform = mutation.fieldTransforms[i];
        builder.set(fieldTransform.field, transformResults[i]);
      }
      return builder.build();
    }
    var DeleteMutation = function(_super) {
      tslib.__extends(DeleteMutation2, _super);
      function DeleteMutation2(key, precondition) {
        var _this = _super.call(this) || this;
        _this.key = key;
        _this.precondition = precondition;
        _this.type = 3;
        return _this;
      }
      return DeleteMutation2;
    }(Mutation);
    function applyDeleteMutationToRemoteDocument(mutation, maybeDoc, mutationResult) {
      return new NoDocument(mutation.key, mutationResult.version, {
        hasCommittedMutations: true
      });
    }
    function applyDeleteMutationToLocalView(mutation, maybeDoc) {
      if (!preconditionIsValidForDocument(mutation.precondition, maybeDoc)) {
        return maybeDoc;
      }
      return new NoDocument(mutation.key, SnapshotVersion.min());
    }
    var VerifyMutation = function(_super) {
      tslib.__extends(VerifyMutation2, _super);
      function VerifyMutation2(key, precondition) {
        var _this = _super.call(this) || this;
        _this.key = key;
        _this.precondition = precondition;
        _this.type = 4;
        return _this;
      }
      return VerifyMutation2;
    }(Mutation);
    var BATCHID_UNKNOWN = -1;
    var MutationBatch = function() {
      function MutationBatch2(batchId, localWriteTime, baseMutations, mutations) {
        this.batchId = batchId;
        this.localWriteTime = localWriteTime;
        this.baseMutations = baseMutations;
        this.mutations = mutations;
      }
      MutationBatch2.prototype.applyToRemoteDocument = function(docKey, maybeDoc, batchResult) {
        var mutationResults = batchResult.mutationResults;
        for (var i = 0; i < this.mutations.length; i++) {
          var mutation = this.mutations[i];
          if (mutation.key.isEqual(docKey)) {
            var mutationResult = mutationResults[i];
            maybeDoc = applyMutationToRemoteDocument(mutation, maybeDoc, mutationResult);
          }
        }
        return maybeDoc;
      };
      MutationBatch2.prototype.applyToLocalView = function(docKey, maybeDoc) {
        for (var _i = 0, _f = this.baseMutations; _i < _f.length; _i++) {
          var mutation = _f[_i];
          if (mutation.key.isEqual(docKey)) {
            maybeDoc = applyMutationToLocalView(mutation, maybeDoc, maybeDoc, this.localWriteTime);
          }
        }
        var baseDoc = maybeDoc;
        for (var _g = 0, _h = this.mutations; _g < _h.length; _g++) {
          var mutation = _h[_g];
          if (mutation.key.isEqual(docKey)) {
            maybeDoc = applyMutationToLocalView(mutation, maybeDoc, baseDoc, this.localWriteTime);
          }
        }
        return maybeDoc;
      };
      MutationBatch2.prototype.applyToLocalDocumentSet = function(maybeDocs) {
        var _this = this;
        var mutatedDocuments = maybeDocs;
        this.mutations.forEach(function(m) {
          var mutatedDocument = _this.applyToLocalView(m.key, maybeDocs.get(m.key));
          if (mutatedDocument) {
            mutatedDocuments = mutatedDocuments.insert(m.key, mutatedDocument);
          }
        });
        return mutatedDocuments;
      };
      MutationBatch2.prototype.keys = function() {
        return this.mutations.reduce(function(keys, m) {
          return keys.add(m.key);
        }, documentKeySet());
      };
      MutationBatch2.prototype.isEqual = function(other) {
        return this.batchId === other.batchId && arrayEquals(this.mutations, other.mutations, function(l, r) {
          return mutationEquals(l, r);
        }) && arrayEquals(this.baseMutations, other.baseMutations, function(l, r) {
          return mutationEquals(l, r);
        });
      };
      return MutationBatch2;
    }();
    var MutationBatchResult = function() {
      function MutationBatchResult2(batch, commitVersion, mutationResults, docVersions) {
        this.batch = batch;
        this.commitVersion = commitVersion;
        this.mutationResults = mutationResults;
        this.docVersions = docVersions;
      }
      MutationBatchResult2.from = function(batch, commitVersion, results) {
        hardAssert(batch.mutations.length === results.length);
        var versionMap = documentVersionMap();
        var mutations = batch.mutations;
        for (var i = 0; i < mutations.length; i++) {
          versionMap = versionMap.insert(mutations[i].key, results[i].version);
        }
        return new MutationBatchResult2(batch, commitVersion, results, versionMap);
      };
      return MutationBatchResult2;
    }();
    var ObjectMap = function() {
      function ObjectMap2(mapKeyFn, equalsFn) {
        this.mapKeyFn = mapKeyFn;
        this.equalsFn = equalsFn;
        this.inner = {};
      }
      ObjectMap2.prototype.get = function(key) {
        var id2 = this.mapKeyFn(key);
        var matches = this.inner[id2];
        if (matches === void 0) {
          return void 0;
        }
        for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {
          var _f = matches_1[_i], otherKey = _f[0], value = _f[1];
          if (this.equalsFn(otherKey, key)) {
            return value;
          }
        }
        return void 0;
      };
      ObjectMap2.prototype.has = function(key) {
        return this.get(key) !== void 0;
      };
      ObjectMap2.prototype.set = function(key, value) {
        var id2 = this.mapKeyFn(key);
        var matches = this.inner[id2];
        if (matches === void 0) {
          this.inner[id2] = [[key, value]];
          return;
        }
        for (var i = 0; i < matches.length; i++) {
          if (this.equalsFn(matches[i][0], key)) {
            matches[i] = [key, value];
            return;
          }
        }
        matches.push([key, value]);
      };
      ObjectMap2.prototype.delete = function(key) {
        var id2 = this.mapKeyFn(key);
        var matches = this.inner[id2];
        if (matches === void 0) {
          return false;
        }
        for (var i = 0; i < matches.length; i++) {
          if (this.equalsFn(matches[i][0], key)) {
            if (matches.length === 1) {
              delete this.inner[id2];
            } else {
              matches.splice(i, 1);
            }
            return true;
          }
        }
        return false;
      };
      ObjectMap2.prototype.forEach = function(fn) {
        forEach(this.inner, function(_, entries) {
          for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
            var _f = entries_1[_i], k = _f[0], v = _f[1];
            fn(k, v);
          }
        });
      };
      ObjectMap2.prototype.isEmpty = function() {
        return isEmpty(this.inner);
      };
      return ObjectMap2;
    }();
    var PersistencePromise = function() {
      function PersistencePromise2(callback) {
        var _this = this;
        this.nextCallback = null;
        this.catchCallback = null;
        this.result = void 0;
        this.error = void 0;
        this.isDone = false;
        this.callbackAttached = false;
        callback(function(value) {
          _this.isDone = true;
          _this.result = value;
          if (_this.nextCallback) {
            _this.nextCallback(value);
          }
        }, function(error2) {
          _this.isDone = true;
          _this.error = error2;
          if (_this.catchCallback) {
            _this.catchCallback(error2);
          }
        });
      }
      PersistencePromise2.prototype.catch = function(fn) {
        return this.next(void 0, fn);
      };
      PersistencePromise2.prototype.next = function(nextFn, catchFn) {
        var _this = this;
        if (this.callbackAttached) {
          fail();
        }
        this.callbackAttached = true;
        if (this.isDone) {
          if (!this.error) {
            return this.wrapSuccess(nextFn, this.result);
          } else {
            return this.wrapFailure(catchFn, this.error);
          }
        } else {
          return new PersistencePromise2(function(resolve2, reject) {
            _this.nextCallback = function(value) {
              _this.wrapSuccess(nextFn, value).next(resolve2, reject);
            };
            _this.catchCallback = function(error2) {
              _this.wrapFailure(catchFn, error2).next(resolve2, reject);
            };
          });
        }
      };
      PersistencePromise2.prototype.toPromise = function() {
        var _this = this;
        return new Promise(function(resolve2, reject) {
          _this.next(resolve2, reject);
        });
      };
      PersistencePromise2.prototype.wrapUserFunction = function(fn) {
        try {
          var result = fn();
          if (result instanceof PersistencePromise2) {
            return result;
          } else {
            return PersistencePromise2.resolve(result);
          }
        } catch (e) {
          return PersistencePromise2.reject(e);
        }
      };
      PersistencePromise2.prototype.wrapSuccess = function(nextFn, value) {
        if (nextFn) {
          return this.wrapUserFunction(function() {
            return nextFn(value);
          });
        } else {
          return PersistencePromise2.resolve(value);
        }
      };
      PersistencePromise2.prototype.wrapFailure = function(catchFn, error2) {
        if (catchFn) {
          return this.wrapUserFunction(function() {
            return catchFn(error2);
          });
        } else {
          return PersistencePromise2.reject(error2);
        }
      };
      PersistencePromise2.resolve = function(result) {
        return new PersistencePromise2(function(resolve2, reject) {
          resolve2(result);
        });
      };
      PersistencePromise2.reject = function(error2) {
        return new PersistencePromise2(function(resolve2, reject) {
          reject(error2);
        });
      };
      PersistencePromise2.waitFor = function(all) {
        return new PersistencePromise2(function(resolve2, reject) {
          var expectedCount = 0;
          var resolvedCount = 0;
          var done = false;
          all.forEach(function(element) {
            ++expectedCount;
            element.next(function() {
              ++resolvedCount;
              if (done && resolvedCount === expectedCount) {
                resolve2();
              }
            }, function(err) {
              return reject(err);
            });
          });
          done = true;
          if (resolvedCount === expectedCount) {
            resolve2();
          }
        });
      };
      PersistencePromise2.or = function(predicates) {
        var p = PersistencePromise2.resolve(false);
        var _loop_3 = function(predicate2) {
          p = p.next(function(isTrue) {
            if (isTrue) {
              return PersistencePromise2.resolve(isTrue);
            } else {
              return predicate2();
            }
          });
        };
        for (var _i = 0, predicates_1 = predicates; _i < predicates_1.length; _i++) {
          var predicate = predicates_1[_i];
          _loop_3(predicate);
        }
        return p;
      };
      PersistencePromise2.forEach = function(collection, f) {
        var _this = this;
        var promises = [];
        collection.forEach(function(r, s2) {
          promises.push(f.call(_this, r, s2));
        });
        return this.waitFor(promises);
      };
      return PersistencePromise2;
    }();
    var LocalDocumentsView = function() {
      function LocalDocumentsView2(remoteDocumentCache, mutationQueue, indexManager) {
        this.remoteDocumentCache = remoteDocumentCache;
        this.mutationQueue = mutationQueue;
        this.indexManager = indexManager;
      }
      LocalDocumentsView2.prototype.getDocument = function(transaction, key) {
        var _this = this;
        return this.mutationQueue.getAllMutationBatchesAffectingDocumentKey(transaction, key).next(function(batches) {
          return _this.getDocumentInternal(transaction, key, batches);
        });
      };
      LocalDocumentsView2.prototype.getDocumentInternal = function(transaction, key, inBatches) {
        return this.remoteDocumentCache.getEntry(transaction, key).next(function(doc) {
          for (var _i = 0, inBatches_1 = inBatches; _i < inBatches_1.length; _i++) {
            var batch = inBatches_1[_i];
            doc = batch.applyToLocalView(key, doc);
          }
          return doc;
        });
      };
      LocalDocumentsView2.prototype.applyLocalMutationsToDocuments = function(transaction, docs, batches) {
        var results = nullableMaybeDocumentMap();
        docs.forEach(function(key, localView) {
          for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {
            var batch = batches_1[_i];
            localView = batch.applyToLocalView(key, localView);
          }
          results = results.insert(key, localView);
        });
        return results;
      };
      LocalDocumentsView2.prototype.getDocuments = function(transaction, keys) {
        var _this = this;
        return this.remoteDocumentCache.getEntries(transaction, keys).next(function(docs) {
          return _this.getLocalViewOfDocuments(transaction, docs);
        });
      };
      LocalDocumentsView2.prototype.getLocalViewOfDocuments = function(transaction, baseDocs) {
        var _this = this;
        return this.mutationQueue.getAllMutationBatchesAffectingDocumentKeys(transaction, baseDocs).next(function(batches) {
          var docs = _this.applyLocalMutationsToDocuments(transaction, baseDocs, batches);
          var results = maybeDocumentMap();
          docs.forEach(function(key, maybeDoc) {
            if (!maybeDoc) {
              maybeDoc = new NoDocument(key, SnapshotVersion.min());
            }
            results = results.insert(key, maybeDoc);
          });
          return results;
        });
      };
      LocalDocumentsView2.prototype.getDocumentsMatchingQuery = function(transaction, query, sinceReadTime) {
        if (isDocumentQuery(query)) {
          return this.getDocumentsMatchingDocumentQuery(transaction, query.path);
        } else if (isCollectionGroupQuery(query)) {
          return this.getDocumentsMatchingCollectionGroupQuery(transaction, query, sinceReadTime);
        } else {
          return this.getDocumentsMatchingCollectionQuery(transaction, query, sinceReadTime);
        }
      };
      LocalDocumentsView2.prototype.getDocumentsMatchingDocumentQuery = function(transaction, docPath) {
        return this.getDocument(transaction, new DocumentKey(docPath)).next(function(maybeDoc) {
          var result = documentMap();
          if (maybeDoc instanceof Document) {
            result = result.insert(maybeDoc.key, maybeDoc);
          }
          return result;
        });
      };
      LocalDocumentsView2.prototype.getDocumentsMatchingCollectionGroupQuery = function(transaction, query, sinceReadTime) {
        var _this = this;
        var collectionId = query.collectionGroup;
        var results = documentMap();
        return this.indexManager.getCollectionParents(transaction, collectionId).next(function(parents) {
          return PersistencePromise.forEach(parents, function(parent) {
            var collectionQuery = asCollectionQueryAtPath(query, parent.child(collectionId));
            return _this.getDocumentsMatchingCollectionQuery(transaction, collectionQuery, sinceReadTime).next(function(r) {
              r.forEach(function(key, doc) {
                results = results.insert(key, doc);
              });
            });
          }).next(function() {
            return results;
          });
        });
      };
      LocalDocumentsView2.prototype.getDocumentsMatchingCollectionQuery = function(transaction, query, sinceReadTime) {
        var _this = this;
        var results;
        var mutationBatches;
        return this.remoteDocumentCache.getDocumentsMatchingQuery(transaction, query, sinceReadTime).next(function(queryResults) {
          results = queryResults;
          return _this.mutationQueue.getAllMutationBatchesAffectingQuery(transaction, query);
        }).next(function(matchingMutationBatches) {
          mutationBatches = matchingMutationBatches;
          return _this.addMissingBaseDocuments(transaction, mutationBatches, results).next(function(mergedDocuments) {
            results = mergedDocuments;
            for (var _i = 0, mutationBatches_1 = mutationBatches; _i < mutationBatches_1.length; _i++) {
              var batch = mutationBatches_1[_i];
              for (var _f = 0, _g = batch.mutations; _f < _g.length; _f++) {
                var mutation = _g[_f];
                var key = mutation.key;
                var baseDoc = results.get(key);
                var mutatedDoc = applyMutationToLocalView(mutation, baseDoc, baseDoc, batch.localWriteTime);
                if (mutatedDoc instanceof Document) {
                  results = results.insert(key, mutatedDoc);
                } else {
                  results = results.remove(key);
                }
              }
            }
          });
        }).next(function() {
          results.forEach(function(key, doc) {
            if (!queryMatches(query, doc)) {
              results = results.remove(key);
            }
          });
          return results;
        });
      };
      LocalDocumentsView2.prototype.addMissingBaseDocuments = function(transaction, matchingMutationBatches, existingDocuments) {
        var missingBaseDocEntriesForPatching = documentKeySet();
        for (var _i = 0, matchingMutationBatches_1 = matchingMutationBatches; _i < matchingMutationBatches_1.length; _i++) {
          var batch = matchingMutationBatches_1[_i];
          for (var _f = 0, _g = batch.mutations; _f < _g.length; _f++) {
            var mutation = _g[_f];
            if (mutation instanceof PatchMutation && existingDocuments.get(mutation.key) === null) {
              missingBaseDocEntriesForPatching = missingBaseDocEntriesForPatching.add(mutation.key);
            }
          }
        }
        var mergedDocuments = existingDocuments;
        return this.remoteDocumentCache.getEntries(transaction, missingBaseDocEntriesForPatching).next(function(missingBaseDocs) {
          missingBaseDocs.forEach(function(key, doc) {
            if (doc !== null && doc instanceof Document) {
              mergedDocuments = mergedDocuments.insert(key, doc);
            }
          });
          return mergedDocuments;
        });
      };
      return LocalDocumentsView2;
    }();
    var PRIMARY_LEASE_LOST_ERROR_MSG = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.";
    var PersistenceTransaction = function() {
      function PersistenceTransaction2() {
        this.onCommittedListeners = [];
      }
      PersistenceTransaction2.prototype.addOnCommittedListener = function(listener) {
        this.onCommittedListeners.push(listener);
      };
      PersistenceTransaction2.prototype.raiseOnCommittedEvent = function() {
        this.onCommittedListeners.forEach(function(listener) {
          return listener();
        });
      };
      return PersistenceTransaction2;
    }();
    var TargetData = function() {
      function TargetData2(target, targetId, purpose, sequenceNumber, snapshotVersion, lastLimboFreeSnapshotVersion, resumeToken) {
        if (snapshotVersion === void 0) {
          snapshotVersion = SnapshotVersion.min();
        }
        if (lastLimboFreeSnapshotVersion === void 0) {
          lastLimboFreeSnapshotVersion = SnapshotVersion.min();
        }
        if (resumeToken === void 0) {
          resumeToken = ByteString.EMPTY_BYTE_STRING;
        }
        this.target = target;
        this.targetId = targetId;
        this.purpose = purpose;
        this.sequenceNumber = sequenceNumber;
        this.snapshotVersion = snapshotVersion;
        this.lastLimboFreeSnapshotVersion = lastLimboFreeSnapshotVersion;
        this.resumeToken = resumeToken;
      }
      TargetData2.prototype.withSequenceNumber = function(sequenceNumber) {
        return new TargetData2(this.target, this.targetId, this.purpose, sequenceNumber, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken);
      };
      TargetData2.prototype.withResumeToken = function(resumeToken, snapshotVersion) {
        return new TargetData2(this.target, this.targetId, this.purpose, this.sequenceNumber, snapshotVersion, this.lastLimboFreeSnapshotVersion, resumeToken);
      };
      TargetData2.prototype.withLastLimboFreeSnapshotVersion = function(lastLimboFreeSnapshotVersion) {
        return new TargetData2(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, lastLimboFreeSnapshotVersion, this.resumeToken);
      };
      return TargetData2;
    }();
    var escapeChar = "";
    var encodedSeparatorChar = "";
    var encodedNul = "";
    var encodedEscape = "";
    function encodeResourcePath(path2) {
      var result = "";
      for (var i = 0; i < path2.length; i++) {
        if (result.length > 0) {
          result = encodeSeparator(result);
        }
        result = encodeSegment(path2.get(i), result);
      }
      return encodeSeparator(result);
    }
    function encodeSegment(segment, resultBuf) {
      var result = resultBuf;
      var length = segment.length;
      for (var i = 0; i < length; i++) {
        var c = segment.charAt(i);
        switch (c) {
          case "\0":
            result += escapeChar + encodedNul;
            break;
          case escapeChar:
            result += escapeChar + encodedEscape;
            break;
          default:
            result += c;
        }
      }
      return result;
    }
    function encodeSeparator(result) {
      return result + escapeChar + encodedSeparatorChar;
    }
    function decodeResourcePath(path2) {
      var length = path2.length;
      hardAssert(length >= 2);
      if (length === 2) {
        hardAssert(path2.charAt(0) === escapeChar && path2.charAt(1) === encodedSeparatorChar);
        return ResourcePath.emptyPath();
      }
      var lastReasonableEscapeIndex = length - 2;
      var segments = [];
      var segmentBuilder = "";
      for (var start = 0; start < length; ) {
        var end = path2.indexOf(escapeChar, start);
        if (end < 0 || end > lastReasonableEscapeIndex) {
          fail();
        }
        var next = path2.charAt(end + 1);
        switch (next) {
          case encodedSeparatorChar:
            var currentPiece = path2.substring(start, end);
            var segment = void 0;
            if (segmentBuilder.length === 0) {
              segment = currentPiece;
            } else {
              segmentBuilder += currentPiece;
              segment = segmentBuilder;
              segmentBuilder = "";
            }
            segments.push(segment);
            break;
          case encodedNul:
            segmentBuilder += path2.substring(start, end);
            segmentBuilder += "\0";
            break;
          case encodedEscape:
            segmentBuilder += path2.substring(start, end + 1);
            break;
          default:
            fail();
        }
        start = end + 2;
      }
      return new ResourcePath(segments);
    }
    var LocalSerializer = function() {
      function LocalSerializer2(remoteSerializer) {
        this.remoteSerializer = remoteSerializer;
      }
      return LocalSerializer2;
    }();
    function fromDbRemoteDocument(localSerializer, remoteDoc) {
      if (remoteDoc.document) {
        return fromDocument(localSerializer.remoteSerializer, remoteDoc.document, !!remoteDoc.hasCommittedMutations);
      } else if (remoteDoc.noDocument) {
        var key = DocumentKey.fromSegments(remoteDoc.noDocument.path);
        var version_3 = fromDbTimestamp(remoteDoc.noDocument.readTime);
        return new NoDocument(key, version_3, {
          hasCommittedMutations: !!remoteDoc.hasCommittedMutations
        });
      } else if (remoteDoc.unknownDocument) {
        var key = DocumentKey.fromSegments(remoteDoc.unknownDocument.path);
        var version_4 = fromDbTimestamp(remoteDoc.unknownDocument.version);
        return new UnknownDocument(key, version_4);
      } else {
        return fail();
      }
    }
    function toDbRemoteDocument(localSerializer, maybeDoc, readTime) {
      var dbReadTime = toDbTimestampKey(readTime);
      var parentPath = maybeDoc.key.path.popLast().toArray();
      if (maybeDoc instanceof Document) {
        var doc = toDocument(localSerializer.remoteSerializer, maybeDoc);
        var hasCommittedMutations = maybeDoc.hasCommittedMutations;
        return new DbRemoteDocument(null, null, doc, hasCommittedMutations, dbReadTime, parentPath);
      } else if (maybeDoc instanceof NoDocument) {
        var path2 = maybeDoc.key.path.toArray();
        var readTime_1 = toDbTimestamp(maybeDoc.version);
        var hasCommittedMutations = maybeDoc.hasCommittedMutations;
        return new DbRemoteDocument(null, new DbNoDocument(path2, readTime_1), null, hasCommittedMutations, dbReadTime, parentPath);
      } else if (maybeDoc instanceof UnknownDocument) {
        var path2 = maybeDoc.key.path.toArray();
        var readTime_2 = toDbTimestamp(maybeDoc.version);
        return new DbRemoteDocument(new DbUnknownDocument(path2, readTime_2), null, null, true, dbReadTime, parentPath);
      } else {
        return fail();
      }
    }
    function toDbTimestampKey(snapshotVersion) {
      var timestamp = snapshotVersion.toTimestamp();
      return [timestamp.seconds, timestamp.nanoseconds];
    }
    function fromDbTimestampKey(dbTimestampKey) {
      var timestamp = new Timestamp(dbTimestampKey[0], dbTimestampKey[1]);
      return SnapshotVersion.fromTimestamp(timestamp);
    }
    function toDbTimestamp(snapshotVersion) {
      var timestamp = snapshotVersion.toTimestamp();
      return new DbTimestamp(timestamp.seconds, timestamp.nanoseconds);
    }
    function fromDbTimestamp(dbTimestamp) {
      var timestamp = new Timestamp(dbTimestamp.seconds, dbTimestamp.nanoseconds);
      return SnapshotVersion.fromTimestamp(timestamp);
    }
    function toDbMutationBatch(localSerializer, userId, batch) {
      var serializedBaseMutations = batch.baseMutations.map(function(m) {
        return toMutation(localSerializer.remoteSerializer, m);
      });
      var serializedMutations = batch.mutations.map(function(m) {
        return toMutation(localSerializer.remoteSerializer, m);
      });
      return new DbMutationBatch(userId, batch.batchId, batch.localWriteTime.toMillis(), serializedBaseMutations, serializedMutations);
    }
    function fromDbMutationBatch(localSerializer, dbBatch) {
      var baseMutations = (dbBatch.baseMutations || []).map(function(m) {
        return fromMutation(localSerializer.remoteSerializer, m);
      });
      var mutations = dbBatch.mutations.map(function(m) {
        return fromMutation(localSerializer.remoteSerializer, m);
      });
      var timestamp = Timestamp.fromMillis(dbBatch.localWriteTimeMs);
      return new MutationBatch(dbBatch.batchId, timestamp, baseMutations, mutations);
    }
    function fromDbTarget(dbTarget) {
      var version2 = fromDbTimestamp(dbTarget.readTime);
      var lastLimboFreeSnapshotVersion = dbTarget.lastLimboFreeSnapshotVersion !== void 0 ? fromDbTimestamp(dbTarget.lastLimboFreeSnapshotVersion) : SnapshotVersion.min();
      var target;
      if (isDocumentQuery$1(dbTarget.query)) {
        target = fromDocumentsTarget(dbTarget.query);
      } else {
        target = fromQueryTarget(dbTarget.query);
      }
      return new TargetData(target, dbTarget.targetId, 0, dbTarget.lastListenSequenceNumber, version2, lastLimboFreeSnapshotVersion, ByteString.fromBase64String(dbTarget.resumeToken));
    }
    function toDbTarget(localSerializer, targetData) {
      var dbTimestamp = toDbTimestamp(targetData.snapshotVersion);
      var dbLastLimboFreeTimestamp = toDbTimestamp(targetData.lastLimboFreeSnapshotVersion);
      var queryProto;
      if (isDocumentTarget(targetData.target)) {
        queryProto = toDocumentsTarget(localSerializer.remoteSerializer, targetData.target);
      } else {
        queryProto = toQueryTarget(localSerializer.remoteSerializer, targetData.target);
      }
      var resumeToken = targetData.resumeToken.toBase64();
      return new DbTarget(targetData.targetId, canonifyTarget(targetData.target), dbTimestamp, resumeToken, targetData.sequenceNumber, dbLastLimboFreeTimestamp, queryProto);
    }
    function isDocumentQuery$1(dbQuery) {
      return dbQuery.documents !== void 0;
    }
    var IndexedDbMutationQueue = function() {
      function IndexedDbMutationQueue2(userId, serializer, indexManager, referenceDelegate) {
        this.userId = userId;
        this.serializer = serializer;
        this.indexManager = indexManager;
        this.referenceDelegate = referenceDelegate;
        this.documentKeysByBatchId = {};
      }
      IndexedDbMutationQueue2.forUser = function(user, serializer, indexManager, referenceDelegate) {
        hardAssert(user.uid !== "");
        var userId = user.isAuthenticated() ? user.uid : "";
        return new IndexedDbMutationQueue2(userId, serializer, indexManager, referenceDelegate);
      };
      IndexedDbMutationQueue2.prototype.checkEmpty = function(transaction) {
        var empty2 = true;
        var range = IDBKeyRange.bound([this.userId, Number.NEGATIVE_INFINITY], [this.userId, Number.POSITIVE_INFINITY]);
        return mutationsStore(transaction).iterate({ index: DbMutationBatch.userMutationsIndex, range }, function(key, value, control) {
          empty2 = false;
          control.done();
        }).next(function() {
          return empty2;
        });
      };
      IndexedDbMutationQueue2.prototype.addMutationBatch = function(transaction, localWriteTime, baseMutations, mutations) {
        var _this = this;
        var documentStore = documentMutationsStore(transaction);
        var mutationStore = mutationsStore(transaction);
        return mutationStore.add({}).next(function(batchId) {
          hardAssert(typeof batchId === "number");
          var batch = new MutationBatch(batchId, localWriteTime, baseMutations, mutations);
          var dbBatch = toDbMutationBatch(_this.serializer, _this.userId, batch);
          var promises = [];
          var collectionParents = new SortedSet(function(l, r) {
            return primitiveComparator(l.canonicalString(), r.canonicalString());
          });
          for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {
            var mutation = mutations_1[_i];
            var indexKey = DbDocumentMutation.key(_this.userId, mutation.key.path, batchId);
            collectionParents = collectionParents.add(mutation.key.path.popLast());
            promises.push(mutationStore.put(dbBatch));
            promises.push(documentStore.put(indexKey, DbDocumentMutation.PLACEHOLDER));
          }
          collectionParents.forEach(function(parent) {
            promises.push(_this.indexManager.addToCollectionParentIndex(transaction, parent));
          });
          transaction.addOnCommittedListener(function() {
            _this.documentKeysByBatchId[batchId] = batch.keys();
          });
          return PersistencePromise.waitFor(promises).next(function() {
            return batch;
          });
        });
      };
      IndexedDbMutationQueue2.prototype.lookupMutationBatch = function(transaction, batchId) {
        var _this = this;
        return mutationsStore(transaction).get(batchId).next(function(dbBatch) {
          if (dbBatch) {
            hardAssert(dbBatch.userId === _this.userId);
            return fromDbMutationBatch(_this.serializer, dbBatch);
          }
          return null;
        });
      };
      IndexedDbMutationQueue2.prototype.lookupMutationKeys = function(transaction, batchId) {
        var _this = this;
        if (this.documentKeysByBatchId[batchId]) {
          return PersistencePromise.resolve(this.documentKeysByBatchId[batchId]);
        } else {
          return this.lookupMutationBatch(transaction, batchId).next(function(batch) {
            if (batch) {
              var keys = batch.keys();
              _this.documentKeysByBatchId[batchId] = keys;
              return keys;
            } else {
              return null;
            }
          });
        }
      };
      IndexedDbMutationQueue2.prototype.getNextMutationBatchAfterBatchId = function(transaction, batchId) {
        var _this = this;
        var nextBatchId = batchId + 1;
        var range = IDBKeyRange.lowerBound([this.userId, nextBatchId]);
        var foundBatch = null;
        return mutationsStore(transaction).iterate({ index: DbMutationBatch.userMutationsIndex, range }, function(key, dbBatch, control) {
          if (dbBatch.userId === _this.userId) {
            hardAssert(dbBatch.batchId >= nextBatchId);
            foundBatch = fromDbMutationBatch(_this.serializer, dbBatch);
          }
          control.done();
        }).next(function() {
          return foundBatch;
        });
      };
      IndexedDbMutationQueue2.prototype.getHighestUnacknowledgedBatchId = function(transaction) {
        var range = IDBKeyRange.upperBound([
          this.userId,
          Number.POSITIVE_INFINITY
        ]);
        var batchId = BATCHID_UNKNOWN;
        return mutationsStore(transaction).iterate({ index: DbMutationBatch.userMutationsIndex, range, reverse: true }, function(key, dbBatch, control) {
          batchId = dbBatch.batchId;
          control.done();
        }).next(function() {
          return batchId;
        });
      };
      IndexedDbMutationQueue2.prototype.getAllMutationBatches = function(transaction) {
        var _this = this;
        var range = IDBKeyRange.bound([this.userId, BATCHID_UNKNOWN], [this.userId, Number.POSITIVE_INFINITY]);
        return mutationsStore(transaction).loadAll(DbMutationBatch.userMutationsIndex, range).next(function(dbBatches) {
          return dbBatches.map(function(dbBatch) {
            return fromDbMutationBatch(_this.serializer, dbBatch);
          });
        });
      };
      IndexedDbMutationQueue2.prototype.getAllMutationBatchesAffectingDocumentKey = function(transaction, documentKey) {
        var _this = this;
        var indexPrefix = DbDocumentMutation.prefixForPath(this.userId, documentKey.path);
        var indexStart = IDBKeyRange.lowerBound(indexPrefix);
        var results = [];
        return documentMutationsStore(transaction).iterate({ range: indexStart }, function(indexKey, _, control) {
          var userID = indexKey[0], encodedPath = indexKey[1], batchId = indexKey[2];
          var path2 = decodeResourcePath(encodedPath);
          if (userID !== _this.userId || !documentKey.path.isEqual(path2)) {
            control.done();
            return;
          }
          return mutationsStore(transaction).get(batchId).next(function(mutation) {
            if (!mutation) {
              throw fail();
            }
            hardAssert(mutation.userId === _this.userId);
            results.push(fromDbMutationBatch(_this.serializer, mutation));
          });
        }).next(function() {
          return results;
        });
      };
      IndexedDbMutationQueue2.prototype.getAllMutationBatchesAffectingDocumentKeys = function(transaction, documentKeys) {
        var _this = this;
        var uniqueBatchIDs = new SortedSet(primitiveComparator);
        var promises = [];
        documentKeys.forEach(function(documentKey) {
          var indexStart = DbDocumentMutation.prefixForPath(_this.userId, documentKey.path);
          var range = IDBKeyRange.lowerBound(indexStart);
          var promise = documentMutationsStore(transaction).iterate({ range }, function(indexKey, _, control) {
            var userID = indexKey[0], encodedPath = indexKey[1], batchID = indexKey[2];
            var path2 = decodeResourcePath(encodedPath);
            if (userID !== _this.userId || !documentKey.path.isEqual(path2)) {
              control.done();
              return;
            }
            uniqueBatchIDs = uniqueBatchIDs.add(batchID);
          });
          promises.push(promise);
        });
        return PersistencePromise.waitFor(promises).next(function() {
          return _this.lookupMutationBatches(transaction, uniqueBatchIDs);
        });
      };
      IndexedDbMutationQueue2.prototype.getAllMutationBatchesAffectingQuery = function(transaction, query) {
        var _this = this;
        var queryPath = query.path;
        var immediateChildrenLength = queryPath.length + 1;
        var indexPrefix = DbDocumentMutation.prefixForPath(this.userId, queryPath);
        var indexStart = IDBKeyRange.lowerBound(indexPrefix);
        var uniqueBatchIDs = new SortedSet(primitiveComparator);
        return documentMutationsStore(transaction).iterate({ range: indexStart }, function(indexKey, _, control) {
          var userID = indexKey[0], encodedPath = indexKey[1], batchID = indexKey[2];
          var path2 = decodeResourcePath(encodedPath);
          if (userID !== _this.userId || !queryPath.isPrefixOf(path2)) {
            control.done();
            return;
          }
          if (path2.length !== immediateChildrenLength) {
            return;
          }
          uniqueBatchIDs = uniqueBatchIDs.add(batchID);
        }).next(function() {
          return _this.lookupMutationBatches(transaction, uniqueBatchIDs);
        });
      };
      IndexedDbMutationQueue2.prototype.lookupMutationBatches = function(transaction, batchIDs) {
        var _this = this;
        var results = [];
        var promises = [];
        batchIDs.forEach(function(batchId) {
          promises.push(mutationsStore(transaction).get(batchId).next(function(mutation) {
            if (mutation === null) {
              throw fail();
            }
            hardAssert(mutation.userId === _this.userId);
            results.push(fromDbMutationBatch(_this.serializer, mutation));
          }));
        });
        return PersistencePromise.waitFor(promises).next(function() {
          return results;
        });
      };
      IndexedDbMutationQueue2.prototype.removeMutationBatch = function(transaction, batch) {
        var _this = this;
        return removeMutationBatch(transaction.simpleDbTransaction, this.userId, batch).next(function(removedDocuments) {
          transaction.addOnCommittedListener(function() {
            _this.removeCachedMutationKeys(batch.batchId);
          });
          return PersistencePromise.forEach(removedDocuments, function(key) {
            return _this.referenceDelegate.markPotentiallyOrphaned(transaction, key);
          });
        });
      };
      IndexedDbMutationQueue2.prototype.removeCachedMutationKeys = function(batchId) {
        delete this.documentKeysByBatchId[batchId];
      };
      IndexedDbMutationQueue2.prototype.performConsistencyCheck = function(txn) {
        var _this = this;
        return this.checkEmpty(txn).next(function(empty2) {
          if (!empty2) {
            return PersistencePromise.resolve();
          }
          var startRange = IDBKeyRange.lowerBound(DbDocumentMutation.prefixForUser(_this.userId));
          var danglingMutationReferences = [];
          return documentMutationsStore(txn).iterate({ range: startRange }, function(key, _, control) {
            var userID = key[0];
            if (userID !== _this.userId) {
              control.done();
              return;
            } else {
              var path2 = decodeResourcePath(key[1]);
              danglingMutationReferences.push(path2);
            }
          }).next(function() {
            hardAssert(danglingMutationReferences.length === 0);
          });
        });
      };
      IndexedDbMutationQueue2.prototype.containsKey = function(txn, key) {
        return mutationQueueContainsKey(txn, this.userId, key);
      };
      IndexedDbMutationQueue2.prototype.getMutationQueueMetadata = function(transaction) {
        var _this = this;
        return mutationQueuesStore(transaction).get(this.userId).next(function(metadata) {
          return metadata || new DbMutationQueue(_this.userId, BATCHID_UNKNOWN, "");
        });
      };
      return IndexedDbMutationQueue2;
    }();
    function mutationQueueContainsKey(txn, userId, key) {
      var indexKey = DbDocumentMutation.prefixForPath(userId, key.path);
      var encodedPath = indexKey[1];
      var startRange = IDBKeyRange.lowerBound(indexKey);
      var containsKey = false;
      return documentMutationsStore(txn).iterate({ range: startRange, keysOnly: true }, function(key2, value, control) {
        var userID = key2[0], keyPath = key2[1], _ = key2[2];
        if (userID === userId && keyPath === encodedPath) {
          containsKey = true;
        }
        control.done();
      }).next(function() {
        return containsKey;
      });
    }
    function mutationQueuesContainKey(txn, docKey) {
      var found = false;
      return mutationQueuesStore(txn).iterateSerial(function(userId) {
        return mutationQueueContainsKey(txn, userId, docKey).next(function(containsKey) {
          if (containsKey) {
            found = true;
          }
          return PersistencePromise.resolve(!containsKey);
        });
      }).next(function() {
        return found;
      });
    }
    function removeMutationBatch(txn, userId, batch) {
      var mutationStore = txn.store(DbMutationBatch.store);
      var indexTxn = txn.store(DbDocumentMutation.store);
      var promises = [];
      var range = IDBKeyRange.only(batch.batchId);
      var numDeleted = 0;
      var removePromise = mutationStore.iterate({ range }, function(key, value, control) {
        numDeleted++;
        return control.delete();
      });
      promises.push(removePromise.next(function() {
        hardAssert(numDeleted === 1);
      }));
      var removedDocuments = [];
      for (var _i = 0, _f = batch.mutations; _i < _f.length; _i++) {
        var mutation = _f[_i];
        var indexKey = DbDocumentMutation.key(userId, mutation.key.path, batch.batchId);
        promises.push(indexTxn.delete(indexKey));
        removedDocuments.push(mutation.key);
      }
      return PersistencePromise.waitFor(promises).next(function() {
        return removedDocuments;
      });
    }
    function mutationsStore(txn) {
      return IndexedDbPersistence.getStore(txn, DbMutationBatch.store);
    }
    function documentMutationsStore(txn) {
      return IndexedDbPersistence.getStore(txn, DbDocumentMutation.store);
    }
    function mutationQueuesStore(txn) {
      return IndexedDbPersistence.getStore(txn, DbMutationQueue.store);
    }
    var RemoteDocumentChangeBuffer = function() {
      function RemoteDocumentChangeBuffer2() {
        this.changes = new ObjectMap(function(key) {
          return key.toString();
        }, function(l, r) {
          return l.isEqual(r);
        });
        this.changesApplied = false;
      }
      Object.defineProperty(RemoteDocumentChangeBuffer2.prototype, "readTime", {
        get: function() {
          return this._readTime;
        },
        set: function(value) {
          this._readTime = value;
        },
        enumerable: false,
        configurable: true
      });
      RemoteDocumentChangeBuffer2.prototype.addEntry = function(maybeDocument, readTime) {
        this.assertNotApplied();
        this.readTime = readTime;
        this.changes.set(maybeDocument.key, maybeDocument);
      };
      RemoteDocumentChangeBuffer2.prototype.removeEntry = function(key, readTime) {
        this.assertNotApplied();
        if (readTime) {
          this.readTime = readTime;
        }
        this.changes.set(key, null);
      };
      RemoteDocumentChangeBuffer2.prototype.getEntry = function(transaction, documentKey) {
        this.assertNotApplied();
        var bufferedEntry = this.changes.get(documentKey);
        if (bufferedEntry !== void 0) {
          return PersistencePromise.resolve(bufferedEntry);
        } else {
          return this.getFromCache(transaction, documentKey);
        }
      };
      RemoteDocumentChangeBuffer2.prototype.getEntries = function(transaction, documentKeys) {
        return this.getAllFromCache(transaction, documentKeys);
      };
      RemoteDocumentChangeBuffer2.prototype.apply = function(transaction) {
        this.assertNotApplied();
        this.changesApplied = true;
        return this.applyChanges(transaction);
      };
      RemoteDocumentChangeBuffer2.prototype.assertNotApplied = function() {
      };
      return RemoteDocumentChangeBuffer2;
    }();
    var IndexedDbRemoteDocumentCacheImpl = function() {
      function IndexedDbRemoteDocumentCacheImpl2(serializer, indexManager) {
        this.serializer = serializer;
        this.indexManager = indexManager;
      }
      IndexedDbRemoteDocumentCacheImpl2.prototype.addEntry = function(transaction, key, doc) {
        var documentStore = remoteDocumentsStore(transaction);
        return documentStore.put(dbKey(key), doc);
      };
      IndexedDbRemoteDocumentCacheImpl2.prototype.removeEntry = function(transaction, documentKey) {
        var store = remoteDocumentsStore(transaction);
        var key = dbKey(documentKey);
        return store.delete(key);
      };
      IndexedDbRemoteDocumentCacheImpl2.prototype.updateMetadata = function(transaction, sizeDelta) {
        var _this = this;
        return this.getMetadata(transaction).next(function(metadata) {
          metadata.byteSize += sizeDelta;
          return _this.setMetadata(transaction, metadata);
        });
      };
      IndexedDbRemoteDocumentCacheImpl2.prototype.getEntry = function(transaction, documentKey) {
        var _this = this;
        return remoteDocumentsStore(transaction).get(dbKey(documentKey)).next(function(dbRemoteDoc) {
          return _this.maybeDecodeDocument(dbRemoteDoc);
        });
      };
      IndexedDbRemoteDocumentCacheImpl2.prototype.getSizedEntry = function(transaction, documentKey) {
        var _this = this;
        return remoteDocumentsStore(transaction).get(dbKey(documentKey)).next(function(dbRemoteDoc) {
          var doc = _this.maybeDecodeDocument(dbRemoteDoc);
          return doc ? {
            maybeDocument: doc,
            size: dbDocumentSize(dbRemoteDoc)
          } : null;
        });
      };
      IndexedDbRemoteDocumentCacheImpl2.prototype.getEntries = function(transaction, documentKeys) {
        var _this = this;
        var results = nullableMaybeDocumentMap();
        return this.forEachDbEntry(transaction, documentKeys, function(key, dbRemoteDoc) {
          var doc = _this.maybeDecodeDocument(dbRemoteDoc);
          results = results.insert(key, doc);
        }).next(function() {
          return results;
        });
      };
      IndexedDbRemoteDocumentCacheImpl2.prototype.getSizedEntries = function(transaction, documentKeys) {
        var _this = this;
        var results = nullableMaybeDocumentMap();
        var sizeMap = new SortedMap(DocumentKey.comparator);
        return this.forEachDbEntry(transaction, documentKeys, function(key, dbRemoteDoc) {
          var doc = _this.maybeDecodeDocument(dbRemoteDoc);
          if (doc) {
            results = results.insert(key, doc);
            sizeMap = sizeMap.insert(key, dbDocumentSize(dbRemoteDoc));
          } else {
            results = results.insert(key, null);
            sizeMap = sizeMap.insert(key, 0);
          }
        }).next(function() {
          return { maybeDocuments: results, sizeMap };
        });
      };
      IndexedDbRemoteDocumentCacheImpl2.prototype.forEachDbEntry = function(transaction, documentKeys, callback) {
        if (documentKeys.isEmpty()) {
          return PersistencePromise.resolve();
        }
        var range = IDBKeyRange.bound(documentKeys.first().path.toArray(), documentKeys.last().path.toArray());
        var keyIter = documentKeys.getIterator();
        var nextKey = keyIter.getNext();
        return remoteDocumentsStore(transaction).iterate({ range }, function(potentialKeyRaw, dbRemoteDoc, control) {
          var potentialKey = DocumentKey.fromSegments(potentialKeyRaw);
          while (nextKey && DocumentKey.comparator(nextKey, potentialKey) < 0) {
            callback(nextKey, null);
            nextKey = keyIter.getNext();
          }
          if (nextKey && nextKey.isEqual(potentialKey)) {
            callback(nextKey, dbRemoteDoc);
            nextKey = keyIter.hasNext() ? keyIter.getNext() : null;
          }
          if (nextKey) {
            control.skip(nextKey.path.toArray());
          } else {
            control.done();
          }
        }).next(function() {
          while (nextKey) {
            callback(nextKey, null);
            nextKey = keyIter.hasNext() ? keyIter.getNext() : null;
          }
        });
      };
      IndexedDbRemoteDocumentCacheImpl2.prototype.getDocumentsMatchingQuery = function(transaction, query, sinceReadTime) {
        var _this = this;
        var results = documentMap();
        var immediateChildrenPathLength = query.path.length + 1;
        var iterationOptions = {};
        if (sinceReadTime.isEqual(SnapshotVersion.min())) {
          var startKey = query.path.toArray();
          iterationOptions.range = IDBKeyRange.lowerBound(startKey);
        } else {
          var collectionKey = query.path.toArray();
          var readTimeKey = toDbTimestampKey(sinceReadTime);
          iterationOptions.range = IDBKeyRange.lowerBound([collectionKey, readTimeKey], true);
          iterationOptions.index = DbRemoteDocument.collectionReadTimeIndex;
        }
        return remoteDocumentsStore(transaction).iterate(iterationOptions, function(key, dbRemoteDoc, control) {
          if (key.length !== immediateChildrenPathLength) {
            return;
          }
          var maybeDoc = fromDbRemoteDocument(_this.serializer, dbRemoteDoc);
          if (!query.path.isPrefixOf(maybeDoc.key.path)) {
            control.done();
          } else if (maybeDoc instanceof Document && queryMatches(query, maybeDoc)) {
            results = results.insert(maybeDoc.key, maybeDoc);
          }
        }).next(function() {
          return results;
        });
      };
      IndexedDbRemoteDocumentCacheImpl2.prototype.newChangeBuffer = function(options2) {
        return new IndexedDbRemoteDocumentChangeBuffer(this, !!options2 && options2.trackRemovals);
      };
      IndexedDbRemoteDocumentCacheImpl2.prototype.getSize = function(txn) {
        return this.getMetadata(txn).next(function(metadata) {
          return metadata.byteSize;
        });
      };
      IndexedDbRemoteDocumentCacheImpl2.prototype.getMetadata = function(txn) {
        return documentGlobalStore(txn).get(DbRemoteDocumentGlobal.key).next(function(metadata) {
          hardAssert(!!metadata);
          return metadata;
        });
      };
      IndexedDbRemoteDocumentCacheImpl2.prototype.setMetadata = function(txn, metadata) {
        return documentGlobalStore(txn).put(DbRemoteDocumentGlobal.key, metadata);
      };
      IndexedDbRemoteDocumentCacheImpl2.prototype.maybeDecodeDocument = function(dbRemoteDoc) {
        if (dbRemoteDoc) {
          var doc = fromDbRemoteDocument(this.serializer, dbRemoteDoc);
          if (doc instanceof NoDocument && doc.version.isEqual(SnapshotVersion.min())) {
            return null;
          }
          return doc;
        }
        return null;
      };
      return IndexedDbRemoteDocumentCacheImpl2;
    }();
    function newIndexedDbRemoteDocumentCache(serializer, indexManager) {
      return new IndexedDbRemoteDocumentCacheImpl(serializer, indexManager);
    }
    function remoteDocumentCacheGetNewDocumentChanges(remoteDocumentCache, transaction, sinceReadTime) {
      var remoteDocumentCacheImpl = debugCast(remoteDocumentCache);
      var changedDocs = maybeDocumentMap();
      var lastReadTime = toDbTimestampKey(sinceReadTime);
      var documentsStore = remoteDocumentsStore(transaction);
      var range = IDBKeyRange.lowerBound(lastReadTime, true);
      return documentsStore.iterate({ index: DbRemoteDocument.readTimeIndex, range }, function(_, dbRemoteDoc) {
        var doc = fromDbRemoteDocument(remoteDocumentCacheImpl.serializer, dbRemoteDoc);
        changedDocs = changedDocs.insert(doc.key, doc);
        lastReadTime = dbRemoteDoc.readTime;
      }).next(function() {
        return {
          changedDocs,
          readTime: fromDbTimestampKey(lastReadTime)
        };
      });
    }
    function remoteDocumentCacheGetLastReadTime(transaction) {
      var documentsStore = remoteDocumentsStore(transaction);
      var readTime = SnapshotVersion.min();
      return documentsStore.iterate({ index: DbRemoteDocument.readTimeIndex, reverse: true }, function(key, dbRemoteDoc, control) {
        if (dbRemoteDoc.readTime) {
          readTime = fromDbTimestampKey(dbRemoteDoc.readTime);
        }
        control.done();
      }).next(function() {
        return readTime;
      });
    }
    var IndexedDbRemoteDocumentChangeBuffer = function(_super) {
      tslib.__extends(IndexedDbRemoteDocumentChangeBuffer2, _super);
      function IndexedDbRemoteDocumentChangeBuffer2(documentCache, trackRemovals) {
        var _this = _super.call(this) || this;
        _this.documentCache = documentCache;
        _this.trackRemovals = trackRemovals;
        _this.documentSizes = new ObjectMap(function(key) {
          return key.toString();
        }, function(l, r) {
          return l.isEqual(r);
        });
        return _this;
      }
      IndexedDbRemoteDocumentChangeBuffer2.prototype.applyChanges = function(transaction) {
        var _this = this;
        var promises = [];
        var sizeDelta = 0;
        var collectionParents = new SortedSet(function(l, r) {
          return primitiveComparator(l.canonicalString(), r.canonicalString());
        });
        this.changes.forEach(function(key, maybeDocument) {
          var previousSize = _this.documentSizes.get(key);
          if (maybeDocument) {
            var doc = toDbRemoteDocument(_this.documentCache.serializer, maybeDocument, _this.readTime);
            collectionParents = collectionParents.add(key.path.popLast());
            var size = dbDocumentSize(doc);
            sizeDelta += size - previousSize;
            promises.push(_this.documentCache.addEntry(transaction, key, doc));
          } else {
            sizeDelta -= previousSize;
            if (_this.trackRemovals) {
              var deletedDoc = toDbRemoteDocument(_this.documentCache.serializer, new NoDocument(key, SnapshotVersion.min()), _this.readTime);
              promises.push(_this.documentCache.addEntry(transaction, key, deletedDoc));
            } else {
              promises.push(_this.documentCache.removeEntry(transaction, key));
            }
          }
        });
        collectionParents.forEach(function(parent) {
          promises.push(_this.documentCache.indexManager.addToCollectionParentIndex(transaction, parent));
        });
        promises.push(this.documentCache.updateMetadata(transaction, sizeDelta));
        return PersistencePromise.waitFor(promises);
      };
      IndexedDbRemoteDocumentChangeBuffer2.prototype.getFromCache = function(transaction, documentKey) {
        var _this = this;
        return this.documentCache.getSizedEntry(transaction, documentKey).next(function(getResult) {
          if (getResult === null) {
            _this.documentSizes.set(documentKey, 0);
            return null;
          } else {
            _this.documentSizes.set(documentKey, getResult.size);
            return getResult.maybeDocument;
          }
        });
      };
      IndexedDbRemoteDocumentChangeBuffer2.prototype.getAllFromCache = function(transaction, documentKeys) {
        var _this = this;
        return this.documentCache.getSizedEntries(transaction, documentKeys).next(function(_f) {
          var maybeDocuments = _f.maybeDocuments, sizeMap = _f.sizeMap;
          sizeMap.forEach(function(documentKey, size) {
            _this.documentSizes.set(documentKey, size);
          });
          return maybeDocuments;
        });
      };
      return IndexedDbRemoteDocumentChangeBuffer2;
    }(RemoteDocumentChangeBuffer);
    function documentGlobalStore(txn) {
      return IndexedDbPersistence.getStore(txn, DbRemoteDocumentGlobal.store);
    }
    function remoteDocumentsStore(txn) {
      return IndexedDbPersistence.getStore(txn, DbRemoteDocument.store);
    }
    function dbKey(docKey) {
      return docKey.path.toArray();
    }
    function dbDocumentSize(doc) {
      var value;
      if (doc.document) {
        value = doc.document;
      } else if (doc.unknownDocument) {
        value = doc.unknownDocument;
      } else if (doc.noDocument) {
        value = doc.noDocument;
      } else {
        throw fail();
      }
      return JSON.stringify(value).length;
    }
    var MemoryIndexManager = function() {
      function MemoryIndexManager2() {
        this.collectionParentIndex = new MemoryCollectionParentIndex();
      }
      MemoryIndexManager2.prototype.addToCollectionParentIndex = function(transaction, collectionPath) {
        this.collectionParentIndex.add(collectionPath);
        return PersistencePromise.resolve();
      };
      MemoryIndexManager2.prototype.getCollectionParents = function(transaction, collectionId) {
        return PersistencePromise.resolve(this.collectionParentIndex.getEntries(collectionId));
      };
      return MemoryIndexManager2;
    }();
    var MemoryCollectionParentIndex = function() {
      function MemoryCollectionParentIndex2() {
        this.index = {};
      }
      MemoryCollectionParentIndex2.prototype.add = function(collectionPath) {
        var collectionId = collectionPath.lastSegment();
        var parentPath = collectionPath.popLast();
        var existingParents = this.index[collectionId] || new SortedSet(ResourcePath.comparator);
        var added = !existingParents.has(parentPath);
        this.index[collectionId] = existingParents.add(parentPath);
        return added;
      };
      MemoryCollectionParentIndex2.prototype.has = function(collectionPath) {
        var collectionId = collectionPath.lastSegment();
        var parentPath = collectionPath.popLast();
        var existingParents = this.index[collectionId];
        return existingParents && existingParents.has(parentPath);
      };
      MemoryCollectionParentIndex2.prototype.getEntries = function(collectionId) {
        var parentPaths = this.index[collectionId] || new SortedSet(ResourcePath.comparator);
        return parentPaths.toArray();
      };
      return MemoryCollectionParentIndex2;
    }();
    var Deferred = function() {
      function Deferred2() {
        var _this = this;
        this.promise = new Promise(function(resolve2, reject) {
          _this.resolve = resolve2;
          _this.reject = reject;
        });
      }
      return Deferred2;
    }();
    var LOG_TAG$2 = "SimpleDb";
    var TRANSACTION_RETRY_COUNT = 3;
    var SimpleDb = function() {
      function SimpleDb2(name3, version2, schemaConverter) {
        this.name = name3;
        this.version = version2;
        this.schemaConverter = schemaConverter;
        var iOSVersion = SimpleDb2.getIOSVersion(util.getUA());
        if (iOSVersion === 12.2) {
          logError("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
        }
      }
      SimpleDb2.delete = function(name3) {
        logDebug(LOG_TAG$2, "Removing database:", name3);
        return wrapRequest(window.indexedDB.deleteDatabase(name3)).toPromise();
      };
      SimpleDb2.isAvailable = function() {
        if (typeof indexedDB === "undefined") {
          return false;
        }
        if (SimpleDb2.isMockPersistence()) {
          return true;
        }
        var ua = util.getUA();
        var iOSVersion = SimpleDb2.getIOSVersion(ua);
        var isUnsupportedIOS = 0 < iOSVersion && iOSVersion < 10;
        var androidVersion = SimpleDb2.getAndroidVersion(ua);
        var isUnsupportedAndroid = 0 < androidVersion && androidVersion < 4.5;
        if (ua.indexOf("MSIE ") > 0 || ua.indexOf("Trident/") > 0 || ua.indexOf("Edge/") > 0 || isUnsupportedIOS || isUnsupportedAndroid) {
          return false;
        } else {
          return true;
        }
      };
      SimpleDb2.isMockPersistence = function() {
        var _a;
        return typeof process !== "undefined" && ((_a = process.env) === null || _a === void 0 ? void 0 : _a.USE_MOCK_PERSISTENCE) === "YES";
      };
      SimpleDb2.getStore = function(txn, store) {
        return txn.store(store);
      };
      SimpleDb2.getIOSVersion = function(ua) {
        var iOSVersionRegex = ua.match(/i(?:phone|pad|pod) os ([\d_]+)/i);
        var version2 = iOSVersionRegex ? iOSVersionRegex[1].split("_").slice(0, 2).join(".") : "-1";
        return Number(version2);
      };
      SimpleDb2.getAndroidVersion = function(ua) {
        var androidVersionRegex = ua.match(/Android ([\d.]+)/i);
        var version2 = androidVersionRegex ? androidVersionRegex[1].split(".").slice(0, 2).join(".") : "-1";
        return Number(version2);
      };
      SimpleDb2.prototype.ensureDb = function(action) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var _f;
          var _this = this;
          return tslib.__generator(this, function(_g) {
            switch (_g.label) {
              case 0:
                if (!!this.db)
                  return [3, 2];
                logDebug(LOG_TAG$2, "Opening database:", this.name);
                _f = this;
                return [4, new Promise(function(resolve2, reject) {
                  var request = indexedDB.open(_this.name, _this.version);
                  request.onsuccess = function(event) {
                    var db = event.target.result;
                    resolve2(db);
                  };
                  request.onblocked = function() {
                    reject(new IndexedDbTransactionError(action, "Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."));
                  };
                  request.onerror = function(event) {
                    var error2 = event.target.error;
                    if (error2.name === "VersionError") {
                      reject(new FirestoreError(Code.FAILED_PRECONDITION, "A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh."));
                    } else {
                      reject(new IndexedDbTransactionError(action, error2));
                    }
                  };
                  request.onupgradeneeded = function(event) {
                    logDebug(LOG_TAG$2, 'Database "' + _this.name + '" requires upgrade from version:', event.oldVersion);
                    var db = event.target.result;
                    _this.schemaConverter.createOrUpgrade(db, request.transaction, event.oldVersion, _this.version).next(function() {
                      logDebug(LOG_TAG$2, "Database upgrade to version " + _this.version + " complete");
                    });
                  };
                })];
              case 1:
                _f.db = _g.sent();
                _g.label = 2;
              case 2:
                if (this.versionchangelistener) {
                  this.db.onversionchange = function(event) {
                    return _this.versionchangelistener(event);
                  };
                }
                return [2, this.db];
            }
          });
        });
      };
      SimpleDb2.prototype.setVersionChangeListener = function(versionChangeListener) {
        this.versionchangelistener = versionChangeListener;
        if (this.db) {
          this.db.onversionchange = function(event) {
            return versionChangeListener(event);
          };
        }
      };
      SimpleDb2.prototype.runTransaction = function(action, mode, objectStores, transactionFn) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var readonly, attemptNumber, _loop_4, this_1, state_1;
          return tslib.__generator(this, function(_f) {
            switch (_f.label) {
              case 0:
                readonly = mode === "readonly";
                attemptNumber = 0;
                _loop_4 = function() {
                  var transaction_1, transactionFnResult, error_1, retryable;
                  return tslib.__generator(this, function(_f2) {
                    switch (_f2.label) {
                      case 0:
                        ++attemptNumber;
                        _f2.label = 1;
                      case 1:
                        _f2.trys.push([1, 4, , 5]);
                        return [4, this_1.ensureDb(action)];
                      case 2:
                        this_1.db = _f2.sent();
                        transaction_1 = SimpleDbTransaction.open(this_1.db, action, readonly ? "readonly" : "readwrite", objectStores);
                        transactionFnResult = transactionFn(transaction_1).catch(function(error2) {
                          transaction_1.abort(error2);
                          return PersistencePromise.reject(error2);
                        }).toPromise();
                        transactionFnResult.catch(function() {
                        });
                        return [4, transaction_1.completionPromise];
                      case 3:
                        _f2.sent();
                        return [2, { value: transactionFnResult }];
                      case 4:
                        error_1 = _f2.sent();
                        retryable = error_1.name !== "FirebaseError" && attemptNumber < TRANSACTION_RETRY_COUNT;
                        logDebug(LOG_TAG$2, "Transaction failed with error:", error_1.message, "Retrying:", retryable);
                        this_1.close();
                        if (!retryable) {
                          return [2, { value: Promise.reject(error_1) }];
                        }
                        return [3, 5];
                      case 5:
                        return [2];
                    }
                  });
                };
                this_1 = this;
                _f.label = 1;
              case 1:
                return [5, _loop_4()];
              case 2:
                state_1 = _f.sent();
                if (typeof state_1 === "object")
                  return [2, state_1.value];
                return [3, 1];
              case 3:
                return [2];
            }
          });
        });
      };
      SimpleDb2.prototype.close = function() {
        if (this.db) {
          this.db.close();
        }
        this.db = void 0;
      };
      return SimpleDb2;
    }();
    var IterationController = function() {
      function IterationController2(dbCursor) {
        this.dbCursor = dbCursor;
        this.shouldStop = false;
        this.nextKey = null;
      }
      Object.defineProperty(IterationController2.prototype, "isDone", {
        get: function() {
          return this.shouldStop;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(IterationController2.prototype, "skipToKey", {
        get: function() {
          return this.nextKey;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(IterationController2.prototype, "cursor", {
        set: function(value) {
          this.dbCursor = value;
        },
        enumerable: false,
        configurable: true
      });
      IterationController2.prototype.done = function() {
        this.shouldStop = true;
      };
      IterationController2.prototype.skip = function(key) {
        this.nextKey = key;
      };
      IterationController2.prototype.delete = function() {
        return wrapRequest(this.dbCursor.delete());
      };
      return IterationController2;
    }();
    var IndexedDbTransactionError = function(_super) {
      tslib.__extends(IndexedDbTransactionError2, _super);
      function IndexedDbTransactionError2(actionName, cause) {
        var _this = _super.call(this, Code.UNAVAILABLE, "IndexedDB transaction '" + actionName + "' failed: " + cause) || this;
        _this.name = "IndexedDbTransactionError";
        return _this;
      }
      return IndexedDbTransactionError2;
    }(FirestoreError);
    function isIndexedDbTransactionError(e) {
      return e.name === "IndexedDbTransactionError";
    }
    var SimpleDbTransaction = function() {
      function SimpleDbTransaction2(action, transaction) {
        var _this = this;
        this.action = action;
        this.transaction = transaction;
        this.aborted = false;
        this.completionDeferred = new Deferred();
        this.transaction.oncomplete = function() {
          _this.completionDeferred.resolve();
        };
        this.transaction.onabort = function() {
          if (transaction.error) {
            _this.completionDeferred.reject(new IndexedDbTransactionError(action, transaction.error));
          } else {
            _this.completionDeferred.resolve();
          }
        };
        this.transaction.onerror = function(event) {
          var error2 = checkForAndReportiOSError(event.target.error);
          _this.completionDeferred.reject(new IndexedDbTransactionError(action, error2));
        };
      }
      SimpleDbTransaction2.open = function(db, action, mode, objectStoreNames) {
        try {
          return new SimpleDbTransaction2(action, db.transaction(objectStoreNames, mode));
        } catch (e) {
          throw new IndexedDbTransactionError(action, e);
        }
      };
      Object.defineProperty(SimpleDbTransaction2.prototype, "completionPromise", {
        get: function() {
          return this.completionDeferred.promise;
        },
        enumerable: false,
        configurable: true
      });
      SimpleDbTransaction2.prototype.abort = function(error2) {
        if (error2) {
          this.completionDeferred.reject(error2);
        }
        if (!this.aborted) {
          logDebug(LOG_TAG$2, "Aborting transaction:", error2 ? error2.message : "Client-initiated abort");
          this.aborted = true;
          this.transaction.abort();
        }
      };
      SimpleDbTransaction2.prototype.store = function(storeName) {
        var store = this.transaction.objectStore(storeName);
        return new SimpleDbStore(store);
      };
      return SimpleDbTransaction2;
    }();
    var SimpleDbStore = function() {
      function SimpleDbStore2(store) {
        this.store = store;
      }
      SimpleDbStore2.prototype.put = function(keyOrValue, value) {
        var request;
        if (value !== void 0) {
          logDebug(LOG_TAG$2, "PUT", this.store.name, keyOrValue, value);
          request = this.store.put(value, keyOrValue);
        } else {
          logDebug(LOG_TAG$2, "PUT", this.store.name, "<auto-key>", keyOrValue);
          request = this.store.put(keyOrValue);
        }
        return wrapRequest(request);
      };
      SimpleDbStore2.prototype.add = function(value) {
        logDebug(LOG_TAG$2, "ADD", this.store.name, value, value);
        var request = this.store.add(value);
        return wrapRequest(request);
      };
      SimpleDbStore2.prototype.get = function(key) {
        var _this = this;
        var request = this.store.get(key);
        return wrapRequest(request).next(function(result) {
          if (result === void 0) {
            result = null;
          }
          logDebug(LOG_TAG$2, "GET", _this.store.name, key, result);
          return result;
        });
      };
      SimpleDbStore2.prototype.delete = function(key) {
        logDebug(LOG_TAG$2, "DELETE", this.store.name, key);
        var request = this.store.delete(key);
        return wrapRequest(request);
      };
      SimpleDbStore2.prototype.count = function() {
        logDebug(LOG_TAG$2, "COUNT", this.store.name);
        var request = this.store.count();
        return wrapRequest(request);
      };
      SimpleDbStore2.prototype.loadAll = function(indexOrRange, range) {
        var cursor = this.cursor(this.options(indexOrRange, range));
        var results = [];
        return this.iterateCursor(cursor, function(key, value) {
          results.push(value);
        }).next(function() {
          return results;
        });
      };
      SimpleDbStore2.prototype.deleteAll = function(indexOrRange, range) {
        logDebug(LOG_TAG$2, "DELETE ALL", this.store.name);
        var options2 = this.options(indexOrRange, range);
        options2.keysOnly = false;
        var cursor = this.cursor(options2);
        return this.iterateCursor(cursor, function(key, value, control) {
          return control.delete();
        });
      };
      SimpleDbStore2.prototype.iterate = function(optionsOrCallback, callback) {
        var options2;
        if (!callback) {
          options2 = {};
          callback = optionsOrCallback;
        } else {
          options2 = optionsOrCallback;
        }
        var cursor = this.cursor(options2);
        return this.iterateCursor(cursor, callback);
      };
      SimpleDbStore2.prototype.iterateSerial = function(callback) {
        var cursorRequest = this.cursor({});
        return new PersistencePromise(function(resolve2, reject) {
          cursorRequest.onerror = function(event) {
            var error2 = checkForAndReportiOSError(event.target.error);
            reject(error2);
          };
          cursorRequest.onsuccess = function(event) {
            var cursor = event.target.result;
            if (!cursor) {
              resolve2();
              return;
            }
            callback(cursor.primaryKey, cursor.value).next(function(shouldContinue) {
              if (shouldContinue) {
                cursor.continue();
              } else {
                resolve2();
              }
            });
          };
        });
      };
      SimpleDbStore2.prototype.iterateCursor = function(cursorRequest, fn) {
        var results = [];
        return new PersistencePromise(function(resolve2, reject) {
          cursorRequest.onerror = function(event) {
            reject(event.target.error);
          };
          cursorRequest.onsuccess = function(event) {
            var cursor = event.target.result;
            if (!cursor) {
              resolve2();
              return;
            }
            var controller = new IterationController(cursor);
            var userResult = fn(cursor.primaryKey, cursor.value, controller);
            if (userResult instanceof PersistencePromise) {
              var userPromise = userResult.catch(function(err) {
                controller.done();
                return PersistencePromise.reject(err);
              });
              results.push(userPromise);
            }
            if (controller.isDone) {
              resolve2();
            } else if (controller.skipToKey === null) {
              cursor.continue();
            } else {
              cursor.continue(controller.skipToKey);
            }
          };
        }).next(function() {
          return PersistencePromise.waitFor(results);
        });
      };
      SimpleDbStore2.prototype.options = function(indexOrRange, range) {
        var indexName = void 0;
        if (indexOrRange !== void 0) {
          if (typeof indexOrRange === "string") {
            indexName = indexOrRange;
          } else {
            range = indexOrRange;
          }
        }
        return { index: indexName, range };
      };
      SimpleDbStore2.prototype.cursor = function(options2) {
        var direction = "next";
        if (options2.reverse) {
          direction = "prev";
        }
        if (options2.index) {
          var index2 = this.store.index(options2.index);
          if (options2.keysOnly) {
            return index2.openKeyCursor(options2.range, direction);
          } else {
            return index2.openCursor(options2.range, direction);
          }
        } else {
          return this.store.openCursor(options2.range, direction);
        }
      };
      return SimpleDbStore2;
    }();
    function wrapRequest(request) {
      return new PersistencePromise(function(resolve2, reject) {
        request.onsuccess = function(event) {
          var result = event.target.result;
          resolve2(result);
        };
        request.onerror = function(event) {
          var error2 = checkForAndReportiOSError(event.target.error);
          reject(error2);
        };
      });
    }
    var reportedIOSError = false;
    function checkForAndReportiOSError(error2) {
      var iOSVersion = SimpleDb.getIOSVersion(util.getUA());
      if (iOSVersion >= 12.2 && iOSVersion < 13) {
        var IOS_ERROR = "An internal error was encountered in the Indexed Database server";
        if (error2.message.indexOf(IOS_ERROR) >= 0) {
          var newError_1 = new FirestoreError("internal", "IOS_INDEXEDDB_BUG1: IndexedDb has thrown '" + IOS_ERROR + "'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
          if (!reportedIOSError) {
            reportedIOSError = true;
            setTimeout(function() {
              throw newError_1;
            }, 0);
          }
          return newError_1;
        }
      }
      return error2;
    }
    var SCHEMA_VERSION = 10;
    var SchemaConverter = function() {
      function SchemaConverter2(serializer) {
        this.serializer = serializer;
      }
      SchemaConverter2.prototype.createOrUpgrade = function(db, txn, fromVersion2, toVersion2) {
        var _this = this;
        hardAssert(fromVersion2 < toVersion2 && fromVersion2 >= 0 && toVersion2 <= SCHEMA_VERSION);
        var simpleDbTransaction = new SimpleDbTransaction("createOrUpgrade", txn);
        if (fromVersion2 < 1 && toVersion2 >= 1) {
          createPrimaryClientStore(db);
          createMutationQueue(db);
          createQueryCache(db);
          createRemoteDocumentCache(db);
        }
        var p = PersistencePromise.resolve();
        if (fromVersion2 < 3 && toVersion2 >= 3) {
          if (fromVersion2 !== 0) {
            dropQueryCache(db);
            createQueryCache(db);
          }
          p = p.next(function() {
            return writeEmptyTargetGlobalEntry(simpleDbTransaction);
          });
        }
        if (fromVersion2 < 4 && toVersion2 >= 4) {
          if (fromVersion2 !== 0) {
            p = p.next(function() {
              return upgradeMutationBatchSchemaAndMigrateData(db, simpleDbTransaction);
            });
          }
          p = p.next(function() {
            createClientMetadataStore(db);
          });
        }
        if (fromVersion2 < 5 && toVersion2 >= 5) {
          p = p.next(function() {
            return _this.removeAcknowledgedMutations(simpleDbTransaction);
          });
        }
        if (fromVersion2 < 6 && toVersion2 >= 6) {
          p = p.next(function() {
            createDocumentGlobalStore(db);
            return _this.addDocumentGlobal(simpleDbTransaction);
          });
        }
        if (fromVersion2 < 7 && toVersion2 >= 7) {
          p = p.next(function() {
            return _this.ensureSequenceNumbers(simpleDbTransaction);
          });
        }
        if (fromVersion2 < 8 && toVersion2 >= 8) {
          p = p.next(function() {
            return _this.createCollectionParentIndex(db, simpleDbTransaction);
          });
        }
        if (fromVersion2 < 9 && toVersion2 >= 9) {
          p = p.next(function() {
            dropRemoteDocumentChangesStore(db);
            createRemoteDocumentReadTimeIndex(txn);
          });
        }
        if (fromVersion2 < 10 && toVersion2 >= 10) {
          p = p.next(function() {
            return _this.rewriteCanonicalIds(simpleDbTransaction);
          });
        }
        return p;
      };
      SchemaConverter2.prototype.addDocumentGlobal = function(txn) {
        var byteCount = 0;
        return txn.store(DbRemoteDocument.store).iterate(function(_, doc) {
          byteCount += dbDocumentSize(doc);
        }).next(function() {
          var metadata = new DbRemoteDocumentGlobal(byteCount);
          return txn.store(DbRemoteDocumentGlobal.store).put(DbRemoteDocumentGlobal.key, metadata);
        });
      };
      SchemaConverter2.prototype.removeAcknowledgedMutations = function(txn) {
        var _this = this;
        var queuesStore = txn.store(DbMutationQueue.store);
        var mutationsStore2 = txn.store(DbMutationBatch.store);
        return queuesStore.loadAll().next(function(queues) {
          return PersistencePromise.forEach(queues, function(queue) {
            var range = IDBKeyRange.bound([queue.userId, BATCHID_UNKNOWN], [queue.userId, queue.lastAcknowledgedBatchId]);
            return mutationsStore2.loadAll(DbMutationBatch.userMutationsIndex, range).next(function(dbBatches) {
              return PersistencePromise.forEach(dbBatches, function(dbBatch) {
                hardAssert(dbBatch.userId === queue.userId);
                var batch = fromDbMutationBatch(_this.serializer, dbBatch);
                return removeMutationBatch(txn, queue.userId, batch).next(function() {
                });
              });
            });
          });
        });
      };
      SchemaConverter2.prototype.ensureSequenceNumbers = function(txn) {
        var documentTargetStore2 = txn.store(DbTargetDocument.store);
        var documentsStore = txn.store(DbRemoteDocument.store);
        var globalTargetStore2 = txn.store(DbTargetGlobal.store);
        return globalTargetStore2.get(DbTargetGlobal.key).next(function(metadata) {
          var writeSentinelKey2 = function(path2) {
            return documentTargetStore2.put(new DbTargetDocument(0, encodeResourcePath(path2), metadata.highestListenSequenceNumber));
          };
          var promises = [];
          return documentsStore.iterate(function(key, doc) {
            var path2 = new ResourcePath(key);
            var docSentinelKey = sentinelKey(path2);
            promises.push(documentTargetStore2.get(docSentinelKey).next(function(maybeSentinel) {
              if (!maybeSentinel) {
                return writeSentinelKey2(path2);
              } else {
                return PersistencePromise.resolve();
              }
            }));
          }).next(function() {
            return PersistencePromise.waitFor(promises);
          });
        });
      };
      SchemaConverter2.prototype.createCollectionParentIndex = function(db, txn) {
        db.createObjectStore(DbCollectionParent.store, {
          keyPath: DbCollectionParent.keyPath
        });
        var collectionParentsStore2 = txn.store(DbCollectionParent.store);
        var cache = new MemoryCollectionParentIndex();
        var addEntry = function(collectionPath) {
          if (cache.add(collectionPath)) {
            var collectionId = collectionPath.lastSegment();
            var parentPath = collectionPath.popLast();
            return collectionParentsStore2.put({
              collectionId,
              parent: encodeResourcePath(parentPath)
            });
          }
        };
        return txn.store(DbRemoteDocument.store).iterate({ keysOnly: true }, function(pathSegments, _) {
          var path2 = new ResourcePath(pathSegments);
          return addEntry(path2.popLast());
        }).next(function() {
          return txn.store(DbDocumentMutation.store).iterate({ keysOnly: true }, function(_f, _) {
            var userID = _f[0], encodedPath = _f[1], batchId = _f[2];
            var path2 = decodeResourcePath(encodedPath);
            return addEntry(path2.popLast());
          });
        });
      };
      SchemaConverter2.prototype.rewriteCanonicalIds = function(txn) {
        var _this = this;
        var targetStore = txn.store(DbTarget.store);
        return targetStore.iterate(function(key, originalDbTarget) {
          var originalTargetData = fromDbTarget(originalDbTarget);
          var updatedDbTarget = toDbTarget(_this.serializer, originalTargetData);
          return targetStore.put(updatedDbTarget);
        });
      };
      return SchemaConverter2;
    }();
    function sentinelKey(path2) {
      return [0, encodeResourcePath(path2)];
    }
    var DbTimestamp = function() {
      function DbTimestamp2(seconds, nanoseconds) {
        this.seconds = seconds;
        this.nanoseconds = nanoseconds;
      }
      return DbTimestamp2;
    }();
    var DbPrimaryClient = function() {
      function DbPrimaryClient2(ownerId, allowTabSynchronization, leaseTimestampMs) {
        this.ownerId = ownerId;
        this.allowTabSynchronization = allowTabSynchronization;
        this.leaseTimestampMs = leaseTimestampMs;
      }
      return DbPrimaryClient2;
    }();
    DbPrimaryClient.store = "owner";
    DbPrimaryClient.key = "owner";
    function createPrimaryClientStore(db) {
      db.createObjectStore(DbPrimaryClient.store);
    }
    var DbMutationQueue = function() {
      function DbMutationQueue2(userId, lastAcknowledgedBatchId, lastStreamToken) {
        this.userId = userId;
        this.lastAcknowledgedBatchId = lastAcknowledgedBatchId;
        this.lastStreamToken = lastStreamToken;
      }
      return DbMutationQueue2;
    }();
    DbMutationQueue.store = "mutationQueues";
    DbMutationQueue.keyPath = "userId";
    var DbMutationBatch = function() {
      function DbMutationBatch2(userId, batchId, localWriteTimeMs, baseMutations, mutations) {
        this.userId = userId;
        this.batchId = batchId;
        this.localWriteTimeMs = localWriteTimeMs;
        this.baseMutations = baseMutations;
        this.mutations = mutations;
      }
      return DbMutationBatch2;
    }();
    DbMutationBatch.store = "mutations";
    DbMutationBatch.keyPath = "batchId";
    DbMutationBatch.userMutationsIndex = "userMutationsIndex";
    DbMutationBatch.userMutationsKeyPath = ["userId", "batchId"];
    function createMutationQueue(db) {
      db.createObjectStore(DbMutationQueue.store, {
        keyPath: DbMutationQueue.keyPath
      });
      var mutationBatchesStore = db.createObjectStore(DbMutationBatch.store, {
        keyPath: DbMutationBatch.keyPath,
        autoIncrement: true
      });
      mutationBatchesStore.createIndex(DbMutationBatch.userMutationsIndex, DbMutationBatch.userMutationsKeyPath, { unique: true });
      db.createObjectStore(DbDocumentMutation.store);
    }
    function upgradeMutationBatchSchemaAndMigrateData(db, txn) {
      var v1MutationsStore = txn.store(DbMutationBatch.store);
      return v1MutationsStore.loadAll().next(function(existingMutations) {
        db.deleteObjectStore(DbMutationBatch.store);
        var mutationsStore2 = db.createObjectStore(DbMutationBatch.store, {
          keyPath: DbMutationBatch.keyPath,
          autoIncrement: true
        });
        mutationsStore2.createIndex(DbMutationBatch.userMutationsIndex, DbMutationBatch.userMutationsKeyPath, { unique: true });
        var v3MutationsStore = txn.store(DbMutationBatch.store);
        var writeAll = existingMutations.map(function(mutation) {
          return v3MutationsStore.put(mutation);
        });
        return PersistencePromise.waitFor(writeAll);
      });
    }
    var DbDocumentMutation = function() {
      function DbDocumentMutation2() {
      }
      DbDocumentMutation2.prefixForUser = function(userId) {
        return [userId];
      };
      DbDocumentMutation2.prefixForPath = function(userId, path2) {
        return [userId, encodeResourcePath(path2)];
      };
      DbDocumentMutation2.key = function(userId, path2, batchId) {
        return [userId, encodeResourcePath(path2), batchId];
      };
      return DbDocumentMutation2;
    }();
    DbDocumentMutation.store = "documentMutations";
    DbDocumentMutation.PLACEHOLDER = new DbDocumentMutation();
    function createRemoteDocumentCache(db) {
      db.createObjectStore(DbRemoteDocument.store);
    }
    var DbNoDocument = function() {
      function DbNoDocument2(path2, readTime) {
        this.path = path2;
        this.readTime = readTime;
      }
      return DbNoDocument2;
    }();
    var DbUnknownDocument = function() {
      function DbUnknownDocument2(path2, version2) {
        this.path = path2;
        this.version = version2;
      }
      return DbUnknownDocument2;
    }();
    var DbRemoteDocument = function() {
      function DbRemoteDocument2(unknownDocument, noDocument, document2, hasCommittedMutations, readTime, parentPath) {
        this.unknownDocument = unknownDocument;
        this.noDocument = noDocument;
        this.document = document2;
        this.hasCommittedMutations = hasCommittedMutations;
        this.readTime = readTime;
        this.parentPath = parentPath;
      }
      return DbRemoteDocument2;
    }();
    DbRemoteDocument.store = "remoteDocuments";
    DbRemoteDocument.readTimeIndex = "readTimeIndex";
    DbRemoteDocument.readTimeIndexPath = "readTime";
    DbRemoteDocument.collectionReadTimeIndex = "collectionReadTimeIndex";
    DbRemoteDocument.collectionReadTimeIndexPath = ["parentPath", "readTime"];
    var DbRemoteDocumentGlobal = function() {
      function DbRemoteDocumentGlobal2(byteSize) {
        this.byteSize = byteSize;
      }
      return DbRemoteDocumentGlobal2;
    }();
    DbRemoteDocumentGlobal.store = "remoteDocumentGlobal";
    DbRemoteDocumentGlobal.key = "remoteDocumentGlobalKey";
    function createDocumentGlobalStore(db) {
      db.createObjectStore(DbRemoteDocumentGlobal.store);
    }
    var DbTarget = function() {
      function DbTarget2(targetId, canonicalId2, readTime, resumeToken, lastListenSequenceNumber, lastLimboFreeSnapshotVersion, query) {
        this.targetId = targetId;
        this.canonicalId = canonicalId2;
        this.readTime = readTime;
        this.resumeToken = resumeToken;
        this.lastListenSequenceNumber = lastListenSequenceNumber;
        this.lastLimboFreeSnapshotVersion = lastLimboFreeSnapshotVersion;
        this.query = query;
      }
      return DbTarget2;
    }();
    DbTarget.store = "targets";
    DbTarget.keyPath = "targetId";
    DbTarget.queryTargetsIndexName = "queryTargetsIndex";
    DbTarget.queryTargetsKeyPath = ["canonicalId", "targetId"];
    var DbTargetDocument = function() {
      function DbTargetDocument2(targetId, path2, sequenceNumber) {
        this.targetId = targetId;
        this.path = path2;
        this.sequenceNumber = sequenceNumber;
      }
      return DbTargetDocument2;
    }();
    DbTargetDocument.store = "targetDocuments";
    DbTargetDocument.keyPath = ["targetId", "path"];
    DbTargetDocument.documentTargetsIndex = "documentTargetsIndex";
    DbTargetDocument.documentTargetsKeyPath = ["path", "targetId"];
    var DbTargetGlobal = function() {
      function DbTargetGlobal2(highestTargetId, highestListenSequenceNumber, lastRemoteSnapshotVersion, targetCount) {
        this.highestTargetId = highestTargetId;
        this.highestListenSequenceNumber = highestListenSequenceNumber;
        this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;
        this.targetCount = targetCount;
      }
      return DbTargetGlobal2;
    }();
    DbTargetGlobal.key = "targetGlobalKey";
    DbTargetGlobal.store = "targetGlobal";
    var DbCollectionParent = function() {
      function DbCollectionParent2(collectionId, parent) {
        this.collectionId = collectionId;
        this.parent = parent;
      }
      return DbCollectionParent2;
    }();
    DbCollectionParent.store = "collectionParents";
    DbCollectionParent.keyPath = ["collectionId", "parent"];
    function createQueryCache(db) {
      var targetDocumentsStore = db.createObjectStore(DbTargetDocument.store, {
        keyPath: DbTargetDocument.keyPath
      });
      targetDocumentsStore.createIndex(DbTargetDocument.documentTargetsIndex, DbTargetDocument.documentTargetsKeyPath, { unique: true });
      var targetStore = db.createObjectStore(DbTarget.store, {
        keyPath: DbTarget.keyPath
      });
      targetStore.createIndex(DbTarget.queryTargetsIndexName, DbTarget.queryTargetsKeyPath, { unique: true });
      db.createObjectStore(DbTargetGlobal.store);
    }
    function dropQueryCache(db) {
      db.deleteObjectStore(DbTargetDocument.store);
      db.deleteObjectStore(DbTarget.store);
      db.deleteObjectStore(DbTargetGlobal.store);
    }
    function dropRemoteDocumentChangesStore(db) {
      if (db.objectStoreNames.contains("remoteDocumentChanges")) {
        db.deleteObjectStore("remoteDocumentChanges");
      }
    }
    function writeEmptyTargetGlobalEntry(txn) {
      var globalStore = txn.store(DbTargetGlobal.store);
      var metadata = new DbTargetGlobal(0, 0, SnapshotVersion.min().toTimestamp(), 0);
      return globalStore.put(DbTargetGlobal.key, metadata);
    }
    function createRemoteDocumentReadTimeIndex(txn) {
      var remoteDocumentStore = txn.objectStore(DbRemoteDocument.store);
      remoteDocumentStore.createIndex(DbRemoteDocument.readTimeIndex, DbRemoteDocument.readTimeIndexPath, { unique: false });
      remoteDocumentStore.createIndex(DbRemoteDocument.collectionReadTimeIndex, DbRemoteDocument.collectionReadTimeIndexPath, { unique: false });
    }
    var DbClientMetadata = function() {
      function DbClientMetadata2(clientId, updateTimeMs, networkEnabled, inForeground) {
        this.clientId = clientId;
        this.updateTimeMs = updateTimeMs;
        this.networkEnabled = networkEnabled;
        this.inForeground = inForeground;
      }
      return DbClientMetadata2;
    }();
    DbClientMetadata.store = "clientMetadata";
    DbClientMetadata.keyPath = "clientId";
    function createClientMetadataStore(db) {
      db.createObjectStore(DbClientMetadata.store, {
        keyPath: DbClientMetadata.keyPath
      });
    }
    var V1_STORES = [
      DbMutationQueue.store,
      DbMutationBatch.store,
      DbDocumentMutation.store,
      DbRemoteDocument.store,
      DbTarget.store,
      DbPrimaryClient.store,
      DbTargetGlobal.store,
      DbTargetDocument.store
    ];
    var V3_STORES = V1_STORES;
    var V4_STORES = tslib.__spreadArrays(V3_STORES, [DbClientMetadata.store]);
    var V6_STORES = tslib.__spreadArrays(V4_STORES, [DbRemoteDocumentGlobal.store]);
    var V8_STORES = tslib.__spreadArrays(V6_STORES, [DbCollectionParent.store]);
    var ALL_STORES = V8_STORES;
    var IndexedDbIndexManager = function() {
      function IndexedDbIndexManager2() {
        this.collectionParentsCache = new MemoryCollectionParentIndex();
      }
      IndexedDbIndexManager2.prototype.addToCollectionParentIndex = function(transaction, collectionPath) {
        var _this = this;
        if (!this.collectionParentsCache.has(collectionPath)) {
          var collectionId = collectionPath.lastSegment();
          var parentPath = collectionPath.popLast();
          transaction.addOnCommittedListener(function() {
            _this.collectionParentsCache.add(collectionPath);
          });
          var collectionParent = {
            collectionId,
            parent: encodeResourcePath(parentPath)
          };
          return collectionParentsStore(transaction).put(collectionParent);
        }
        return PersistencePromise.resolve();
      };
      IndexedDbIndexManager2.prototype.getCollectionParents = function(transaction, collectionId) {
        var parentPaths = [];
        var range = IDBKeyRange.bound([collectionId, ""], [immediateSuccessor(collectionId), ""], false, true);
        return collectionParentsStore(transaction).loadAll(range).next(function(entries) {
          for (var _i = 0, entries_2 = entries; _i < entries_2.length; _i++) {
            var entry = entries_2[_i];
            if (entry.collectionId !== collectionId) {
              break;
            }
            parentPaths.push(decodeResourcePath(entry.parent));
          }
          return parentPaths;
        });
      };
      return IndexedDbIndexManager2;
    }();
    function collectionParentsStore(txn) {
      return IndexedDbPersistence.getStore(txn, DbCollectionParent.store);
    }
    var OFFSET = 2;
    var TargetIdGenerator = function() {
      function TargetIdGenerator2(lastId) {
        this.lastId = lastId;
      }
      TargetIdGenerator2.prototype.next = function() {
        this.lastId += OFFSET;
        return this.lastId;
      };
      TargetIdGenerator2.forTargetCache = function() {
        return new TargetIdGenerator2(2 - OFFSET);
      };
      TargetIdGenerator2.forSyncEngine = function() {
        return new TargetIdGenerator2(1 - OFFSET);
      };
      return TargetIdGenerator2;
    }();
    var IndexedDbTargetCache = function() {
      function IndexedDbTargetCache2(referenceDelegate, serializer) {
        this.referenceDelegate = referenceDelegate;
        this.serializer = serializer;
      }
      IndexedDbTargetCache2.prototype.allocateTargetId = function(transaction) {
        var _this = this;
        return this.retrieveMetadata(transaction).next(function(metadata) {
          var targetIdGenerator = new TargetIdGenerator(metadata.highestTargetId);
          metadata.highestTargetId = targetIdGenerator.next();
          return _this.saveMetadata(transaction, metadata).next(function() {
            return metadata.highestTargetId;
          });
        });
      };
      IndexedDbTargetCache2.prototype.getLastRemoteSnapshotVersion = function(transaction) {
        return this.retrieveMetadata(transaction).next(function(metadata) {
          return SnapshotVersion.fromTimestamp(new Timestamp(metadata.lastRemoteSnapshotVersion.seconds, metadata.lastRemoteSnapshotVersion.nanoseconds));
        });
      };
      IndexedDbTargetCache2.prototype.getHighestSequenceNumber = function(transaction) {
        return this.retrieveMetadata(transaction).next(function(targetGlobal) {
          return targetGlobal.highestListenSequenceNumber;
        });
      };
      IndexedDbTargetCache2.prototype.setTargetsMetadata = function(transaction, highestListenSequenceNumber, lastRemoteSnapshotVersion) {
        var _this = this;
        return this.retrieveMetadata(transaction).next(function(metadata) {
          metadata.highestListenSequenceNumber = highestListenSequenceNumber;
          if (lastRemoteSnapshotVersion) {
            metadata.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion.toTimestamp();
          }
          if (highestListenSequenceNumber > metadata.highestListenSequenceNumber) {
            metadata.highestListenSequenceNumber = highestListenSequenceNumber;
          }
          return _this.saveMetadata(transaction, metadata);
        });
      };
      IndexedDbTargetCache2.prototype.addTargetData = function(transaction, targetData) {
        var _this = this;
        return this.saveTargetData(transaction, targetData).next(function() {
          return _this.retrieveMetadata(transaction).next(function(metadata) {
            metadata.targetCount += 1;
            _this.updateMetadataFromTargetData(targetData, metadata);
            return _this.saveMetadata(transaction, metadata);
          });
        });
      };
      IndexedDbTargetCache2.prototype.updateTargetData = function(transaction, targetData) {
        return this.saveTargetData(transaction, targetData);
      };
      IndexedDbTargetCache2.prototype.removeTargetData = function(transaction, targetData) {
        var _this = this;
        return this.removeMatchingKeysForTargetId(transaction, targetData.targetId).next(function() {
          return targetsStore(transaction).delete(targetData.targetId);
        }).next(function() {
          return _this.retrieveMetadata(transaction);
        }).next(function(metadata) {
          hardAssert(metadata.targetCount > 0);
          metadata.targetCount -= 1;
          return _this.saveMetadata(transaction, metadata);
        });
      };
      IndexedDbTargetCache2.prototype.removeTargets = function(txn, upperBound, activeTargetIds) {
        var _this = this;
        var count = 0;
        var promises = [];
        return targetsStore(txn).iterate(function(key, value) {
          var targetData = fromDbTarget(value);
          if (targetData.sequenceNumber <= upperBound && activeTargetIds.get(targetData.targetId) === null) {
            count++;
            promises.push(_this.removeTargetData(txn, targetData));
          }
        }).next(function() {
          return PersistencePromise.waitFor(promises);
        }).next(function() {
          return count;
        });
      };
      IndexedDbTargetCache2.prototype.forEachTarget = function(txn, f) {
        return targetsStore(txn).iterate(function(key, value) {
          var targetData = fromDbTarget(value);
          f(targetData);
        });
      };
      IndexedDbTargetCache2.prototype.retrieveMetadata = function(transaction) {
        return globalTargetStore(transaction).get(DbTargetGlobal.key).next(function(metadata) {
          hardAssert(metadata !== null);
          return metadata;
        });
      };
      IndexedDbTargetCache2.prototype.saveMetadata = function(transaction, metadata) {
        return globalTargetStore(transaction).put(DbTargetGlobal.key, metadata);
      };
      IndexedDbTargetCache2.prototype.saveTargetData = function(transaction, targetData) {
        return targetsStore(transaction).put(toDbTarget(this.serializer, targetData));
      };
      IndexedDbTargetCache2.prototype.updateMetadataFromTargetData = function(targetData, metadata) {
        var updated = false;
        if (targetData.targetId > metadata.highestTargetId) {
          metadata.highestTargetId = targetData.targetId;
          updated = true;
        }
        if (targetData.sequenceNumber > metadata.highestListenSequenceNumber) {
          metadata.highestListenSequenceNumber = targetData.sequenceNumber;
          updated = true;
        }
        return updated;
      };
      IndexedDbTargetCache2.prototype.getTargetCount = function(transaction) {
        return this.retrieveMetadata(transaction).next(function(metadata) {
          return metadata.targetCount;
        });
      };
      IndexedDbTargetCache2.prototype.getTargetData = function(transaction, target) {
        var canonicalId2 = canonifyTarget(target);
        var range = IDBKeyRange.bound([canonicalId2, Number.NEGATIVE_INFINITY], [canonicalId2, Number.POSITIVE_INFINITY]);
        var result = null;
        return targetsStore(transaction).iterate({ range, index: DbTarget.queryTargetsIndexName }, function(key, value, control) {
          var found = fromDbTarget(value);
          if (targetEquals(target, found.target)) {
            result = found;
            control.done();
          }
        }).next(function() {
          return result;
        });
      };
      IndexedDbTargetCache2.prototype.addMatchingKeys = function(txn, keys, targetId) {
        var _this = this;
        var promises = [];
        var store = documentTargetStore(txn);
        keys.forEach(function(key) {
          var path2 = encodeResourcePath(key.path);
          promises.push(store.put(new DbTargetDocument(targetId, path2)));
          promises.push(_this.referenceDelegate.addReference(txn, targetId, key));
        });
        return PersistencePromise.waitFor(promises);
      };
      IndexedDbTargetCache2.prototype.removeMatchingKeys = function(txn, keys, targetId) {
        var _this = this;
        var store = documentTargetStore(txn);
        return PersistencePromise.forEach(keys, function(key) {
          var path2 = encodeResourcePath(key.path);
          return PersistencePromise.waitFor([
            store.delete([targetId, path2]),
            _this.referenceDelegate.removeReference(txn, targetId, key)
          ]);
        });
      };
      IndexedDbTargetCache2.prototype.removeMatchingKeysForTargetId = function(txn, targetId) {
        var store = documentTargetStore(txn);
        var range = IDBKeyRange.bound([targetId], [targetId + 1], false, true);
        return store.delete(range);
      };
      IndexedDbTargetCache2.prototype.getMatchingKeysForTargetId = function(txn, targetId) {
        var range = IDBKeyRange.bound([targetId], [targetId + 1], false, true);
        var store = documentTargetStore(txn);
        var result = documentKeySet();
        return store.iterate({ range, keysOnly: true }, function(key, _, control) {
          var path2 = decodeResourcePath(key[1]);
          var docKey = new DocumentKey(path2);
          result = result.add(docKey);
        }).next(function() {
          return result;
        });
      };
      IndexedDbTargetCache2.prototype.containsKey = function(txn, key) {
        var path2 = encodeResourcePath(key.path);
        var range = IDBKeyRange.bound([path2], [immediateSuccessor(path2)], false, true);
        var count = 0;
        return documentTargetStore(txn).iterate({
          index: DbTargetDocument.documentTargetsIndex,
          keysOnly: true,
          range
        }, function(_f, _, control) {
          var targetId = _f[0], path3 = _f[1];
          if (targetId !== 0) {
            count++;
            control.done();
          }
        }).next(function() {
          return count > 0;
        });
      };
      IndexedDbTargetCache2.prototype.getTargetDataForTarget = function(transaction, targetId) {
        return targetsStore(transaction).get(targetId).next(function(found) {
          if (found) {
            return fromDbTarget(found);
          } else {
            return null;
          }
        });
      };
      return IndexedDbTargetCache2;
    }();
    function targetsStore(txn) {
      return IndexedDbPersistence.getStore(txn, DbTarget.store);
    }
    function globalTargetStore(txn) {
      return IndexedDbPersistence.getStore(txn, DbTargetGlobal.store);
    }
    function documentTargetStore(txn) {
      return IndexedDbPersistence.getStore(txn, DbTargetDocument.store);
    }
    var LOG_TAG$3 = "LruGarbageCollector";
    function bufferEntryComparator(_f, _g) {
      var aSequence = _f[0], aIndex = _f[1];
      var bSequence = _g[0], bIndex = _g[1];
      var seqCmp = primitiveComparator(aSequence, bSequence);
      if (seqCmp === 0) {
        return primitiveComparator(aIndex, bIndex);
      } else {
        return seqCmp;
      }
    }
    var RollingSequenceNumberBuffer = function() {
      function RollingSequenceNumberBuffer2(maxElements) {
        this.maxElements = maxElements;
        this.buffer = new SortedSet(bufferEntryComparator);
        this.previousIndex = 0;
      }
      RollingSequenceNumberBuffer2.prototype.nextIndex = function() {
        return ++this.previousIndex;
      };
      RollingSequenceNumberBuffer2.prototype.addElement = function(sequenceNumber) {
        var entry = [sequenceNumber, this.nextIndex()];
        if (this.buffer.size < this.maxElements) {
          this.buffer = this.buffer.add(entry);
        } else {
          var highestValue = this.buffer.last();
          if (bufferEntryComparator(entry, highestValue) < 0) {
            this.buffer = this.buffer.delete(highestValue).add(entry);
          }
        }
      };
      Object.defineProperty(RollingSequenceNumberBuffer2.prototype, "maxValue", {
        get: function() {
          return this.buffer.last()[0];
        },
        enumerable: false,
        configurable: true
      });
      return RollingSequenceNumberBuffer2;
    }();
    var GC_DID_NOT_RUN = {
      didRun: false,
      sequenceNumbersCollected: 0,
      targetsRemoved: 0,
      documentsRemoved: 0
    };
    var LruParams = function() {
      function LruParams2(cacheSizeCollectionThreshold, percentileToCollect, maximumSequenceNumbersToCollect) {
        this.cacheSizeCollectionThreshold = cacheSizeCollectionThreshold;
        this.percentileToCollect = percentileToCollect;
        this.maximumSequenceNumbersToCollect = maximumSequenceNumbersToCollect;
      }
      LruParams2.withCacheSize = function(cacheSize) {
        return new LruParams2(cacheSize, LruParams2.DEFAULT_COLLECTION_PERCENTILE, LruParams2.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);
      };
      return LruParams2;
    }();
    LruParams.COLLECTION_DISABLED = -1;
    LruParams.MINIMUM_CACHE_SIZE_BYTES = 1 * 1024 * 1024;
    LruParams.DEFAULT_CACHE_SIZE_BYTES = 40 * 1024 * 1024;
    LruParams.DEFAULT_COLLECTION_PERCENTILE = 10;
    LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1e3;
    LruParams.DEFAULT = new LruParams(LruParams.DEFAULT_CACHE_SIZE_BYTES, LruParams.DEFAULT_COLLECTION_PERCENTILE, LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);
    LruParams.DISABLED = new LruParams(LruParams.COLLECTION_DISABLED, 0, 0);
    var INITIAL_GC_DELAY_MS = 1 * 60 * 1e3;
    var REGULAR_GC_DELAY_MS = 5 * 60 * 1e3;
    var LruScheduler = function() {
      function LruScheduler2(garbageCollector, asyncQueue) {
        this.garbageCollector = garbageCollector;
        this.asyncQueue = asyncQueue;
        this.hasRun = false;
        this.gcTask = null;
      }
      LruScheduler2.prototype.start = function(localStore) {
        if (this.garbageCollector.params.cacheSizeCollectionThreshold !== LruParams.COLLECTION_DISABLED) {
          this.scheduleGC(localStore);
        }
      };
      LruScheduler2.prototype.stop = function() {
        if (this.gcTask) {
          this.gcTask.cancel();
          this.gcTask = null;
        }
      };
      Object.defineProperty(LruScheduler2.prototype, "started", {
        get: function() {
          return this.gcTask !== null;
        },
        enumerable: false,
        configurable: true
      });
      LruScheduler2.prototype.scheduleGC = function(localStore) {
        var _this = this;
        var delay = this.hasRun ? REGULAR_GC_DELAY_MS : INITIAL_GC_DELAY_MS;
        logDebug("LruGarbageCollector", "Garbage collection scheduled in " + delay + "ms");
        this.gcTask = this.asyncQueue.enqueueAfterDelay("lru_garbage_collection", delay, function() {
          return tslib.__awaiter(_this, void 0, void 0, function() {
            var e_1;
            return tslib.__generator(this, function(_f) {
              switch (_f.label) {
                case 0:
                  this.gcTask = null;
                  this.hasRun = true;
                  _f.label = 1;
                case 1:
                  _f.trys.push([1, 3, , 7]);
                  return [4, localStore.collectGarbage(this.garbageCollector)];
                case 2:
                  _f.sent();
                  return [3, 7];
                case 3:
                  e_1 = _f.sent();
                  if (!isIndexedDbTransactionError(e_1))
                    return [3, 4];
                  logDebug(LOG_TAG$3, "Ignoring IndexedDB error during garbage collection: ", e_1);
                  return [3, 6];
                case 4:
                  return [4, ignoreIfPrimaryLeaseLoss(e_1)];
                case 5:
                  _f.sent();
                  _f.label = 6;
                case 6:
                  return [3, 7];
                case 7:
                  return [4, this.scheduleGC(localStore)];
                case 8:
                  _f.sent();
                  return [2];
              }
            });
          });
        });
      };
      return LruScheduler2;
    }();
    var LruGarbageCollector = function() {
      function LruGarbageCollector2(delegate, params) {
        this.delegate = delegate;
        this.params = params;
      }
      LruGarbageCollector2.prototype.calculateTargetCount = function(txn, percentile) {
        return this.delegate.getSequenceNumberCount(txn).next(function(targetCount) {
          return Math.floor(percentile / 100 * targetCount);
        });
      };
      LruGarbageCollector2.prototype.nthSequenceNumber = function(txn, n) {
        var _this = this;
        if (n === 0) {
          return PersistencePromise.resolve(ListenSequence.INVALID);
        }
        var buffer = new RollingSequenceNumberBuffer(n);
        return this.delegate.forEachTarget(txn, function(target) {
          return buffer.addElement(target.sequenceNumber);
        }).next(function() {
          return _this.delegate.forEachOrphanedDocumentSequenceNumber(txn, function(sequenceNumber) {
            return buffer.addElement(sequenceNumber);
          });
        }).next(function() {
          return buffer.maxValue;
        });
      };
      LruGarbageCollector2.prototype.removeTargets = function(txn, upperBound, activeTargetIds) {
        return this.delegate.removeTargets(txn, upperBound, activeTargetIds);
      };
      LruGarbageCollector2.prototype.removeOrphanedDocuments = function(txn, upperBound) {
        return this.delegate.removeOrphanedDocuments(txn, upperBound);
      };
      LruGarbageCollector2.prototype.collect = function(txn, activeTargetIds) {
        var _this = this;
        if (this.params.cacheSizeCollectionThreshold === LruParams.COLLECTION_DISABLED) {
          logDebug("LruGarbageCollector", "Garbage collection skipped; disabled");
          return PersistencePromise.resolve(GC_DID_NOT_RUN);
        }
        return this.getCacheSize(txn).next(function(cacheSize) {
          if (cacheSize < _this.params.cacheSizeCollectionThreshold) {
            logDebug("LruGarbageCollector", "Garbage collection skipped; Cache size " + cacheSize + " " + ("is lower than threshold " + _this.params.cacheSizeCollectionThreshold));
            return GC_DID_NOT_RUN;
          } else {
            return _this.runGarbageCollection(txn, activeTargetIds);
          }
        });
      };
      LruGarbageCollector2.prototype.getCacheSize = function(txn) {
        return this.delegate.getCacheSize(txn);
      };
      LruGarbageCollector2.prototype.runGarbageCollection = function(txn, activeTargetIds) {
        var _this = this;
        var upperBoundSequenceNumber;
        var sequenceNumbersToCollect, targetsRemoved;
        var countedTargetsTs, foundUpperBoundTs, removedTargetsTs, removedDocumentsTs;
        var startTs = Date.now();
        return this.calculateTargetCount(txn, this.params.percentileToCollect).next(function(sequenceNumbers) {
          if (sequenceNumbers > _this.params.maximumSequenceNumbersToCollect) {
            logDebug("LruGarbageCollector", "Capping sequence numbers to collect down " + ("to the maximum of " + _this.params.maximumSequenceNumbersToCollect + " ") + ("from " + sequenceNumbers));
            sequenceNumbersToCollect = _this.params.maximumSequenceNumbersToCollect;
          } else {
            sequenceNumbersToCollect = sequenceNumbers;
          }
          countedTargetsTs = Date.now();
          return _this.nthSequenceNumber(txn, sequenceNumbersToCollect);
        }).next(function(upperBound) {
          upperBoundSequenceNumber = upperBound;
          foundUpperBoundTs = Date.now();
          return _this.removeTargets(txn, upperBoundSequenceNumber, activeTargetIds);
        }).next(function(numTargetsRemoved) {
          targetsRemoved = numTargetsRemoved;
          removedTargetsTs = Date.now();
          return _this.removeOrphanedDocuments(txn, upperBoundSequenceNumber);
        }).next(function(documentsRemoved) {
          removedDocumentsTs = Date.now();
          if (getLogLevel() <= logger.LogLevel.DEBUG) {
            var desc = "LRU Garbage Collection\n" + ("	Counted targets in " + (countedTargetsTs - startTs) + "ms\n") + ("	Determined least recently used " + sequenceNumbersToCollect + " in ") + (foundUpperBoundTs - countedTargetsTs + "ms\n") + ("	Removed " + targetsRemoved + " targets in ") + (removedTargetsTs - foundUpperBoundTs + "ms\n") + ("	Removed " + documentsRemoved + " documents in ") + (removedDocumentsTs - removedTargetsTs + "ms\n") + ("Total Duration: " + (removedDocumentsTs - startTs) + "ms");
            logDebug("LruGarbageCollector", desc);
          }
          return PersistencePromise.resolve({
            didRun: true,
            sequenceNumbersCollected: sequenceNumbersToCollect,
            targetsRemoved,
            documentsRemoved
          });
        });
      };
      return LruGarbageCollector2;
    }();
    var LOG_TAG$4 = "IndexedDbPersistence";
    var MAX_CLIENT_AGE_MS = 30 * 60 * 1e3;
    var MAX_PRIMARY_ELIGIBLE_AGE_MS = 5e3;
    var CLIENT_METADATA_REFRESH_INTERVAL_MS = 4e3;
    var PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG = "Failed to obtain exclusive access to the persistence layer. To allow shared access, make sure to invoke `enablePersistence()` with `synchronizeTabs:true` in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.";
    var UNSUPPORTED_PLATFORM_ERROR_MSG = "This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.";
    var ZOMBIED_CLIENTS_KEY_PREFIX = "firestore_zombie";
    var MAIN_DATABASE = "main";
    var IndexedDbTransaction = function(_super) {
      tslib.__extends(IndexedDbTransaction2, _super);
      function IndexedDbTransaction2(simpleDbTransaction, currentSequenceNumber) {
        var _this = _super.call(this) || this;
        _this.simpleDbTransaction = simpleDbTransaction;
        _this.currentSequenceNumber = currentSequenceNumber;
        return _this;
      }
      return IndexedDbTransaction2;
    }(PersistenceTransaction);
    var IndexedDbPersistence = function() {
      function IndexedDbPersistence2(allowTabSynchronization, persistenceKey, clientId, lruParams, queue, window2, document2, serializer, sequenceNumberSyncer, forceOwningTab) {
        this.allowTabSynchronization = allowTabSynchronization;
        this.persistenceKey = persistenceKey;
        this.clientId = clientId;
        this.queue = queue;
        this.window = window2;
        this.document = document2;
        this.sequenceNumberSyncer = sequenceNumberSyncer;
        this.forceOwningTab = forceOwningTab;
        this.listenSequence = null;
        this._started = false;
        this.isPrimary = false;
        this.networkEnabled = true;
        this.windowUnloadHandler = null;
        this.inForeground = false;
        this.documentVisibilityHandler = null;
        this.clientMetadataRefresher = null;
        this.lastGarbageCollectionTime = Number.NEGATIVE_INFINITY;
        this.primaryStateListener = function(_) {
          return Promise.resolve();
        };
        if (!IndexedDbPersistence2.isAvailable()) {
          throw new FirestoreError(Code.UNIMPLEMENTED, UNSUPPORTED_PLATFORM_ERROR_MSG);
        }
        this.referenceDelegate = new IndexedDbLruDelegate(this, lruParams);
        this.dbName = persistenceKey + MAIN_DATABASE;
        this.serializer = new LocalSerializer(serializer);
        this.simpleDb = new SimpleDb(this.dbName, SCHEMA_VERSION, new SchemaConverter(this.serializer));
        this.targetCache = new IndexedDbTargetCache(this.referenceDelegate, this.serializer);
        this.indexManager = new IndexedDbIndexManager();
        this.remoteDocumentCache = newIndexedDbRemoteDocumentCache(this.serializer, this.indexManager);
        if (this.window && this.window.localStorage) {
          this.webStorage = this.window.localStorage;
        } else {
          this.webStorage = null;
          if (forceOwningTab === false) {
            logError(LOG_TAG$4, "LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page.");
          }
        }
      }
      IndexedDbPersistence2.getStore = function(txn, store) {
        if (txn instanceof IndexedDbTransaction) {
          return SimpleDb.getStore(txn.simpleDbTransaction, store);
        } else {
          throw fail();
        }
      };
      IndexedDbPersistence2.prototype.start = function() {
        var _this = this;
        return this.updateClientMetadataAndTryBecomePrimary().then(function() {
          if (!_this.isPrimary && !_this.allowTabSynchronization) {
            throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);
          }
          _this.attachVisibilityHandler();
          _this.attachWindowUnloadHook();
          _this.scheduleClientMetadataAndPrimaryLeaseRefreshes();
          return _this.runTransaction("getHighestListenSequenceNumber", "readonly", function(txn) {
            return _this.targetCache.getHighestSequenceNumber(txn);
          });
        }).then(function(highestListenSequenceNumber) {
          _this.listenSequence = new ListenSequence(highestListenSequenceNumber, _this.sequenceNumberSyncer);
        }).then(function() {
          _this._started = true;
        }).catch(function(reason) {
          _this.simpleDb && _this.simpleDb.close();
          return Promise.reject(reason);
        });
      };
      IndexedDbPersistence2.prototype.setPrimaryStateListener = function(primaryStateListener) {
        var _this = this;
        this.primaryStateListener = function(primaryState) {
          return tslib.__awaiter(_this, void 0, void 0, function() {
            return tslib.__generator(this, function(_f) {
              if (this.started) {
                return [2, primaryStateListener(primaryState)];
              }
              return [2];
            });
          });
        };
        return primaryStateListener(this.isPrimary);
      };
      IndexedDbPersistence2.prototype.setDatabaseDeletedListener = function(databaseDeletedListener) {
        var _this = this;
        this.simpleDb.setVersionChangeListener(function(event) {
          return tslib.__awaiter(_this, void 0, void 0, function() {
            return tslib.__generator(this, function(_f) {
              switch (_f.label) {
                case 0:
                  if (!(event.newVersion === null))
                    return [3, 2];
                  return [4, databaseDeletedListener()];
                case 1:
                  _f.sent();
                  _f.label = 2;
                case 2:
                  return [2];
              }
            });
          });
        });
      };
      IndexedDbPersistence2.prototype.setNetworkEnabled = function(networkEnabled) {
        var _this = this;
        if (this.networkEnabled !== networkEnabled) {
          this.networkEnabled = networkEnabled;
          this.queue.enqueueAndForget(function() {
            return tslib.__awaiter(_this, void 0, void 0, function() {
              return tslib.__generator(this, function(_f) {
                switch (_f.label) {
                  case 0:
                    if (!this.started)
                      return [3, 2];
                    return [4, this.updateClientMetadataAndTryBecomePrimary()];
                  case 1:
                    _f.sent();
                    _f.label = 2;
                  case 2:
                    return [2];
                }
              });
            });
          });
        }
      };
      IndexedDbPersistence2.prototype.updateClientMetadataAndTryBecomePrimary = function() {
        var _this = this;
        return this.runTransaction("updateClientMetadataAndTryBecomePrimary", "readwrite", function(txn) {
          var metadataStore = clientMetadataStore(txn);
          return metadataStore.put(new DbClientMetadata(_this.clientId, Date.now(), _this.networkEnabled, _this.inForeground)).next(function() {
            if (_this.isPrimary) {
              return _this.verifyPrimaryLease(txn).next(function(success) {
                if (!success) {
                  _this.isPrimary = false;
                  _this.queue.enqueueRetryable(function() {
                    return _this.primaryStateListener(false);
                  });
                }
              });
            }
          }).next(function() {
            return _this.canActAsPrimary(txn);
          }).next(function(canActAsPrimary) {
            if (_this.isPrimary && !canActAsPrimary) {
              return _this.releasePrimaryLeaseIfHeld(txn).next(function() {
                return false;
              });
            } else if (canActAsPrimary) {
              return _this.acquireOrExtendPrimaryLease(txn).next(function() {
                return true;
              });
            } else {
              return false;
            }
          });
        }).catch(function(e) {
          if (isIndexedDbTransactionError(e)) {
            logDebug(LOG_TAG$4, "Failed to extend owner lease: ", e);
            return _this.isPrimary;
          }
          if (!_this.allowTabSynchronization) {
            throw e;
          }
          logDebug(LOG_TAG$4, "Releasing owner lease after error during lease refresh", e);
          return false;
        }).then(function(isPrimary) {
          if (_this.isPrimary !== isPrimary) {
            _this.queue.enqueueRetryable(function() {
              return _this.primaryStateListener(isPrimary);
            });
          }
          _this.isPrimary = isPrimary;
        });
      };
      IndexedDbPersistence2.prototype.verifyPrimaryLease = function(txn) {
        var _this = this;
        var store = primaryClientStore(txn);
        return store.get(DbPrimaryClient.key).next(function(primaryClient) {
          return PersistencePromise.resolve(_this.isLocalClient(primaryClient));
        });
      };
      IndexedDbPersistence2.prototype.removeClientMetadata = function(txn) {
        var metadataStore = clientMetadataStore(txn);
        return metadataStore.delete(this.clientId);
      };
      IndexedDbPersistence2.prototype.maybeGarbageCollectMultiClientState = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var inactiveClients, _i, inactiveClients_1, inactiveClient;
          var _this = this;
          return tslib.__generator(this, function(_f) {
            switch (_f.label) {
              case 0:
                if (!(this.isPrimary && !this.isWithinAge(this.lastGarbageCollectionTime, MAX_CLIENT_AGE_MS)))
                  return [3, 2];
                this.lastGarbageCollectionTime = Date.now();
                return [4, this.runTransaction("maybeGarbageCollectMultiClientState", "readwrite-primary", function(txn) {
                  var metadataStore = IndexedDbPersistence2.getStore(txn, DbClientMetadata.store);
                  return metadataStore.loadAll().next(function(existingClients) {
                    var active = _this.filterActiveClients(existingClients, MAX_CLIENT_AGE_MS);
                    var inactive = existingClients.filter(function(client) {
                      return active.indexOf(client) === -1;
                    });
                    return PersistencePromise.forEach(inactive, function(inactiveClient2) {
                      return metadataStore.delete(inactiveClient2.clientId);
                    }).next(function() {
                      return inactive;
                    });
                  });
                }).catch(function() {
                  return [];
                })];
              case 1:
                inactiveClients = _f.sent();
                if (this.webStorage) {
                  for (_i = 0, inactiveClients_1 = inactiveClients; _i < inactiveClients_1.length; _i++) {
                    inactiveClient = inactiveClients_1[_i];
                    this.webStorage.removeItem(this.zombiedClientLocalStorageKey(inactiveClient.clientId));
                  }
                }
                _f.label = 2;
              case 2:
                return [2];
            }
          });
        });
      };
      IndexedDbPersistence2.prototype.scheduleClientMetadataAndPrimaryLeaseRefreshes = function() {
        var _this = this;
        this.clientMetadataRefresher = this.queue.enqueueAfterDelay("client_metadata_refresh", CLIENT_METADATA_REFRESH_INTERVAL_MS, function() {
          return _this.updateClientMetadataAndTryBecomePrimary().then(function() {
            return _this.maybeGarbageCollectMultiClientState();
          }).then(function() {
            return _this.scheduleClientMetadataAndPrimaryLeaseRefreshes();
          });
        });
      };
      IndexedDbPersistence2.prototype.isLocalClient = function(client) {
        return client ? client.ownerId === this.clientId : false;
      };
      IndexedDbPersistence2.prototype.canActAsPrimary = function(txn) {
        var _this = this;
        if (this.forceOwningTab) {
          return PersistencePromise.resolve(true);
        }
        var store = primaryClientStore(txn);
        return store.get(DbPrimaryClient.key).next(function(currentPrimary) {
          var currentLeaseIsValid = currentPrimary !== null && _this.isWithinAge(currentPrimary.leaseTimestampMs, MAX_PRIMARY_ELIGIBLE_AGE_MS) && !_this.isClientZombied(currentPrimary.ownerId);
          if (currentLeaseIsValid) {
            if (_this.isLocalClient(currentPrimary) && _this.networkEnabled) {
              return true;
            }
            if (!_this.isLocalClient(currentPrimary)) {
              if (!currentPrimary.allowTabSynchronization) {
                throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);
              }
              return false;
            }
          }
          if (_this.networkEnabled && _this.inForeground) {
            return true;
          }
          return clientMetadataStore(txn).loadAll().next(function(existingClients) {
            var preferredCandidate = _this.filterActiveClients(existingClients, MAX_PRIMARY_ELIGIBLE_AGE_MS).find(function(otherClient) {
              if (_this.clientId !== otherClient.clientId) {
                var otherClientHasBetterNetworkState = !_this.networkEnabled && otherClient.networkEnabled;
                var otherClientHasBetterVisibility = !_this.inForeground && otherClient.inForeground;
                var otherClientHasSameNetworkState = _this.networkEnabled === otherClient.networkEnabled;
                if (otherClientHasBetterNetworkState || otherClientHasBetterVisibility && otherClientHasSameNetworkState) {
                  return true;
                }
              }
              return false;
            });
            return preferredCandidate === void 0;
          });
        }).next(function(canActAsPrimary) {
          if (_this.isPrimary !== canActAsPrimary) {
            logDebug(LOG_TAG$4, "Client " + (canActAsPrimary ? "is" : "is not") + " eligible for a primary lease.");
          }
          return canActAsPrimary;
        });
      };
      IndexedDbPersistence2.prototype.shutdown = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var _this = this;
          return tslib.__generator(this, function(_f) {
            switch (_f.label) {
              case 0:
                this._started = false;
                this.markClientZombied();
                if (this.clientMetadataRefresher) {
                  this.clientMetadataRefresher.cancel();
                  this.clientMetadataRefresher = null;
                }
                this.detachVisibilityHandler();
                this.detachWindowUnloadHook();
                return [4, this.simpleDb.runTransaction("shutdown", "readwrite", [DbPrimaryClient.store, DbClientMetadata.store], function(simpleDbTxn) {
                  var persistenceTransaction = new IndexedDbTransaction(simpleDbTxn, ListenSequence.INVALID);
                  return _this.releasePrimaryLeaseIfHeld(persistenceTransaction).next(function() {
                    return _this.removeClientMetadata(persistenceTransaction);
                  });
                })];
              case 1:
                _f.sent();
                this.simpleDb.close();
                this.removeClientZombiedEntry();
                return [2];
            }
          });
        });
      };
      IndexedDbPersistence2.prototype.filterActiveClients = function(clients, activityThresholdMs) {
        var _this = this;
        return clients.filter(function(client) {
          return _this.isWithinAge(client.updateTimeMs, activityThresholdMs) && !_this.isClientZombied(client.clientId);
        });
      };
      IndexedDbPersistence2.prototype.getActiveClients = function() {
        var _this = this;
        return this.runTransaction("getActiveClients", "readonly", function(txn) {
          return clientMetadataStore(txn).loadAll().next(function(clients) {
            return _this.filterActiveClients(clients, MAX_CLIENT_AGE_MS).map(function(clientMetadata) {
              return clientMetadata.clientId;
            });
          });
        });
      };
      Object.defineProperty(IndexedDbPersistence2.prototype, "started", {
        get: function() {
          return this._started;
        },
        enumerable: false,
        configurable: true
      });
      IndexedDbPersistence2.prototype.getMutationQueue = function(user) {
        return IndexedDbMutationQueue.forUser(user, this.serializer, this.indexManager, this.referenceDelegate);
      };
      IndexedDbPersistence2.prototype.getTargetCache = function() {
        return this.targetCache;
      };
      IndexedDbPersistence2.prototype.getRemoteDocumentCache = function() {
        return this.remoteDocumentCache;
      };
      IndexedDbPersistence2.prototype.getIndexManager = function() {
        return this.indexManager;
      };
      IndexedDbPersistence2.prototype.runTransaction = function(action, mode, transactionOperation) {
        var _this = this;
        logDebug(LOG_TAG$4, "Starting transaction:", action);
        var simpleDbMode = mode === "readonly" ? "readonly" : "readwrite";
        var persistenceTransaction;
        return this.simpleDb.runTransaction(action, simpleDbMode, ALL_STORES, function(simpleDbTxn) {
          persistenceTransaction = new IndexedDbTransaction(simpleDbTxn, _this.listenSequence ? _this.listenSequence.next() : ListenSequence.INVALID);
          if (mode === "readwrite-primary") {
            return _this.verifyPrimaryLease(persistenceTransaction).next(function(holdsPrimaryLease) {
              if (holdsPrimaryLease) {
                return true;
              }
              return _this.canActAsPrimary(persistenceTransaction);
            }).next(function(holdsPrimaryLease) {
              if (!holdsPrimaryLease) {
                logError("Failed to obtain primary lease for action '" + action + "'.");
                _this.isPrimary = false;
                _this.queue.enqueueRetryable(function() {
                  return _this.primaryStateListener(false);
                });
                throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_LOST_ERROR_MSG);
              }
              return transactionOperation(persistenceTransaction);
            }).next(function(result) {
              return _this.acquireOrExtendPrimaryLease(persistenceTransaction).next(function() {
                return result;
              });
            });
          } else {
            return _this.verifyAllowTabSynchronization(persistenceTransaction).next(function() {
              return transactionOperation(persistenceTransaction);
            });
          }
        }).then(function(result) {
          persistenceTransaction.raiseOnCommittedEvent();
          return result;
        });
      };
      IndexedDbPersistence2.prototype.verifyAllowTabSynchronization = function(txn) {
        var _this = this;
        var store = primaryClientStore(txn);
        return store.get(DbPrimaryClient.key).next(function(currentPrimary) {
          var currentLeaseIsValid = currentPrimary !== null && _this.isWithinAge(currentPrimary.leaseTimestampMs, MAX_PRIMARY_ELIGIBLE_AGE_MS) && !_this.isClientZombied(currentPrimary.ownerId);
          if (currentLeaseIsValid && !_this.isLocalClient(currentPrimary)) {
            if (!_this.forceOwningTab && (!_this.allowTabSynchronization || !currentPrimary.allowTabSynchronization)) {
              throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);
            }
          }
        });
      };
      IndexedDbPersistence2.prototype.acquireOrExtendPrimaryLease = function(txn) {
        var newPrimary = new DbPrimaryClient(this.clientId, this.allowTabSynchronization, Date.now());
        return primaryClientStore(txn).put(DbPrimaryClient.key, newPrimary);
      };
      IndexedDbPersistence2.isAvailable = function() {
        return SimpleDb.isAvailable();
      };
      IndexedDbPersistence2.prototype.releasePrimaryLeaseIfHeld = function(txn) {
        var _this = this;
        var store = primaryClientStore(txn);
        return store.get(DbPrimaryClient.key).next(function(primaryClient) {
          if (_this.isLocalClient(primaryClient)) {
            logDebug(LOG_TAG$4, "Releasing primary lease.");
            return store.delete(DbPrimaryClient.key);
          } else {
            return PersistencePromise.resolve();
          }
        });
      };
      IndexedDbPersistence2.prototype.isWithinAge = function(updateTimeMs, maxAgeMs) {
        var now = Date.now();
        var minAcceptable = now - maxAgeMs;
        var maxAcceptable = now;
        if (updateTimeMs < minAcceptable) {
          return false;
        } else if (updateTimeMs > maxAcceptable) {
          logError("Detected an update time that is in the future: " + updateTimeMs + " > " + maxAcceptable);
          return false;
        }
        return true;
      };
      IndexedDbPersistence2.prototype.attachVisibilityHandler = function() {
        var _this = this;
        if (this.document !== null && typeof this.document.addEventListener === "function") {
          this.documentVisibilityHandler = function() {
            _this.queue.enqueueAndForget(function() {
              _this.inForeground = _this.document.visibilityState === "visible";
              return _this.updateClientMetadataAndTryBecomePrimary();
            });
          };
          this.document.addEventListener("visibilitychange", this.documentVisibilityHandler);
          this.inForeground = this.document.visibilityState === "visible";
        }
      };
      IndexedDbPersistence2.prototype.detachVisibilityHandler = function() {
        if (this.documentVisibilityHandler) {
          this.document.removeEventListener("visibilitychange", this.documentVisibilityHandler);
          this.documentVisibilityHandler = null;
        }
      };
      IndexedDbPersistence2.prototype.attachWindowUnloadHook = function() {
        var _this = this;
        var _a;
        if (typeof ((_a = this.window) === null || _a === void 0 ? void 0 : _a.addEventListener) === "function") {
          this.windowUnloadHandler = function() {
            _this.markClientZombied();
            _this.queue.enqueueAndForget(function() {
              return _this.shutdown();
            });
          };
          this.window.addEventListener("unload", this.windowUnloadHandler);
        }
      };
      IndexedDbPersistence2.prototype.detachWindowUnloadHook = function() {
        if (this.windowUnloadHandler) {
          this.window.removeEventListener("unload", this.windowUnloadHandler);
          this.windowUnloadHandler = null;
        }
      };
      IndexedDbPersistence2.prototype.isClientZombied = function(clientId) {
        var _a;
        try {
          var isZombied = ((_a = this.webStorage) === null || _a === void 0 ? void 0 : _a.getItem(this.zombiedClientLocalStorageKey(clientId))) !== null;
          logDebug(LOG_TAG$4, "Client '" + clientId + "' " + (isZombied ? "is" : "is not") + " zombied in LocalStorage");
          return isZombied;
        } catch (e) {
          logError(LOG_TAG$4, "Failed to get zombied client id.", e);
          return false;
        }
      };
      IndexedDbPersistence2.prototype.markClientZombied = function() {
        if (!this.webStorage) {
          return;
        }
        try {
          this.webStorage.setItem(this.zombiedClientLocalStorageKey(this.clientId), String(Date.now()));
        } catch (e) {
          logError("Failed to set zombie client id.", e);
        }
      };
      IndexedDbPersistence2.prototype.removeClientZombiedEntry = function() {
        if (!this.webStorage) {
          return;
        }
        try {
          this.webStorage.removeItem(this.zombiedClientLocalStorageKey(this.clientId));
        } catch (e) {
        }
      };
      IndexedDbPersistence2.prototype.zombiedClientLocalStorageKey = function(clientId) {
        return ZOMBIED_CLIENTS_KEY_PREFIX + "_" + this.persistenceKey + "_" + clientId;
      };
      return IndexedDbPersistence2;
    }();
    function primaryClientStore(txn) {
      return IndexedDbPersistence.getStore(txn, DbPrimaryClient.store);
    }
    function clientMetadataStore(txn) {
      return IndexedDbPersistence.getStore(txn, DbClientMetadata.store);
    }
    var IndexedDbLruDelegate = function() {
      function IndexedDbLruDelegate2(db, params) {
        this.db = db;
        this.garbageCollector = new LruGarbageCollector(this, params);
      }
      IndexedDbLruDelegate2.prototype.getSequenceNumberCount = function(txn) {
        var docCountPromise = this.orphanedDocumentCount(txn);
        var targetCountPromise = this.db.getTargetCache().getTargetCount(txn);
        return targetCountPromise.next(function(targetCount) {
          return docCountPromise.next(function(docCount) {
            return targetCount + docCount;
          });
        });
      };
      IndexedDbLruDelegate2.prototype.orphanedDocumentCount = function(txn) {
        var orphanedCount = 0;
        return this.forEachOrphanedDocumentSequenceNumber(txn, function(_) {
          orphanedCount++;
        }).next(function() {
          return orphanedCount;
        });
      };
      IndexedDbLruDelegate2.prototype.forEachTarget = function(txn, f) {
        return this.db.getTargetCache().forEachTarget(txn, f);
      };
      IndexedDbLruDelegate2.prototype.forEachOrphanedDocumentSequenceNumber = function(txn, f) {
        return this.forEachOrphanedDocument(txn, function(docKey, sequenceNumber) {
          return f(sequenceNumber);
        });
      };
      IndexedDbLruDelegate2.prototype.addReference = function(txn, targetId, key) {
        return writeSentinelKey(txn, key);
      };
      IndexedDbLruDelegate2.prototype.removeReference = function(txn, targetId, key) {
        return writeSentinelKey(txn, key);
      };
      IndexedDbLruDelegate2.prototype.removeTargets = function(txn, upperBound, activeTargetIds) {
        return this.db.getTargetCache().removeTargets(txn, upperBound, activeTargetIds);
      };
      IndexedDbLruDelegate2.prototype.markPotentiallyOrphaned = function(txn, key) {
        return writeSentinelKey(txn, key);
      };
      IndexedDbLruDelegate2.prototype.isPinned = function(txn, docKey) {
        return mutationQueuesContainKey(txn, docKey);
      };
      IndexedDbLruDelegate2.prototype.removeOrphanedDocuments = function(txn, upperBound) {
        var _this = this;
        var documentCache = this.db.getRemoteDocumentCache();
        var changeBuffer = documentCache.newChangeBuffer();
        var promises = [];
        var documentCount = 0;
        var iteration = this.forEachOrphanedDocument(txn, function(docKey, sequenceNumber) {
          if (sequenceNumber <= upperBound) {
            var p = _this.isPinned(txn, docKey).next(function(isPinned) {
              if (!isPinned) {
                documentCount++;
                return changeBuffer.getEntry(txn, docKey).next(function() {
                  changeBuffer.removeEntry(docKey);
                  return documentTargetStore(txn).delete(sentinelKey$1(docKey));
                });
              }
            });
            promises.push(p);
          }
        });
        return iteration.next(function() {
          return PersistencePromise.waitFor(promises);
        }).next(function() {
          return changeBuffer.apply(txn);
        }).next(function() {
          return documentCount;
        });
      };
      IndexedDbLruDelegate2.prototype.removeTarget = function(txn, targetData) {
        var updated = targetData.withSequenceNumber(txn.currentSequenceNumber);
        return this.db.getTargetCache().updateTargetData(txn, updated);
      };
      IndexedDbLruDelegate2.prototype.updateLimboDocument = function(txn, key) {
        return writeSentinelKey(txn, key);
      };
      IndexedDbLruDelegate2.prototype.forEachOrphanedDocument = function(txn, f) {
        var store = documentTargetStore(txn);
        var nextToReport = ListenSequence.INVALID;
        var nextPath;
        return store.iterate({
          index: DbTargetDocument.documentTargetsIndex
        }, function(_f, _g) {
          var targetId = _f[0], docKey = _f[1];
          var path2 = _g.path, sequenceNumber = _g.sequenceNumber;
          if (targetId === 0) {
            if (nextToReport !== ListenSequence.INVALID) {
              f(new DocumentKey(decodeResourcePath(nextPath)), nextToReport);
            }
            nextToReport = sequenceNumber;
            nextPath = path2;
          } else {
            nextToReport = ListenSequence.INVALID;
          }
        }).next(function() {
          if (nextToReport !== ListenSequence.INVALID) {
            f(new DocumentKey(decodeResourcePath(nextPath)), nextToReport);
          }
        });
      };
      IndexedDbLruDelegate2.prototype.getCacheSize = function(txn) {
        return this.db.getRemoteDocumentCache().getSize(txn);
      };
      return IndexedDbLruDelegate2;
    }();
    function sentinelKey$1(key) {
      return [0, encodeResourcePath(key.path)];
    }
    function sentinelRow(key, sequenceNumber) {
      return new DbTargetDocument(0, encodeResourcePath(key.path), sequenceNumber);
    }
    function writeSentinelKey(txn, key) {
      return documentTargetStore(txn).put(sentinelRow(key, txn.currentSequenceNumber));
    }
    function indexedDbStoragePrefix(databaseId, persistenceKey) {
      var database = databaseId.projectId;
      if (!databaseId.isDefaultDatabase) {
        database += "." + databaseId.database;
      }
      return "firestore/" + persistenceKey + "/" + database + "/";
    }
    function indexedDbClearPersistence(persistenceKey) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var dbName;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              if (!SimpleDb.isAvailable()) {
                return [2, Promise.resolve()];
              }
              dbName = persistenceKey + MAIN_DATABASE;
              return [4, SimpleDb.delete(dbName)];
            case 1:
              _f.sent();
              return [2];
          }
        });
      });
    }
    var LOG_TAG$5 = "LocalStore";
    var RESUME_TOKEN_MAX_AGE_MICROS = 5 * 60 * 1e6;
    var LocalStoreImpl = function() {
      function LocalStoreImpl2(persistence, queryEngine, initialUser) {
        this.persistence = persistence;
        this.queryEngine = queryEngine;
        this.targetDataByTarget = new SortedMap(primitiveComparator);
        this.targetIdByTarget = new ObjectMap(function(t) {
          return canonifyTarget(t);
        }, targetEquals);
        this.lastDocumentChangeReadTime = SnapshotVersion.min();
        this.mutationQueue = persistence.getMutationQueue(initialUser);
        this.remoteDocuments = persistence.getRemoteDocumentCache();
        this.targetCache = persistence.getTargetCache();
        this.localDocuments = new LocalDocumentsView(this.remoteDocuments, this.mutationQueue, this.persistence.getIndexManager());
        this.queryEngine.setLocalDocumentsView(this.localDocuments);
      }
      LocalStoreImpl2.prototype.collectGarbage = function(garbageCollector) {
        var _this = this;
        return this.persistence.runTransaction("Collect garbage", "readwrite-primary", function(txn) {
          return garbageCollector.collect(txn, _this.targetDataByTarget);
        });
      };
      return LocalStoreImpl2;
    }();
    function newLocalStore(persistence, queryEngine, initialUser) {
      return new LocalStoreImpl(persistence, queryEngine, initialUser);
    }
    function handleUserChange(localStore, user) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var localStoreImpl, newMutationQueue, newLocalDocuments, result;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              localStoreImpl = debugCast(localStore);
              newMutationQueue = localStoreImpl.mutationQueue;
              newLocalDocuments = localStoreImpl.localDocuments;
              return [4, localStoreImpl.persistence.runTransaction("Handle user change", "readonly", function(txn) {
                var oldBatches;
                return localStoreImpl.mutationQueue.getAllMutationBatches(txn).next(function(promisedOldBatches) {
                  oldBatches = promisedOldBatches;
                  newMutationQueue = localStoreImpl.persistence.getMutationQueue(user);
                  newLocalDocuments = new LocalDocumentsView(localStoreImpl.remoteDocuments, newMutationQueue, localStoreImpl.persistence.getIndexManager());
                  return newMutationQueue.getAllMutationBatches(txn);
                }).next(function(newBatches) {
                  var removedBatchIds = [];
                  var addedBatchIds = [];
                  var changedKeys = documentKeySet();
                  for (var _i = 0, oldBatches_1 = oldBatches; _i < oldBatches_1.length; _i++) {
                    var batch = oldBatches_1[_i];
                    removedBatchIds.push(batch.batchId);
                    for (var _f2 = 0, _g = batch.mutations; _f2 < _g.length; _f2++) {
                      var mutation = _g[_f2];
                      changedKeys = changedKeys.add(mutation.key);
                    }
                  }
                  for (var _h = 0, newBatches_1 = newBatches; _h < newBatches_1.length; _h++) {
                    var batch = newBatches_1[_h];
                    addedBatchIds.push(batch.batchId);
                    for (var _j = 0, _k = batch.mutations; _j < _k.length; _j++) {
                      var mutation = _k[_j];
                      changedKeys = changedKeys.add(mutation.key);
                    }
                  }
                  return newLocalDocuments.getDocuments(txn, changedKeys).next(function(affectedDocuments) {
                    return {
                      affectedDocuments,
                      removedBatchIds,
                      addedBatchIds
                    };
                  });
                });
              })];
            case 1:
              result = _f.sent();
              localStoreImpl.mutationQueue = newMutationQueue;
              localStoreImpl.localDocuments = newLocalDocuments;
              localStoreImpl.queryEngine.setLocalDocumentsView(localStoreImpl.localDocuments);
              return [2, result];
          }
        });
      });
    }
    function localWrite(localStore, mutations) {
      var localStoreImpl = debugCast(localStore);
      var localWriteTime = Timestamp.now();
      var keys = mutations.reduce(function(keys2, m) {
        return keys2.add(m.key);
      }, documentKeySet());
      var existingDocs;
      return localStoreImpl.persistence.runTransaction("Locally write mutations", "readwrite", function(txn) {
        return localStoreImpl.localDocuments.getDocuments(txn, keys).next(function(docs) {
          existingDocs = docs;
          var baseMutations = [];
          for (var _i = 0, mutations_2 = mutations; _i < mutations_2.length; _i++) {
            var mutation = mutations_2[_i];
            var baseValue = extractMutationBaseValue(mutation, existingDocs.get(mutation.key));
            if (baseValue != null) {
              baseMutations.push(new PatchMutation(mutation.key, baseValue, extractFieldMask(baseValue.proto.mapValue), Precondition.exists(true)));
            }
          }
          return localStoreImpl.mutationQueue.addMutationBatch(txn, localWriteTime, baseMutations, mutations);
        });
      }).then(function(batch) {
        var changes = batch.applyToLocalDocumentSet(existingDocs);
        return { batchId: batch.batchId, changes };
      });
    }
    function acknowledgeBatch(localStore, batchResult) {
      var localStoreImpl = debugCast(localStore);
      return localStoreImpl.persistence.runTransaction("Acknowledge batch", "readwrite-primary", function(txn) {
        var affected = batchResult.batch.keys();
        var documentBuffer = localStoreImpl.remoteDocuments.newChangeBuffer({
          trackRemovals: true
        });
        return applyWriteToRemoteDocuments(localStoreImpl, txn, batchResult, documentBuffer).next(function() {
          return documentBuffer.apply(txn);
        }).next(function() {
          return localStoreImpl.mutationQueue.performConsistencyCheck(txn);
        }).next(function() {
          return localStoreImpl.localDocuments.getDocuments(txn, affected);
        });
      });
    }
    function rejectBatch(localStore, batchId) {
      var localStoreImpl = debugCast(localStore);
      return localStoreImpl.persistence.runTransaction("Reject batch", "readwrite-primary", function(txn) {
        var affectedKeys;
        return localStoreImpl.mutationQueue.lookupMutationBatch(txn, batchId).next(function(batch) {
          hardAssert(batch !== null);
          affectedKeys = batch.keys();
          return localStoreImpl.mutationQueue.removeMutationBatch(txn, batch);
        }).next(function() {
          return localStoreImpl.mutationQueue.performConsistencyCheck(txn);
        }).next(function() {
          return localStoreImpl.localDocuments.getDocuments(txn, affectedKeys);
        });
      });
    }
    function getHighestUnacknowledgedBatchId(localStore) {
      var localStoreImpl = debugCast(localStore);
      return localStoreImpl.persistence.runTransaction("Get highest unacknowledged batch id", "readonly", function(txn) {
        return localStoreImpl.mutationQueue.getHighestUnacknowledgedBatchId(txn);
      });
    }
    function getLastRemoteSnapshotVersion(localStore) {
      var localStoreImpl = debugCast(localStore);
      return localStoreImpl.persistence.runTransaction("Get last remote snapshot version", "readonly", function(txn) {
        return localStoreImpl.targetCache.getLastRemoteSnapshotVersion(txn);
      });
    }
    function applyRemoteEventToLocalCache(localStore, remoteEvent) {
      var localStoreImpl = debugCast(localStore);
      var remoteVersion = remoteEvent.snapshotVersion;
      var newTargetDataByTargetMap = localStoreImpl.targetDataByTarget;
      return localStoreImpl.persistence.runTransaction("Apply remote event", "readwrite-primary", function(txn) {
        var documentBuffer = localStoreImpl.remoteDocuments.newChangeBuffer({
          trackRemovals: true
        });
        newTargetDataByTargetMap = localStoreImpl.targetDataByTarget;
        var promises = [];
        remoteEvent.targetChanges.forEach(function(change, targetId) {
          var oldTargetData = newTargetDataByTargetMap.get(targetId);
          if (!oldTargetData) {
            return;
          }
          promises.push(localStoreImpl.targetCache.removeMatchingKeys(txn, change.removedDocuments, targetId).next(function() {
            return localStoreImpl.targetCache.addMatchingKeys(txn, change.addedDocuments, targetId);
          }));
          var resumeToken = change.resumeToken;
          if (resumeToken.approximateByteSize() > 0) {
            var newTargetData = oldTargetData.withResumeToken(resumeToken, remoteVersion).withSequenceNumber(txn.currentSequenceNumber);
            newTargetDataByTargetMap = newTargetDataByTargetMap.insert(targetId, newTargetData);
            if (shouldPersistTargetData(oldTargetData, newTargetData, change)) {
              promises.push(localStoreImpl.targetCache.updateTargetData(txn, newTargetData));
            }
          }
        });
        var changedDocs = maybeDocumentMap();
        var updatedKeys = documentKeySet();
        remoteEvent.documentUpdates.forEach(function(key, doc) {
          updatedKeys = updatedKeys.add(key);
        });
        promises.push(documentBuffer.getEntries(txn, updatedKeys).next(function(existingDocs) {
          remoteEvent.documentUpdates.forEach(function(key, doc) {
            var existingDoc = existingDocs.get(key);
            if (doc instanceof NoDocument && doc.version.isEqual(SnapshotVersion.min())) {
              documentBuffer.removeEntry(key, remoteVersion);
              changedDocs = changedDocs.insert(key, doc);
            } else if (existingDoc == null || doc.version.compareTo(existingDoc.version) > 0 || doc.version.compareTo(existingDoc.version) === 0 && existingDoc.hasPendingWrites) {
              documentBuffer.addEntry(doc, remoteVersion);
              changedDocs = changedDocs.insert(key, doc);
            } else {
              logDebug(LOG_TAG$5, "Ignoring outdated watch update for ", key, ". Current version:", existingDoc.version, " Watch version:", doc.version);
            }
            if (remoteEvent.resolvedLimboDocuments.has(key)) {
              promises.push(localStoreImpl.persistence.referenceDelegate.updateLimboDocument(txn, key));
            }
          });
        }));
        if (!remoteVersion.isEqual(SnapshotVersion.min())) {
          var updateRemoteVersion = localStoreImpl.targetCache.getLastRemoteSnapshotVersion(txn).next(function(lastRemoteSnapshotVersion) {
            return localStoreImpl.targetCache.setTargetsMetadata(txn, txn.currentSequenceNumber, remoteVersion);
          });
          promises.push(updateRemoteVersion);
        }
        return PersistencePromise.waitFor(promises).next(function() {
          return documentBuffer.apply(txn);
        }).next(function() {
          return localStoreImpl.localDocuments.getLocalViewOfDocuments(txn, changedDocs);
        });
      }).then(function(changedDocs) {
        localStoreImpl.targetDataByTarget = newTargetDataByTargetMap;
        return changedDocs;
      });
    }
    function shouldPersistTargetData(oldTargetData, newTargetData, change) {
      hardAssert(newTargetData.resumeToken.approximateByteSize() > 0);
      if (oldTargetData.resumeToken.approximateByteSize() === 0) {
        return true;
      }
      var timeDelta = newTargetData.snapshotVersion.toMicroseconds() - oldTargetData.snapshotVersion.toMicroseconds();
      if (timeDelta >= RESUME_TOKEN_MAX_AGE_MICROS) {
        return true;
      }
      var changes = change.addedDocuments.size + change.modifiedDocuments.size + change.removedDocuments.size;
      return changes > 0;
    }
    function notifyLocalViewChanges(localStore, viewChanges) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var localStoreImpl, e_2, _i, viewChanges_1, viewChange, targetId, targetData, lastLimboFreeSnapshotVersion, updatedTargetData;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              localStoreImpl = debugCast(localStore);
              _f.label = 1;
            case 1:
              _f.trys.push([1, 3, , 4]);
              return [4, localStoreImpl.persistence.runTransaction("notifyLocalViewChanges", "readwrite", function(txn) {
                return PersistencePromise.forEach(viewChanges, function(viewChange2) {
                  return PersistencePromise.forEach(viewChange2.addedKeys, function(key) {
                    return localStoreImpl.persistence.referenceDelegate.addReference(txn, viewChange2.targetId, key);
                  }).next(function() {
                    return PersistencePromise.forEach(viewChange2.removedKeys, function(key) {
                      return localStoreImpl.persistence.referenceDelegate.removeReference(txn, viewChange2.targetId, key);
                    });
                  });
                });
              })];
            case 2:
              _f.sent();
              return [3, 4];
            case 3:
              e_2 = _f.sent();
              if (isIndexedDbTransactionError(e_2)) {
                logDebug(LOG_TAG$5, "Failed to update sequence numbers: " + e_2);
              } else {
                throw e_2;
              }
              return [3, 4];
            case 4:
              for (_i = 0, viewChanges_1 = viewChanges; _i < viewChanges_1.length; _i++) {
                viewChange = viewChanges_1[_i];
                targetId = viewChange.targetId;
                if (!viewChange.fromCache) {
                  targetData = localStoreImpl.targetDataByTarget.get(targetId);
                  lastLimboFreeSnapshotVersion = targetData.snapshotVersion;
                  updatedTargetData = targetData.withLastLimboFreeSnapshotVersion(lastLimboFreeSnapshotVersion);
                  localStoreImpl.targetDataByTarget = localStoreImpl.targetDataByTarget.insert(targetId, updatedTargetData);
                }
              }
              return [2];
          }
        });
      });
    }
    function nextMutationBatch(localStore, afterBatchId) {
      var localStoreImpl = debugCast(localStore);
      return localStoreImpl.persistence.runTransaction("Get next mutation batch", "readonly", function(txn) {
        if (afterBatchId === void 0) {
          afterBatchId = BATCHID_UNKNOWN;
        }
        return localStoreImpl.mutationQueue.getNextMutationBatchAfterBatchId(txn, afterBatchId);
      });
    }
    function readLocalDocument(localStore, key) {
      var localStoreImpl = debugCast(localStore);
      return localStoreImpl.persistence.runTransaction("read document", "readonly", function(txn) {
        return localStoreImpl.localDocuments.getDocument(txn, key);
      });
    }
    function allocateTarget(localStore, target) {
      var localStoreImpl = debugCast(localStore);
      return localStoreImpl.persistence.runTransaction("Allocate target", "readwrite", function(txn) {
        var targetData;
        return localStoreImpl.targetCache.getTargetData(txn, target).next(function(cached) {
          if (cached) {
            targetData = cached;
            return PersistencePromise.resolve(targetData);
          } else {
            return localStoreImpl.targetCache.allocateTargetId(txn).next(function(targetId) {
              targetData = new TargetData(target, targetId, 0, txn.currentSequenceNumber);
              return localStoreImpl.targetCache.addTargetData(txn, targetData).next(function() {
                return targetData;
              });
            });
          }
        });
      }).then(function(targetData) {
        var cachedTargetData = localStoreImpl.targetDataByTarget.get(targetData.targetId);
        if (cachedTargetData === null || targetData.snapshotVersion.compareTo(cachedTargetData.snapshotVersion) > 0) {
          localStoreImpl.targetDataByTarget = localStoreImpl.targetDataByTarget.insert(targetData.targetId, targetData);
          localStoreImpl.targetIdByTarget.set(target, targetData.targetId);
        }
        return targetData;
      });
    }
    function getLocalTargetData(localStore, transaction, target) {
      var localStoreImpl = debugCast(localStore);
      var targetId = localStoreImpl.targetIdByTarget.get(target);
      if (targetId !== void 0) {
        return PersistencePromise.resolve(localStoreImpl.targetDataByTarget.get(targetId));
      } else {
        return localStoreImpl.targetCache.getTargetData(transaction, target);
      }
    }
    function releaseTarget(localStore, targetId, keepPersistedTargetData) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var localStoreImpl, targetData, mode, e_3;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              localStoreImpl = debugCast(localStore);
              targetData = localStoreImpl.targetDataByTarget.get(targetId);
              mode = keepPersistedTargetData ? "readwrite" : "readwrite-primary";
              _f.label = 1;
            case 1:
              _f.trys.push([1, 4, , 5]);
              if (!!keepPersistedTargetData)
                return [3, 3];
              return [4, localStoreImpl.persistence.runTransaction("Release target", mode, function(txn) {
                return localStoreImpl.persistence.referenceDelegate.removeTarget(txn, targetData);
              })];
            case 2:
              _f.sent();
              _f.label = 3;
            case 3:
              return [3, 5];
            case 4:
              e_3 = _f.sent();
              if (isIndexedDbTransactionError(e_3)) {
                logDebug(LOG_TAG$5, "Failed to update sequence numbers for target " + targetId + ": " + e_3);
              } else {
                throw e_3;
              }
              return [3, 5];
            case 5:
              localStoreImpl.targetDataByTarget = localStoreImpl.targetDataByTarget.remove(targetId);
              localStoreImpl.targetIdByTarget.delete(targetData.target);
              return [2];
          }
        });
      });
    }
    function executeQuery(localStore, query, usePreviousResults) {
      var localStoreImpl = debugCast(localStore);
      var lastLimboFreeSnapshotVersion = SnapshotVersion.min();
      var remoteKeys = documentKeySet();
      return localStoreImpl.persistence.runTransaction("Execute query", "readonly", function(txn) {
        return getLocalTargetData(localStoreImpl, txn, queryToTarget(query)).next(function(targetData) {
          if (targetData) {
            lastLimboFreeSnapshotVersion = targetData.lastLimboFreeSnapshotVersion;
            return localStoreImpl.targetCache.getMatchingKeysForTargetId(txn, targetData.targetId).next(function(result) {
              remoteKeys = result;
            });
          }
        }).next(function() {
          return localStoreImpl.queryEngine.getDocumentsMatchingQuery(txn, query, usePreviousResults ? lastLimboFreeSnapshotVersion : SnapshotVersion.min(), usePreviousResults ? remoteKeys : documentKeySet());
        }).next(function(documents) {
          return { documents, remoteKeys };
        });
      });
    }
    function applyWriteToRemoteDocuments(localStoreImpl, txn, batchResult, documentBuffer) {
      var batch = batchResult.batch;
      var docKeys = batch.keys();
      var promiseChain = PersistencePromise.resolve();
      docKeys.forEach(function(docKey) {
        promiseChain = promiseChain.next(function() {
          return documentBuffer.getEntry(txn, docKey);
        }).next(function(remoteDoc) {
          var doc = remoteDoc;
          var ackVersion = batchResult.docVersions.get(docKey);
          hardAssert(ackVersion !== null);
          if (!doc || doc.version.compareTo(ackVersion) < 0) {
            doc = batch.applyToRemoteDocument(docKey, doc, batchResult);
            if (!doc)
              ;
            else {
              documentBuffer.addEntry(doc, batchResult.commitVersion);
            }
          }
        });
      });
      return promiseChain.next(function() {
        return localStoreImpl.mutationQueue.removeMutationBatch(txn, batch);
      });
    }
    function lookupMutationDocuments(localStore, batchId) {
      var localStoreImpl = debugCast(localStore);
      var mutationQueueImpl = debugCast(localStoreImpl.mutationQueue);
      return localStoreImpl.persistence.runTransaction("Lookup mutation documents", "readonly", function(txn) {
        return mutationQueueImpl.lookupMutationKeys(txn, batchId).next(function(keys) {
          if (keys) {
            return localStoreImpl.localDocuments.getDocuments(txn, keys);
          } else {
            return PersistencePromise.resolve(null);
          }
        });
      });
    }
    function removeCachedMutationBatchMetadata(localStore, batchId) {
      var mutationQueueImpl = debugCast(debugCast(localStore, LocalStoreImpl).mutationQueue);
      mutationQueueImpl.removeCachedMutationKeys(batchId);
    }
    function getActiveClientsFromPersistence(localStore) {
      var persistenceImpl = debugCast(debugCast(localStore, LocalStoreImpl).persistence);
      return persistenceImpl.getActiveClients();
    }
    function getCachedTarget(localStore, targetId) {
      var localStoreImpl = debugCast(localStore);
      var targetCacheImpl = debugCast(localStoreImpl.targetCache);
      var cachedTargetData = localStoreImpl.targetDataByTarget.get(targetId);
      if (cachedTargetData) {
        return Promise.resolve(cachedTargetData.target);
      } else {
        return localStoreImpl.persistence.runTransaction("Get target data", "readonly", function(txn) {
          return targetCacheImpl.getTargetDataForTarget(txn, targetId).next(function(targetData) {
            return targetData ? targetData.target : null;
          });
        });
      }
    }
    function getNewDocumentChanges(localStore) {
      var localStoreImpl = debugCast(localStore);
      return localStoreImpl.persistence.runTransaction("Get new document changes", "readonly", function(txn) {
        return remoteDocumentCacheGetNewDocumentChanges(localStoreImpl.remoteDocuments, txn, localStoreImpl.lastDocumentChangeReadTime);
      }).then(function(_f) {
        var changedDocs = _f.changedDocs, readTime = _f.readTime;
        localStoreImpl.lastDocumentChangeReadTime = readTime;
        return changedDocs;
      });
    }
    function synchronizeLastDocumentChangeReadTime(localStore) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var localStoreImpl;
        return tslib.__generator(this, function(_f) {
          localStoreImpl = debugCast(localStore);
          return [2, localStoreImpl.persistence.runTransaction("Synchronize last document change read time", "readonly", function(txn) {
            return remoteDocumentCacheGetLastReadTime(txn);
          }).then(function(readTime) {
            localStoreImpl.lastDocumentChangeReadTime = readTime;
          })];
        });
      });
    }
    function ignoreIfPrimaryLeaseLoss(err) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_f) {
          if (err.code === Code.FAILED_PRECONDITION && err.message === PRIMARY_LEASE_LOST_ERROR_MSG) {
            logDebug(LOG_TAG$5, "Unexpectedly lost primary lease");
          } else {
            throw err;
          }
          return [2];
        });
      });
    }
    var LocalViewChanges = function() {
      function LocalViewChanges2(targetId, fromCache, addedKeys, removedKeys) {
        this.targetId = targetId;
        this.fromCache = fromCache;
        this.addedKeys = addedKeys;
        this.removedKeys = removedKeys;
      }
      LocalViewChanges2.fromSnapshot = function(targetId, viewSnapshot) {
        var addedKeys = documentKeySet();
        var removedKeys = documentKeySet();
        for (var _i = 0, _f = viewSnapshot.docChanges; _i < _f.length; _i++) {
          var docChange = _f[_i];
          switch (docChange.type) {
            case 0:
              addedKeys = addedKeys.add(docChange.doc.key);
              break;
            case 1:
              removedKeys = removedKeys.add(docChange.doc.key);
              break;
          }
        }
        return new LocalViewChanges2(targetId, viewSnapshot.fromCache, addedKeys, removedKeys);
      };
      return LocalViewChanges2;
    }();
    var ReferenceSet = function() {
      function ReferenceSet2() {
        this.refsByKey = new SortedSet(DocReference.compareByKey);
        this.refsByTarget = new SortedSet(DocReference.compareByTargetId);
      }
      ReferenceSet2.prototype.isEmpty = function() {
        return this.refsByKey.isEmpty();
      };
      ReferenceSet2.prototype.addReference = function(key, id2) {
        var ref = new DocReference(key, id2);
        this.refsByKey = this.refsByKey.add(ref);
        this.refsByTarget = this.refsByTarget.add(ref);
      };
      ReferenceSet2.prototype.addReferences = function(keys, id2) {
        var _this = this;
        keys.forEach(function(key) {
          return _this.addReference(key, id2);
        });
      };
      ReferenceSet2.prototype.removeReference = function(key, id2) {
        this.removeRef(new DocReference(key, id2));
      };
      ReferenceSet2.prototype.removeReferences = function(keys, id2) {
        var _this = this;
        keys.forEach(function(key) {
          return _this.removeReference(key, id2);
        });
      };
      ReferenceSet2.prototype.removeReferencesForId = function(id2) {
        var _this = this;
        var emptyKey = new DocumentKey(new ResourcePath([]));
        var startRef = new DocReference(emptyKey, id2);
        var endRef = new DocReference(emptyKey, id2 + 1);
        var keys = [];
        this.refsByTarget.forEachInRange([startRef, endRef], function(ref) {
          _this.removeRef(ref);
          keys.push(ref.key);
        });
        return keys;
      };
      ReferenceSet2.prototype.removeAllReferences = function() {
        var _this = this;
        this.refsByKey.forEach(function(ref) {
          return _this.removeRef(ref);
        });
      };
      ReferenceSet2.prototype.removeRef = function(ref) {
        this.refsByKey = this.refsByKey.delete(ref);
        this.refsByTarget = this.refsByTarget.delete(ref);
      };
      ReferenceSet2.prototype.referencesForId = function(id2) {
        var emptyKey = new DocumentKey(new ResourcePath([]));
        var startRef = new DocReference(emptyKey, id2);
        var endRef = new DocReference(emptyKey, id2 + 1);
        var keys = documentKeySet();
        this.refsByTarget.forEachInRange([startRef, endRef], function(ref) {
          keys = keys.add(ref.key);
        });
        return keys;
      };
      ReferenceSet2.prototype.containsKey = function(key) {
        var ref = new DocReference(key, 0);
        var firstRef = this.refsByKey.firstAfterOrEqual(ref);
        return firstRef !== null && key.isEqual(firstRef.key);
      };
      return ReferenceSet2;
    }();
    var DocReference = function() {
      function DocReference2(key, targetOrBatchId) {
        this.key = key;
        this.targetOrBatchId = targetOrBatchId;
      }
      DocReference2.compareByKey = function(left, right) {
        return DocumentKey.comparator(left.key, right.key) || primitiveComparator(left.targetOrBatchId, right.targetOrBatchId);
      };
      DocReference2.compareByTargetId = function(left, right) {
        return primitiveComparator(left.targetOrBatchId, right.targetOrBatchId) || DocumentKey.comparator(left.key, right.key);
      };
      return DocReference2;
    }();
    var LOG_TAG$6 = "ExponentialBackoff";
    var DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1e3;
    var DEFAULT_BACKOFF_FACTOR = 1.5;
    var DEFAULT_BACKOFF_MAX_DELAY_MS = 60 * 1e3;
    var ExponentialBackoff = function() {
      function ExponentialBackoff2(queue, timerId, initialDelayMs, backoffFactor, maxDelayMs) {
        if (initialDelayMs === void 0) {
          initialDelayMs = DEFAULT_BACKOFF_INITIAL_DELAY_MS;
        }
        if (backoffFactor === void 0) {
          backoffFactor = DEFAULT_BACKOFF_FACTOR;
        }
        if (maxDelayMs === void 0) {
          maxDelayMs = DEFAULT_BACKOFF_MAX_DELAY_MS;
        }
        this.queue = queue;
        this.timerId = timerId;
        this.initialDelayMs = initialDelayMs;
        this.backoffFactor = backoffFactor;
        this.maxDelayMs = maxDelayMs;
        this.currentBaseMs = 0;
        this.timerPromise = null;
        this.lastAttemptTime = Date.now();
        this.reset();
      }
      ExponentialBackoff2.prototype.reset = function() {
        this.currentBaseMs = 0;
      };
      ExponentialBackoff2.prototype.resetToMax = function() {
        this.currentBaseMs = this.maxDelayMs;
      };
      ExponentialBackoff2.prototype.backoffAndRun = function(op) {
        var _this = this;
        this.cancel();
        var desiredDelayWithJitterMs = Math.floor(this.currentBaseMs + this.jitterDelayMs());
        var delaySoFarMs = Math.max(0, Date.now() - this.lastAttemptTime);
        var remainingDelayMs = Math.max(0, desiredDelayWithJitterMs - delaySoFarMs);
        if (remainingDelayMs > 0) {
          logDebug(LOG_TAG$6, "Backing off for " + remainingDelayMs + " ms " + ("(base delay: " + this.currentBaseMs + " ms, ") + ("delay with jitter: " + desiredDelayWithJitterMs + " ms, ") + ("last attempt: " + delaySoFarMs + " ms ago)"));
        }
        this.timerPromise = this.queue.enqueueAfterDelay(this.timerId, remainingDelayMs, function() {
          _this.lastAttemptTime = Date.now();
          return op();
        });
        this.currentBaseMs *= this.backoffFactor;
        if (this.currentBaseMs < this.initialDelayMs) {
          this.currentBaseMs = this.initialDelayMs;
        }
        if (this.currentBaseMs > this.maxDelayMs) {
          this.currentBaseMs = this.maxDelayMs;
        }
      };
      ExponentialBackoff2.prototype.skipBackoff = function() {
        if (this.timerPromise !== null) {
          this.timerPromise.skipDelay();
          this.timerPromise = null;
        }
      };
      ExponentialBackoff2.prototype.cancel = function() {
        if (this.timerPromise !== null) {
          this.timerPromise.cancel();
          this.timerPromise = null;
        }
      };
      ExponentialBackoff2.prototype.jitterDelayMs = function() {
        return (Math.random() - 0.5) * this.currentBaseMs;
      };
      return ExponentialBackoff2;
    }();
    var LOG_TAG$7 = "PersistentStream";
    var IDLE_TIMEOUT_MS = 60 * 1e3;
    var PersistentStream = function() {
      function PersistentStream2(queue, connectionTimerId, idleTimerId, connection, credentialsProvider, listener) {
        this.queue = queue;
        this.idleTimerId = idleTimerId;
        this.connection = connection;
        this.credentialsProvider = credentialsProvider;
        this.listener = listener;
        this.state = 0;
        this.closeCount = 0;
        this.idleTimer = null;
        this.stream = null;
        this.backoff = new ExponentialBackoff(queue, connectionTimerId);
      }
      PersistentStream2.prototype.isStarted = function() {
        return this.state === 1 || this.state === 2 || this.state === 4;
      };
      PersistentStream2.prototype.isOpen = function() {
        return this.state === 2;
      };
      PersistentStream2.prototype.start = function() {
        if (this.state === 3) {
          this.performBackoff();
          return;
        }
        this.auth();
      };
      PersistentStream2.prototype.stop = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
          return tslib.__generator(this, function(_f) {
            switch (_f.label) {
              case 0:
                if (!this.isStarted())
                  return [3, 2];
                return [4, this.close(0)];
              case 1:
                _f.sent();
                _f.label = 2;
              case 2:
                return [2];
            }
          });
        });
      };
      PersistentStream2.prototype.inhibitBackoff = function() {
        this.state = 0;
        this.backoff.reset();
      };
      PersistentStream2.prototype.markIdle = function() {
        var _this = this;
        if (this.isOpen() && this.idleTimer === null) {
          this.idleTimer = this.queue.enqueueAfterDelay(this.idleTimerId, IDLE_TIMEOUT_MS, function() {
            return _this.handleIdleCloseTimer();
          });
        }
      };
      PersistentStream2.prototype.sendRequest = function(msg) {
        this.cancelIdleCheck();
        this.stream.send(msg);
      };
      PersistentStream2.prototype.handleIdleCloseTimer = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
          return tslib.__generator(this, function(_f) {
            if (this.isOpen()) {
              return [2, this.close(0)];
            }
            return [2];
          });
        });
      };
      PersistentStream2.prototype.cancelIdleCheck = function() {
        if (this.idleTimer) {
          this.idleTimer.cancel();
          this.idleTimer = null;
        }
      };
      PersistentStream2.prototype.close = function(finalState, error2) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          return tslib.__generator(this, function(_f) {
            switch (_f.label) {
              case 0:
                this.cancelIdleCheck();
                this.backoff.cancel();
                this.closeCount++;
                if (finalState !== 3) {
                  this.backoff.reset();
                } else if (error2 && error2.code === Code.RESOURCE_EXHAUSTED) {
                  logError(error2.toString());
                  logError("Using maximum backoff delay to prevent overloading the backend.");
                  this.backoff.resetToMax();
                } else if (error2 && error2.code === Code.UNAUTHENTICATED) {
                  this.credentialsProvider.invalidateToken();
                }
                if (this.stream !== null) {
                  this.tearDown();
                  this.stream.close();
                  this.stream = null;
                }
                this.state = finalState;
                return [4, this.listener.onClose(error2)];
              case 1:
                _f.sent();
                return [2];
            }
          });
        });
      };
      PersistentStream2.prototype.tearDown = function() {
      };
      PersistentStream2.prototype.auth = function() {
        var _this = this;
        this.state = 1;
        var dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);
        var closeCount = this.closeCount;
        this.credentialsProvider.getToken().then(function(token) {
          if (_this.closeCount === closeCount) {
            _this.startStream(token);
          }
        }, function(error2) {
          dispatchIfNotClosed(function() {
            var rpcError = new FirestoreError(Code.UNKNOWN, "Fetching auth token failed: " + error2.message);
            return _this.handleStreamClose(rpcError);
          });
        });
      };
      PersistentStream2.prototype.startStream = function(token) {
        var _this = this;
        var dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);
        this.stream = this.startRpc(token);
        this.stream.onOpen(function() {
          dispatchIfNotClosed(function() {
            _this.state = 2;
            return _this.listener.onOpen();
          });
        });
        this.stream.onClose(function(error2) {
          dispatchIfNotClosed(function() {
            return _this.handleStreamClose(error2);
          });
        });
        this.stream.onMessage(function(msg) {
          dispatchIfNotClosed(function() {
            return _this.onMessage(msg);
          });
        });
      };
      PersistentStream2.prototype.performBackoff = function() {
        var _this = this;
        this.state = 4;
        this.backoff.backoffAndRun(function() {
          return tslib.__awaiter(_this, void 0, void 0, function() {
            return tslib.__generator(this, function(_f) {
              this.state = 0;
              this.start();
              return [2];
            });
          });
        });
      };
      PersistentStream2.prototype.handleStreamClose = function(error2) {
        logDebug(LOG_TAG$7, "close with error: " + error2);
        this.stream = null;
        return this.close(3, error2);
      };
      PersistentStream2.prototype.getCloseGuardedDispatcher = function(startCloseCount) {
        var _this = this;
        return function(fn) {
          _this.queue.enqueueAndForget(function() {
            if (_this.closeCount === startCloseCount) {
              return fn();
            } else {
              logDebug(LOG_TAG$7, "stream callback skipped by getCloseGuardedDispatcher.");
              return Promise.resolve();
            }
          });
        };
      };
      return PersistentStream2;
    }();
    var PersistentListenStream = function(_super) {
      tslib.__extends(PersistentListenStream2, _super);
      function PersistentListenStream2(queue, connection, credentials, serializer, listener) {
        var _this = _super.call(this, queue, "listen_stream_connection_backoff", "listen_stream_idle", connection, credentials, listener) || this;
        _this.serializer = serializer;
        return _this;
      }
      PersistentListenStream2.prototype.startRpc = function(token) {
        return this.connection.openStream("Listen", token);
      };
      PersistentListenStream2.prototype.onMessage = function(watchChangeProto) {
        this.backoff.reset();
        var watchChange = fromWatchChange(this.serializer, watchChangeProto);
        var snapshot = versionFromListenResponse(watchChangeProto);
        return this.listener.onWatchChange(watchChange, snapshot);
      };
      PersistentListenStream2.prototype.watch = function(targetData) {
        var request = {};
        request.database = getEncodedDatabaseId(this.serializer);
        request.addTarget = toTarget(this.serializer, targetData);
        var labels = toListenRequestLabels(this.serializer, targetData);
        if (labels) {
          request.labels = labels;
        }
        this.sendRequest(request);
      };
      PersistentListenStream2.prototype.unwatch = function(targetId) {
        var request = {};
        request.database = getEncodedDatabaseId(this.serializer);
        request.removeTarget = targetId;
        this.sendRequest(request);
      };
      return PersistentListenStream2;
    }(PersistentStream);
    var PersistentWriteStream = function(_super) {
      tslib.__extends(PersistentWriteStream2, _super);
      function PersistentWriteStream2(queue, connection, credentials, serializer, listener) {
        var _this = _super.call(this, queue, "write_stream_connection_backoff", "write_stream_idle", connection, credentials, listener) || this;
        _this.serializer = serializer;
        _this.handshakeComplete_ = false;
        return _this;
      }
      Object.defineProperty(PersistentWriteStream2.prototype, "handshakeComplete", {
        get: function() {
          return this.handshakeComplete_;
        },
        enumerable: false,
        configurable: true
      });
      PersistentWriteStream2.prototype.start = function() {
        this.handshakeComplete_ = false;
        this.lastStreamToken = void 0;
        _super.prototype.start.call(this);
      };
      PersistentWriteStream2.prototype.tearDown = function() {
        if (this.handshakeComplete_) {
          this.writeMutations([]);
        }
      };
      PersistentWriteStream2.prototype.startRpc = function(token) {
        return this.connection.openStream("Write", token);
      };
      PersistentWriteStream2.prototype.onMessage = function(responseProto) {
        hardAssert(!!responseProto.streamToken);
        this.lastStreamToken = responseProto.streamToken;
        if (!this.handshakeComplete_) {
          hardAssert(!responseProto.writeResults || responseProto.writeResults.length === 0);
          this.handshakeComplete_ = true;
          return this.listener.onHandshakeComplete();
        } else {
          this.backoff.reset();
          var results = fromWriteResults(responseProto.writeResults, responseProto.commitTime);
          var commitVersion = fromVersion(responseProto.commitTime);
          return this.listener.onMutationResult(commitVersion, results);
        }
      };
      PersistentWriteStream2.prototype.writeHandshake = function() {
        var request = {};
        request.database = getEncodedDatabaseId(this.serializer);
        this.sendRequest(request);
      };
      PersistentWriteStream2.prototype.writeMutations = function(mutations) {
        var _this = this;
        var request = {
          streamToken: this.lastStreamToken,
          writes: mutations.map(function(mutation) {
            return toMutation(_this.serializer, mutation);
          })
        };
        this.sendRequest(request);
      };
      return PersistentWriteStream2;
    }(PersistentStream);
    var Datastore = function() {
      function Datastore2() {
      }
      return Datastore2;
    }();
    var DatastoreImpl = function(_super) {
      tslib.__extends(DatastoreImpl2, _super);
      function DatastoreImpl2(credentials, connection, serializer) {
        var _this = _super.call(this) || this;
        _this.credentials = credentials;
        _this.connection = connection;
        _this.serializer = serializer;
        _this.terminated = false;
        return _this;
      }
      DatastoreImpl2.prototype.verifyInitialized = function() {
        if (this.terminated) {
          throw new FirestoreError(Code.FAILED_PRECONDITION, "The client has already been terminated.");
        }
      };
      DatastoreImpl2.prototype.invokeRPC = function(rpcName, path2, request) {
        var _this = this;
        this.verifyInitialized();
        return this.credentials.getToken().then(function(token) {
          return _this.connection.invokeRPC(rpcName, path2, request, token);
        }).catch(function(error2) {
          if (error2.code === Code.UNAUTHENTICATED) {
            _this.credentials.invalidateToken();
          }
          throw error2;
        });
      };
      DatastoreImpl2.prototype.invokeStreamingRPC = function(rpcName, path2, request) {
        var _this = this;
        this.verifyInitialized();
        return this.credentials.getToken().then(function(token) {
          return _this.connection.invokeStreamingRPC(rpcName, path2, request, token);
        }).catch(function(error2) {
          if (error2.code === Code.UNAUTHENTICATED) {
            _this.credentials.invalidateToken();
          }
          throw error2;
        });
      };
      DatastoreImpl2.prototype.terminate = function() {
        this.terminated = false;
      };
      return DatastoreImpl2;
    }(Datastore);
    function newDatastore(credentials, connection, serializer) {
      return new DatastoreImpl(credentials, connection, serializer);
    }
    function invokeCommitRpc(datastore, mutations) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var datastoreImpl, path2, request;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              datastoreImpl = debugCast(datastore);
              path2 = getEncodedDatabaseId(datastoreImpl.serializer) + "/documents";
              request = {
                writes: mutations.map(function(m) {
                  return toMutation(datastoreImpl.serializer, m);
                })
              };
              return [4, datastoreImpl.invokeRPC("Commit", path2, request)];
            case 1:
              _f.sent();
              return [2];
          }
        });
      });
    }
    function invokeBatchGetDocumentsRpc(datastore, keys) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var datastoreImpl, path2, request, response, docs, result;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              datastoreImpl = debugCast(datastore);
              path2 = getEncodedDatabaseId(datastoreImpl.serializer) + "/documents";
              request = {
                documents: keys.map(function(k) {
                  return toName(datastoreImpl.serializer, k);
                })
              };
              return [4, datastoreImpl.invokeStreamingRPC("BatchGetDocuments", path2, request)];
            case 1:
              response = _f.sent();
              docs = new Map();
              response.forEach(function(proto) {
                var doc = fromMaybeDocument(datastoreImpl.serializer, proto);
                docs.set(doc.key.toString(), doc);
              });
              result = [];
              keys.forEach(function(key) {
                var doc = docs.get(key.toString());
                hardAssert(!!doc);
                result.push(doc);
              });
              return [2, result];
          }
        });
      });
    }
    function newPersistentWriteStream(datastore, queue, listener) {
      var datastoreImpl = debugCast(datastore);
      datastoreImpl.verifyInitialized();
      return new PersistentWriteStream(queue, datastoreImpl.connection, datastoreImpl.credentials, datastoreImpl.serializer, listener);
    }
    function newPersistentWatchStream(datastore, queue, listener) {
      var datastoreImpl = debugCast(datastore);
      datastoreImpl.verifyInitialized();
      return new PersistentListenStream(queue, datastoreImpl.connection, datastoreImpl.credentials, datastoreImpl.serializer, listener);
    }
    var LOG_TAG$8 = "OnlineStateTracker";
    var MAX_WATCH_STREAM_FAILURES = 1;
    var ONLINE_STATE_TIMEOUT_MS = 10 * 1e3;
    var OnlineStateTracker = function() {
      function OnlineStateTracker2(asyncQueue, onlineStateHandler) {
        this.asyncQueue = asyncQueue;
        this.onlineStateHandler = onlineStateHandler;
        this.state = "Unknown";
        this.watchStreamFailures = 0;
        this.onlineStateTimer = null;
        this.shouldWarnClientIsOffline = true;
      }
      OnlineStateTracker2.prototype.handleWatchStreamStart = function() {
        var _this = this;
        if (this.watchStreamFailures === 0) {
          this.setAndBroadcast("Unknown");
          this.onlineStateTimer = this.asyncQueue.enqueueAfterDelay("online_state_timeout", ONLINE_STATE_TIMEOUT_MS, function() {
            _this.onlineStateTimer = null;
            _this.logClientOfflineWarningIfNecessary("Backend didn't respond within " + ONLINE_STATE_TIMEOUT_MS / 1e3 + " seconds.");
            _this.setAndBroadcast("Offline");
            return Promise.resolve();
          });
        }
      };
      OnlineStateTracker2.prototype.handleWatchStreamFailure = function(error2) {
        if (this.state === "Online") {
          this.setAndBroadcast("Unknown");
        } else {
          this.watchStreamFailures++;
          if (this.watchStreamFailures >= MAX_WATCH_STREAM_FAILURES) {
            this.clearOnlineStateTimer();
            this.logClientOfflineWarningIfNecessary("Connection failed " + MAX_WATCH_STREAM_FAILURES + " " + ("times. Most recent error: " + error2.toString()));
            this.setAndBroadcast("Offline");
          }
        }
      };
      OnlineStateTracker2.prototype.set = function(newState) {
        this.clearOnlineStateTimer();
        this.watchStreamFailures = 0;
        if (newState === "Online") {
          this.shouldWarnClientIsOffline = false;
        }
        this.setAndBroadcast(newState);
      };
      OnlineStateTracker2.prototype.setAndBroadcast = function(newState) {
        if (newState !== this.state) {
          this.state = newState;
          this.onlineStateHandler(newState);
        }
      };
      OnlineStateTracker2.prototype.logClientOfflineWarningIfNecessary = function(details) {
        var message = "Could not reach Cloud Firestore backend. " + details + "\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.";
        if (this.shouldWarnClientIsOffline) {
          logError(message);
          this.shouldWarnClientIsOffline = false;
        } else {
          logDebug(LOG_TAG$8, message);
        }
      };
      OnlineStateTracker2.prototype.clearOnlineStateTimer = function() {
        if (this.onlineStateTimer !== null) {
          this.onlineStateTimer.cancel();
          this.onlineStateTimer = null;
        }
      };
      return OnlineStateTracker2;
    }();
    var LOG_TAG$9 = "RemoteStore";
    var MAX_PENDING_WRITES = 10;
    var RemoteStoreImpl = function() {
      function RemoteStoreImpl2(localStore, datastore, asyncQueue, onlineStateHandler, connectivityMonitor) {
        var _this = this;
        this.localStore = localStore;
        this.datastore = datastore;
        this.asyncQueue = asyncQueue;
        this.remoteSyncer = {};
        this.writePipeline = [];
        this.listenTargets = new Map();
        this.offlineCauses = new Set();
        this.onNetworkStatusChange = [];
        this.connectivityMonitor = connectivityMonitor;
        this.connectivityMonitor.addCallback(function(_) {
          asyncQueue.enqueueAndForget(function() {
            return tslib.__awaiter(_this, void 0, void 0, function() {
              return tslib.__generator(this, function(_f) {
                switch (_f.label) {
                  case 0:
                    if (!canUseNetwork(this))
                      return [3, 2];
                    logDebug(LOG_TAG$9, "Restarting streams for network reachability change.");
                    return [4, restartNetwork(this)];
                  case 1:
                    _f.sent();
                    _f.label = 2;
                  case 2:
                    return [2];
                }
              });
            });
          });
        });
        this.onlineStateTracker = new OnlineStateTracker(asyncQueue, onlineStateHandler);
      }
      return RemoteStoreImpl2;
    }();
    function newRemoteStore(localStore, datastore, asyncQueue, onlineStateHandler, connectivityMonitor) {
      return new RemoteStoreImpl(localStore, datastore, asyncQueue, onlineStateHandler, connectivityMonitor);
    }
    function remoteStoreEnableNetwork(remoteStore) {
      var remoteStoreImpl = debugCast(remoteStore);
      remoteStoreImpl.offlineCauses.delete(0);
      return enableNetworkInternal(remoteStoreImpl);
    }
    function enableNetworkInternal(remoteStoreImpl) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var _i, _f, networkStatusHandler;
        return tslib.__generator(this, function(_g) {
          switch (_g.label) {
            case 0:
              if (!canUseNetwork(remoteStoreImpl))
                return [3, 4];
              _i = 0, _f = remoteStoreImpl.onNetworkStatusChange;
              _g.label = 1;
            case 1:
              if (!(_i < _f.length))
                return [3, 4];
              networkStatusHandler = _f[_i];
              return [4, networkStatusHandler(true)];
            case 2:
              _g.sent();
              _g.label = 3;
            case 3:
              _i++;
              return [3, 1];
            case 4:
              return [2];
          }
        });
      });
    }
    function remoteStoreDisableNetwork(remoteStore) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var remoteStoreImpl;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              remoteStoreImpl = debugCast(remoteStore);
              remoteStoreImpl.offlineCauses.add(0);
              return [4, disableNetworkInternal(remoteStoreImpl)];
            case 1:
              _f.sent();
              remoteStoreImpl.onlineStateTracker.set("Offline");
              return [2];
          }
        });
      });
    }
    function disableNetworkInternal(remoteStoreImpl) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var _i, _f, networkStatusHandler;
        return tslib.__generator(this, function(_g) {
          switch (_g.label) {
            case 0:
              _i = 0, _f = remoteStoreImpl.onNetworkStatusChange;
              _g.label = 1;
            case 1:
              if (!(_i < _f.length))
                return [3, 4];
              networkStatusHandler = _f[_i];
              return [4, networkStatusHandler(false)];
            case 2:
              _g.sent();
              _g.label = 3;
            case 3:
              _i++;
              return [3, 1];
            case 4:
              return [2];
          }
        });
      });
    }
    function remoteStoreShutdown(remoteStore) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var remoteStoreImpl;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              remoteStoreImpl = debugCast(remoteStore);
              logDebug(LOG_TAG$9, "RemoteStore shutting down.");
              remoteStoreImpl.offlineCauses.add(5);
              return [4, disableNetworkInternal(remoteStoreImpl)];
            case 1:
              _f.sent();
              remoteStoreImpl.connectivityMonitor.shutdown();
              remoteStoreImpl.onlineStateTracker.set("Unknown");
              return [2];
          }
        });
      });
    }
    function remoteStoreListen(remoteStore, targetData) {
      var remoteStoreImpl = debugCast(remoteStore);
      if (remoteStoreImpl.listenTargets.has(targetData.targetId)) {
        return;
      }
      remoteStoreImpl.listenTargets.set(targetData.targetId, targetData);
      if (shouldStartWatchStream(remoteStoreImpl)) {
        startWatchStream(remoteStoreImpl);
      } else if (ensureWatchStream(remoteStoreImpl).isOpen()) {
        sendWatchRequest(remoteStoreImpl, targetData);
      }
    }
    function remoteStoreUnlisten(remoteStore, targetId) {
      var remoteStoreImpl = debugCast(remoteStore);
      var watchStream = ensureWatchStream(remoteStoreImpl);
      remoteStoreImpl.listenTargets.delete(targetId);
      if (watchStream.isOpen()) {
        sendUnwatchRequest(remoteStoreImpl, targetId);
      }
      if (remoteStoreImpl.listenTargets.size === 0) {
        if (watchStream.isOpen()) {
          watchStream.markIdle();
        } else if (canUseNetwork(remoteStoreImpl)) {
          remoteStoreImpl.onlineStateTracker.set("Unknown");
        }
      }
    }
    function sendWatchRequest(remoteStoreImpl, targetData) {
      remoteStoreImpl.watchChangeAggregator.recordPendingTargetRequest(targetData.targetId);
      ensureWatchStream(remoteStoreImpl).watch(targetData);
    }
    function sendUnwatchRequest(remoteStoreImpl, targetId) {
      remoteStoreImpl.watchChangeAggregator.recordPendingTargetRequest(targetId);
      ensureWatchStream(remoteStoreImpl).unwatch(targetId);
    }
    function startWatchStream(remoteStoreImpl) {
      remoteStoreImpl.watchChangeAggregator = new WatchChangeAggregator({
        getRemoteKeysForTarget: function(targetId) {
          return remoteStoreImpl.remoteSyncer.getRemoteKeysForTarget(targetId);
        },
        getTargetDataForTarget: function(targetId) {
          return remoteStoreImpl.listenTargets.get(targetId) || null;
        }
      });
      ensureWatchStream(remoteStoreImpl).start();
      remoteStoreImpl.onlineStateTracker.handleWatchStreamStart();
    }
    function shouldStartWatchStream(remoteStoreImpl) {
      return canUseNetwork(remoteStoreImpl) && !ensureWatchStream(remoteStoreImpl).isStarted() && remoteStoreImpl.listenTargets.size > 0;
    }
    function canUseNetwork(remoteStore) {
      var remoteStoreImpl = debugCast(remoteStore);
      return remoteStoreImpl.offlineCauses.size === 0;
    }
    function cleanUpWatchStreamState(remoteStoreImpl) {
      remoteStoreImpl.watchChangeAggregator = void 0;
    }
    function onWatchStreamOpen(remoteStoreImpl) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_f) {
          remoteStoreImpl.listenTargets.forEach(function(targetData, targetId) {
            sendWatchRequest(remoteStoreImpl, targetData);
          });
          return [2];
        });
      });
    }
    function onWatchStreamClose(remoteStoreImpl, error2) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_f) {
          cleanUpWatchStreamState(remoteStoreImpl);
          if (shouldStartWatchStream(remoteStoreImpl)) {
            remoteStoreImpl.onlineStateTracker.handleWatchStreamFailure(error2);
            startWatchStream(remoteStoreImpl);
          } else {
            remoteStoreImpl.onlineStateTracker.set("Unknown");
          }
          return [2];
        });
      });
    }
    function onWatchStreamChange(remoteStoreImpl, watchChange, snapshotVersion) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var e_4, lastRemoteSnapshotVersion, e_5;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              remoteStoreImpl.onlineStateTracker.set("Online");
              if (!(watchChange instanceof WatchTargetChange && watchChange.state === 2 && watchChange.cause))
                return [3, 6];
              _f.label = 1;
            case 1:
              _f.trys.push([1, 3, , 5]);
              return [4, handleTargetError(remoteStoreImpl, watchChange)];
            case 2:
              _f.sent();
              return [3, 5];
            case 3:
              e_4 = _f.sent();
              logDebug(LOG_TAG$9, "Failed to remove targets %s: %s ", watchChange.targetIds.join(","), e_4);
              return [4, disableNetworkUntilRecovery(remoteStoreImpl, e_4)];
            case 4:
              _f.sent();
              return [3, 5];
            case 5:
              return [2];
            case 6:
              if (watchChange instanceof DocumentWatchChange) {
                remoteStoreImpl.watchChangeAggregator.handleDocumentChange(watchChange);
              } else if (watchChange instanceof ExistenceFilterChange) {
                remoteStoreImpl.watchChangeAggregator.handleExistenceFilter(watchChange);
              } else {
                remoteStoreImpl.watchChangeAggregator.handleTargetChange(watchChange);
              }
              if (!!snapshotVersion.isEqual(SnapshotVersion.min()))
                return [3, 13];
              _f.label = 7;
            case 7:
              _f.trys.push([7, 11, , 13]);
              return [4, getLastRemoteSnapshotVersion(remoteStoreImpl.localStore)];
            case 8:
              lastRemoteSnapshotVersion = _f.sent();
              if (!(snapshotVersion.compareTo(lastRemoteSnapshotVersion) >= 0))
                return [3, 10];
              return [4, raiseWatchSnapshot(remoteStoreImpl, snapshotVersion)];
            case 9:
              _f.sent();
              _f.label = 10;
            case 10:
              return [3, 13];
            case 11:
              e_5 = _f.sent();
              logDebug(LOG_TAG$9, "Failed to raise snapshot:", e_5);
              return [4, disableNetworkUntilRecovery(remoteStoreImpl, e_5)];
            case 12:
              _f.sent();
              return [3, 13];
            case 13:
              return [2];
          }
        });
      });
    }
    function disableNetworkUntilRecovery(remoteStoreImpl, e, op) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var _this = this;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              if (!isIndexedDbTransactionError(e))
                return [3, 2];
              remoteStoreImpl.offlineCauses.add(1);
              return [4, disableNetworkInternal(remoteStoreImpl)];
            case 1:
              _f.sent();
              remoteStoreImpl.onlineStateTracker.set("Offline");
              if (!op) {
                op = function() {
                  return getLastRemoteSnapshotVersion(remoteStoreImpl.localStore);
                };
              }
              remoteStoreImpl.asyncQueue.enqueueRetryable(function() {
                return tslib.__awaiter(_this, void 0, void 0, function() {
                  return tslib.__generator(this, function(_f2) {
                    switch (_f2.label) {
                      case 0:
                        logDebug(LOG_TAG$9, "Retrying IndexedDB access");
                        return [4, op()];
                      case 1:
                        _f2.sent();
                        remoteStoreImpl.offlineCauses.delete(1);
                        return [4, enableNetworkInternal(remoteStoreImpl)];
                      case 2:
                        _f2.sent();
                        return [2];
                    }
                  });
                });
              });
              return [3, 3];
            case 2:
              throw e;
            case 3:
              return [2];
          }
        });
      });
    }
    function executeWithRecovery(remoteStoreImpl, op) {
      return op().catch(function(e) {
        return disableNetworkUntilRecovery(remoteStoreImpl, e, op);
      });
    }
    function raiseWatchSnapshot(remoteStoreImpl, snapshotVersion) {
      var remoteEvent = remoteStoreImpl.watchChangeAggregator.createRemoteEvent(snapshotVersion);
      remoteEvent.targetChanges.forEach(function(change, targetId) {
        if (change.resumeToken.approximateByteSize() > 0) {
          var targetData = remoteStoreImpl.listenTargets.get(targetId);
          if (targetData) {
            remoteStoreImpl.listenTargets.set(targetId, targetData.withResumeToken(change.resumeToken, snapshotVersion));
          }
        }
      });
      remoteEvent.targetMismatches.forEach(function(targetId) {
        var targetData = remoteStoreImpl.listenTargets.get(targetId);
        if (!targetData) {
          return;
        }
        remoteStoreImpl.listenTargets.set(targetId, targetData.withResumeToken(ByteString.EMPTY_BYTE_STRING, targetData.snapshotVersion));
        sendUnwatchRequest(remoteStoreImpl, targetId);
        var requestTargetData = new TargetData(targetData.target, targetId, 1, targetData.sequenceNumber);
        sendWatchRequest(remoteStoreImpl, requestTargetData);
      });
      return remoteStoreImpl.remoteSyncer.applyRemoteEvent(remoteEvent);
    }
    function handleTargetError(remoteStoreImpl, watchChange) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var error2, _i, _f, targetId;
        return tslib.__generator(this, function(_g) {
          switch (_g.label) {
            case 0:
              error2 = watchChange.cause;
              _i = 0, _f = watchChange.targetIds;
              _g.label = 1;
            case 1:
              if (!(_i < _f.length))
                return [3, 4];
              targetId = _f[_i];
              if (!remoteStoreImpl.listenTargets.has(targetId))
                return [3, 3];
              return [4, remoteStoreImpl.remoteSyncer.rejectListen(targetId, error2)];
            case 2:
              _g.sent();
              remoteStoreImpl.listenTargets.delete(targetId);
              remoteStoreImpl.watchChangeAggregator.removeTarget(targetId);
              _g.label = 3;
            case 3:
              _i++;
              return [3, 1];
            case 4:
              return [2];
          }
        });
      });
    }
    function fillWritePipeline(remoteStore) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var remoteStoreImpl, writeStream, lastBatchIdRetrieved, batch, e_6;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              remoteStoreImpl = debugCast(remoteStore);
              writeStream = ensureWriteStream(remoteStoreImpl);
              lastBatchIdRetrieved = remoteStoreImpl.writePipeline.length > 0 ? remoteStoreImpl.writePipeline[remoteStoreImpl.writePipeline.length - 1].batchId : BATCHID_UNKNOWN;
              _f.label = 1;
            case 1:
              if (!canAddToWritePipeline(remoteStoreImpl))
                return [3, 7];
              _f.label = 2;
            case 2:
              _f.trys.push([2, 4, , 6]);
              return [4, nextMutationBatch(remoteStoreImpl.localStore, lastBatchIdRetrieved)];
            case 3:
              batch = _f.sent();
              if (batch === null) {
                if (remoteStoreImpl.writePipeline.length === 0) {
                  writeStream.markIdle();
                }
                return [3, 7];
              } else {
                lastBatchIdRetrieved = batch.batchId;
                addToWritePipeline(remoteStoreImpl, batch);
              }
              return [3, 6];
            case 4:
              e_6 = _f.sent();
              return [4, disableNetworkUntilRecovery(remoteStoreImpl, e_6)];
            case 5:
              _f.sent();
              return [3, 6];
            case 6:
              return [3, 1];
            case 7:
              if (shouldStartWriteStream(remoteStoreImpl)) {
                startWriteStream(remoteStoreImpl);
              }
              return [2];
          }
        });
      });
    }
    function canAddToWritePipeline(remoteStoreImpl) {
      return canUseNetwork(remoteStoreImpl) && remoteStoreImpl.writePipeline.length < MAX_PENDING_WRITES;
    }
    function addToWritePipeline(remoteStoreImpl, batch) {
      remoteStoreImpl.writePipeline.push(batch);
      var writeStream = ensureWriteStream(remoteStoreImpl);
      if (writeStream.isOpen() && writeStream.handshakeComplete) {
        writeStream.writeMutations(batch.mutations);
      }
    }
    function shouldStartWriteStream(remoteStoreImpl) {
      return canUseNetwork(remoteStoreImpl) && !ensureWriteStream(remoteStoreImpl).isStarted() && remoteStoreImpl.writePipeline.length > 0;
    }
    function startWriteStream(remoteStoreImpl) {
      ensureWriteStream(remoteStoreImpl).start();
    }
    function onWriteStreamOpen(remoteStoreImpl) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_f) {
          ensureWriteStream(remoteStoreImpl).writeHandshake();
          return [2];
        });
      });
    }
    function onWriteHandshakeComplete(remoteStoreImpl) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var writeStream, _i, _f, batch;
        return tslib.__generator(this, function(_g) {
          writeStream = ensureWriteStream(remoteStoreImpl);
          for (_i = 0, _f = remoteStoreImpl.writePipeline; _i < _f.length; _i++) {
            batch = _f[_i];
            writeStream.writeMutations(batch.mutations);
          }
          return [2];
        });
      });
    }
    function onMutationResult(remoteStoreImpl, commitVersion, results) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var batch, success;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              batch = remoteStoreImpl.writePipeline.shift();
              success = MutationBatchResult.from(batch, commitVersion, results);
              return [4, executeWithRecovery(remoteStoreImpl, function() {
                return remoteStoreImpl.remoteSyncer.applySuccessfulWrite(success);
              })];
            case 1:
              _f.sent();
              return [4, fillWritePipeline(remoteStoreImpl)];
            case 2:
              _f.sent();
              return [2];
          }
        });
      });
    }
    function onWriteStreamClose(remoteStoreImpl, error2) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              if (!(error2 && ensureWriteStream(remoteStoreImpl).handshakeComplete))
                return [3, 2];
              return [4, handleWriteError(remoteStoreImpl, error2)];
            case 1:
              _f.sent();
              _f.label = 2;
            case 2:
              if (shouldStartWriteStream(remoteStoreImpl)) {
                startWriteStream(remoteStoreImpl);
              }
              return [2];
          }
        });
      });
    }
    function handleWriteError(remoteStoreImpl, error2) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var batch_1;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              if (!isPermanentWriteError(error2.code))
                return [3, 3];
              batch_1 = remoteStoreImpl.writePipeline.shift();
              ensureWriteStream(remoteStoreImpl).inhibitBackoff();
              return [4, executeWithRecovery(remoteStoreImpl, function() {
                return remoteStoreImpl.remoteSyncer.rejectFailedWrite(batch_1.batchId, error2);
              })];
            case 1:
              _f.sent();
              return [4, fillWritePipeline(remoteStoreImpl)];
            case 2:
              _f.sent();
              _f.label = 3;
            case 3:
              return [2];
          }
        });
      });
    }
    function restartNetwork(remoteStore) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var remoteStoreImpl;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              remoteStoreImpl = debugCast(remoteStore);
              remoteStoreImpl.offlineCauses.add(4);
              return [4, disableNetworkInternal(remoteStoreImpl)];
            case 1:
              _f.sent();
              remoteStoreImpl.onlineStateTracker.set("Unknown");
              remoteStoreImpl.offlineCauses.delete(4);
              return [4, enableNetworkInternal(remoteStoreImpl)];
            case 2:
              _f.sent();
              return [2];
          }
        });
      });
    }
    function remoteStoreHandleCredentialChange(remoteStore, user) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var remoteStoreImpl, usesNetwork;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              remoteStoreImpl = debugCast(remoteStore);
              remoteStoreImpl.asyncQueue.verifyOperationInProgress();
              logDebug(LOG_TAG$9, "RemoteStore received new credentials");
              usesNetwork = canUseNetwork(remoteStoreImpl);
              remoteStoreImpl.offlineCauses.add(3);
              return [4, disableNetworkInternal(remoteStoreImpl)];
            case 1:
              _f.sent();
              if (usesNetwork) {
                remoteStoreImpl.onlineStateTracker.set("Unknown");
              }
              return [4, remoteStoreImpl.remoteSyncer.handleCredentialChange(user)];
            case 2:
              _f.sent();
              remoteStoreImpl.offlineCauses.delete(3);
              return [4, enableNetworkInternal(remoteStoreImpl)];
            case 3:
              _f.sent();
              return [2];
          }
        });
      });
    }
    function remoteStoreApplyPrimaryState(remoteStore, isPrimary) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var remoteStoreImpl;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              remoteStoreImpl = debugCast(remoteStore);
              if (!isPrimary)
                return [3, 2];
              remoteStoreImpl.offlineCauses.delete(2);
              return [4, enableNetworkInternal(remoteStoreImpl)];
            case 1:
              _f.sent();
              return [3, 4];
            case 2:
              if (!!isPrimary)
                return [3, 4];
              remoteStoreImpl.offlineCauses.add(2);
              return [4, disableNetworkInternal(remoteStoreImpl)];
            case 3:
              _f.sent();
              remoteStoreImpl.onlineStateTracker.set("Unknown");
              _f.label = 4;
            case 4:
              return [2];
          }
        });
      });
    }
    function ensureWatchStream(remoteStoreImpl) {
      var _this = this;
      if (!remoteStoreImpl.watchStream) {
        remoteStoreImpl.watchStream = newPersistentWatchStream(remoteStoreImpl.datastore, remoteStoreImpl.asyncQueue, {
          onOpen: onWatchStreamOpen.bind(null, remoteStoreImpl),
          onClose: onWatchStreamClose.bind(null, remoteStoreImpl),
          onWatchChange: onWatchStreamChange.bind(null, remoteStoreImpl)
        });
        remoteStoreImpl.onNetworkStatusChange.push(function(enabled) {
          return tslib.__awaiter(_this, void 0, void 0, function() {
            return tslib.__generator(this, function(_f) {
              switch (_f.label) {
                case 0:
                  if (!enabled)
                    return [3, 1];
                  remoteStoreImpl.watchStream.inhibitBackoff();
                  if (shouldStartWatchStream(remoteStoreImpl)) {
                    startWatchStream(remoteStoreImpl);
                  } else {
                    remoteStoreImpl.onlineStateTracker.set("Unknown");
                  }
                  return [3, 3];
                case 1:
                  return [4, remoteStoreImpl.watchStream.stop()];
                case 2:
                  _f.sent();
                  cleanUpWatchStreamState(remoteStoreImpl);
                  _f.label = 3;
                case 3:
                  return [2];
              }
            });
          });
        });
      }
      return remoteStoreImpl.watchStream;
    }
    function ensureWriteStream(remoteStoreImpl) {
      var _this = this;
      if (!remoteStoreImpl.writeStream) {
        remoteStoreImpl.writeStream = newPersistentWriteStream(remoteStoreImpl.datastore, remoteStoreImpl.asyncQueue, {
          onOpen: onWriteStreamOpen.bind(null, remoteStoreImpl),
          onClose: onWriteStreamClose.bind(null, remoteStoreImpl),
          onHandshakeComplete: onWriteHandshakeComplete.bind(null, remoteStoreImpl),
          onMutationResult: onMutationResult.bind(null, remoteStoreImpl)
        });
        remoteStoreImpl.onNetworkStatusChange.push(function(enabled) {
          return tslib.__awaiter(_this, void 0, void 0, function() {
            return tslib.__generator(this, function(_f) {
              switch (_f.label) {
                case 0:
                  if (!enabled)
                    return [3, 2];
                  remoteStoreImpl.writeStream.inhibitBackoff();
                  return [4, fillWritePipeline(remoteStoreImpl)];
                case 1:
                  _f.sent();
                  return [3, 4];
                case 2:
                  return [4, remoteStoreImpl.writeStream.stop()];
                case 3:
                  _f.sent();
                  if (remoteStoreImpl.writePipeline.length > 0) {
                    logDebug(LOG_TAG$9, "Stopping write stream with " + remoteStoreImpl.writePipeline.length + " pending writes");
                    remoteStoreImpl.writePipeline = [];
                  }
                  _f.label = 4;
                case 4:
                  return [2];
              }
            });
          });
        });
      }
      return remoteStoreImpl.writeStream;
    }
    var DocumentSet = function() {
      function DocumentSet2(comp) {
        if (comp) {
          this.comparator = function(d1, d2) {
            return comp(d1, d2) || DocumentKey.comparator(d1.key, d2.key);
          };
        } else {
          this.comparator = function(d1, d2) {
            return DocumentKey.comparator(d1.key, d2.key);
          };
        }
        this.keyedMap = documentMap();
        this.sortedSet = new SortedMap(this.comparator);
      }
      DocumentSet2.emptySet = function(oldSet) {
        return new DocumentSet2(oldSet.comparator);
      };
      DocumentSet2.prototype.has = function(key) {
        return this.keyedMap.get(key) != null;
      };
      DocumentSet2.prototype.get = function(key) {
        return this.keyedMap.get(key);
      };
      DocumentSet2.prototype.first = function() {
        return this.sortedSet.minKey();
      };
      DocumentSet2.prototype.last = function() {
        return this.sortedSet.maxKey();
      };
      DocumentSet2.prototype.isEmpty = function() {
        return this.sortedSet.isEmpty();
      };
      DocumentSet2.prototype.indexOf = function(key) {
        var doc = this.keyedMap.get(key);
        return doc ? this.sortedSet.indexOf(doc) : -1;
      };
      Object.defineProperty(DocumentSet2.prototype, "size", {
        get: function() {
          return this.sortedSet.size;
        },
        enumerable: false,
        configurable: true
      });
      DocumentSet2.prototype.forEach = function(cb) {
        this.sortedSet.inorderTraversal(function(k, v) {
          cb(k);
          return false;
        });
      };
      DocumentSet2.prototype.add = function(doc) {
        var set = this.delete(doc.key);
        return set.copy(set.keyedMap.insert(doc.key, doc), set.sortedSet.insert(doc, null));
      };
      DocumentSet2.prototype.delete = function(key) {
        var doc = this.get(key);
        if (!doc) {
          return this;
        }
        return this.copy(this.keyedMap.remove(key), this.sortedSet.remove(doc));
      };
      DocumentSet2.prototype.isEqual = function(other) {
        if (!(other instanceof DocumentSet2)) {
          return false;
        }
        if (this.size !== other.size) {
          return false;
        }
        var thisIt = this.sortedSet.getIterator();
        var otherIt = other.sortedSet.getIterator();
        while (thisIt.hasNext()) {
          var thisDoc = thisIt.getNext().key;
          var otherDoc = otherIt.getNext().key;
          if (!thisDoc.isEqual(otherDoc)) {
            return false;
          }
        }
        return true;
      };
      DocumentSet2.prototype.toString = function() {
        var docStrings = [];
        this.forEach(function(doc) {
          docStrings.push(doc.toString());
        });
        if (docStrings.length === 0) {
          return "DocumentSet ()";
        } else {
          return "DocumentSet (\n  " + docStrings.join("  \n") + "\n)";
        }
      };
      DocumentSet2.prototype.copy = function(keyedMap, sortedSet) {
        var newSet = new DocumentSet2();
        newSet.comparator = this.comparator;
        newSet.keyedMap = keyedMap;
        newSet.sortedSet = sortedSet;
        return newSet;
      };
      return DocumentSet2;
    }();
    var DocumentChangeSet = function() {
      function DocumentChangeSet2() {
        this.changeMap = new SortedMap(DocumentKey.comparator);
      }
      DocumentChangeSet2.prototype.track = function(change) {
        var key = change.doc.key;
        var oldChange = this.changeMap.get(key);
        if (!oldChange) {
          this.changeMap = this.changeMap.insert(key, change);
          return;
        }
        if (change.type !== 0 && oldChange.type === 3) {
          this.changeMap = this.changeMap.insert(key, change);
        } else if (change.type === 3 && oldChange.type !== 1) {
          this.changeMap = this.changeMap.insert(key, {
            type: oldChange.type,
            doc: change.doc
          });
        } else if (change.type === 2 && oldChange.type === 2) {
          this.changeMap = this.changeMap.insert(key, {
            type: 2,
            doc: change.doc
          });
        } else if (change.type === 2 && oldChange.type === 0) {
          this.changeMap = this.changeMap.insert(key, {
            type: 0,
            doc: change.doc
          });
        } else if (change.type === 1 && oldChange.type === 0) {
          this.changeMap = this.changeMap.remove(key);
        } else if (change.type === 1 && oldChange.type === 2) {
          this.changeMap = this.changeMap.insert(key, {
            type: 1,
            doc: oldChange.doc
          });
        } else if (change.type === 0 && oldChange.type === 1) {
          this.changeMap = this.changeMap.insert(key, {
            type: 2,
            doc: change.doc
          });
        } else {
          fail();
        }
      };
      DocumentChangeSet2.prototype.getChanges = function() {
        var changes = [];
        this.changeMap.inorderTraversal(function(key, change) {
          changes.push(change);
        });
        return changes;
      };
      return DocumentChangeSet2;
    }();
    var ViewSnapshot = function() {
      function ViewSnapshot2(query, docs, oldDocs, docChanges, mutatedKeys, fromCache, syncStateChanged, excludesMetadataChanges) {
        this.query = query;
        this.docs = docs;
        this.oldDocs = oldDocs;
        this.docChanges = docChanges;
        this.mutatedKeys = mutatedKeys;
        this.fromCache = fromCache;
        this.syncStateChanged = syncStateChanged;
        this.excludesMetadataChanges = excludesMetadataChanges;
      }
      ViewSnapshot2.fromInitialDocuments = function(query, documents, mutatedKeys, fromCache) {
        var changes = [];
        documents.forEach(function(doc) {
          changes.push({ type: 0, doc });
        });
        return new ViewSnapshot2(query, documents, DocumentSet.emptySet(documents), changes, mutatedKeys, fromCache, true, false);
      };
      Object.defineProperty(ViewSnapshot2.prototype, "hasPendingWrites", {
        get: function() {
          return !this.mutatedKeys.isEmpty();
        },
        enumerable: false,
        configurable: true
      });
      ViewSnapshot2.prototype.isEqual = function(other) {
        if (this.fromCache !== other.fromCache || this.syncStateChanged !== other.syncStateChanged || !this.mutatedKeys.isEqual(other.mutatedKeys) || !queryEquals(this.query, other.query) || !this.docs.isEqual(other.docs) || !this.oldDocs.isEqual(other.oldDocs)) {
          return false;
        }
        var changes = this.docChanges;
        var otherChanges = other.docChanges;
        if (changes.length !== otherChanges.length) {
          return false;
        }
        for (var i = 0; i < changes.length; i++) {
          if (changes[i].type !== otherChanges[i].type || !changes[i].doc.isEqual(otherChanges[i].doc)) {
            return false;
          }
        }
        return true;
      };
      return ViewSnapshot2;
    }();
    var AddedLimboDocument = function() {
      function AddedLimboDocument2(key) {
        this.key = key;
      }
      return AddedLimboDocument2;
    }();
    var RemovedLimboDocument = function() {
      function RemovedLimboDocument2(key) {
        this.key = key;
      }
      return RemovedLimboDocument2;
    }();
    var View = function() {
      function View2(query, _syncedDocuments) {
        this.query = query;
        this._syncedDocuments = _syncedDocuments;
        this.syncState = null;
        this.current = false;
        this.limboDocuments = documentKeySet();
        this.mutatedKeys = documentKeySet();
        this.docComparator = newQueryComparator(query);
        this.documentSet = new DocumentSet(this.docComparator);
      }
      Object.defineProperty(View2.prototype, "syncedDocuments", {
        get: function() {
          return this._syncedDocuments;
        },
        enumerable: false,
        configurable: true
      });
      View2.prototype.computeDocChanges = function(docChanges, previousChanges) {
        var _this = this;
        var changeSet = previousChanges ? previousChanges.changeSet : new DocumentChangeSet();
        var oldDocumentSet = previousChanges ? previousChanges.documentSet : this.documentSet;
        var newMutatedKeys = previousChanges ? previousChanges.mutatedKeys : this.mutatedKeys;
        var newDocumentSet = oldDocumentSet;
        var needsRefill = false;
        var lastDocInLimit = hasLimitToFirst(this.query) && oldDocumentSet.size === this.query.limit ? oldDocumentSet.last() : null;
        var firstDocInLimit = hasLimitToLast(this.query) && oldDocumentSet.size === this.query.limit ? oldDocumentSet.first() : null;
        docChanges.inorderTraversal(function(key, newMaybeDoc) {
          var oldDoc2 = oldDocumentSet.get(key);
          var newDoc = newMaybeDoc instanceof Document ? newMaybeDoc : null;
          if (newDoc) {
            newDoc = queryMatches(_this.query, newDoc) ? newDoc : null;
          }
          var oldDocHadPendingMutations = oldDoc2 ? _this.mutatedKeys.has(oldDoc2.key) : false;
          var newDocHasPendingMutations = newDoc ? newDoc.hasLocalMutations || _this.mutatedKeys.has(newDoc.key) && newDoc.hasCommittedMutations : false;
          var changeApplied = false;
          if (oldDoc2 && newDoc) {
            var docsEqual = oldDoc2.data().isEqual(newDoc.data());
            if (!docsEqual) {
              if (!_this.shouldWaitForSyncedDocument(oldDoc2, newDoc)) {
                changeSet.track({
                  type: 2,
                  doc: newDoc
                });
                changeApplied = true;
                if (lastDocInLimit && _this.docComparator(newDoc, lastDocInLimit) > 0 || firstDocInLimit && _this.docComparator(newDoc, firstDocInLimit) < 0) {
                  needsRefill = true;
                }
              }
            } else if (oldDocHadPendingMutations !== newDocHasPendingMutations) {
              changeSet.track({ type: 3, doc: newDoc });
              changeApplied = true;
            }
          } else if (!oldDoc2 && newDoc) {
            changeSet.track({ type: 0, doc: newDoc });
            changeApplied = true;
          } else if (oldDoc2 && !newDoc) {
            changeSet.track({ type: 1, doc: oldDoc2 });
            changeApplied = true;
            if (lastDocInLimit || firstDocInLimit) {
              needsRefill = true;
            }
          }
          if (changeApplied) {
            if (newDoc) {
              newDocumentSet = newDocumentSet.add(newDoc);
              if (newDocHasPendingMutations) {
                newMutatedKeys = newMutatedKeys.add(key);
              } else {
                newMutatedKeys = newMutatedKeys.delete(key);
              }
            } else {
              newDocumentSet = newDocumentSet.delete(key);
              newMutatedKeys = newMutatedKeys.delete(key);
            }
          }
        });
        if (hasLimitToFirst(this.query) || hasLimitToLast(this.query)) {
          while (newDocumentSet.size > this.query.limit) {
            var oldDoc = hasLimitToFirst(this.query) ? newDocumentSet.last() : newDocumentSet.first();
            newDocumentSet = newDocumentSet.delete(oldDoc.key);
            newMutatedKeys = newMutatedKeys.delete(oldDoc.key);
            changeSet.track({ type: 1, doc: oldDoc });
          }
        }
        return {
          documentSet: newDocumentSet,
          changeSet,
          needsRefill,
          mutatedKeys: newMutatedKeys
        };
      };
      View2.prototype.shouldWaitForSyncedDocument = function(oldDoc, newDoc) {
        return oldDoc.hasLocalMutations && newDoc.hasCommittedMutations && !newDoc.hasLocalMutations;
      };
      View2.prototype.applyChanges = function(docChanges, updateLimboDocuments, targetChange) {
        var _this = this;
        var oldDocs = this.documentSet;
        this.documentSet = docChanges.documentSet;
        this.mutatedKeys = docChanges.mutatedKeys;
        var changes = docChanges.changeSet.getChanges();
        changes.sort(function(c1, c2) {
          return compareChangeType(c1.type, c2.type) || _this.docComparator(c1.doc, c2.doc);
        });
        this.applyTargetChange(targetChange);
        var limboChanges = updateLimboDocuments ? this.updateLimboDocuments() : [];
        var synced = this.limboDocuments.size === 0 && this.current;
        var newSyncState = synced ? 1 : 0;
        var syncStateChanged = newSyncState !== this.syncState;
        this.syncState = newSyncState;
        if (changes.length === 0 && !syncStateChanged) {
          return { limboChanges };
        } else {
          var snap = new ViewSnapshot(this.query, docChanges.documentSet, oldDocs, changes, docChanges.mutatedKeys, newSyncState === 0, syncStateChanged, false);
          return {
            snapshot: snap,
            limboChanges
          };
        }
      };
      View2.prototype.applyOnlineStateChange = function(onlineState) {
        if (this.current && onlineState === "Offline") {
          this.current = false;
          return this.applyChanges({
            documentSet: this.documentSet,
            changeSet: new DocumentChangeSet(),
            mutatedKeys: this.mutatedKeys,
            needsRefill: false
          }, false);
        } else {
          return { limboChanges: [] };
        }
      };
      View2.prototype.shouldBeInLimbo = function(key) {
        if (this._syncedDocuments.has(key)) {
          return false;
        }
        if (!this.documentSet.has(key)) {
          return false;
        }
        if (this.documentSet.get(key).hasLocalMutations) {
          return false;
        }
        return true;
      };
      View2.prototype.applyTargetChange = function(targetChange) {
        var _this = this;
        if (targetChange) {
          targetChange.addedDocuments.forEach(function(key) {
            return _this._syncedDocuments = _this._syncedDocuments.add(key);
          });
          targetChange.modifiedDocuments.forEach(function(key) {
          });
          targetChange.removedDocuments.forEach(function(key) {
            return _this._syncedDocuments = _this._syncedDocuments.delete(key);
          });
          this.current = targetChange.current;
        }
      };
      View2.prototype.updateLimboDocuments = function() {
        var _this = this;
        if (!this.current) {
          return [];
        }
        var oldLimboDocuments = this.limboDocuments;
        this.limboDocuments = documentKeySet();
        this.documentSet.forEach(function(doc) {
          if (_this.shouldBeInLimbo(doc.key)) {
            _this.limboDocuments = _this.limboDocuments.add(doc.key);
          }
        });
        var changes = [];
        oldLimboDocuments.forEach(function(key) {
          if (!_this.limboDocuments.has(key)) {
            changes.push(new RemovedLimboDocument(key));
          }
        });
        this.limboDocuments.forEach(function(key) {
          if (!oldLimboDocuments.has(key)) {
            changes.push(new AddedLimboDocument(key));
          }
        });
        return changes;
      };
      View2.prototype.synchronizeWithPersistedState = function(queryResult) {
        this._syncedDocuments = queryResult.remoteKeys;
        this.limboDocuments = documentKeySet();
        var docChanges = this.computeDocChanges(queryResult.documents);
        return this.applyChanges(docChanges, true);
      };
      View2.prototype.computeInitialSnapshot = function() {
        return ViewSnapshot.fromInitialDocuments(this.query, this.documentSet, this.mutatedKeys, this.syncState === 0);
      };
      return View2;
    }();
    function compareChangeType(c1, c2) {
      var order = function(change) {
        switch (change) {
          case 0:
            return 1;
          case 2:
            return 2;
          case 3:
            return 2;
          case 1:
            return 0;
          default:
            return fail();
        }
      };
      return order(c1) - order(c2);
    }
    function getWindow() {
      if (process.env.USE_MOCK_PERSISTENCE === "YES") {
        return window;
      }
      return null;
    }
    function getDocument() {
      return null;
    }
    var LOG_TAG$a = "AsyncQueue";
    var DelayedOperation = function() {
      function DelayedOperation2(asyncQueue, timerId, targetTimeMs, op, removalCallback) {
        this.asyncQueue = asyncQueue;
        this.timerId = timerId;
        this.targetTimeMs = targetTimeMs;
        this.op = op;
        this.removalCallback = removalCallback;
        this.deferred = new Deferred();
        this.then = this.deferred.promise.then.bind(this.deferred.promise);
        this.deferred.promise.catch(function(err) {
        });
      }
      DelayedOperation2.createAndSchedule = function(asyncQueue, timerId, delayMs, op, removalCallback) {
        var targetTime = Date.now() + delayMs;
        var delayedOp = new DelayedOperation2(asyncQueue, timerId, targetTime, op, removalCallback);
        delayedOp.start(delayMs);
        return delayedOp;
      };
      DelayedOperation2.prototype.start = function(delayMs) {
        var _this = this;
        this.timerHandle = setTimeout(function() {
          return _this.handleDelayElapsed();
        }, delayMs);
      };
      DelayedOperation2.prototype.skipDelay = function() {
        return this.handleDelayElapsed();
      };
      DelayedOperation2.prototype.cancel = function(reason) {
        if (this.timerHandle !== null) {
          this.clearTimeout();
          this.deferred.reject(new FirestoreError(Code.CANCELLED, "Operation cancelled" + (reason ? ": " + reason : "")));
        }
      };
      DelayedOperation2.prototype.handleDelayElapsed = function() {
        var _this = this;
        this.asyncQueue.enqueueAndForget(function() {
          if (_this.timerHandle !== null) {
            _this.clearTimeout();
            return _this.op().then(function(result) {
              return _this.deferred.resolve(result);
            });
          } else {
            return Promise.resolve();
          }
        });
      };
      DelayedOperation2.prototype.clearTimeout = function() {
        if (this.timerHandle !== null) {
          this.removalCallback(this);
          clearTimeout(this.timerHandle);
          this.timerHandle = null;
        }
      };
      return DelayedOperation2;
    }();
    var AsyncQueue = function() {
      function AsyncQueue2() {
        var _this = this;
        this.tail = Promise.resolve();
        this.retryableOps = [];
        this._isShuttingDown = false;
        this.delayedOperations = [];
        this.failure = null;
        this.operationInProgress = false;
        this.timerIdsToSkip = [];
        this.backoff = new ExponentialBackoff(this, "async_queue_retry");
        this.visibilityHandler = function() {
          _this.backoff.skipBackoff();
        };
      }
      Object.defineProperty(AsyncQueue2.prototype, "isShuttingDown", {
        get: function() {
          return this._isShuttingDown;
        },
        enumerable: false,
        configurable: true
      });
      AsyncQueue2.prototype.enqueueAndForget = function(op) {
        this.enqueue(op);
      };
      AsyncQueue2.prototype.enqueueAndForgetEvenWhileRestricted = function(op) {
        this.verifyNotFailed();
        this.enqueueInternal(op);
      };
      AsyncQueue2.prototype.enterRestrictedMode = function() {
        if (!this._isShuttingDown) {
          this._isShuttingDown = true;
        }
      };
      AsyncQueue2.prototype.enqueue = function(op) {
        this.verifyNotFailed();
        if (this._isShuttingDown) {
          return new Promise(function(resolve2) {
          });
        }
        return this.enqueueInternal(op);
      };
      AsyncQueue2.prototype.enqueueRetryable = function(op) {
        var _this = this;
        this.enqueueAndForget(function() {
          _this.retryableOps.push(op);
          return _this.retryNextOp();
        });
      };
      AsyncQueue2.prototype.retryNextOp = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var e_7;
          var _this = this;
          return tslib.__generator(this, function(_f) {
            switch (_f.label) {
              case 0:
                if (this.retryableOps.length === 0) {
                  return [2];
                }
                _f.label = 1;
              case 1:
                _f.trys.push([1, 3, , 4]);
                return [4, this.retryableOps[0]()];
              case 2:
                _f.sent();
                this.retryableOps.shift();
                this.backoff.reset();
                return [3, 4];
              case 3:
                e_7 = _f.sent();
                if (isIndexedDbTransactionError(e_7)) {
                  logDebug(LOG_TAG$a, "Operation failed with retryable error: " + e_7);
                } else {
                  throw e_7;
                }
                return [3, 4];
              case 4:
                if (this.retryableOps.length > 0) {
                  this.backoff.backoffAndRun(function() {
                    return _this.retryNextOp();
                  });
                }
                return [2];
            }
          });
        });
      };
      AsyncQueue2.prototype.enqueueInternal = function(op) {
        var _this = this;
        var newTail = this.tail.then(function() {
          _this.operationInProgress = true;
          return op().catch(function(error2) {
            _this.failure = error2;
            _this.operationInProgress = false;
            var message = getMessageOrStack(error2);
            logError("INTERNAL UNHANDLED ERROR: ", message);
            throw error2;
          }).then(function(result) {
            _this.operationInProgress = false;
            return result;
          });
        });
        this.tail = newTail;
        return newTail;
      };
      AsyncQueue2.prototype.enqueueAfterDelay = function(timerId, delayMs, op) {
        var _this = this;
        this.verifyNotFailed();
        if (this.timerIdsToSkip.indexOf(timerId) > -1) {
          delayMs = 0;
        }
        var delayedOp = DelayedOperation.createAndSchedule(this, timerId, delayMs, op, function(removedOp) {
          return _this.removeDelayedOperation(removedOp);
        });
        this.delayedOperations.push(delayedOp);
        return delayedOp;
      };
      AsyncQueue2.prototype.verifyNotFailed = function() {
        if (this.failure) {
          fail();
        }
      };
      AsyncQueue2.prototype.verifyOperationInProgress = function() {
      };
      AsyncQueue2.prototype.drain = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var currentTail;
          return tslib.__generator(this, function(_f) {
            switch (_f.label) {
              case 0:
                currentTail = this.tail;
                return [4, currentTail];
              case 1:
                _f.sent();
                _f.label = 2;
              case 2:
                if (currentTail !== this.tail)
                  return [3, 0];
                _f.label = 3;
              case 3:
                return [2];
            }
          });
        });
      };
      AsyncQueue2.prototype.containsDelayedOperation = function(timerId) {
        for (var _i = 0, _f = this.delayedOperations; _i < _f.length; _i++) {
          var op = _f[_i];
          if (op.timerId === timerId) {
            return true;
          }
        }
        return false;
      };
      AsyncQueue2.prototype.runAllDelayedOperationsUntil = function(lastTimerId) {
        var _this = this;
        return this.drain().then(function() {
          _this.delayedOperations.sort(function(a, b) {
            return a.targetTimeMs - b.targetTimeMs;
          });
          for (var _i = 0, _f = _this.delayedOperations; _i < _f.length; _i++) {
            var op = _f[_i];
            op.skipDelay();
            if (lastTimerId !== "all" && op.timerId === lastTimerId) {
              break;
            }
          }
          return _this.drain();
        });
      };
      AsyncQueue2.prototype.skipDelaysForTimerId = function(timerId) {
        this.timerIdsToSkip.push(timerId);
      };
      AsyncQueue2.prototype.removeDelayedOperation = function(op) {
        var index2 = this.delayedOperations.indexOf(op);
        this.delayedOperations.splice(index2, 1);
      };
      return AsyncQueue2;
    }();
    function wrapInUserErrorIfRecoverable(e, msg) {
      logError(LOG_TAG$a, msg + ": " + e);
      if (isIndexedDbTransactionError(e)) {
        return new FirestoreError(Code.UNAVAILABLE, msg + ": " + e);
      } else {
        throw e;
      }
    }
    function getMessageOrStack(error2) {
      var message = error2.message || "";
      if (error2.stack) {
        if (error2.stack.includes(error2.message)) {
          message = error2.stack;
        } else {
          message = error2.message + "\n" + error2.stack;
        }
      }
      return message;
    }
    var QueryListenersInfo = function() {
      function QueryListenersInfo2() {
        this.viewSnap = void 0;
        this.listeners = [];
      }
      return QueryListenersInfo2;
    }();
    function newEventManager() {
      return new EventManagerImpl();
    }
    var EventManagerImpl = function() {
      function EventManagerImpl2() {
        this.queries = new ObjectMap(function(q) {
          return canonifyQuery(q);
        }, queryEquals);
        this.onlineState = "Unknown";
        this.snapshotsInSyncListeners = new Set();
      }
      return EventManagerImpl2;
    }();
    function eventManagerListen(eventManager, listener) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var eventManagerImpl, query, firstListen, queryInfo, _f, e_8, firestoreError, raisedEvent, raisedEvent_1;
        return tslib.__generator(this, function(_g) {
          switch (_g.label) {
            case 0:
              eventManagerImpl = debugCast(eventManager);
              query = listener.query;
              firstListen = false;
              queryInfo = eventManagerImpl.queries.get(query);
              if (!queryInfo) {
                firstListen = true;
                queryInfo = new QueryListenersInfo();
              }
              if (!firstListen)
                return [3, 4];
              _g.label = 1;
            case 1:
              _g.trys.push([1, 3, , 4]);
              _f = queryInfo;
              return [4, eventManagerImpl.onListen(query)];
            case 2:
              _f.viewSnap = _g.sent();
              return [3, 4];
            case 3:
              e_8 = _g.sent();
              firestoreError = wrapInUserErrorIfRecoverable(e_8, "Initialization of query '" + stringifyQuery(listener.query) + "' failed");
              listener.onError(firestoreError);
              return [2];
            case 4:
              eventManagerImpl.queries.set(query, queryInfo);
              queryInfo.listeners.push(listener);
              raisedEvent = listener.applyOnlineStateChange(eventManagerImpl.onlineState);
              if (queryInfo.viewSnap) {
                raisedEvent_1 = listener.onViewSnapshot(queryInfo.viewSnap);
                if (raisedEvent_1) {
                  raiseSnapshotsInSyncEvent(eventManagerImpl);
                }
              }
              return [2];
          }
        });
      });
    }
    function eventManagerUnlisten(eventManager, listener) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var eventManagerImpl, query, lastListen, queryInfo, i;
        return tslib.__generator(this, function(_f) {
          eventManagerImpl = debugCast(eventManager);
          query = listener.query;
          lastListen = false;
          queryInfo = eventManagerImpl.queries.get(query);
          if (queryInfo) {
            i = queryInfo.listeners.indexOf(listener);
            if (i >= 0) {
              queryInfo.listeners.splice(i, 1);
              lastListen = queryInfo.listeners.length === 0;
            }
          }
          if (lastListen) {
            eventManagerImpl.queries.delete(query);
            return [2, eventManagerImpl.onUnlisten(query)];
          }
          return [2];
        });
      });
    }
    function eventManagerOnWatchChange(eventManager, viewSnaps) {
      var eventManagerImpl = debugCast(eventManager);
      var raisedEvent = false;
      for (var _i = 0, viewSnaps_1 = viewSnaps; _i < viewSnaps_1.length; _i++) {
        var viewSnap = viewSnaps_1[_i];
        var query = viewSnap.query;
        var queryInfo = eventManagerImpl.queries.get(query);
        if (queryInfo) {
          for (var _f = 0, _g = queryInfo.listeners; _f < _g.length; _f++) {
            var listener = _g[_f];
            if (listener.onViewSnapshot(viewSnap)) {
              raisedEvent = true;
            }
          }
          queryInfo.viewSnap = viewSnap;
        }
      }
      if (raisedEvent) {
        raiseSnapshotsInSyncEvent(eventManagerImpl);
      }
    }
    function eventManagerOnWatchError(eventManager, query, error2) {
      var eventManagerImpl = debugCast(eventManager);
      var queryInfo = eventManagerImpl.queries.get(query);
      if (queryInfo) {
        for (var _i = 0, _f = queryInfo.listeners; _i < _f.length; _i++) {
          var listener = _f[_i];
          listener.onError(error2);
        }
      }
      eventManagerImpl.queries.delete(query);
    }
    function eventManagerOnOnlineStateChange(eventManager, onlineState) {
      var eventManagerImpl = debugCast(eventManager);
      eventManagerImpl.onlineState = onlineState;
      var raisedEvent = false;
      eventManagerImpl.queries.forEach(function(_, queryInfo) {
        for (var _i = 0, _f = queryInfo.listeners; _i < _f.length; _i++) {
          var listener = _f[_i];
          if (listener.applyOnlineStateChange(onlineState)) {
            raisedEvent = true;
          }
        }
      });
      if (raisedEvent) {
        raiseSnapshotsInSyncEvent(eventManagerImpl);
      }
    }
    function addSnapshotsInSyncListener(eventManager, observer) {
      var eventManagerImpl = debugCast(eventManager);
      eventManagerImpl.snapshotsInSyncListeners.add(observer);
      observer.next();
    }
    function removeSnapshotsInSyncListener(eventManager, observer) {
      var eventManagerImpl = debugCast(eventManager);
      eventManagerImpl.snapshotsInSyncListeners.delete(observer);
    }
    function raiseSnapshotsInSyncEvent(eventManagerImpl) {
      eventManagerImpl.snapshotsInSyncListeners.forEach(function(observer) {
        observer.next();
      });
    }
    var QueryListener = function() {
      function QueryListener2(query, queryObserver, options2) {
        this.query = query;
        this.queryObserver = queryObserver;
        this.raisedInitialEvent = false;
        this.snap = null;
        this.onlineState = "Unknown";
        this.options = options2 || {};
      }
      QueryListener2.prototype.onViewSnapshot = function(snap) {
        if (!this.options.includeMetadataChanges) {
          var docChanges = [];
          for (var _i = 0, _f = snap.docChanges; _i < _f.length; _i++) {
            var docChange = _f[_i];
            if (docChange.type !== 3) {
              docChanges.push(docChange);
            }
          }
          snap = new ViewSnapshot(snap.query, snap.docs, snap.oldDocs, docChanges, snap.mutatedKeys, snap.fromCache, snap.syncStateChanged, true);
        }
        var raisedEvent = false;
        if (!this.raisedInitialEvent) {
          if (this.shouldRaiseInitialEvent(snap, this.onlineState)) {
            this.raiseInitialEvent(snap);
            raisedEvent = true;
          }
        } else if (this.shouldRaiseEvent(snap)) {
          this.queryObserver.next(snap);
          raisedEvent = true;
        }
        this.snap = snap;
        return raisedEvent;
      };
      QueryListener2.prototype.onError = function(error2) {
        this.queryObserver.error(error2);
      };
      QueryListener2.prototype.applyOnlineStateChange = function(onlineState) {
        this.onlineState = onlineState;
        var raisedEvent = false;
        if (this.snap && !this.raisedInitialEvent && this.shouldRaiseInitialEvent(this.snap, onlineState)) {
          this.raiseInitialEvent(this.snap);
          raisedEvent = true;
        }
        return raisedEvent;
      };
      QueryListener2.prototype.shouldRaiseInitialEvent = function(snap, onlineState) {
        if (!snap.fromCache) {
          return true;
        }
        var maybeOnline = onlineState !== "Offline";
        if (this.options.waitForSyncWhenOnline && maybeOnline) {
          return false;
        }
        return !snap.docs.isEmpty() || onlineState === "Offline";
      };
      QueryListener2.prototype.shouldRaiseEvent = function(snap) {
        if (snap.docChanges.length > 0) {
          return true;
        }
        var hasPendingWritesChanged = this.snap && this.snap.hasPendingWrites !== snap.hasPendingWrites;
        if (snap.syncStateChanged || hasPendingWritesChanged) {
          return this.options.includeMetadataChanges === true;
        }
        return false;
      };
      QueryListener2.prototype.raiseInitialEvent = function(snap) {
        snap = ViewSnapshot.fromInitialDocuments(snap.query, snap.docs, snap.mutatedKeys, snap.fromCache);
        this.raisedInitialEvent = true;
        this.queryObserver.next(snap);
      };
      return QueryListener2;
    }();
    var LOG_TAG$b = "SyncEngine";
    var QueryView = function() {
      function QueryView2(query, targetId, view) {
        this.query = query;
        this.targetId = targetId;
        this.view = view;
      }
      return QueryView2;
    }();
    var LimboResolution = function() {
      function LimboResolution2(key) {
        this.key = key;
        this.receivedDocument = false;
      }
      return LimboResolution2;
    }();
    var SyncEngineImpl = function() {
      function SyncEngineImpl2(localStore, remoteStore, eventManager, sharedClientState, currentUser, maxConcurrentLimboResolutions) {
        this.localStore = localStore;
        this.remoteStore = remoteStore;
        this.eventManager = eventManager;
        this.sharedClientState = sharedClientState;
        this.currentUser = currentUser;
        this.maxConcurrentLimboResolutions = maxConcurrentLimboResolutions;
        this.syncEngineListener = {};
        this.queryViewsByQuery = new ObjectMap(function(q) {
          return canonifyQuery(q);
        }, queryEquals);
        this.queriesByTarget = new Map();
        this.enqueuedLimboResolutions = [];
        this.activeLimboTargetsByKey = new SortedMap(DocumentKey.comparator);
        this.activeLimboResolutionsByTarget = new Map();
        this.limboDocumentRefs = new ReferenceSet();
        this.mutationUserCallbacks = {};
        this.pendingWritesCallbacks = new Map();
        this.limboTargetIdGenerator = TargetIdGenerator.forSyncEngine();
        this.onlineState = "Unknown";
        this._isPrimaryClient = void 0;
      }
      Object.defineProperty(SyncEngineImpl2.prototype, "isPrimaryClient", {
        get: function() {
          return this._isPrimaryClient === true;
        },
        enumerable: false,
        configurable: true
      });
      return SyncEngineImpl2;
    }();
    function newSyncEngine(localStore, remoteStore, eventManager, sharedClientState, currentUser, maxConcurrentLimboResolutions, isPrimary) {
      var syncEngine = new SyncEngineImpl(localStore, remoteStore, eventManager, sharedClientState, currentUser, maxConcurrentLimboResolutions);
      if (isPrimary) {
        syncEngine._isPrimaryClient = true;
      }
      return syncEngine;
    }
    function syncEngineListen(syncEngine, query) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var syncEngineImpl, targetId, viewSnapshot, queryView, targetData, status_1;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              syncEngineImpl = ensureWatchCallbacks(syncEngine);
              queryView = syncEngineImpl.queryViewsByQuery.get(query);
              if (!queryView)
                return [3, 1];
              targetId = queryView.targetId;
              syncEngineImpl.sharedClientState.addLocalQueryTarget(targetId);
              viewSnapshot = queryView.view.computeInitialSnapshot();
              return [3, 4];
            case 1:
              return [4, allocateTarget(syncEngineImpl.localStore, queryToTarget(query))];
            case 2:
              targetData = _f.sent();
              status_1 = syncEngineImpl.sharedClientState.addLocalQueryTarget(targetData.targetId);
              targetId = targetData.targetId;
              return [4, initializeViewAndComputeSnapshot(syncEngineImpl, query, targetId, status_1 === "current")];
            case 3:
              viewSnapshot = _f.sent();
              if (syncEngineImpl.isPrimaryClient) {
                remoteStoreListen(syncEngineImpl.remoteStore, targetData);
              }
              _f.label = 4;
            case 4:
              return [2, viewSnapshot];
          }
        });
      });
    }
    function initializeViewAndComputeSnapshot(syncEngineImpl, query, targetId, current) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var queryResult, view, viewDocChanges, synthesizedTargetChange, viewChange, data;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              syncEngineImpl.applyDocChanges = function(queryView, changes, remoteEvent) {
                return applyDocChanges(syncEngineImpl, queryView, changes, remoteEvent);
              };
              return [4, executeQuery(syncEngineImpl.localStore, query, true)];
            case 1:
              queryResult = _f.sent();
              view = new View(query, queryResult.remoteKeys);
              viewDocChanges = view.computeDocChanges(queryResult.documents);
              synthesizedTargetChange = TargetChange.createSynthesizedTargetChangeForCurrentChange(targetId, current && syncEngineImpl.onlineState !== "Offline");
              viewChange = view.applyChanges(viewDocChanges, syncEngineImpl.isPrimaryClient, synthesizedTargetChange);
              updateTrackedLimbos(syncEngineImpl, targetId, viewChange.limboChanges);
              data = new QueryView(query, targetId, view);
              syncEngineImpl.queryViewsByQuery.set(query, data);
              if (syncEngineImpl.queriesByTarget.has(targetId)) {
                syncEngineImpl.queriesByTarget.get(targetId).push(query);
              } else {
                syncEngineImpl.queriesByTarget.set(targetId, [query]);
              }
              return [2, viewChange.snapshot];
          }
        });
      });
    }
    function syncEngineUnlisten(syncEngine, query) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var syncEngineImpl, queryView, queries, targetRemainsActive;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              syncEngineImpl = debugCast(syncEngine);
              queryView = syncEngineImpl.queryViewsByQuery.get(query);
              queries = syncEngineImpl.queriesByTarget.get(queryView.targetId);
              if (queries.length > 1) {
                syncEngineImpl.queriesByTarget.set(queryView.targetId, queries.filter(function(q) {
                  return !queryEquals(q, query);
                }));
                syncEngineImpl.queryViewsByQuery.delete(query);
                return [2];
              }
              if (!syncEngineImpl.isPrimaryClient)
                return [3, 3];
              syncEngineImpl.sharedClientState.removeLocalQueryTarget(queryView.targetId);
              targetRemainsActive = syncEngineImpl.sharedClientState.isActiveQueryTarget(queryView.targetId);
              if (!!targetRemainsActive)
                return [3, 2];
              return [4, releaseTarget(syncEngineImpl.localStore, queryView.targetId, false).then(function() {
                syncEngineImpl.sharedClientState.clearQueryState(queryView.targetId);
                remoteStoreUnlisten(syncEngineImpl.remoteStore, queryView.targetId);
                removeAndCleanupTarget(syncEngineImpl, queryView.targetId);
              }).catch(ignoreIfPrimaryLeaseLoss)];
            case 1:
              _f.sent();
              _f.label = 2;
            case 2:
              return [3, 5];
            case 3:
              removeAndCleanupTarget(syncEngineImpl, queryView.targetId);
              return [4, releaseTarget(syncEngineImpl.localStore, queryView.targetId, true)];
            case 4:
              _f.sent();
              _f.label = 5;
            case 5:
              return [2];
          }
        });
      });
    }
    function syncEngineWrite(syncEngine, batch, userCallback) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var syncEngineImpl, result, e_9, error2;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              syncEngineImpl = ensureWriteCallbacks(syncEngine);
              _f.label = 1;
            case 1:
              _f.trys.push([1, 5, , 6]);
              return [4, localWrite(syncEngineImpl.localStore, batch)];
            case 2:
              result = _f.sent();
              syncEngineImpl.sharedClientState.addPendingMutation(result.batchId);
              addMutationCallback(syncEngineImpl, result.batchId, userCallback);
              return [4, emitNewSnapsAndNotifyLocalStore(syncEngineImpl, result.changes)];
            case 3:
              _f.sent();
              return [4, fillWritePipeline(syncEngineImpl.remoteStore)];
            case 4:
              _f.sent();
              return [3, 6];
            case 5:
              e_9 = _f.sent();
              error2 = wrapInUserErrorIfRecoverable(e_9, "Failed to persist write");
              userCallback.reject(error2);
              return [3, 6];
            case 6:
              return [2];
          }
        });
      });
    }
    function applyRemoteEvent(syncEngine, remoteEvent) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var syncEngineImpl, changes, error_2;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              syncEngineImpl = debugCast(syncEngine);
              _f.label = 1;
            case 1:
              _f.trys.push([1, 4, , 6]);
              return [4, applyRemoteEventToLocalCache(syncEngineImpl.localStore, remoteEvent)];
            case 2:
              changes = _f.sent();
              remoteEvent.targetChanges.forEach(function(targetChange, targetId) {
                var limboResolution = syncEngineImpl.activeLimboResolutionsByTarget.get(targetId);
                if (limboResolution) {
                  hardAssert(targetChange.addedDocuments.size + targetChange.modifiedDocuments.size + targetChange.removedDocuments.size <= 1);
                  if (targetChange.addedDocuments.size > 0) {
                    limboResolution.receivedDocument = true;
                  } else if (targetChange.modifiedDocuments.size > 0) {
                    hardAssert(limboResolution.receivedDocument);
                  } else if (targetChange.removedDocuments.size > 0) {
                    hardAssert(limboResolution.receivedDocument);
                    limboResolution.receivedDocument = false;
                  } else
                    ;
                }
              });
              return [4, emitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes, remoteEvent)];
            case 3:
              _f.sent();
              return [3, 6];
            case 4:
              error_2 = _f.sent();
              return [4, ignoreIfPrimaryLeaseLoss(error_2)];
            case 5:
              _f.sent();
              return [3, 6];
            case 6:
              return [2];
          }
        });
      });
    }
    function applyOnlineStateChange(syncEngine, onlineState, source) {
      var syncEngineImpl = debugCast(syncEngine);
      if (syncEngineImpl.isPrimaryClient && source === 0 || !syncEngineImpl.isPrimaryClient && source === 1) {
        var newViewSnapshots_1 = [];
        syncEngineImpl.queryViewsByQuery.forEach(function(query, queryView) {
          var viewChange = queryView.view.applyOnlineStateChange(onlineState);
          if (viewChange.snapshot) {
            newViewSnapshots_1.push(viewChange.snapshot);
          }
        });
        eventManagerOnOnlineStateChange(syncEngineImpl.eventManager, onlineState);
        if (newViewSnapshots_1.length) {
          syncEngineImpl.syncEngineListener.onWatchChange(newViewSnapshots_1);
        }
        syncEngineImpl.onlineState = onlineState;
        if (syncEngineImpl.isPrimaryClient) {
          syncEngineImpl.sharedClientState.setOnlineState(onlineState);
        }
      }
    }
    function rejectListen(syncEngine, targetId, err) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var syncEngineImpl, limboResolution, limboKey, documentUpdates, resolvedLimboDocuments, event_2;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              syncEngineImpl = debugCast(syncEngine);
              syncEngineImpl.sharedClientState.updateQueryState(targetId, "rejected", err);
              limboResolution = syncEngineImpl.activeLimboResolutionsByTarget.get(targetId);
              limboKey = limboResolution && limboResolution.key;
              if (!limboKey)
                return [3, 2];
              documentUpdates = new SortedMap(DocumentKey.comparator);
              documentUpdates = documentUpdates.insert(limboKey, new NoDocument(limboKey, SnapshotVersion.min()));
              resolvedLimboDocuments = documentKeySet().add(limboKey);
              event_2 = new RemoteEvent(SnapshotVersion.min(), new Map(), new SortedSet(primitiveComparator), documentUpdates, resolvedLimboDocuments);
              return [4, applyRemoteEvent(syncEngineImpl, event_2)];
            case 1:
              _f.sent();
              syncEngineImpl.activeLimboTargetsByKey = syncEngineImpl.activeLimboTargetsByKey.remove(limboKey);
              syncEngineImpl.activeLimboResolutionsByTarget.delete(targetId);
              pumpEnqueuedLimboResolutions(syncEngineImpl);
              return [3, 4];
            case 2:
              return [4, releaseTarget(syncEngineImpl.localStore, targetId, false).then(function() {
                return removeAndCleanupTarget(syncEngineImpl, targetId, err);
              }).catch(ignoreIfPrimaryLeaseLoss)];
            case 3:
              _f.sent();
              _f.label = 4;
            case 4:
              return [2];
          }
        });
      });
    }
    function applySuccessfulWrite(syncEngine, mutationBatchResult) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var syncEngineImpl, batchId, changes, error_3;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              syncEngineImpl = debugCast(syncEngine);
              batchId = mutationBatchResult.batch.batchId;
              _f.label = 1;
            case 1:
              _f.trys.push([1, 4, , 6]);
              return [4, acknowledgeBatch(syncEngineImpl.localStore, mutationBatchResult)];
            case 2:
              changes = _f.sent();
              processUserCallback(syncEngineImpl, batchId, null);
              triggerPendingWritesCallbacks(syncEngineImpl, batchId);
              syncEngineImpl.sharedClientState.updateMutationState(batchId, "acknowledged");
              return [4, emitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes)];
            case 3:
              _f.sent();
              return [3, 6];
            case 4:
              error_3 = _f.sent();
              return [4, ignoreIfPrimaryLeaseLoss(error_3)];
            case 5:
              _f.sent();
              return [3, 6];
            case 6:
              return [2];
          }
        });
      });
    }
    function rejectFailedWrite(syncEngine, batchId, error2) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var syncEngineImpl, changes, error_4;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              syncEngineImpl = debugCast(syncEngine);
              _f.label = 1;
            case 1:
              _f.trys.push([1, 4, , 6]);
              return [4, rejectBatch(syncEngineImpl.localStore, batchId)];
            case 2:
              changes = _f.sent();
              processUserCallback(syncEngineImpl, batchId, error2);
              triggerPendingWritesCallbacks(syncEngineImpl, batchId);
              syncEngineImpl.sharedClientState.updateMutationState(batchId, "rejected", error2);
              return [4, emitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes)];
            case 3:
              _f.sent();
              return [3, 6];
            case 4:
              error_4 = _f.sent();
              return [4, ignoreIfPrimaryLeaseLoss(error_4)];
            case 5:
              _f.sent();
              return [3, 6];
            case 6:
              return [2];
          }
        });
      });
    }
    function registerPendingWritesCallback(syncEngine, callback) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var syncEngineImpl, highestBatchId, callbacks, e_10, firestoreError;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              syncEngineImpl = debugCast(syncEngine);
              if (!canUseNetwork(syncEngineImpl.remoteStore)) {
                logDebug(LOG_TAG$b, "The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled.");
              }
              _f.label = 1;
            case 1:
              _f.trys.push([1, 3, , 4]);
              return [4, getHighestUnacknowledgedBatchId(syncEngineImpl.localStore)];
            case 2:
              highestBatchId = _f.sent();
              if (highestBatchId === BATCHID_UNKNOWN) {
                callback.resolve();
                return [2];
              }
              callbacks = syncEngineImpl.pendingWritesCallbacks.get(highestBatchId) || [];
              callbacks.push(callback);
              syncEngineImpl.pendingWritesCallbacks.set(highestBatchId, callbacks);
              return [3, 4];
            case 3:
              e_10 = _f.sent();
              firestoreError = wrapInUserErrorIfRecoverable(e_10, "Initialization of waitForPendingWrites() operation failed");
              callback.reject(firestoreError);
              return [3, 4];
            case 4:
              return [2];
          }
        });
      });
    }
    function triggerPendingWritesCallbacks(syncEngineImpl, batchId) {
      (syncEngineImpl.pendingWritesCallbacks.get(batchId) || []).forEach(function(callback) {
        callback.resolve();
      });
      syncEngineImpl.pendingWritesCallbacks.delete(batchId);
    }
    function rejectOutstandingPendingWritesCallbacks(syncEngineImpl, errorMessage2) {
      syncEngineImpl.pendingWritesCallbacks.forEach(function(callbacks) {
        callbacks.forEach(function(callback) {
          callback.reject(new FirestoreError(Code.CANCELLED, errorMessage2));
        });
      });
      syncEngineImpl.pendingWritesCallbacks.clear();
    }
    function addMutationCallback(syncEngineImpl, batchId, callback) {
      var newCallbacks = syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()];
      if (!newCallbacks) {
        newCallbacks = new SortedMap(primitiveComparator);
      }
      newCallbacks = newCallbacks.insert(batchId, callback);
      syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()] = newCallbacks;
    }
    function processUserCallback(syncEngine, batchId, error2) {
      var syncEngineImpl = debugCast(syncEngine);
      var newCallbacks = syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()];
      if (newCallbacks) {
        var callback = newCallbacks.get(batchId);
        if (callback) {
          if (error2) {
            callback.reject(error2);
          } else {
            callback.resolve();
          }
          newCallbacks = newCallbacks.remove(batchId);
        }
        syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()] = newCallbacks;
      }
    }
    function removeAndCleanupTarget(syncEngineImpl, targetId, error2) {
      if (error2 === void 0) {
        error2 = null;
      }
      syncEngineImpl.sharedClientState.removeLocalQueryTarget(targetId);
      for (var _i = 0, _f = syncEngineImpl.queriesByTarget.get(targetId); _i < _f.length; _i++) {
        var query = _f[_i];
        syncEngineImpl.queryViewsByQuery.delete(query);
        if (error2) {
          syncEngineImpl.syncEngineListener.onWatchError(query, error2);
        }
      }
      syncEngineImpl.queriesByTarget.delete(targetId);
      if (syncEngineImpl.isPrimaryClient) {
        var limboKeys = syncEngineImpl.limboDocumentRefs.removeReferencesForId(targetId);
        limboKeys.forEach(function(limboKey) {
          var isReferenced = syncEngineImpl.limboDocumentRefs.containsKey(limboKey);
          if (!isReferenced) {
            removeLimboTarget(syncEngineImpl, limboKey);
          }
        });
      }
    }
    function removeLimboTarget(syncEngineImpl, key) {
      var limboTargetId = syncEngineImpl.activeLimboTargetsByKey.get(key);
      if (limboTargetId === null) {
        return;
      }
      remoteStoreUnlisten(syncEngineImpl.remoteStore, limboTargetId);
      syncEngineImpl.activeLimboTargetsByKey = syncEngineImpl.activeLimboTargetsByKey.remove(key);
      syncEngineImpl.activeLimboResolutionsByTarget.delete(limboTargetId);
      pumpEnqueuedLimboResolutions(syncEngineImpl);
    }
    function updateTrackedLimbos(syncEngineImpl, targetId, limboChanges) {
      for (var _i = 0, limboChanges_1 = limboChanges; _i < limboChanges_1.length; _i++) {
        var limboChange = limboChanges_1[_i];
        if (limboChange instanceof AddedLimboDocument) {
          syncEngineImpl.limboDocumentRefs.addReference(limboChange.key, targetId);
          trackLimboChange(syncEngineImpl, limboChange);
        } else if (limboChange instanceof RemovedLimboDocument) {
          logDebug(LOG_TAG$b, "Document no longer in limbo: " + limboChange.key);
          syncEngineImpl.limboDocumentRefs.removeReference(limboChange.key, targetId);
          var isReferenced = syncEngineImpl.limboDocumentRefs.containsKey(limboChange.key);
          if (!isReferenced) {
            removeLimboTarget(syncEngineImpl, limboChange.key);
          }
        } else {
          fail();
        }
      }
    }
    function trackLimboChange(syncEngineImpl, limboChange) {
      var key = limboChange.key;
      if (!syncEngineImpl.activeLimboTargetsByKey.get(key)) {
        logDebug(LOG_TAG$b, "New document in limbo: " + key);
        syncEngineImpl.enqueuedLimboResolutions.push(key);
        pumpEnqueuedLimboResolutions(syncEngineImpl);
      }
    }
    function pumpEnqueuedLimboResolutions(syncEngineImpl) {
      while (syncEngineImpl.enqueuedLimboResolutions.length > 0 && syncEngineImpl.activeLimboTargetsByKey.size < syncEngineImpl.maxConcurrentLimboResolutions) {
        var key = syncEngineImpl.enqueuedLimboResolutions.shift();
        var limboTargetId = syncEngineImpl.limboTargetIdGenerator.next();
        syncEngineImpl.activeLimboResolutionsByTarget.set(limboTargetId, new LimboResolution(key));
        syncEngineImpl.activeLimboTargetsByKey = syncEngineImpl.activeLimboTargetsByKey.insert(key, limboTargetId);
        remoteStoreListen(syncEngineImpl.remoteStore, new TargetData(queryToTarget(newQueryForPath(key.path)), limboTargetId, 2, ListenSequence.INVALID));
      }
    }
    function emitNewSnapsAndNotifyLocalStore(syncEngine, changes, remoteEvent) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var syncEngineImpl, newSnaps, docChangesInAllViews, queriesProcessed;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              syncEngineImpl = debugCast(syncEngine);
              newSnaps = [];
              docChangesInAllViews = [];
              queriesProcessed = [];
              if (syncEngineImpl.queryViewsByQuery.isEmpty()) {
                return [2];
              }
              syncEngineImpl.queryViewsByQuery.forEach(function(_, queryView) {
                queriesProcessed.push(syncEngineImpl.applyDocChanges(queryView, changes, remoteEvent).then(function(viewSnapshot) {
                  if (viewSnapshot) {
                    if (syncEngineImpl.isPrimaryClient) {
                      syncEngineImpl.sharedClientState.updateQueryState(queryView.targetId, viewSnapshot.fromCache ? "not-current" : "current");
                    }
                    newSnaps.push(viewSnapshot);
                    var docChanges = LocalViewChanges.fromSnapshot(queryView.targetId, viewSnapshot);
                    docChangesInAllViews.push(docChanges);
                  }
                }));
              });
              return [4, Promise.all(queriesProcessed)];
            case 1:
              _f.sent();
              syncEngineImpl.syncEngineListener.onWatchChange(newSnaps);
              return [4, notifyLocalViewChanges(syncEngineImpl.localStore, docChangesInAllViews)];
            case 2:
              _f.sent();
              return [2];
          }
        });
      });
    }
    function applyDocChanges(syncEngineImpl, queryView, changes, remoteEvent) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var viewDocChanges, targetChange, viewChange;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              viewDocChanges = queryView.view.computeDocChanges(changes);
              if (!viewDocChanges.needsRefill)
                return [3, 2];
              return [4, executeQuery(syncEngineImpl.localStore, queryView.query, false).then(function(_f2) {
                var documents = _f2.documents;
                return queryView.view.computeDocChanges(documents, viewDocChanges);
              })];
            case 1:
              viewDocChanges = _f.sent();
              _f.label = 2;
            case 2:
              targetChange = remoteEvent && remoteEvent.targetChanges.get(queryView.targetId);
              viewChange = queryView.view.applyChanges(viewDocChanges, syncEngineImpl.isPrimaryClient, targetChange);
              updateTrackedLimbos(syncEngineImpl, queryView.targetId, viewChange.limboChanges);
              return [2, viewChange.snapshot];
          }
        });
      });
    }
    function syncEngineHandleCredentialChange(syncEngine, user) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var syncEngineImpl, userChanged, result;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              syncEngineImpl = debugCast(syncEngine);
              userChanged = !syncEngineImpl.currentUser.isEqual(user);
              if (!userChanged)
                return [3, 3];
              logDebug(LOG_TAG$b, "User change. New user:", user.toKey());
              return [4, handleUserChange(syncEngineImpl.localStore, user)];
            case 1:
              result = _f.sent();
              syncEngineImpl.currentUser = user;
              rejectOutstandingPendingWritesCallbacks(syncEngineImpl, "'waitForPendingWrites' promise is rejected due to a user change.");
              syncEngineImpl.sharedClientState.handleUserChange(user, result.removedBatchIds, result.addedBatchIds);
              return [4, emitNewSnapsAndNotifyLocalStore(syncEngineImpl, result.affectedDocuments)];
            case 2:
              _f.sent();
              _f.label = 3;
            case 3:
              return [2];
          }
        });
      });
    }
    function getRemoteKeysForTarget(syncEngine, targetId) {
      var syncEngineImpl = debugCast(syncEngine);
      var limboResolution = syncEngineImpl.activeLimboResolutionsByTarget.get(targetId);
      if (limboResolution && limboResolution.receivedDocument) {
        return documentKeySet().add(limboResolution.key);
      } else {
        var keySet = documentKeySet();
        var queries = syncEngineImpl.queriesByTarget.get(targetId);
        if (!queries) {
          return keySet;
        }
        for (var _i = 0, queries_1 = queries; _i < queries_1.length; _i++) {
          var query = queries_1[_i];
          var queryView = syncEngineImpl.queryViewsByQuery.get(query);
          keySet = keySet.unionWith(queryView.view.syncedDocuments);
        }
        return keySet;
      }
    }
    function synchronizeViewAndComputeSnapshot(syncEngine, queryView) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var syncEngineImpl, queryResult, viewSnapshot;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              syncEngineImpl = debugCast(syncEngine);
              return [4, executeQuery(syncEngineImpl.localStore, queryView.query, true)];
            case 1:
              queryResult = _f.sent();
              viewSnapshot = queryView.view.synchronizeWithPersistedState(queryResult);
              if (syncEngineImpl.isPrimaryClient) {
                updateTrackedLimbos(syncEngineImpl, queryView.targetId, viewSnapshot.limboChanges);
              }
              return [2, viewSnapshot];
          }
        });
      });
    }
    function applyBatchState(syncEngine, batchId, batchState, error2) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var syncEngineImpl, documents;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              syncEngineImpl = debugCast(syncEngine);
              return [4, lookupMutationDocuments(syncEngineImpl.localStore, batchId)];
            case 1:
              documents = _f.sent();
              if (documents === null) {
                logDebug(LOG_TAG$b, "Cannot apply mutation batch with id: " + batchId);
                return [2];
              }
              if (!(batchState === "pending"))
                return [3, 3];
              return [4, fillWritePipeline(syncEngineImpl.remoteStore)];
            case 2:
              _f.sent();
              return [3, 4];
            case 3:
              if (batchState === "acknowledged" || batchState === "rejected") {
                processUserCallback(syncEngineImpl, batchId, error2 ? error2 : null);
                triggerPendingWritesCallbacks(syncEngineImpl, batchId);
                removeCachedMutationBatchMetadata(syncEngineImpl.localStore, batchId);
              } else {
                fail();
              }
              _f.label = 4;
            case 4:
              return [4, emitNewSnapsAndNotifyLocalStore(syncEngineImpl, documents)];
            case 5:
              _f.sent();
              return [2];
          }
        });
      });
    }
    function applyPrimaryState(syncEngine, isPrimary) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var syncEngineImpl, activeTargets, activeQueries, _i, activeQueries_1, targetData, activeTargets_1, p_1;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              syncEngineImpl = debugCast(syncEngine);
              ensureWatchCallbacks(syncEngineImpl);
              ensureWriteCallbacks(syncEngineImpl);
              if (!(isPrimary === true && syncEngineImpl._isPrimaryClient !== true))
                return [3, 3];
              activeTargets = syncEngineImpl.sharedClientState.getAllActiveQueryTargets();
              return [4, synchronizeQueryViewsAndRaiseSnapshots(syncEngineImpl, activeTargets.toArray())];
            case 1:
              activeQueries = _f.sent();
              syncEngineImpl._isPrimaryClient = true;
              return [4, remoteStoreApplyPrimaryState(syncEngineImpl.remoteStore, true)];
            case 2:
              _f.sent();
              for (_i = 0, activeQueries_1 = activeQueries; _i < activeQueries_1.length; _i++) {
                targetData = activeQueries_1[_i];
                remoteStoreListen(syncEngineImpl.remoteStore, targetData);
              }
              return [3, 7];
            case 3:
              if (!(isPrimary === false && syncEngineImpl._isPrimaryClient !== false))
                return [3, 7];
              activeTargets_1 = [];
              p_1 = Promise.resolve();
              syncEngineImpl.queriesByTarget.forEach(function(_, targetId) {
                if (syncEngineImpl.sharedClientState.isLocalQueryTarget(targetId)) {
                  activeTargets_1.push(targetId);
                } else {
                  p_1 = p_1.then(function() {
                    removeAndCleanupTarget(syncEngineImpl, targetId);
                    return releaseTarget(syncEngineImpl.localStore, targetId, true);
                  });
                }
                remoteStoreUnlisten(syncEngineImpl.remoteStore, targetId);
              });
              return [4, p_1];
            case 4:
              _f.sent();
              return [4, synchronizeQueryViewsAndRaiseSnapshots(syncEngineImpl, activeTargets_1)];
            case 5:
              _f.sent();
              resetLimboDocuments(syncEngineImpl);
              syncEngineImpl._isPrimaryClient = false;
              return [4, remoteStoreApplyPrimaryState(syncEngineImpl.remoteStore, false)];
            case 6:
              _f.sent();
              _f.label = 7;
            case 7:
              return [2];
          }
        });
      });
    }
    function resetLimboDocuments(syncEngine) {
      var syncEngineImpl = debugCast(syncEngine);
      syncEngineImpl.activeLimboResolutionsByTarget.forEach(function(_, targetId) {
        remoteStoreUnlisten(syncEngineImpl.remoteStore, targetId);
      });
      syncEngineImpl.limboDocumentRefs.removeAllReferences();
      syncEngineImpl.activeLimboResolutionsByTarget = new Map();
      syncEngineImpl.activeLimboTargetsByKey = new SortedMap(DocumentKey.comparator);
    }
    function synchronizeQueryViewsAndRaiseSnapshots(syncEngine, targets, transitionToPrimary) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var syncEngineImpl, activeQueries, newViewSnapshots, _i, targets_1, targetId, targetData, queries, _f, queries_2, query, queryView, viewChange, target;
        return tslib.__generator(this, function(_g) {
          switch (_g.label) {
            case 0:
              syncEngineImpl = debugCast(syncEngine);
              activeQueries = [];
              newViewSnapshots = [];
              _i = 0, targets_1 = targets;
              _g.label = 1;
            case 1:
              if (!(_i < targets_1.length))
                return [3, 13];
              targetId = targets_1[_i];
              targetData = void 0;
              queries = syncEngineImpl.queriesByTarget.get(targetId);
              if (!(queries && queries.length !== 0))
                return [3, 7];
              return [4, allocateTarget(syncEngineImpl.localStore, queryToTarget(queries[0]))];
            case 2:
              targetData = _g.sent();
              _f = 0, queries_2 = queries;
              _g.label = 3;
            case 3:
              if (!(_f < queries_2.length))
                return [3, 6];
              query = queries_2[_f];
              queryView = syncEngineImpl.queryViewsByQuery.get(query);
              return [4, synchronizeViewAndComputeSnapshot(syncEngineImpl, queryView)];
            case 4:
              viewChange = _g.sent();
              if (viewChange.snapshot) {
                newViewSnapshots.push(viewChange.snapshot);
              }
              _g.label = 5;
            case 5:
              _f++;
              return [3, 3];
            case 6:
              return [3, 11];
            case 7:
              return [4, getCachedTarget(syncEngineImpl.localStore, targetId)];
            case 8:
              target = _g.sent();
              return [4, allocateTarget(syncEngineImpl.localStore, target)];
            case 9:
              targetData = _g.sent();
              return [4, initializeViewAndComputeSnapshot(syncEngineImpl, synthesizeTargetToQuery(target), targetId, false)];
            case 10:
              _g.sent();
              _g.label = 11;
            case 11:
              activeQueries.push(targetData);
              _g.label = 12;
            case 12:
              _i++;
              return [3, 1];
            case 13:
              syncEngineImpl.syncEngineListener.onWatchChange(newViewSnapshots);
              return [2, activeQueries];
          }
        });
      });
    }
    function synthesizeTargetToQuery(target) {
      return newQuery(target.path, target.collectionGroup, target.orderBy, target.filters, target.limit, "F", target.startAt, target.endAt);
    }
    function getActiveClients(syncEngine) {
      var syncEngineImpl = debugCast(syncEngine);
      return getActiveClientsFromPersistence(syncEngineImpl.localStore);
    }
    function applyTargetState(syncEngine, targetId, state, error2) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var syncEngineImpl, _f, changes, synthesizedRemoteEvent;
        return tslib.__generator(this, function(_g) {
          switch (_g.label) {
            case 0:
              syncEngineImpl = debugCast(syncEngine);
              if (syncEngineImpl._isPrimaryClient) {
                logDebug(LOG_TAG$b, "Ignoring unexpected query state notification.");
                return [2];
              }
              if (!syncEngineImpl.queriesByTarget.has(targetId))
                return [3, 7];
              _f = state;
              switch (_f) {
                case "current":
                  return [3, 1];
                case "not-current":
                  return [3, 1];
                case "rejected":
                  return [3, 4];
              }
              return [3, 6];
            case 1:
              return [4, getNewDocumentChanges(syncEngineImpl.localStore)];
            case 2:
              changes = _g.sent();
              synthesizedRemoteEvent = RemoteEvent.createSynthesizedRemoteEventForCurrentChange(targetId, state === "current");
              return [4, emitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes, synthesizedRemoteEvent)];
            case 3:
              _g.sent();
              return [3, 7];
            case 4:
              return [4, releaseTarget(syncEngineImpl.localStore, targetId, true)];
            case 5:
              _g.sent();
              removeAndCleanupTarget(syncEngineImpl, targetId, error2);
              return [3, 7];
            case 6:
              fail();
              _g.label = 7;
            case 7:
              return [2];
          }
        });
      });
    }
    function applyActiveTargetsChange(syncEngine, added, removed) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var syncEngineImpl, _i, added_1, targetId, target, targetData, _loop_5, _f, removed_1, targetId;
        return tslib.__generator(this, function(_g) {
          switch (_g.label) {
            case 0:
              syncEngineImpl = ensureWatchCallbacks(syncEngine);
              if (!syncEngineImpl._isPrimaryClient) {
                return [2];
              }
              _i = 0, added_1 = added;
              _g.label = 1;
            case 1:
              if (!(_i < added_1.length))
                return [3, 6];
              targetId = added_1[_i];
              if (syncEngineImpl.queriesByTarget.has(targetId)) {
                logDebug(LOG_TAG$b, "Adding an already active target " + targetId);
                return [3, 5];
              }
              return [4, getCachedTarget(syncEngineImpl.localStore, targetId)];
            case 2:
              target = _g.sent();
              return [4, allocateTarget(syncEngineImpl.localStore, target)];
            case 3:
              targetData = _g.sent();
              return [4, initializeViewAndComputeSnapshot(syncEngineImpl, synthesizeTargetToQuery(target), targetData.targetId, false)];
            case 4:
              _g.sent();
              remoteStoreListen(syncEngineImpl.remoteStore, targetData);
              _g.label = 5;
            case 5:
              _i++;
              return [3, 1];
            case 6:
              _loop_5 = function(targetId2) {
                return tslib.__generator(this, function(_f2) {
                  switch (_f2.label) {
                    case 0:
                      if (!syncEngineImpl.queriesByTarget.has(targetId2)) {
                        return [2, "continue"];
                      }
                      return [4, releaseTarget(syncEngineImpl.localStore, targetId2, false).then(function() {
                        remoteStoreUnlisten(syncEngineImpl.remoteStore, targetId2);
                        removeAndCleanupTarget(syncEngineImpl, targetId2);
                      }).catch(ignoreIfPrimaryLeaseLoss)];
                    case 1:
                      _f2.sent();
                      return [2];
                  }
                });
              };
              _f = 0, removed_1 = removed;
              _g.label = 7;
            case 7:
              if (!(_f < removed_1.length))
                return [3, 10];
              targetId = removed_1[_f];
              return [5, _loop_5(targetId)];
            case 8:
              _g.sent();
              _g.label = 9;
            case 9:
              _f++;
              return [3, 7];
            case 10:
              return [2];
          }
        });
      });
    }
    function ensureWatchCallbacks(syncEngine) {
      var syncEngineImpl = debugCast(syncEngine);
      syncEngineImpl.remoteStore.remoteSyncer.applyRemoteEvent = applyRemoteEvent.bind(null, syncEngineImpl);
      syncEngineImpl.remoteStore.remoteSyncer.getRemoteKeysForTarget = getRemoteKeysForTarget.bind(null, syncEngineImpl);
      syncEngineImpl.remoteStore.remoteSyncer.rejectListen = rejectListen.bind(null, syncEngineImpl);
      syncEngineImpl.syncEngineListener.onWatchChange = eventManagerOnWatchChange.bind(null, syncEngineImpl.eventManager);
      syncEngineImpl.syncEngineListener.onWatchError = eventManagerOnWatchError.bind(null, syncEngineImpl.eventManager);
      return syncEngineImpl;
    }
    function ensureWriteCallbacks(syncEngine) {
      var syncEngineImpl = debugCast(syncEngine);
      syncEngineImpl.remoteStore.remoteSyncer.applySuccessfulWrite = applySuccessfulWrite.bind(null, syncEngineImpl);
      syncEngineImpl.remoteStore.remoteSyncer.rejectFailedWrite = rejectFailedWrite.bind(null, syncEngineImpl);
      return syncEngineImpl;
    }
    var IndexFreeQueryEngine = function() {
      function IndexFreeQueryEngine2() {
      }
      IndexFreeQueryEngine2.prototype.setLocalDocumentsView = function(localDocuments) {
        this.localDocumentsView = localDocuments;
      };
      IndexFreeQueryEngine2.prototype.getDocumentsMatchingQuery = function(transaction, query, lastLimboFreeSnapshotVersion, remoteKeys) {
        var _this = this;
        if (matchesAllDocuments(query)) {
          return this.executeFullCollectionScan(transaction, query);
        }
        if (lastLimboFreeSnapshotVersion.isEqual(SnapshotVersion.min())) {
          return this.executeFullCollectionScan(transaction, query);
        }
        return this.localDocumentsView.getDocuments(transaction, remoteKeys).next(function(documents) {
          var previousResults = _this.applyQuery(query, documents);
          if ((hasLimitToFirst(query) || hasLimitToLast(query)) && _this.needsRefill(query.limitType, previousResults, remoteKeys, lastLimboFreeSnapshotVersion)) {
            return _this.executeFullCollectionScan(transaction, query);
          }
          if (getLogLevel() <= logger.LogLevel.DEBUG) {
            logDebug("IndexFreeQueryEngine", "Re-using previous result from %s to execute query: %s", lastLimboFreeSnapshotVersion.toString(), stringifyQuery(query));
          }
          return _this.localDocumentsView.getDocumentsMatchingQuery(transaction, query, lastLimboFreeSnapshotVersion).next(function(updatedResults) {
            previousResults.forEach(function(doc) {
              updatedResults = updatedResults.insert(doc.key, doc);
            });
            return updatedResults;
          });
        });
      };
      IndexFreeQueryEngine2.prototype.applyQuery = function(query, documents) {
        var queryResults = new SortedSet(newQueryComparator(query));
        documents.forEach(function(_, maybeDoc) {
          if (maybeDoc instanceof Document && queryMatches(query, maybeDoc)) {
            queryResults = queryResults.add(maybeDoc);
          }
        });
        return queryResults;
      };
      IndexFreeQueryEngine2.prototype.needsRefill = function(limitType, sortedPreviousResults, remoteKeys, limboFreeSnapshotVersion) {
        if (remoteKeys.size !== sortedPreviousResults.size) {
          return true;
        }
        var docAtLimitEdge = limitType === "F" ? sortedPreviousResults.last() : sortedPreviousResults.first();
        if (!docAtLimitEdge) {
          return false;
        }
        return docAtLimitEdge.hasPendingWrites || docAtLimitEdge.version.compareTo(limboFreeSnapshotVersion) > 0;
      };
      IndexFreeQueryEngine2.prototype.executeFullCollectionScan = function(transaction, query) {
        if (getLogLevel() <= logger.LogLevel.DEBUG) {
          logDebug("IndexFreeQueryEngine", "Using full collection scan to execute query:", stringifyQuery(query));
        }
        return this.localDocumentsView.getDocumentsMatchingQuery(transaction, query, SnapshotVersion.min());
      };
      return IndexFreeQueryEngine2;
    }();
    var MemoryMutationQueue = function() {
      function MemoryMutationQueue2(indexManager, referenceDelegate) {
        this.indexManager = indexManager;
        this.referenceDelegate = referenceDelegate;
        this.mutationQueue = [];
        this.nextBatchId = 1;
        this.batchesByDocumentKey = new SortedSet(DocReference.compareByKey);
      }
      MemoryMutationQueue2.prototype.checkEmpty = function(transaction) {
        return PersistencePromise.resolve(this.mutationQueue.length === 0);
      };
      MemoryMutationQueue2.prototype.addMutationBatch = function(transaction, localWriteTime, baseMutations, mutations) {
        var batchId = this.nextBatchId;
        this.nextBatchId++;
        if (this.mutationQueue.length > 0) {
          var prior = this.mutationQueue[this.mutationQueue.length - 1];
        }
        var batch = new MutationBatch(batchId, localWriteTime, baseMutations, mutations);
        this.mutationQueue.push(batch);
        for (var _i = 0, mutations_3 = mutations; _i < mutations_3.length; _i++) {
          var mutation = mutations_3[_i];
          this.batchesByDocumentKey = this.batchesByDocumentKey.add(new DocReference(mutation.key, batchId));
          this.indexManager.addToCollectionParentIndex(transaction, mutation.key.path.popLast());
        }
        return PersistencePromise.resolve(batch);
      };
      MemoryMutationQueue2.prototype.lookupMutationBatch = function(transaction, batchId) {
        return PersistencePromise.resolve(this.findMutationBatch(batchId));
      };
      MemoryMutationQueue2.prototype.getNextMutationBatchAfterBatchId = function(transaction, batchId) {
        var nextBatchId = batchId + 1;
        var rawIndex = this.indexOfBatchId(nextBatchId);
        var index2 = rawIndex < 0 ? 0 : rawIndex;
        return PersistencePromise.resolve(this.mutationQueue.length > index2 ? this.mutationQueue[index2] : null);
      };
      MemoryMutationQueue2.prototype.getHighestUnacknowledgedBatchId = function() {
        return PersistencePromise.resolve(this.mutationQueue.length === 0 ? BATCHID_UNKNOWN : this.nextBatchId - 1);
      };
      MemoryMutationQueue2.prototype.getAllMutationBatches = function(transaction) {
        return PersistencePromise.resolve(this.mutationQueue.slice());
      };
      MemoryMutationQueue2.prototype.getAllMutationBatchesAffectingDocumentKey = function(transaction, documentKey) {
        var _this = this;
        var start = new DocReference(documentKey, 0);
        var end = new DocReference(documentKey, Number.POSITIVE_INFINITY);
        var result = [];
        this.batchesByDocumentKey.forEachInRange([start, end], function(ref) {
          var batch = _this.findMutationBatch(ref.targetOrBatchId);
          result.push(batch);
        });
        return PersistencePromise.resolve(result);
      };
      MemoryMutationQueue2.prototype.getAllMutationBatchesAffectingDocumentKeys = function(transaction, documentKeys) {
        var _this = this;
        var uniqueBatchIDs = new SortedSet(primitiveComparator);
        documentKeys.forEach(function(documentKey) {
          var start = new DocReference(documentKey, 0);
          var end = new DocReference(documentKey, Number.POSITIVE_INFINITY);
          _this.batchesByDocumentKey.forEachInRange([start, end], function(ref) {
            uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);
          });
        });
        return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));
      };
      MemoryMutationQueue2.prototype.getAllMutationBatchesAffectingQuery = function(transaction, query) {
        var prefix = query.path;
        var immediateChildrenPathLength = prefix.length + 1;
        var startPath = prefix;
        if (!DocumentKey.isDocumentKey(startPath)) {
          startPath = startPath.child("");
        }
        var start = new DocReference(new DocumentKey(startPath), 0);
        var uniqueBatchIDs = new SortedSet(primitiveComparator);
        this.batchesByDocumentKey.forEachWhile(function(ref) {
          var rowKeyPath = ref.key.path;
          if (!prefix.isPrefixOf(rowKeyPath)) {
            return false;
          } else {
            if (rowKeyPath.length === immediateChildrenPathLength) {
              uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);
            }
            return true;
          }
        }, start);
        return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));
      };
      MemoryMutationQueue2.prototype.findMutationBatches = function(batchIDs) {
        var _this = this;
        var result = [];
        batchIDs.forEach(function(batchId) {
          var batch = _this.findMutationBatch(batchId);
          if (batch !== null) {
            result.push(batch);
          }
        });
        return result;
      };
      MemoryMutationQueue2.prototype.removeMutationBatch = function(transaction, batch) {
        var _this = this;
        var batchIndex = this.indexOfExistingBatchId(batch.batchId, "removed");
        hardAssert(batchIndex === 0);
        this.mutationQueue.shift();
        var references = this.batchesByDocumentKey;
        return PersistencePromise.forEach(batch.mutations, function(mutation) {
          var ref = new DocReference(mutation.key, batch.batchId);
          references = references.delete(ref);
          return _this.referenceDelegate.markPotentiallyOrphaned(transaction, mutation.key);
        }).next(function() {
          _this.batchesByDocumentKey = references;
        });
      };
      MemoryMutationQueue2.prototype.removeCachedMutationKeys = function(batchId) {
      };
      MemoryMutationQueue2.prototype.containsKey = function(txn, key) {
        var ref = new DocReference(key, 0);
        var firstRef = this.batchesByDocumentKey.firstAfterOrEqual(ref);
        return PersistencePromise.resolve(key.isEqual(firstRef && firstRef.key));
      };
      MemoryMutationQueue2.prototype.performConsistencyCheck = function(txn) {
        if (this.mutationQueue.length === 0)
          ;
        return PersistencePromise.resolve();
      };
      MemoryMutationQueue2.prototype.indexOfExistingBatchId = function(batchId, action) {
        var index2 = this.indexOfBatchId(batchId);
        return index2;
      };
      MemoryMutationQueue2.prototype.indexOfBatchId = function(batchId) {
        if (this.mutationQueue.length === 0) {
          return 0;
        }
        var firstBatchId = this.mutationQueue[0].batchId;
        return batchId - firstBatchId;
      };
      MemoryMutationQueue2.prototype.findMutationBatch = function(batchId) {
        var index2 = this.indexOfBatchId(batchId);
        if (index2 < 0 || index2 >= this.mutationQueue.length) {
          return null;
        }
        var batch = this.mutationQueue[index2];
        return batch;
      };
      return MemoryMutationQueue2;
    }();
    function documentEntryMap() {
      return new SortedMap(DocumentKey.comparator);
    }
    var MemoryRemoteDocumentCacheImpl = function() {
      function MemoryRemoteDocumentCacheImpl2(indexManager, sizer) {
        this.indexManager = indexManager;
        this.sizer = sizer;
        this.docs = documentEntryMap();
        this.size = 0;
      }
      MemoryRemoteDocumentCacheImpl2.prototype.addEntry = function(transaction, doc, readTime) {
        var key = doc.key;
        var entry = this.docs.get(key);
        var previousSize = entry ? entry.size : 0;
        var currentSize = this.sizer(doc);
        this.docs = this.docs.insert(key, {
          maybeDocument: doc,
          size: currentSize,
          readTime
        });
        this.size += currentSize - previousSize;
        return this.indexManager.addToCollectionParentIndex(transaction, key.path.popLast());
      };
      MemoryRemoteDocumentCacheImpl2.prototype.removeEntry = function(documentKey) {
        var entry = this.docs.get(documentKey);
        if (entry) {
          this.docs = this.docs.remove(documentKey);
          this.size -= entry.size;
        }
      };
      MemoryRemoteDocumentCacheImpl2.prototype.getEntry = function(transaction, documentKey) {
        var entry = this.docs.get(documentKey);
        return PersistencePromise.resolve(entry ? entry.maybeDocument : null);
      };
      MemoryRemoteDocumentCacheImpl2.prototype.getEntries = function(transaction, documentKeys) {
        var _this = this;
        var results = nullableMaybeDocumentMap();
        documentKeys.forEach(function(documentKey) {
          var entry = _this.docs.get(documentKey);
          results = results.insert(documentKey, entry ? entry.maybeDocument : null);
        });
        return PersistencePromise.resolve(results);
      };
      MemoryRemoteDocumentCacheImpl2.prototype.getDocumentsMatchingQuery = function(transaction, query, sinceReadTime) {
        var results = documentMap();
        var prefix = new DocumentKey(query.path.child(""));
        var iterator = this.docs.getIteratorFrom(prefix);
        while (iterator.hasNext()) {
          var _f = iterator.getNext(), key = _f.key, _g = _f.value, maybeDocument = _g.maybeDocument, readTime = _g.readTime;
          if (!query.path.isPrefixOf(key.path)) {
            break;
          }
          if (readTime.compareTo(sinceReadTime) <= 0) {
            continue;
          }
          if (maybeDocument instanceof Document && queryMatches(query, maybeDocument)) {
            results = results.insert(maybeDocument.key, maybeDocument);
          }
        }
        return PersistencePromise.resolve(results);
      };
      MemoryRemoteDocumentCacheImpl2.prototype.forEachDocumentKey = function(transaction, f) {
        return PersistencePromise.forEach(this.docs, function(key) {
          return f(key);
        });
      };
      MemoryRemoteDocumentCacheImpl2.prototype.newChangeBuffer = function(options2) {
        return new MemoryRemoteDocumentChangeBuffer(this);
      };
      MemoryRemoteDocumentCacheImpl2.prototype.getSize = function(txn) {
        return PersistencePromise.resolve(this.size);
      };
      return MemoryRemoteDocumentCacheImpl2;
    }();
    function newMemoryRemoteDocumentCache(indexManager, sizer) {
      return new MemoryRemoteDocumentCacheImpl(indexManager, sizer);
    }
    var MemoryRemoteDocumentChangeBuffer = function(_super) {
      tslib.__extends(MemoryRemoteDocumentChangeBuffer2, _super);
      function MemoryRemoteDocumentChangeBuffer2(documentCache) {
        var _this = _super.call(this) || this;
        _this.documentCache = documentCache;
        return _this;
      }
      MemoryRemoteDocumentChangeBuffer2.prototype.applyChanges = function(transaction) {
        var _this = this;
        var promises = [];
        this.changes.forEach(function(key, doc) {
          if (doc) {
            promises.push(_this.documentCache.addEntry(transaction, doc, _this.readTime));
          } else {
            _this.documentCache.removeEntry(key);
          }
        });
        return PersistencePromise.waitFor(promises);
      };
      MemoryRemoteDocumentChangeBuffer2.prototype.getFromCache = function(transaction, documentKey) {
        return this.documentCache.getEntry(transaction, documentKey);
      };
      MemoryRemoteDocumentChangeBuffer2.prototype.getAllFromCache = function(transaction, documentKeys) {
        return this.documentCache.getEntries(transaction, documentKeys);
      };
      return MemoryRemoteDocumentChangeBuffer2;
    }(RemoteDocumentChangeBuffer);
    var MemoryTargetCache = function() {
      function MemoryTargetCache2(persistence) {
        this.persistence = persistence;
        this.targets = new ObjectMap(function(t) {
          return canonifyTarget(t);
        }, targetEquals);
        this.lastRemoteSnapshotVersion = SnapshotVersion.min();
        this.highestTargetId = 0;
        this.highestSequenceNumber = 0;
        this.references = new ReferenceSet();
        this.targetCount = 0;
        this.targetIdGenerator = TargetIdGenerator.forTargetCache();
      }
      MemoryTargetCache2.prototype.forEachTarget = function(txn, f) {
        this.targets.forEach(function(_, targetData) {
          return f(targetData);
        });
        return PersistencePromise.resolve();
      };
      MemoryTargetCache2.prototype.getLastRemoteSnapshotVersion = function(transaction) {
        return PersistencePromise.resolve(this.lastRemoteSnapshotVersion);
      };
      MemoryTargetCache2.prototype.getHighestSequenceNumber = function(transaction) {
        return PersistencePromise.resolve(this.highestSequenceNumber);
      };
      MemoryTargetCache2.prototype.allocateTargetId = function(transaction) {
        this.highestTargetId = this.targetIdGenerator.next();
        return PersistencePromise.resolve(this.highestTargetId);
      };
      MemoryTargetCache2.prototype.setTargetsMetadata = function(transaction, highestListenSequenceNumber, lastRemoteSnapshotVersion) {
        if (lastRemoteSnapshotVersion) {
          this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;
        }
        if (highestListenSequenceNumber > this.highestSequenceNumber) {
          this.highestSequenceNumber = highestListenSequenceNumber;
        }
        return PersistencePromise.resolve();
      };
      MemoryTargetCache2.prototype.saveTargetData = function(targetData) {
        this.targets.set(targetData.target, targetData);
        var targetId = targetData.targetId;
        if (targetId > this.highestTargetId) {
          this.targetIdGenerator = new TargetIdGenerator(targetId);
          this.highestTargetId = targetId;
        }
        if (targetData.sequenceNumber > this.highestSequenceNumber) {
          this.highestSequenceNumber = targetData.sequenceNumber;
        }
      };
      MemoryTargetCache2.prototype.addTargetData = function(transaction, targetData) {
        this.saveTargetData(targetData);
        this.targetCount += 1;
        return PersistencePromise.resolve();
      };
      MemoryTargetCache2.prototype.updateTargetData = function(transaction, targetData) {
        this.saveTargetData(targetData);
        return PersistencePromise.resolve();
      };
      MemoryTargetCache2.prototype.removeTargetData = function(transaction, targetData) {
        this.targets.delete(targetData.target);
        this.references.removeReferencesForId(targetData.targetId);
        this.targetCount -= 1;
        return PersistencePromise.resolve();
      };
      MemoryTargetCache2.prototype.removeTargets = function(transaction, upperBound, activeTargetIds) {
        var _this = this;
        var count = 0;
        var removals = [];
        this.targets.forEach(function(key, targetData) {
          if (targetData.sequenceNumber <= upperBound && activeTargetIds.get(targetData.targetId) === null) {
            _this.targets.delete(key);
            removals.push(_this.removeMatchingKeysForTargetId(transaction, targetData.targetId));
            count++;
          }
        });
        return PersistencePromise.waitFor(removals).next(function() {
          return count;
        });
      };
      MemoryTargetCache2.prototype.getTargetCount = function(transaction) {
        return PersistencePromise.resolve(this.targetCount);
      };
      MemoryTargetCache2.prototype.getTargetData = function(transaction, target) {
        var targetData = this.targets.get(target) || null;
        return PersistencePromise.resolve(targetData);
      };
      MemoryTargetCache2.prototype.addMatchingKeys = function(txn, keys, targetId) {
        this.references.addReferences(keys, targetId);
        return PersistencePromise.resolve();
      };
      MemoryTargetCache2.prototype.removeMatchingKeys = function(txn, keys, targetId) {
        this.references.removeReferences(keys, targetId);
        var referenceDelegate = this.persistence.referenceDelegate;
        var promises = [];
        if (referenceDelegate) {
          keys.forEach(function(key) {
            promises.push(referenceDelegate.markPotentiallyOrphaned(txn, key));
          });
        }
        return PersistencePromise.waitFor(promises);
      };
      MemoryTargetCache2.prototype.removeMatchingKeysForTargetId = function(txn, targetId) {
        this.references.removeReferencesForId(targetId);
        return PersistencePromise.resolve();
      };
      MemoryTargetCache2.prototype.getMatchingKeysForTargetId = function(txn, targetId) {
        var matchingKeys = this.references.referencesForId(targetId);
        return PersistencePromise.resolve(matchingKeys);
      };
      MemoryTargetCache2.prototype.containsKey = function(txn, key) {
        return PersistencePromise.resolve(this.references.containsKey(key));
      };
      return MemoryTargetCache2;
    }();
    var LOG_TAG$c = "MemoryPersistence";
    var MemoryPersistence = function() {
      function MemoryPersistence2(referenceDelegateFactory) {
        var _this = this;
        this.mutationQueues = {};
        this.listenSequence = new ListenSequence(0);
        this._started = false;
        this._started = true;
        this.referenceDelegate = referenceDelegateFactory(this);
        this.targetCache = new MemoryTargetCache(this);
        var sizer = function(doc) {
          return _this.referenceDelegate.documentSize(doc);
        };
        this.indexManager = new MemoryIndexManager();
        this.remoteDocumentCache = newMemoryRemoteDocumentCache(this.indexManager, sizer);
      }
      MemoryPersistence2.prototype.start = function() {
        return Promise.resolve();
      };
      MemoryPersistence2.prototype.shutdown = function() {
        this._started = false;
        return Promise.resolve();
      };
      Object.defineProperty(MemoryPersistence2.prototype, "started", {
        get: function() {
          return this._started;
        },
        enumerable: false,
        configurable: true
      });
      MemoryPersistence2.prototype.setDatabaseDeletedListener = function() {
      };
      MemoryPersistence2.prototype.setNetworkEnabled = function() {
      };
      MemoryPersistence2.prototype.getIndexManager = function() {
        return this.indexManager;
      };
      MemoryPersistence2.prototype.getMutationQueue = function(user) {
        var queue = this.mutationQueues[user.toKey()];
        if (!queue) {
          queue = new MemoryMutationQueue(this.indexManager, this.referenceDelegate);
          this.mutationQueues[user.toKey()] = queue;
        }
        return queue;
      };
      MemoryPersistence2.prototype.getTargetCache = function() {
        return this.targetCache;
      };
      MemoryPersistence2.prototype.getRemoteDocumentCache = function() {
        return this.remoteDocumentCache;
      };
      MemoryPersistence2.prototype.runTransaction = function(action, mode, transactionOperation) {
        var _this = this;
        logDebug(LOG_TAG$c, "Starting transaction:", action);
        var txn = new MemoryTransaction(this.listenSequence.next());
        this.referenceDelegate.onTransactionStarted();
        return transactionOperation(txn).next(function(result) {
          return _this.referenceDelegate.onTransactionCommitted(txn).next(function() {
            return result;
          });
        }).toPromise().then(function(result) {
          txn.raiseOnCommittedEvent();
          return result;
        });
      };
      MemoryPersistence2.prototype.mutationQueuesContainKey = function(transaction, key) {
        return PersistencePromise.or(Object.values(this.mutationQueues).map(function(queue) {
          return function() {
            return queue.containsKey(transaction, key);
          };
        }));
      };
      return MemoryPersistence2;
    }();
    var MemoryTransaction = function(_super) {
      tslib.__extends(MemoryTransaction2, _super);
      function MemoryTransaction2(currentSequenceNumber) {
        var _this = _super.call(this) || this;
        _this.currentSequenceNumber = currentSequenceNumber;
        return _this;
      }
      return MemoryTransaction2;
    }(PersistenceTransaction);
    var MemoryEagerDelegate = function() {
      function MemoryEagerDelegate2(persistence) {
        this.persistence = persistence;
        this.localViewReferences = new ReferenceSet();
        this._orphanedDocuments = null;
      }
      MemoryEagerDelegate2.factory = function(persistence) {
        return new MemoryEagerDelegate2(persistence);
      };
      Object.defineProperty(MemoryEagerDelegate2.prototype, "orphanedDocuments", {
        get: function() {
          if (!this._orphanedDocuments) {
            throw fail();
          } else {
            return this._orphanedDocuments;
          }
        },
        enumerable: false,
        configurable: true
      });
      MemoryEagerDelegate2.prototype.addReference = function(txn, targetId, key) {
        this.localViewReferences.addReference(key, targetId);
        this.orphanedDocuments.delete(key.toString());
        return PersistencePromise.resolve();
      };
      MemoryEagerDelegate2.prototype.removeReference = function(txn, targetId, key) {
        this.localViewReferences.removeReference(key, targetId);
        this.orphanedDocuments.add(key.toString());
        return PersistencePromise.resolve();
      };
      MemoryEagerDelegate2.prototype.markPotentiallyOrphaned = function(txn, key) {
        this.orphanedDocuments.add(key.toString());
        return PersistencePromise.resolve();
      };
      MemoryEagerDelegate2.prototype.removeTarget = function(txn, targetData) {
        var _this = this;
        var orphaned = this.localViewReferences.removeReferencesForId(targetData.targetId);
        orphaned.forEach(function(key) {
          return _this.orphanedDocuments.add(key.toString());
        });
        var cache = this.persistence.getTargetCache();
        return cache.getMatchingKeysForTargetId(txn, targetData.targetId).next(function(keys) {
          keys.forEach(function(key) {
            return _this.orphanedDocuments.add(key.toString());
          });
        }).next(function() {
          return cache.removeTargetData(txn, targetData);
        });
      };
      MemoryEagerDelegate2.prototype.onTransactionStarted = function() {
        this._orphanedDocuments = new Set();
      };
      MemoryEagerDelegate2.prototype.onTransactionCommitted = function(txn) {
        var _this = this;
        var cache = this.persistence.getRemoteDocumentCache();
        var changeBuffer = cache.newChangeBuffer();
        return PersistencePromise.forEach(this.orphanedDocuments, function(path2) {
          var key = DocumentKey.fromPath(path2);
          return _this.isReferenced(txn, key).next(function(isReferenced) {
            if (!isReferenced) {
              changeBuffer.removeEntry(key);
            }
          });
        }).next(function() {
          _this._orphanedDocuments = null;
          return changeBuffer.apply(txn);
        });
      };
      MemoryEagerDelegate2.prototype.updateLimboDocument = function(txn, key) {
        var _this = this;
        return this.isReferenced(txn, key).next(function(isReferenced) {
          if (isReferenced) {
            _this.orphanedDocuments.delete(key.toString());
          } else {
            _this.orphanedDocuments.add(key.toString());
          }
        });
      };
      MemoryEagerDelegate2.prototype.documentSize = function(doc) {
        return 0;
      };
      MemoryEagerDelegate2.prototype.isReferenced = function(txn, key) {
        var _this = this;
        return PersistencePromise.or([
          function() {
            return PersistencePromise.resolve(_this.localViewReferences.containsKey(key));
          },
          function() {
            return _this.persistence.getTargetCache().containsKey(txn, key);
          },
          function() {
            return _this.persistence.mutationQueuesContainKey(txn, key);
          }
        ]);
      };
      return MemoryEagerDelegate2;
    }();
    var protoLoaderOptions = {
      longs: String,
      enums: String,
      defaults: true,
      oneofs: false
    };
    function loadProtos() {
      var root = path.resolve(__dirname, "src/protos");
      var firestoreProtoFile = path.join(root, "google/firestore/v1/firestore.proto");
      var packageDefinition = protoLoader.loadSync(firestoreProtoFile, Object.assign(Object.assign({}, protoLoaderOptions), { includeDirs: [root] }));
      return grpcJs.loadPackageDefinition(packageDefinition);
    }
    var StreamBridge = function() {
      function StreamBridge2(args) {
        this.sendFn = args.sendFn;
        this.closeFn = args.closeFn;
      }
      StreamBridge2.prototype.onOpen = function(callback) {
        this.wrappedOnOpen = callback;
      };
      StreamBridge2.prototype.onClose = function(callback) {
        this.wrappedOnClose = callback;
      };
      StreamBridge2.prototype.onMessage = function(callback) {
        this.wrappedOnMessage = callback;
      };
      StreamBridge2.prototype.close = function() {
        this.closeFn();
      };
      StreamBridge2.prototype.send = function(msg) {
        this.sendFn(msg);
      };
      StreamBridge2.prototype.callOnOpen = function() {
        this.wrappedOnOpen();
      };
      StreamBridge2.prototype.callOnClose = function(err) {
        this.wrappedOnClose(err);
      };
      StreamBridge2.prototype.callOnMessage = function(msg) {
        this.wrappedOnMessage(msg);
      };
      return StreamBridge2;
    }();
    function nodePromise(action) {
      return new Promise(function(resolve2, reject) {
        action(function(error2, value) {
          if (error2) {
            reject(error2);
          } else {
            resolve2(value);
          }
        });
      });
    }
    var LOG_TAG$d = "Connection";
    var X_GOOG_API_CLIENT_VALUE = "gl-node/" + process.versions.node + " fire/" + version + " grpc/" + package_json.version;
    function createMetadata(databasePath, token) {
      hardAssert(token === null || token.type === "OAuth");
      var metadata = new grpcJs.Metadata();
      if (token) {
        for (var header in token.authHeaders) {
          if (token.authHeaders.hasOwnProperty(header)) {
            metadata.set(header, token.authHeaders[header]);
          }
        }
      }
      metadata.set("x-goog-api-client", X_GOOG_API_CLIENT_VALUE);
      metadata.set("google-cloud-resource-prefix", databasePath);
      return metadata;
    }
    var GrpcConnection = function() {
      function GrpcConnection2(protos, databaseInfo) {
        this.databaseInfo = databaseInfo;
        this.cachedStub = null;
        this.firestore = protos["google"]["firestore"]["v1"];
        this.databasePath = "projects/" + databaseInfo.databaseId.projectId + "/databases/" + databaseInfo.databaseId.database;
      }
      GrpcConnection2.prototype.ensureActiveStub = function() {
        if (!this.cachedStub) {
          logDebug(LOG_TAG$d, "Creating Firestore stub.");
          var credentials$1 = this.databaseInfo.ssl ? grpcJs.credentials.createSsl() : grpcJs.credentials.createInsecure();
          this.cachedStub = new this.firestore.Firestore(this.databaseInfo.host, credentials$1);
        }
        return this.cachedStub;
      };
      GrpcConnection2.prototype.invokeRPC = function(rpcName, path2, request, token) {
        var stub = this.ensureActiveStub();
        var metadata = createMetadata(this.databasePath, token);
        var jsonRequest = Object.assign({ database: this.databasePath }, request);
        return nodePromise(function(callback) {
          logDebug(LOG_TAG$d, "RPC '" + rpcName + "' invoked with request:", request);
          return stub[rpcName](jsonRequest, metadata, function(grpcError, value) {
            if (grpcError) {
              logDebug(LOG_TAG$d, "RPC '" + rpcName + "' failed with error:", grpcError);
              callback(new FirestoreError(mapCodeFromRpcCode(grpcError.code), grpcError.message));
            } else {
              logDebug(LOG_TAG$d, "RPC '" + rpcName + "' completed with response:", value);
              callback(void 0, value);
            }
          });
        });
      };
      GrpcConnection2.prototype.invokeStreamingRPC = function(rpcName, path2, request, token) {
        var results = [];
        var responseDeferred = new Deferred();
        logDebug(LOG_TAG$d, "RPC '" + rpcName + "' invoked (streaming) with request:", request);
        var stub = this.ensureActiveStub();
        var metadata = createMetadata(this.databasePath, token);
        var jsonRequest = Object.assign(Object.assign({}, request), { database: this.databasePath });
        var stream = stub[rpcName](jsonRequest, metadata);
        stream.on("data", function(response) {
          logDebug(LOG_TAG$d, "RPC " + rpcName + " received result:", response);
          results.push(response);
        });
        stream.on("end", function() {
          logDebug(LOG_TAG$d, "RPC '" + rpcName + "' completed.");
          responseDeferred.resolve(results);
        });
        stream.on("error", function(grpcError) {
          logDebug(LOG_TAG$d, "RPC '" + rpcName + "' failed with error:", grpcError);
          var code = mapCodeFromRpcCode(grpcError.code);
          responseDeferred.reject(new FirestoreError(code, grpcError.message));
        });
        return responseDeferred.promise;
      };
      GrpcConnection2.prototype.openStream = function(rpcName, token) {
        var stub = this.ensureActiveStub();
        var metadata = createMetadata(this.databasePath, token);
        var grpcStream = stub[rpcName](metadata);
        var closed = false;
        var close = function(err) {
          if (!closed) {
            closed = true;
            stream.callOnClose(err);
            grpcStream.end();
          }
        };
        var stream = new StreamBridge({
          sendFn: function(msg) {
            if (!closed) {
              logDebug(LOG_TAG$d, "GRPC stream sending:", msg);
              try {
                grpcStream.write(msg);
              } catch (e) {
                logError("Failure sending:", msg);
                logError("Error:", e);
                throw e;
              }
            } else {
              logDebug(LOG_TAG$d, "Not sending because gRPC stream is closed:", msg);
            }
          },
          closeFn: function() {
            logDebug(LOG_TAG$d, "GRPC stream closed locally via close().");
            close();
          }
        });
        grpcStream.on("data", function(msg) {
          if (!closed) {
            logDebug(LOG_TAG$d, "GRPC stream received:", msg);
            stream.callOnMessage(msg);
          }
        });
        grpcStream.on("end", function() {
          logDebug(LOG_TAG$d, "GRPC stream ended.");
          close();
        });
        grpcStream.on("error", function(grpcError) {
          if (!closed) {
            logWarn(LOG_TAG$d, "GRPC stream error. Code:", grpcError.code, "Message:", grpcError.message);
            var code = mapCodeFromRpcCode(grpcError.code);
            close(new FirestoreError(code, grpcError.message));
          }
        });
        logDebug(LOG_TAG$d, "Opening GRPC stream");
        setTimeout(function() {
          stream.callOnOpen();
        }, 0);
        return stream;
      };
      return GrpcConnection2;
    }();
    var NoopConnectivityMonitor = function() {
      function NoopConnectivityMonitor2() {
      }
      NoopConnectivityMonitor2.prototype.addCallback = function(callback) {
      };
      NoopConnectivityMonitor2.prototype.shutdown = function() {
      };
      return NoopConnectivityMonitor2;
    }();
    function newConnection(databaseInfo) {
      var protos = loadProtos();
      return new GrpcConnection(protos, databaseInfo);
    }
    function newConnectivityMonitor() {
      return new NoopConnectivityMonitor();
    }
    function newSerializer(databaseId) {
      return new JsonProtoSerializer(databaseId, false);
    }
    var MEMORY_ONLY_PERSISTENCE_ERROR_MESSAGE = "You are using the memory-only build of Firestore. Persistence support is only available via the @firebase/firestore bundle or the firebase-firestore.js build.";
    var MemoryOfflineComponentProvider = function() {
      function MemoryOfflineComponentProvider2() {
      }
      MemoryOfflineComponentProvider2.prototype.initialize = function(cfg) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          return tslib.__generator(this, function(_f) {
            switch (_f.label) {
              case 0:
                this.sharedClientState = this.createSharedClientState(cfg);
                this.persistence = this.createPersistence(cfg);
                return [4, this.persistence.start()];
              case 1:
                _f.sent();
                this.gcScheduler = this.createGarbageCollectionScheduler(cfg);
                this.localStore = this.createLocalStore(cfg);
                return [2];
            }
          });
        });
      };
      MemoryOfflineComponentProvider2.prototype.createGarbageCollectionScheduler = function(cfg) {
        return null;
      };
      MemoryOfflineComponentProvider2.prototype.createLocalStore = function(cfg) {
        return newLocalStore(this.persistence, new IndexFreeQueryEngine(), cfg.initialUser);
      };
      MemoryOfflineComponentProvider2.prototype.createPersistence = function(cfg) {
        if (cfg.persistenceSettings.durable) {
          throw new FirestoreError(Code.FAILED_PRECONDITION, MEMORY_ONLY_PERSISTENCE_ERROR_MESSAGE);
        }
        return new MemoryPersistence(MemoryEagerDelegate.factory);
      };
      MemoryOfflineComponentProvider2.prototype.createSharedClientState = function(cfg) {
        return new MemorySharedClientState();
      };
      MemoryOfflineComponentProvider2.prototype.terminate = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
          return tslib.__generator(this, function(_f) {
            switch (_f.label) {
              case 0:
                if (this.gcScheduler) {
                  this.gcScheduler.stop();
                }
                return [4, this.sharedClientState.shutdown()];
              case 1:
                _f.sent();
                return [4, this.persistence.shutdown()];
              case 2:
                _f.sent();
                return [2];
            }
          });
        });
      };
      MemoryOfflineComponentProvider2.prototype.clearPersistence = function(databaseId, persistenceKey) {
        throw new FirestoreError(Code.FAILED_PRECONDITION, MEMORY_ONLY_PERSISTENCE_ERROR_MESSAGE);
      };
      return MemoryOfflineComponentProvider2;
    }();
    var IndexedDbOfflineComponentProvider = function(_super) {
      tslib.__extends(IndexedDbOfflineComponentProvider2, _super);
      function IndexedDbOfflineComponentProvider2(onlineComponentProvider) {
        var _this = _super.call(this) || this;
        _this.onlineComponentProvider = onlineComponentProvider;
        return _this;
      }
      IndexedDbOfflineComponentProvider2.prototype.initialize = function(cfg) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          return tslib.__generator(this, function(_f) {
            switch (_f.label) {
              case 0:
                return [4, _super.prototype.initialize.call(this, cfg)];
              case 1:
                _f.sent();
                return [4, synchronizeLastDocumentChangeReadTime(this.localStore)];
              case 2:
                _f.sent();
                return [4, this.onlineComponentProvider.initialize(this, cfg)];
              case 3:
                _f.sent();
                return [4, ensureWriteCallbacks(this.onlineComponentProvider.syncEngine)];
              case 4:
                _f.sent();
                return [4, fillWritePipeline(this.onlineComponentProvider.remoteStore)];
              case 5:
                _f.sent();
                return [2];
            }
          });
        });
      };
      IndexedDbOfflineComponentProvider2.prototype.createGarbageCollectionScheduler = function(cfg) {
        var garbageCollector = this.persistence.referenceDelegate.garbageCollector;
        return new LruScheduler(garbageCollector, cfg.asyncQueue);
      };
      IndexedDbOfflineComponentProvider2.prototype.createPersistence = function(cfg) {
        var persistenceKey = indexedDbStoragePrefix(cfg.databaseInfo.databaseId, cfg.databaseInfo.persistenceKey);
        var serializer = newSerializer(cfg.databaseInfo.databaseId);
        return new IndexedDbPersistence(cfg.persistenceSettings.synchronizeTabs, persistenceKey, cfg.clientId, LruParams.withCacheSize(cfg.persistenceSettings.cacheSizeBytes), cfg.asyncQueue, getWindow(), getDocument(), serializer, this.sharedClientState, cfg.persistenceSettings.forceOwningTab);
      };
      IndexedDbOfflineComponentProvider2.prototype.createSharedClientState = function(cfg) {
        return new MemorySharedClientState();
      };
      IndexedDbOfflineComponentProvider2.prototype.clearPersistence = function(databaseId, persistenceKey) {
        return indexedDbClearPersistence(indexedDbStoragePrefix(databaseId, persistenceKey));
      };
      return IndexedDbOfflineComponentProvider2;
    }(MemoryOfflineComponentProvider);
    var MultiTabOfflineComponentProvider = function(_super) {
      tslib.__extends(MultiTabOfflineComponentProvider2, _super);
      function MultiTabOfflineComponentProvider2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      MultiTabOfflineComponentProvider2.prototype.initialize = function(cfg) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var syncEngine;
          var _this = this;
          return tslib.__generator(this, function(_f) {
            switch (_f.label) {
              case 0:
                return [4, _super.prototype.initialize.call(this, cfg)];
              case 1:
                _f.sent();
                syncEngine = this.onlineComponentProvider.syncEngine;
                if (!(this.sharedClientState instanceof WebStorageSharedClientState))
                  return [3, 3];
                this.sharedClientState.syncEngine = {
                  applyBatchState: applyBatchState.bind(null, syncEngine),
                  applyTargetState: applyTargetState.bind(null, syncEngine),
                  applyActiveTargetsChange: applyActiveTargetsChange.bind(null, syncEngine),
                  getActiveClients: getActiveClients.bind(null, syncEngine)
                };
                return [4, this.sharedClientState.start()];
              case 2:
                _f.sent();
                _f.label = 3;
              case 3:
                return [4, this.persistence.setPrimaryStateListener(function(isPrimary) {
                  return tslib.__awaiter(_this, void 0, void 0, function() {
                    return tslib.__generator(this, function(_f2) {
                      switch (_f2.label) {
                        case 0:
                          return [4, applyPrimaryState(this.onlineComponentProvider.syncEngine, isPrimary)];
                        case 1:
                          _f2.sent();
                          if (this.gcScheduler) {
                            if (isPrimary && !this.gcScheduler.started) {
                              this.gcScheduler.start(this.localStore);
                            } else if (!isPrimary) {
                              this.gcScheduler.stop();
                            }
                          }
                          return [2];
                      }
                    });
                  });
                })];
              case 4:
                _f.sent();
                return [2];
            }
          });
        });
      };
      MultiTabOfflineComponentProvider2.prototype.createSharedClientState = function(cfg) {
        if (cfg.persistenceSettings.durable && cfg.persistenceSettings.synchronizeTabs) {
          var window_1 = getWindow();
          if (!WebStorageSharedClientState.isAvailable(window_1)) {
            throw new FirestoreError(Code.UNIMPLEMENTED, "IndexedDB persistence is only available on platforms that support LocalStorage.");
          }
          var persistenceKey = indexedDbStoragePrefix(cfg.databaseInfo.databaseId, cfg.databaseInfo.persistenceKey);
          return new WebStorageSharedClientState(window_1, cfg.asyncQueue, persistenceKey, cfg.clientId, cfg.initialUser);
        }
        return new MemorySharedClientState();
      };
      return MultiTabOfflineComponentProvider2;
    }(IndexedDbOfflineComponentProvider);
    var OnlineComponentProvider = function() {
      function OnlineComponentProvider2() {
      }
      OnlineComponentProvider2.prototype.initialize = function(offlineComponentProvider, cfg) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var _this = this;
          return tslib.__generator(this, function(_f) {
            switch (_f.label) {
              case 0:
                if (this.localStore) {
                  return [2];
                }
                this.localStore = offlineComponentProvider.localStore;
                this.sharedClientState = offlineComponentProvider.sharedClientState;
                this.datastore = this.createDatastore(cfg);
                this.remoteStore = this.createRemoteStore(cfg);
                this.eventManager = this.createEventManager(cfg);
                this.syncEngine = this.createSyncEngine(cfg);
                this.sharedClientState.onlineStateHandler = function(onlineState) {
                  return applyOnlineStateChange(_this.syncEngine, onlineState, 1);
                };
                this.remoteStore.remoteSyncer.handleCredentialChange = syncEngineHandleCredentialChange.bind(null, this.syncEngine);
                return [4, remoteStoreApplyPrimaryState(this.remoteStore, this.syncEngine.isPrimaryClient)];
              case 1:
                _f.sent();
                return [2];
            }
          });
        });
      };
      OnlineComponentProvider2.prototype.createEventManager = function(cfg) {
        return newEventManager();
      };
      OnlineComponentProvider2.prototype.createDatastore = function(cfg) {
        var serializer = newSerializer(cfg.databaseInfo.databaseId);
        var connection = newConnection(cfg.databaseInfo);
        return newDatastore(cfg.credentials, connection, serializer);
      };
      OnlineComponentProvider2.prototype.createRemoteStore = function(cfg) {
        var _this = this;
        return newRemoteStore(this.localStore, this.datastore, cfg.asyncQueue, function(onlineState) {
          return applyOnlineStateChange(_this.syncEngine, onlineState, 0);
        }, newConnectivityMonitor());
      };
      OnlineComponentProvider2.prototype.createSyncEngine = function(cfg) {
        return newSyncEngine(this.localStore, this.remoteStore, this.eventManager, this.sharedClientState, cfg.initialUser, cfg.maxConcurrentLimboResolutions, !cfg.persistenceSettings.durable || !cfg.persistenceSettings.synchronizeTabs);
      };
      OnlineComponentProvider2.prototype.terminate = function() {
        return remoteStoreShutdown(this.remoteStore);
      };
      return OnlineComponentProvider2;
    }();
    var AsyncObserver = function() {
      function AsyncObserver2(observer) {
        this.observer = observer;
        this.muted = false;
      }
      AsyncObserver2.prototype.next = function(value) {
        if (this.observer.next) {
          this.scheduleEvent(this.observer.next, value);
        }
      };
      AsyncObserver2.prototype.error = function(error2) {
        if (this.observer.error) {
          this.scheduleEvent(this.observer.error, error2);
        } else {
          console.error("Uncaught Error in snapshot listener:", error2);
        }
      };
      AsyncObserver2.prototype.mute = function() {
        this.muted = true;
      };
      AsyncObserver2.prototype.scheduleEvent = function(eventHandler, event) {
        var _this = this;
        if (!this.muted) {
          setTimeout(function() {
            if (!_this.muted) {
              eventHandler(event);
            }
          }, 0);
        }
      };
      return AsyncObserver2;
    }();
    var Transaction = function() {
      function Transaction2(datastore) {
        this.datastore = datastore;
        this.readVersions = new Map();
        this.mutations = [];
        this.committed = false;
        this.lastWriteError = null;
        this.writtenDocs = new Set();
      }
      Transaction2.prototype.lookup = function(keys) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var docs;
          var _this = this;
          return tslib.__generator(this, function(_f) {
            switch (_f.label) {
              case 0:
                this.ensureCommitNotCalled();
                if (this.mutations.length > 0) {
                  throw new FirestoreError(Code.INVALID_ARGUMENT, "Firestore transactions require all reads to be executed before all writes.");
                }
                return [4, invokeBatchGetDocumentsRpc(this.datastore, keys)];
              case 1:
                docs = _f.sent();
                docs.forEach(function(doc) {
                  if (doc instanceof NoDocument || doc instanceof Document) {
                    _this.recordVersion(doc);
                  } else {
                    fail();
                  }
                });
                return [2, docs];
            }
          });
        });
      };
      Transaction2.prototype.set = function(key, data) {
        this.write(data.toMutations(key, this.precondition(key)));
        this.writtenDocs.add(key.toString());
      };
      Transaction2.prototype.update = function(key, data) {
        try {
          this.write(data.toMutations(key, this.preconditionForUpdate(key)));
        } catch (e) {
          this.lastWriteError = e;
        }
        this.writtenDocs.add(key.toString());
      };
      Transaction2.prototype.delete = function(key) {
        this.write([new DeleteMutation(key, this.precondition(key))]);
        this.writtenDocs.add(key.toString());
      };
      Transaction2.prototype.commit = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var unwritten;
          var _this = this;
          return tslib.__generator(this, function(_f) {
            switch (_f.label) {
              case 0:
                this.ensureCommitNotCalled();
                if (this.lastWriteError) {
                  throw this.lastWriteError;
                }
                unwritten = this.readVersions;
                this.mutations.forEach(function(mutation) {
                  unwritten.delete(mutation.key.toString());
                });
                unwritten.forEach(function(_, path2) {
                  var key = DocumentKey.fromPath(path2);
                  _this.mutations.push(new VerifyMutation(key, _this.precondition(key)));
                });
                return [4, invokeCommitRpc(this.datastore, this.mutations)];
              case 1:
                _f.sent();
                this.committed = true;
                return [2];
            }
          });
        });
      };
      Transaction2.prototype.recordVersion = function(doc) {
        var docVersion;
        if (doc instanceof Document) {
          docVersion = doc.version;
        } else if (doc instanceof NoDocument) {
          docVersion = SnapshotVersion.min();
        } else {
          throw fail();
        }
        var existingVersion = this.readVersions.get(doc.key.toString());
        if (existingVersion) {
          if (!docVersion.isEqual(existingVersion)) {
            throw new FirestoreError(Code.ABORTED, "Document version changed between two reads.");
          }
        } else {
          this.readVersions.set(doc.key.toString(), docVersion);
        }
      };
      Transaction2.prototype.precondition = function(key) {
        var version2 = this.readVersions.get(key.toString());
        if (!this.writtenDocs.has(key.toString()) && version2) {
          return Precondition.updateTime(version2);
        } else {
          return Precondition.none();
        }
      };
      Transaction2.prototype.preconditionForUpdate = function(key) {
        var version2 = this.readVersions.get(key.toString());
        if (!this.writtenDocs.has(key.toString()) && version2) {
          if (version2.isEqual(SnapshotVersion.min())) {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Can't update a document that doesn't exist.");
          }
          return Precondition.updateTime(version2);
        } else {
          return Precondition.exists(true);
        }
      };
      Transaction2.prototype.write = function(mutations) {
        this.ensureCommitNotCalled();
        this.mutations = this.mutations.concat(mutations);
      };
      Transaction2.prototype.ensureCommitNotCalled = function() {
      };
      return Transaction2;
    }();
    var RETRY_COUNT = 5;
    var TransactionRunner = function() {
      function TransactionRunner2(asyncQueue, datastore, updateFunction, deferred) {
        this.asyncQueue = asyncQueue;
        this.datastore = datastore;
        this.updateFunction = updateFunction;
        this.deferred = deferred;
        this.retries = RETRY_COUNT;
        this.backoff = new ExponentialBackoff(this.asyncQueue, "transaction_retry");
      }
      TransactionRunner2.prototype.run = function() {
        this.runWithBackOff();
      };
      TransactionRunner2.prototype.runWithBackOff = function() {
        var _this = this;
        this.backoff.backoffAndRun(function() {
          return tslib.__awaiter(_this, void 0, void 0, function() {
            var transaction, userPromise;
            var _this2 = this;
            return tslib.__generator(this, function(_f) {
              transaction = new Transaction(this.datastore);
              userPromise = this.tryRunUpdateFunction(transaction);
              if (userPromise) {
                userPromise.then(function(result) {
                  _this2.asyncQueue.enqueueAndForget(function() {
                    return transaction.commit().then(function() {
                      _this2.deferred.resolve(result);
                    }).catch(function(commitError) {
                      _this2.handleTransactionError(commitError);
                    });
                  });
                }).catch(function(userPromiseError) {
                  _this2.handleTransactionError(userPromiseError);
                });
              }
              return [2];
            });
          });
        });
      };
      TransactionRunner2.prototype.tryRunUpdateFunction = function(transaction) {
        try {
          var userPromise = this.updateFunction(transaction);
          if (isNullOrUndefined(userPromise) || !userPromise.catch || !userPromise.then) {
            this.deferred.reject(Error("Transaction callback must return a Promise"));
            return null;
          }
          return userPromise;
        } catch (error2) {
          this.deferred.reject(error2);
          return null;
        }
      };
      TransactionRunner2.prototype.handleTransactionError = function(error2) {
        var _this = this;
        if (this.retries > 0 && this.isRetryableTransactionError(error2)) {
          this.retries -= 1;
          this.asyncQueue.enqueueAndForget(function() {
            _this.runWithBackOff();
            return Promise.resolve();
          });
        } else {
          this.deferred.reject(error2);
        }
      };
      TransactionRunner2.prototype.isRetryableTransactionError = function(error2) {
        if (error2.name === "FirebaseError") {
          var code = error2.code;
          return code === "aborted" || code === "failed-precondition" || !isPermanentError(code);
        }
        return false;
      };
      return TransactionRunner2;
    }();
    var LOG_TAG$e = "FirestoreClient";
    var MAX_CONCURRENT_LIMBO_RESOLUTIONS = 100;
    var DOM_EXCEPTION_INVALID_STATE = 11;
    var DOM_EXCEPTION_ABORTED = 20;
    var DOM_EXCEPTION_QUOTA_EXCEEDED = 22;
    var FirestoreClient = function() {
      function FirestoreClient2(credentials, asyncQueue) {
        this.credentials = credentials;
        this.asyncQueue = asyncQueue;
        this.clientId = AutoId.newId();
        this.initializationDone = new Deferred();
      }
      FirestoreClient2.prototype.start = function(databaseInfo, offlineComponentProvider, onlineComponentProvider, persistenceSettings) {
        var _this = this;
        this.verifyNotTerminated();
        this.databaseInfo = databaseInfo;
        var persistenceResult = new Deferred();
        var initialized = false;
        this.credentials.setChangeListener(function(user) {
          if (!initialized) {
            initialized = true;
            logDebug(LOG_TAG$e, "Initializing. user=", user.uid);
            return _this.initializeComponents(offlineComponentProvider, onlineComponentProvider, persistenceSettings, user, persistenceResult).then(_this.initializationDone.resolve, _this.initializationDone.reject);
          } else {
            _this.asyncQueue.enqueueRetryable(function() {
              return remoteStoreHandleCredentialChange(_this.remoteStore, user);
            });
          }
        });
        this.asyncQueue.enqueueAndForget(function() {
          return _this.initializationDone.promise;
        });
        return persistenceResult.promise;
      };
      FirestoreClient2.prototype.enableNetwork = function() {
        var _this = this;
        this.verifyNotTerminated();
        return this.asyncQueue.enqueue(function() {
          _this.persistence.setNetworkEnabled(true);
          return remoteStoreEnableNetwork(_this.remoteStore);
        });
      };
      FirestoreClient2.prototype.initializeComponents = function(offlineComponentProvider, onlineComponentProvider, persistenceSettings, user, persistenceResult) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var componentConfiguration, error_5;
          var _this = this;
          return tslib.__generator(this, function(_f) {
            switch (_f.label) {
              case 0:
                _f.trys.push([0, 3, , 4]);
                componentConfiguration = {
                  asyncQueue: this.asyncQueue,
                  databaseInfo: this.databaseInfo,
                  clientId: this.clientId,
                  credentials: this.credentials,
                  initialUser: user,
                  maxConcurrentLimboResolutions: MAX_CONCURRENT_LIMBO_RESOLUTIONS,
                  persistenceSettings
                };
                return [4, offlineComponentProvider.initialize(componentConfiguration)];
              case 1:
                _f.sent();
                return [4, onlineComponentProvider.initialize(offlineComponentProvider, componentConfiguration)];
              case 2:
                _f.sent();
                this.persistence = offlineComponentProvider.persistence;
                this.sharedClientState = offlineComponentProvider.sharedClientState;
                this.localStore = offlineComponentProvider.localStore;
                this.gcScheduler = offlineComponentProvider.gcScheduler;
                this.datastore = onlineComponentProvider.datastore;
                this.remoteStore = onlineComponentProvider.remoteStore;
                this.syncEngine = onlineComponentProvider.syncEngine;
                this.eventMgr = onlineComponentProvider.eventManager;
                this.eventMgr.onListen = syncEngineListen.bind(null, this.syncEngine);
                this.eventMgr.onUnlisten = syncEngineUnlisten.bind(null, this.syncEngine);
                this.persistence.setDatabaseDeletedListener(function() {
                  return tslib.__awaiter(_this, void 0, void 0, function() {
                    return tslib.__generator(this, function(_f2) {
                      switch (_f2.label) {
                        case 0:
                          return [4, this.terminate()];
                        case 1:
                          _f2.sent();
                          return [2];
                      }
                    });
                  });
                });
                persistenceResult.resolve();
                return [3, 4];
              case 3:
                error_5 = _f.sent();
                persistenceResult.reject(error_5);
                if (!this.canFallback(error_5)) {
                  throw error_5;
                }
                console.warn("Error enabling offline persistence. Falling back to persistence disabled: " + error_5);
                return [2, this.initializeComponents(new MemoryOfflineComponentProvider(), new OnlineComponentProvider(), { durable: false }, user, persistenceResult)];
              case 4:
                return [2];
            }
          });
        });
      };
      FirestoreClient2.prototype.canFallback = function(error2) {
        if (error2.name === "FirebaseError") {
          return error2.code === Code.FAILED_PRECONDITION || error2.code === Code.UNIMPLEMENTED;
        } else if (typeof DOMException !== "undefined" && error2 instanceof DOMException) {
          return error2.code === DOM_EXCEPTION_QUOTA_EXCEEDED || error2.code === DOM_EXCEPTION_ABORTED || error2.code === DOM_EXCEPTION_INVALID_STATE;
        }
        return true;
      };
      FirestoreClient2.prototype.verifyNotTerminated = function() {
        if (this.asyncQueue.isShuttingDown) {
          throw new FirestoreError(Code.FAILED_PRECONDITION, "The client has already been terminated.");
        }
      };
      FirestoreClient2.prototype.disableNetwork = function() {
        var _this = this;
        this.verifyNotTerminated();
        return this.asyncQueue.enqueue(function() {
          _this.persistence.setNetworkEnabled(false);
          return remoteStoreDisableNetwork(_this.remoteStore);
        });
      };
      FirestoreClient2.prototype.terminate = function() {
        var _this = this;
        this.asyncQueue.enterRestrictedMode();
        var deferred = new Deferred();
        this.asyncQueue.enqueueAndForgetEvenWhileRestricted(function() {
          return tslib.__awaiter(_this, void 0, void 0, function() {
            var e_11, firestoreError;
            return tslib.__generator(this, function(_f) {
              switch (_f.label) {
                case 0:
                  _f.trys.push([0, 4, , 5]);
                  if (this.gcScheduler) {
                    this.gcScheduler.stop();
                  }
                  return [4, remoteStoreShutdown(this.remoteStore)];
                case 1:
                  _f.sent();
                  return [4, this.sharedClientState.shutdown()];
                case 2:
                  _f.sent();
                  return [4, this.persistence.shutdown()];
                case 3:
                  _f.sent();
                  this.credentials.removeChangeListener();
                  deferred.resolve();
                  return [3, 5];
                case 4:
                  e_11 = _f.sent();
                  firestoreError = wrapInUserErrorIfRecoverable(e_11, "Failed to shutdown persistence");
                  deferred.reject(firestoreError);
                  return [3, 5];
                case 5:
                  return [2];
              }
            });
          });
        });
        return deferred.promise;
      };
      FirestoreClient2.prototype.waitForPendingWrites = function() {
        var _this = this;
        this.verifyNotTerminated();
        var deferred = new Deferred();
        this.asyncQueue.enqueueAndForget(function() {
          return registerPendingWritesCallback(_this.syncEngine, deferred);
        });
        return deferred.promise;
      };
      FirestoreClient2.prototype.listen = function(query, options2, observer) {
        var _this = this;
        this.verifyNotTerminated();
        var wrappedObserver = new AsyncObserver(observer);
        var listener = new QueryListener(query, wrappedObserver, options2);
        this.asyncQueue.enqueueAndForget(function() {
          return eventManagerListen(_this.eventMgr, listener);
        });
        return function() {
          wrappedObserver.mute();
          _this.asyncQueue.enqueueAndForget(function() {
            return eventManagerUnlisten(_this.eventMgr, listener);
          });
        };
      };
      FirestoreClient2.prototype.getDocumentFromLocalCache = function(docKey) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var deferred;
          var _this = this;
          return tslib.__generator(this, function(_f) {
            switch (_f.label) {
              case 0:
                this.verifyNotTerminated();
                return [4, this.initializationDone.promise];
              case 1:
                _f.sent();
                deferred = new Deferred();
                this.asyncQueue.enqueueAndForget(function() {
                  return readDocumentFromCache(_this.localStore, docKey, deferred);
                });
                return [2, deferred.promise];
            }
          });
        });
      };
      FirestoreClient2.prototype.getDocumentViaSnapshotListener = function(key, options2) {
        if (options2 === void 0) {
          options2 = {};
        }
        return tslib.__awaiter(this, void 0, void 0, function() {
          var deferred;
          var _this = this;
          return tslib.__generator(this, function(_f) {
            switch (_f.label) {
              case 0:
                this.verifyNotTerminated();
                return [4, this.initializationDone.promise];
              case 1:
                _f.sent();
                deferred = new Deferred();
                this.asyncQueue.enqueueAndForget(function() {
                  return readDocumentViaSnapshotListener(_this.eventMgr, _this.asyncQueue, key, options2, deferred);
                });
                return [2, deferred.promise];
            }
          });
        });
      };
      FirestoreClient2.prototype.getDocumentsFromLocalCache = function(query) {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var deferred;
          var _this = this;
          return tslib.__generator(this, function(_f) {
            switch (_f.label) {
              case 0:
                this.verifyNotTerminated();
                return [4, this.initializationDone.promise];
              case 1:
                _f.sent();
                deferred = new Deferred();
                this.asyncQueue.enqueueAndForget(function() {
                  return executeQueryFromCache(_this.localStore, query, deferred);
                });
                return [2, deferred.promise];
            }
          });
        });
      };
      FirestoreClient2.prototype.getDocumentsViaSnapshotListener = function(query, options2) {
        if (options2 === void 0) {
          options2 = {};
        }
        return tslib.__awaiter(this, void 0, void 0, function() {
          var deferred;
          var _this = this;
          return tslib.__generator(this, function(_f) {
            switch (_f.label) {
              case 0:
                this.verifyNotTerminated();
                return [4, this.initializationDone.promise];
              case 1:
                _f.sent();
                deferred = new Deferred();
                this.asyncQueue.enqueueAndForget(function() {
                  return executeQueryViaSnapshotListener(_this.eventMgr, _this.asyncQueue, query, options2, deferred);
                });
                return [2, deferred.promise];
            }
          });
        });
      };
      FirestoreClient2.prototype.write = function(mutations) {
        var _this = this;
        this.verifyNotTerminated();
        var deferred = new Deferred();
        this.asyncQueue.enqueueAndForget(function() {
          return syncEngineWrite(_this.syncEngine, mutations, deferred);
        });
        return deferred.promise;
      };
      FirestoreClient2.prototype.databaseId = function() {
        return this.databaseInfo.databaseId;
      };
      FirestoreClient2.prototype.addSnapshotsInSyncListener = function(observer) {
        var _this = this;
        this.verifyNotTerminated();
        var wrappedObserver = new AsyncObserver(observer);
        this.asyncQueue.enqueueAndForget(function() {
          return tslib.__awaiter(_this, void 0, void 0, function() {
            return tslib.__generator(this, function(_f) {
              return [2, addSnapshotsInSyncListener(this.eventMgr, wrappedObserver)];
            });
          });
        });
        return function() {
          wrappedObserver.mute();
          _this.asyncQueue.enqueueAndForget(function() {
            return tslib.__awaiter(_this, void 0, void 0, function() {
              return tslib.__generator(this, function(_f) {
                return [2, removeSnapshotsInSyncListener(this.eventMgr, wrappedObserver)];
              });
            });
          });
        };
      };
      Object.defineProperty(FirestoreClient2.prototype, "clientTerminated", {
        get: function() {
          return this.asyncQueue.isShuttingDown;
        },
        enumerable: false,
        configurable: true
      });
      FirestoreClient2.prototype.transaction = function(updateFunction) {
        var _this = this;
        this.verifyNotTerminated();
        var deferred = new Deferred();
        this.asyncQueue.enqueueAndForget(function() {
          new TransactionRunner(_this.asyncQueue, _this.datastore, updateFunction, deferred).run();
          return Promise.resolve();
        });
        return deferred.promise;
      };
      return FirestoreClient2;
    }();
    function readDocumentFromCache(localStore, docKey, result) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var maybeDoc, e_12, firestoreError;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              _f.trys.push([0, 2, , 3]);
              return [4, readLocalDocument(localStore, docKey)];
            case 1:
              maybeDoc = _f.sent();
              if (maybeDoc instanceof Document) {
                result.resolve(maybeDoc);
              } else if (maybeDoc instanceof NoDocument) {
                result.resolve(null);
              } else {
                result.reject(new FirestoreError(Code.UNAVAILABLE, "Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)"));
              }
              return [3, 3];
            case 2:
              e_12 = _f.sent();
              firestoreError = wrapInUserErrorIfRecoverable(e_12, "Failed to get document '" + docKey + " from cache");
              result.reject(firestoreError);
              return [3, 3];
            case 3:
              return [2];
          }
        });
      });
    }
    function readDocumentViaSnapshotListener(eventManager, asyncQueue, key, options2, result) {
      var wrappedObserver = new AsyncObserver({
        next: function(snap) {
          asyncQueue.enqueueAndForget(function() {
            return eventManagerUnlisten(eventManager, listener);
          });
          var exists = snap.docs.has(key);
          if (!exists && snap.fromCache) {
            result.reject(new FirestoreError(Code.UNAVAILABLE, "Failed to get document because the client is offline."));
          } else if (exists && snap.fromCache && options2 && options2.source === "server") {
            result.reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)'));
          } else {
            result.resolve(snap);
          }
        },
        error: function(e) {
          return result.reject(e);
        }
      });
      var listener = new QueryListener(newQueryForPath(key.path), wrappedObserver, {
        includeMetadataChanges: true,
        waitForSyncWhenOnline: true
      });
      return eventManagerListen(eventManager, listener);
    }
    function executeQueryFromCache(localStore, query, result) {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var queryResult, view, viewDocChanges, viewChange, e_13, firestoreError;
        return tslib.__generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              _f.trys.push([0, 2, , 3]);
              return [4, executeQuery(localStore, query, true)];
            case 1:
              queryResult = _f.sent();
              view = new View(query, queryResult.remoteKeys);
              viewDocChanges = view.computeDocChanges(queryResult.documents);
              viewChange = view.applyChanges(viewDocChanges, false);
              result.resolve(viewChange.snapshot);
              return [3, 3];
            case 2:
              e_13 = _f.sent();
              firestoreError = wrapInUserErrorIfRecoverable(e_13, "Failed to execute query '" + query + " against cache");
              result.reject(firestoreError);
              return [3, 3];
            case 3:
              return [2];
          }
        });
      });
    }
    function executeQueryViaSnapshotListener(eventManager, asyncQueue, query, options2, result) {
      var wrappedObserver = new AsyncObserver({
        next: function(snapshot) {
          asyncQueue.enqueueAndForget(function() {
            return eventManagerUnlisten(eventManager, listener);
          });
          if (snapshot.fromCache && options2.source === "server") {
            result.reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)'));
          } else {
            result.resolve(snapshot);
          }
        },
        error: function(e) {
          return result.reject(e);
        }
      });
      var listener = new QueryListener(query, wrappedObserver, {
        includeMetadataChanges: true,
        waitForSyncWhenOnline: true
      });
      return eventManagerListen(eventManager, listener);
    }
    var _BaseFieldPath = function() {
      function _BaseFieldPath2(fieldNames) {
        validateNamedArrayAtLeastNumberOfElements("FieldPath", fieldNames, "fieldNames", 1);
        for (var i = 0; i < fieldNames.length; ++i) {
          validateArgType("FieldPath", "string", i, fieldNames[i]);
          if (fieldNames[i].length === 0) {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
          }
        }
        this._internalPath = new FieldPath(fieldNames);
      }
      return _BaseFieldPath2;
    }();
    var FieldPath$1 = function(_super) {
      tslib.__extends(FieldPath$12, _super);
      function FieldPath$12() {
        var fieldNames = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          fieldNames[_i] = arguments[_i];
        }
        return _super.call(this, fieldNames) || this;
      }
      FieldPath$12.documentId = function() {
        return new FieldPath$12(FieldPath.keyField().canonicalString());
      };
      FieldPath$12.prototype.isEqual = function(other) {
        if (!(other instanceof FieldPath$12)) {
          throw invalidClassError("isEqual", "FieldPath", 1, other);
        }
        return this._internalPath.isEqual(other._internalPath);
      };
      return FieldPath$12;
    }(_BaseFieldPath);
    var RESERVED = new RegExp("[~\\*/\\[\\]]");
    function fromDotSeparatedString(path2) {
      var found = path2.search(RESERVED);
      if (found >= 0) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid field path (" + path2 + "). Paths must not contain '~', '*', '/', '[', or ']'");
      }
      try {
        return new (FieldPath$1.bind.apply(FieldPath$1, tslib.__spreadArrays([void 0], path2.split("."))))();
      } catch (e) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid field path (" + path2 + "). Paths must not be empty, begin with '.', end with '.', or contain '..'");
      }
    }
    var OAuthToken = function() {
      function OAuthToken2(value, user) {
        this.user = user;
        this.type = "OAuth";
        this.authHeaders = {};
        this.authHeaders["Authorization"] = "Bearer " + value;
      }
      return OAuthToken2;
    }();
    var EmptyCredentialsProvider = function() {
      function EmptyCredentialsProvider2() {
        this.changeListener = null;
      }
      EmptyCredentialsProvider2.prototype.getToken = function() {
        return Promise.resolve(null);
      };
      EmptyCredentialsProvider2.prototype.invalidateToken = function() {
      };
      EmptyCredentialsProvider2.prototype.setChangeListener = function(changeListener) {
        this.changeListener = changeListener;
        changeListener(User.UNAUTHENTICATED);
      };
      EmptyCredentialsProvider2.prototype.removeChangeListener = function() {
        this.changeListener = null;
      };
      return EmptyCredentialsProvider2;
    }();
    var FirebaseCredentialsProvider = function() {
      function FirebaseCredentialsProvider2(authProvider) {
        var _this = this;
        this.tokenListener = null;
        this.currentUser = User.UNAUTHENTICATED;
        this.receivedInitialUser = false;
        this.tokenCounter = 0;
        this.changeListener = null;
        this.forceRefresh = false;
        this.tokenListener = function() {
          _this.tokenCounter++;
          _this.currentUser = _this.getUser();
          _this.receivedInitialUser = true;
          if (_this.changeListener) {
            _this.changeListener(_this.currentUser);
          }
        };
        this.tokenCounter = 0;
        this.auth = authProvider.getImmediate({ optional: true });
        if (this.auth) {
          this.auth.addAuthTokenListener(this.tokenListener);
        } else {
          this.tokenListener(null);
          authProvider.get().then(function(auth) {
            _this.auth = auth;
            if (_this.tokenListener) {
              _this.auth.addAuthTokenListener(_this.tokenListener);
            }
          }, function() {
          });
        }
      }
      FirebaseCredentialsProvider2.prototype.getToken = function() {
        var _this = this;
        var initialTokenCounter = this.tokenCounter;
        var forceRefresh = this.forceRefresh;
        this.forceRefresh = false;
        if (!this.auth) {
          return Promise.resolve(null);
        }
        return this.auth.getToken(forceRefresh).then(function(tokenData) {
          if (_this.tokenCounter !== initialTokenCounter) {
            logDebug("FirebaseCredentialsProvider", "getToken aborted due to token change.");
            return _this.getToken();
          } else {
            if (tokenData) {
              hardAssert(typeof tokenData.accessToken === "string");
              return new OAuthToken(tokenData.accessToken, _this.currentUser);
            } else {
              return null;
            }
          }
        });
      };
      FirebaseCredentialsProvider2.prototype.invalidateToken = function() {
        this.forceRefresh = true;
      };
      FirebaseCredentialsProvider2.prototype.setChangeListener = function(changeListener) {
        this.changeListener = changeListener;
        if (this.receivedInitialUser) {
          changeListener(this.currentUser);
        }
      };
      FirebaseCredentialsProvider2.prototype.removeChangeListener = function() {
        if (this.auth) {
          this.auth.removeAuthTokenListener(this.tokenListener);
        }
        this.tokenListener = null;
        this.changeListener = null;
      };
      FirebaseCredentialsProvider2.prototype.getUser = function() {
        var currentUid = this.auth && this.auth.getUid();
        hardAssert(currentUid === null || typeof currentUid === "string");
        return new User(currentUid);
      };
      return FirebaseCredentialsProvider2;
    }();
    var FirstPartyToken = function() {
      function FirstPartyToken2(gapi, sessionIndex) {
        this.gapi = gapi;
        this.sessionIndex = sessionIndex;
        this.type = "FirstParty";
        this.user = User.FIRST_PARTY;
      }
      Object.defineProperty(FirstPartyToken2.prototype, "authHeaders", {
        get: function() {
          var headers = {
            "X-Goog-AuthUser": this.sessionIndex
          };
          var authHeader = this.gapi["auth"]["getAuthHeaderValueForFirstParty"]([]);
          if (authHeader) {
            headers["Authorization"] = authHeader;
          }
          return headers;
        },
        enumerable: false,
        configurable: true
      });
      return FirstPartyToken2;
    }();
    var FirstPartyCredentialsProvider = function() {
      function FirstPartyCredentialsProvider2(gapi, sessionIndex) {
        this.gapi = gapi;
        this.sessionIndex = sessionIndex;
      }
      FirstPartyCredentialsProvider2.prototype.getToken = function() {
        return Promise.resolve(new FirstPartyToken(this.gapi, this.sessionIndex));
      };
      FirstPartyCredentialsProvider2.prototype.setChangeListener = function(changeListener) {
        changeListener(User.FIRST_PARTY);
      };
      FirstPartyCredentialsProvider2.prototype.removeChangeListener = function() {
      };
      FirstPartyCredentialsProvider2.prototype.invalidateToken = function() {
      };
      return FirstPartyCredentialsProvider2;
    }();
    function makeCredentialsProvider(credentials) {
      if (!credentials) {
        return new EmptyCredentialsProvider();
      }
      switch (credentials["type"]) {
        case "gapi":
          var client = credentials["client"];
          hardAssert(!!(typeof client === "object" && client !== null && client["auth"] && client["auth"]["getAuthHeaderValueForFirstParty"]));
          return new FirstPartyCredentialsProvider(client, credentials["sessionIndex"] || "0");
        case "provider":
          return credentials["client"];
        default:
          throw new FirestoreError(Code.INVALID_ARGUMENT, "makeCredentialsProvider failed due to invalid credential type");
      }
    }
    function isPartialObserver(obj) {
      return implementsAnyMethods(obj, ["next", "error", "complete"]);
    }
    function implementsAnyMethods(obj, methods) {
      if (typeof obj !== "object" || obj === null) {
        return false;
      }
      var object = obj;
      for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
        var method = methods_1[_i];
        if (method in object && typeof object[method] === "function") {
          return true;
        }
      }
      return false;
    }
    var FieldValue = function() {
      function FieldValue2(_methodName) {
        this._methodName = _methodName;
      }
      return FieldValue2;
    }();
    function deleteField() {
      return new DeleteFieldValueImpl("deleteField");
    }
    function serverTimestamp$1() {
      return new ServerTimestampFieldValueImpl("serverTimestamp");
    }
    function arrayUnion() {
      var elements = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        elements[_i] = arguments[_i];
      }
      validateAtLeastNumberOfArgs("arrayUnion()", arguments, 1);
      return new ArrayUnionFieldValueImpl("arrayUnion", elements);
    }
    function arrayRemove() {
      var elements = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        elements[_i] = arguments[_i];
      }
      validateAtLeastNumberOfArgs("arrayRemove()", arguments, 1);
      return new ArrayRemoveFieldValueImpl("arrayRemove", elements);
    }
    function increment(n) {
      return new NumericIncrementFieldValueImpl("increment", n);
    }
    var DeleteFieldValueImpl = function(_super) {
      tslib.__extends(DeleteFieldValueImpl2, _super);
      function DeleteFieldValueImpl2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      DeleteFieldValueImpl2.prototype._toFieldTransform = function(context) {
        if (context.dataSource === 2) {
          context.fieldMask.push(context.path);
        } else if (context.dataSource === 1) {
          throw context.createError(this._methodName + "() can only appear at the top level of your update data");
        } else {
          throw context.createError(this._methodName + "() cannot be used with set() unless you pass {merge:true}");
        }
        return null;
      };
      DeleteFieldValueImpl2.prototype.isEqual = function(other) {
        return other instanceof DeleteFieldValueImpl2;
      };
      return DeleteFieldValueImpl2;
    }(FieldValue);
    function createSentinelChildContext(fieldValue, context, arrayElement) {
      return new ParseContext({
        dataSource: 3,
        targetDoc: context.settings.targetDoc,
        methodName: fieldValue._methodName,
        arrayElement
      }, context.databaseId, context.serializer, context.ignoreUndefinedProperties);
    }
    var ServerTimestampFieldValueImpl = function(_super) {
      tslib.__extends(ServerTimestampFieldValueImpl2, _super);
      function ServerTimestampFieldValueImpl2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ServerTimestampFieldValueImpl2.prototype._toFieldTransform = function(context) {
        return new FieldTransform(context.path, new ServerTimestampTransform());
      };
      ServerTimestampFieldValueImpl2.prototype.isEqual = function(other) {
        return other instanceof ServerTimestampFieldValueImpl2;
      };
      return ServerTimestampFieldValueImpl2;
    }(FieldValue);
    var ArrayUnionFieldValueImpl = function(_super) {
      tslib.__extends(ArrayUnionFieldValueImpl2, _super);
      function ArrayUnionFieldValueImpl2(methodName, _elements) {
        var _this = _super.call(this, methodName) || this;
        _this._elements = _elements;
        return _this;
      }
      ArrayUnionFieldValueImpl2.prototype._toFieldTransform = function(context) {
        var parseContext = createSentinelChildContext(this, context, true);
        var parsedElements = this._elements.map(function(element) {
          return parseData(element, parseContext);
        });
        var arrayUnion2 = new ArrayUnionTransformOperation(parsedElements);
        return new FieldTransform(context.path, arrayUnion2);
      };
      ArrayUnionFieldValueImpl2.prototype.isEqual = function(other) {
        return this === other;
      };
      return ArrayUnionFieldValueImpl2;
    }(FieldValue);
    var ArrayRemoveFieldValueImpl = function(_super) {
      tslib.__extends(ArrayRemoveFieldValueImpl2, _super);
      function ArrayRemoveFieldValueImpl2(methodName, _elements) {
        var _this = _super.call(this, methodName) || this;
        _this._elements = _elements;
        return _this;
      }
      ArrayRemoveFieldValueImpl2.prototype._toFieldTransform = function(context) {
        var parseContext = createSentinelChildContext(this, context, true);
        var parsedElements = this._elements.map(function(element) {
          return parseData(element, parseContext);
        });
        var arrayUnion2 = new ArrayRemoveTransformOperation(parsedElements);
        return new FieldTransform(context.path, arrayUnion2);
      };
      ArrayRemoveFieldValueImpl2.prototype.isEqual = function(other) {
        return this === other;
      };
      return ArrayRemoveFieldValueImpl2;
    }(FieldValue);
    var NumericIncrementFieldValueImpl = function(_super) {
      tslib.__extends(NumericIncrementFieldValueImpl2, _super);
      function NumericIncrementFieldValueImpl2(methodName, _operand) {
        var _this = _super.call(this, methodName) || this;
        _this._operand = _operand;
        return _this;
      }
      NumericIncrementFieldValueImpl2.prototype._toFieldTransform = function(context) {
        var numericIncrement = new NumericIncrementTransformOperation(context.serializer, toNumber(context.serializer, this._operand));
        return new FieldTransform(context.path, numericIncrement);
      };
      NumericIncrementFieldValueImpl2.prototype.isEqual = function(other) {
        return this === other;
      };
      return NumericIncrementFieldValueImpl2;
    }(FieldValue);
    var GeoPoint = function() {
      function GeoPoint2(latitude, longitude) {
        validateExactNumberOfArgs("GeoPoint", arguments, 2);
        validateArgType("GeoPoint", "number", 1, latitude);
        validateArgType("GeoPoint", "number", 2, longitude);
        if (!isFinite(latitude) || latitude < -90 || latitude > 90) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + latitude);
        }
        if (!isFinite(longitude) || longitude < -180 || longitude > 180) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + longitude);
        }
        this._lat = latitude;
        this._long = longitude;
      }
      Object.defineProperty(GeoPoint2.prototype, "latitude", {
        get: function() {
          return this._lat;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(GeoPoint2.prototype, "longitude", {
        get: function() {
          return this._long;
        },
        enumerable: false,
        configurable: true
      });
      GeoPoint2.prototype.isEqual = function(other) {
        return this._lat === other._lat && this._long === other._long;
      };
      GeoPoint2.prototype.toJSON = function() {
        return { latitude: this._lat, longitude: this._long };
      };
      GeoPoint2.prototype._compareTo = function(other) {
        return primitiveComparator(this._lat, other._lat) || primitiveComparator(this._long, other._long);
      };
      return GeoPoint2;
    }();
    var Compat = function() {
      function Compat2(_delegate) {
        this._delegate = _delegate;
      }
      return Compat2;
    }();
    var RESERVED_FIELD_REGEX = /^__.*__$/;
    var _DocumentKeyReference = function() {
      function _DocumentKeyReference2(_databaseId, _key, _converter) {
        this._databaseId = _databaseId;
        this._key = _key;
        this._converter = _converter;
      }
      return _DocumentKeyReference2;
    }();
    var ParsedSetData = function() {
      function ParsedSetData2(data, fieldMask, fieldTransforms) {
        this.data = data;
        this.fieldMask = fieldMask;
        this.fieldTransforms = fieldTransforms;
      }
      ParsedSetData2.prototype.toMutations = function(key, precondition) {
        var mutations = [];
        if (this.fieldMask !== null) {
          mutations.push(new PatchMutation(key, this.data, this.fieldMask, precondition));
        } else {
          mutations.push(new SetMutation(key, this.data, precondition));
        }
        if (this.fieldTransforms.length > 0) {
          mutations.push(new TransformMutation(key, this.fieldTransforms));
        }
        return mutations;
      };
      return ParsedSetData2;
    }();
    var ParsedUpdateData = function() {
      function ParsedUpdateData2(data, fieldMask, fieldTransforms) {
        this.data = data;
        this.fieldMask = fieldMask;
        this.fieldTransforms = fieldTransforms;
      }
      ParsedUpdateData2.prototype.toMutations = function(key, precondition) {
        var mutations = [
          new PatchMutation(key, this.data, this.fieldMask, precondition)
        ];
        if (this.fieldTransforms.length > 0) {
          mutations.push(new TransformMutation(key, this.fieldTransforms));
        }
        return mutations;
      };
      return ParsedUpdateData2;
    }();
    function isWrite(dataSource) {
      switch (dataSource) {
        case 0:
        case 2:
        case 1:
          return true;
        case 3:
        case 4:
          return false;
        default:
          throw fail();
      }
    }
    var ParseContext = function() {
      function ParseContext2(settings, databaseId, serializer, ignoreUndefinedProperties, fieldTransforms, fieldMask) {
        this.settings = settings;
        this.databaseId = databaseId;
        this.serializer = serializer;
        this.ignoreUndefinedProperties = ignoreUndefinedProperties;
        if (fieldTransforms === void 0) {
          this.validatePath();
        }
        this.fieldTransforms = fieldTransforms || [];
        this.fieldMask = fieldMask || [];
      }
      Object.defineProperty(ParseContext2.prototype, "path", {
        get: function() {
          return this.settings.path;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(ParseContext2.prototype, "dataSource", {
        get: function() {
          return this.settings.dataSource;
        },
        enumerable: false,
        configurable: true
      });
      ParseContext2.prototype.contextWith = function(configuration) {
        return new ParseContext2(Object.assign(Object.assign({}, this.settings), configuration), this.databaseId, this.serializer, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);
      };
      ParseContext2.prototype.childContextForField = function(field) {
        var _a;
        var childPath = (_a = this.path) === null || _a === void 0 ? void 0 : _a.child(field);
        var context = this.contextWith({ path: childPath, arrayElement: false });
        context.validatePathSegment(field);
        return context;
      };
      ParseContext2.prototype.childContextForFieldPath = function(field) {
        var _a;
        var childPath = (_a = this.path) === null || _a === void 0 ? void 0 : _a.child(field);
        var context = this.contextWith({ path: childPath, arrayElement: false });
        context.validatePath();
        return context;
      };
      ParseContext2.prototype.childContextForArray = function(index2) {
        return this.contextWith({ path: void 0, arrayElement: true });
      };
      ParseContext2.prototype.createError = function(reason) {
        return createError(reason, this.settings.methodName, this.settings.hasConverter || false, this.path, this.settings.targetDoc);
      };
      ParseContext2.prototype.contains = function(fieldPath) {
        return this.fieldMask.find(function(field) {
          return fieldPath.isPrefixOf(field);
        }) !== void 0 || this.fieldTransforms.find(function(transform) {
          return fieldPath.isPrefixOf(transform.field);
        }) !== void 0;
      };
      ParseContext2.prototype.validatePath = function() {
        if (!this.path) {
          return;
        }
        for (var i = 0; i < this.path.length; i++) {
          this.validatePathSegment(this.path.get(i));
        }
      };
      ParseContext2.prototype.validatePathSegment = function(segment) {
        if (segment.length === 0) {
          throw this.createError("Document fields must not be empty");
        }
        if (isWrite(this.dataSource) && RESERVED_FIELD_REGEX.test(segment)) {
          throw this.createError('Document fields cannot begin and end with "__"');
        }
      };
      return ParseContext2;
    }();
    var UserDataReader = function() {
      function UserDataReader2(databaseId, ignoreUndefinedProperties, serializer) {
        this.databaseId = databaseId;
        this.ignoreUndefinedProperties = ignoreUndefinedProperties;
        this.serializer = serializer || newSerializer(databaseId);
      }
      UserDataReader2.prototype.createContext = function(dataSource, methodName, targetDoc, hasConverter) {
        if (hasConverter === void 0) {
          hasConverter = false;
        }
        return new ParseContext({
          dataSource,
          methodName,
          targetDoc,
          path: FieldPath.emptyPath(),
          arrayElement: false,
          hasConverter
        }, this.databaseId, this.serializer, this.ignoreUndefinedProperties);
      };
      return UserDataReader2;
    }();
    function parseSetData(userDataReader, methodName, targetDoc, input, hasConverter, options2) {
      if (options2 === void 0) {
        options2 = {};
      }
      var context = userDataReader.createContext(options2.merge || options2.mergeFields ? 2 : 0, methodName, targetDoc, hasConverter);
      validatePlainObject("Data must be an object, but it was:", context, input);
      var updateData = parseObject(input, context);
      var fieldMask;
      var fieldTransforms;
      if (options2.merge) {
        fieldMask = new FieldMask(context.fieldMask);
        fieldTransforms = context.fieldTransforms;
      } else if (options2.mergeFields) {
        var validatedFieldPaths = [];
        for (var _i = 0, _f = options2.mergeFields; _i < _f.length; _i++) {
          var stringOrFieldPath = _f[_i];
          var fieldPath = void 0;
          if (stringOrFieldPath instanceof _BaseFieldPath) {
            fieldPath = stringOrFieldPath._internalPath;
          } else if (typeof stringOrFieldPath === "string") {
            fieldPath = fieldPathFromDotSeparatedString(methodName, stringOrFieldPath, targetDoc);
          } else {
            throw fail();
          }
          if (!context.contains(fieldPath)) {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Field '" + fieldPath + "' is specified in your field mask but missing from your input data.");
          }
          if (!fieldMaskContains(validatedFieldPaths, fieldPath)) {
            validatedFieldPaths.push(fieldPath);
          }
        }
        fieldMask = new FieldMask(validatedFieldPaths);
        fieldTransforms = context.fieldTransforms.filter(function(transform) {
          return fieldMask.covers(transform.field);
        });
      } else {
        fieldMask = null;
        fieldTransforms = context.fieldTransforms;
      }
      return new ParsedSetData(new ObjectValue(updateData), fieldMask, fieldTransforms);
    }
    function parseUpdateData(userDataReader, methodName, targetDoc, input) {
      var context = userDataReader.createContext(1, methodName, targetDoc);
      validatePlainObject("Data must be an object, but it was:", context, input);
      var fieldMaskPaths = [];
      var updateData = new ObjectValueBuilder();
      forEach(input, function(key, value) {
        var path2 = fieldPathFromDotSeparatedString(methodName, key, targetDoc);
        var childContext = context.childContextForFieldPath(path2);
        if (value instanceof DeleteFieldValueImpl || value instanceof Compat && value._delegate instanceof DeleteFieldValueImpl) {
          fieldMaskPaths.push(path2);
        } else {
          var parsedValue = parseData(value, childContext);
          if (parsedValue != null) {
            fieldMaskPaths.push(path2);
            updateData.set(path2, parsedValue);
          }
        }
      });
      var mask = new FieldMask(fieldMaskPaths);
      return new ParsedUpdateData(updateData.build(), mask, context.fieldTransforms);
    }
    function parseUpdateVarargs(userDataReader, methodName, targetDoc, field, value, moreFieldsAndValues) {
      var context = userDataReader.createContext(1, methodName, targetDoc);
      var keys = [fieldPathFromArgument(methodName, field, targetDoc)];
      var values = [value];
      if (moreFieldsAndValues.length % 2 !== 0) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + methodName + "() needs to be called with an even number of arguments that alternate between field names and values.");
      }
      for (var i = 0; i < moreFieldsAndValues.length; i += 2) {
        keys.push(fieldPathFromArgument(methodName, moreFieldsAndValues[i]));
        values.push(moreFieldsAndValues[i + 1]);
      }
      var fieldMaskPaths = [];
      var updateData = new ObjectValueBuilder();
      for (var i = keys.length - 1; i >= 0; --i) {
        if (!fieldMaskContains(fieldMaskPaths, keys[i])) {
          var path2 = keys[i];
          var value_1 = values[i];
          var childContext = context.childContextForFieldPath(path2);
          if (value_1 instanceof DeleteFieldValueImpl || value_1 instanceof Compat && value_1._delegate instanceof DeleteFieldValueImpl) {
            fieldMaskPaths.push(path2);
          } else {
            var parsedValue = parseData(value_1, childContext);
            if (parsedValue != null) {
              fieldMaskPaths.push(path2);
              updateData.set(path2, parsedValue);
            }
          }
        }
      }
      var mask = new FieldMask(fieldMaskPaths);
      return new ParsedUpdateData(updateData.build(), mask, context.fieldTransforms);
    }
    function parseQueryValue(userDataReader, methodName, input, allowArrays) {
      if (allowArrays === void 0) {
        allowArrays = false;
      }
      var context = userDataReader.createContext(allowArrays ? 4 : 3, methodName);
      var parsed = parseData(input, context);
      return parsed;
    }
    function parseData(input, context) {
      if (input instanceof Compat) {
        input = input._delegate;
      }
      if (looksLikeJsonObject(input)) {
        validatePlainObject("Unsupported field value:", context, input);
        return parseObject(input, context);
      } else if (input instanceof FieldValue) {
        parseSentinelFieldValue(input, context);
        return null;
      } else {
        if (context.path) {
          context.fieldMask.push(context.path);
        }
        if (input instanceof Array) {
          if (context.settings.arrayElement && context.dataSource !== 4) {
            throw context.createError("Nested arrays are not supported");
          }
          return parseArray(input, context);
        } else {
          return parseScalarValue(input, context);
        }
      }
    }
    function parseObject(obj, context) {
      var fields = {};
      if (isEmpty(obj)) {
        if (context.path && context.path.length > 0) {
          context.fieldMask.push(context.path);
        }
      } else {
        forEach(obj, function(key, val) {
          var parsedValue = parseData(val, context.childContextForField(key));
          if (parsedValue != null) {
            fields[key] = parsedValue;
          }
        });
      }
      return { mapValue: { fields } };
    }
    function parseArray(array, context) {
      var values = [];
      var entryIndex = 0;
      for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
        var entry = array_1[_i];
        var parsedEntry = parseData(entry, context.childContextForArray(entryIndex));
        if (parsedEntry == null) {
          parsedEntry = { nullValue: "NULL_VALUE" };
        }
        values.push(parsedEntry);
        entryIndex++;
      }
      return { arrayValue: { values } };
    }
    function parseSentinelFieldValue(value, context) {
      if (!isWrite(context.dataSource)) {
        throw context.createError(value._methodName + "() can only be used with update() and set()");
      }
      if (!context.path) {
        throw context.createError(value._methodName + "() is not currently supported inside arrays");
      }
      var fieldTransform = value._toFieldTransform(context);
      if (fieldTransform) {
        context.fieldTransforms.push(fieldTransform);
      }
    }
    function parseScalarValue(value, context) {
      if (value === null) {
        return { nullValue: "NULL_VALUE" };
      } else if (typeof value === "number") {
        return toNumber(context.serializer, value);
      } else if (typeof value === "boolean") {
        return { booleanValue: value };
      } else if (typeof value === "string") {
        return { stringValue: value };
      } else if (value instanceof Date) {
        var timestamp = Timestamp.fromDate(value);
        return {
          timestampValue: toTimestamp(context.serializer, timestamp)
        };
      } else if (value instanceof Timestamp) {
        var timestamp = new Timestamp(value.seconds, Math.floor(value.nanoseconds / 1e3) * 1e3);
        return {
          timestampValue: toTimestamp(context.serializer, timestamp)
        };
      } else if (value instanceof GeoPoint) {
        return {
          geoPointValue: {
            latitude: value.latitude,
            longitude: value.longitude
          }
        };
      } else if (value instanceof Bytes) {
        return { bytesValue: toBytes(context.serializer, value._byteString) };
      } else if (value instanceof _DocumentKeyReference) {
        var thisDb = context.databaseId;
        var otherDb = value._databaseId;
        if (!otherDb.isEqual(thisDb)) {
          throw context.createError("Document reference is for database " + (otherDb.projectId + "/" + otherDb.database + " but should be ") + ("for database " + thisDb.projectId + "/" + thisDb.database));
        }
        return {
          referenceValue: toResourceName(value._databaseId || context.databaseId, value._key.path)
        };
      } else if (value === void 0 && context.ignoreUndefinedProperties) {
        return null;
      } else {
        throw context.createError("Unsupported field value: " + valueDescription(value));
      }
    }
    function looksLikeJsonObject(input) {
      return typeof input === "object" && input !== null && !(input instanceof Array) && !(input instanceof Date) && !(input instanceof Timestamp) && !(input instanceof GeoPoint) && !(input instanceof Bytes) && !(input instanceof _DocumentKeyReference) && !(input instanceof FieldValue);
    }
    function validatePlainObject(message, context, input) {
      if (!looksLikeJsonObject(input) || !isPlainObject(input)) {
        var description = valueDescription(input);
        if (description === "an object") {
          throw context.createError(message + " a custom object");
        } else {
          throw context.createError(message + " " + description);
        }
      }
    }
    function fieldPathFromArgument(methodName, path2, targetDoc) {
      if (path2 instanceof _BaseFieldPath) {
        return path2._internalPath;
      } else if (typeof path2 === "string") {
        return fieldPathFromDotSeparatedString(methodName, path2);
      } else {
        var message = "Field path arguments must be of type string or FieldPath.";
        throw createError(message, methodName, false, void 0, targetDoc);
      }
    }
    function fieldPathFromDotSeparatedString(methodName, path2, targetDoc) {
      try {
        return fromDotSeparatedString(path2)._internalPath;
      } catch (e) {
        var message = errorMessage(e);
        throw createError(message, methodName, false, void 0, targetDoc);
      }
    }
    function createError(reason, methodName, hasConverter, path2, targetDoc) {
      var hasPath = path2 && !path2.isEmpty();
      var hasDocument = targetDoc !== void 0;
      var message = "Function " + methodName + "() called with invalid data";
      if (hasConverter) {
        message += " (via `toFirestore()`)";
      }
      message += ". ";
      var description = "";
      if (hasPath || hasDocument) {
        description += " (found";
        if (hasPath) {
          description += " in field " + path2;
        }
        if (hasDocument) {
          description += " in document " + targetDoc;
        }
        description += ")";
      }
      return new FirestoreError(Code.INVALID_ARGUMENT, message + reason + description);
    }
    function errorMessage(error2) {
      return error2 instanceof Error ? error2.message : error2.toString();
    }
    function fieldMaskContains(haystack, needle) {
      return haystack.some(function(v) {
        return v.isEqual(needle);
      });
    }
    var UserDataWriter = function() {
      function UserDataWriter2(databaseId, timestampsInSnapshots, serverTimestampBehavior, referenceFactory, bytesFactory) {
        this.databaseId = databaseId;
        this.timestampsInSnapshots = timestampsInSnapshots;
        this.serverTimestampBehavior = serverTimestampBehavior;
        this.referenceFactory = referenceFactory;
        this.bytesFactory = bytesFactory;
      }
      UserDataWriter2.prototype.convertValue = function(value) {
        switch (typeOrder(value)) {
          case 0:
            return null;
          case 1:
            return value.booleanValue;
          case 2:
            return normalizeNumber(value.integerValue || value.doubleValue);
          case 3:
            return this.convertTimestamp(value.timestampValue);
          case 4:
            return this.convertServerTimestamp(value);
          case 5:
            return value.stringValue;
          case 6:
            return this.bytesFactory(normalizeByteString(value.bytesValue));
          case 7:
            return this.convertReference(value.referenceValue);
          case 8:
            return this.convertGeoPoint(value.geoPointValue);
          case 9:
            return this.convertArray(value.arrayValue);
          case 10:
            return this.convertObject(value.mapValue);
          default:
            throw fail();
        }
      };
      UserDataWriter2.prototype.convertObject = function(mapValue) {
        var _this = this;
        var result = {};
        forEach(mapValue.fields || {}, function(key, value) {
          result[key] = _this.convertValue(value);
        });
        return result;
      };
      UserDataWriter2.prototype.convertGeoPoint = function(value) {
        return new GeoPoint(normalizeNumber(value.latitude), normalizeNumber(value.longitude));
      };
      UserDataWriter2.prototype.convertArray = function(arrayValue) {
        var _this = this;
        return (arrayValue.values || []).map(function(value) {
          return _this.convertValue(value);
        });
      };
      UserDataWriter2.prototype.convertServerTimestamp = function(value) {
        switch (this.serverTimestampBehavior) {
          case "previous":
            var previousValue = getPreviousValue(value);
            if (previousValue == null) {
              return null;
            }
            return this.convertValue(previousValue);
          case "estimate":
            return this.convertTimestamp(getLocalWriteTime(value));
          default:
            return null;
        }
      };
      UserDataWriter2.prototype.convertTimestamp = function(value) {
        var normalizedValue = normalizeTimestamp(value);
        var timestamp = new Timestamp(normalizedValue.seconds, normalizedValue.nanos);
        if (this.timestampsInSnapshots) {
          return timestamp;
        } else {
          return timestamp.toDate();
        }
      };
      UserDataWriter2.prototype.convertReference = function(name3) {
        var resourcePath = ResourcePath.fromString(name3);
        hardAssert(isValidResourceName(resourcePath));
        var databaseId = new DatabaseId(resourcePath.get(1), resourcePath.get(3));
        var key = new DocumentKey(resourcePath.popFirst(5));
        if (!databaseId.isEqual(this.databaseId)) {
          logError("Document " + key + " contains a document reference within a different database (" + (databaseId.projectId + "/" + databaseId.database + ") which is not ") + "supported. It will be treated as a reference in the current " + ("database (" + this.databaseId.projectId + "/" + this.databaseId.database + ") ") + "instead.");
        }
        return this.referenceFactory(key);
      };
      return UserDataWriter2;
    }();
    var DEFAULT_HOST = "firestore.googleapis.com";
    var DEFAULT_SSL = true;
    var DEFAULT_TIMESTAMPS_IN_SNAPSHOTS = true;
    var DEFAULT_FORCE_LONG_POLLING = false;
    var DEFAULT_FORCE_AUTO_DETECT_LONG_POLLING = false;
    var DEFAULT_IGNORE_UNDEFINED_PROPERTIES = false;
    var CACHE_SIZE_UNLIMITED = LruParams.COLLECTION_DISABLED;
    var DEFAULT_SYNCHRONIZE_TABS = false;
    var FirestoreSettings = function() {
      function FirestoreSettings2(settings) {
        var _a, _b, _c, _d, _e;
        if (settings.host === void 0) {
          if (settings.ssl !== void 0) {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
          }
          this.host = DEFAULT_HOST;
          this.ssl = DEFAULT_SSL;
        } else {
          validateNamedType("settings", "non-empty string", "host", settings.host);
          this.host = settings.host;
          validateNamedOptionalType("settings", "boolean", "ssl", settings.ssl);
          this.ssl = (_a = settings.ssl) !== null && _a !== void 0 ? _a : DEFAULT_SSL;
        }
        validateOptionNames("settings", settings, [
          "host",
          "ssl",
          "credentials",
          "timestampsInSnapshots",
          "cacheSizeBytes",
          "experimentalForceLongPolling",
          "experimentalAutoDetectLongPolling",
          "ignoreUndefinedProperties"
        ]);
        validateNamedOptionalType("settings", "object", "credentials", settings.credentials);
        this.credentials = settings.credentials;
        validateNamedOptionalType("settings", "boolean", "timestampsInSnapshots", settings.timestampsInSnapshots);
        validateNamedOptionalType("settings", "boolean", "ignoreUndefinedProperties", settings.ignoreUndefinedProperties);
        if (settings.timestampsInSnapshots === true) {
          logError("The setting 'timestampsInSnapshots: true' is no longer required and should be removed.");
        } else if (settings.timestampsInSnapshots === false) {
          logError("Support for 'timestampsInSnapshots: false' will be removed soon. You must update your code to handle Timestamp objects.");
        }
        this.timestampsInSnapshots = (_b = settings.timestampsInSnapshots) !== null && _b !== void 0 ? _b : DEFAULT_TIMESTAMPS_IN_SNAPSHOTS;
        this.ignoreUndefinedProperties = (_c = settings.ignoreUndefinedProperties) !== null && _c !== void 0 ? _c : DEFAULT_IGNORE_UNDEFINED_PROPERTIES;
        validateNamedOptionalType("settings", "number", "cacheSizeBytes", settings.cacheSizeBytes);
        if (settings.cacheSizeBytes === void 0) {
          this.cacheSizeBytes = LruParams.DEFAULT_CACHE_SIZE_BYTES;
        } else {
          if (settings.cacheSizeBytes !== CACHE_SIZE_UNLIMITED && settings.cacheSizeBytes < LruParams.MINIMUM_CACHE_SIZE_BYTES) {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "cacheSizeBytes must be at least " + LruParams.MINIMUM_CACHE_SIZE_BYTES);
          } else {
            this.cacheSizeBytes = settings.cacheSizeBytes;
          }
        }
        validateNamedOptionalType("settings", "boolean", "experimentalForceLongPolling", settings.experimentalForceLongPolling);
        this.experimentalForceLongPolling = (_d = settings.experimentalForceLongPolling) !== null && _d !== void 0 ? _d : DEFAULT_FORCE_LONG_POLLING;
        validateNamedOptionalType("settings", "boolean", "experimentalAutoDetectLongPolling", settings.experimentalAutoDetectLongPolling);
        this.experimentalAutoDetectLongPolling = (_e = settings.experimentalAutoDetectLongPolling) !== null && _e !== void 0 ? _e : DEFAULT_FORCE_AUTO_DETECT_LONG_POLLING;
        validateIsNotUsedTogether("experimentalForceLongPolling", settings.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", settings.experimentalAutoDetectLongPolling);
      }
      FirestoreSettings2.prototype.isEqual = function(other) {
        return this.host === other.host && this.ssl === other.ssl && this.timestampsInSnapshots === other.timestampsInSnapshots && this.credentials === other.credentials && this.cacheSizeBytes === other.cacheSizeBytes && this.experimentalForceLongPolling === other.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === other.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === other.ignoreUndefinedProperties;
      };
      return FirestoreSettings2;
    }();
    var Firestore = function() {
      function Firestore2(databaseIdOrApp, authProvider, _offlineComponentProvider, _onlineComponentProvider) {
        var _this = this;
        if (_offlineComponentProvider === void 0) {
          _offlineComponentProvider = new MemoryOfflineComponentProvider();
        }
        if (_onlineComponentProvider === void 0) {
          _onlineComponentProvider = new OnlineComponentProvider();
        }
        this._offlineComponentProvider = _offlineComponentProvider;
        this._onlineComponentProvider = _onlineComponentProvider;
        this._firebaseApp = null;
        this._queue = new AsyncQueue();
        this.INTERNAL = {
          delete: function() {
            return tslib.__awaiter(_this, void 0, void 0, function() {
              return tslib.__generator(this, function(_f) {
                switch (_f.label) {
                  case 0:
                    this.ensureClientConfigured();
                    return [4, this._firestoreClient.terminate()];
                  case 1:
                    _f.sent();
                    return [2];
                }
              });
            });
          }
        };
        if (typeof databaseIdOrApp.options === "object") {
          var app = databaseIdOrApp;
          this._firebaseApp = app;
          this._databaseId = Firestore2.databaseIdFromApp(app);
          this._persistenceKey = app.name;
          this._credentials = new FirebaseCredentialsProvider(authProvider);
        } else {
          var external_1 = databaseIdOrApp;
          if (!external_1.projectId) {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Must provide projectId");
          }
          this._databaseId = new DatabaseId(external_1.projectId, external_1.database);
          this._persistenceKey = "[DEFAULT]";
          this._credentials = new EmptyCredentialsProvider();
        }
        this._settings = new FirestoreSettings({});
      }
      Object.defineProperty(Firestore2.prototype, "_dataReader", {
        get: function() {
          if (!this._userDataReader) {
            this._userDataReader = new UserDataReader(this._databaseId, this._settings.ignoreUndefinedProperties);
          }
          return this._userDataReader;
        },
        enumerable: false,
        configurable: true
      });
      Firestore2.prototype.settings = function(settingsLiteral) {
        validateExactNumberOfArgs("Firestore.settings", arguments, 1);
        validateArgType("Firestore.settings", "object", 1, settingsLiteral);
        if (settingsLiteral.merge) {
          settingsLiteral = Object.assign(Object.assign({}, this._settings), settingsLiteral);
          delete settingsLiteral.merge;
        }
        var newSettings = new FirestoreSettings(settingsLiteral);
        if (this._firestoreClient && !this._settings.isEqual(newSettings)) {
          throw new FirestoreError(Code.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only call settings() before calling any other methods on a Firestore object.");
        }
        this._settings = newSettings;
        if (newSettings.credentials !== void 0) {
          this._credentials = makeCredentialsProvider(newSettings.credentials);
        }
      };
      Firestore2.prototype.enableNetwork = function() {
        this.ensureClientConfigured();
        return this._firestoreClient.enableNetwork();
      };
      Firestore2.prototype.disableNetwork = function() {
        this.ensureClientConfigured();
        return this._firestoreClient.disableNetwork();
      };
      Firestore2.prototype.enablePersistence = function(settings) {
        var _a, _b;
        if (this._firestoreClient) {
          throw new FirestoreError(Code.FAILED_PRECONDITION, "Firestore has already been started and persistence can no longer be enabled. You can only call enablePersistence() before calling any other methods on a Firestore object.");
        }
        var synchronizeTabs = false;
        var experimentalForceOwningTab = false;
        if (settings) {
          if (settings.experimentalTabSynchronization !== void 0) {
            logError("The 'experimentalTabSynchronization' setting will be removed. Use 'synchronizeTabs' instead.");
          }
          synchronizeTabs = (_b = (_a = settings.synchronizeTabs) !== null && _a !== void 0 ? _a : settings.experimentalTabSynchronization) !== null && _b !== void 0 ? _b : DEFAULT_SYNCHRONIZE_TABS;
          experimentalForceOwningTab = settings.experimentalForceOwningTab ? settings.experimentalForceOwningTab : false;
          if (synchronizeTabs && experimentalForceOwningTab) {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "The 'experimentalForceOwningTab' setting cannot be used with 'synchronizeTabs'.");
          }
        }
        return this.configureClient(this._offlineComponentProvider, this._onlineComponentProvider, {
          durable: true,
          cacheSizeBytes: this._settings.cacheSizeBytes,
          synchronizeTabs,
          forceOwningTab: experimentalForceOwningTab
        });
      };
      Firestore2.prototype.clearPersistence = function() {
        return tslib.__awaiter(this, void 0, void 0, function() {
          var deferred;
          var _this = this;
          return tslib.__generator(this, function(_f) {
            if (this._firestoreClient !== void 0 && !this._firestoreClient.clientTerminated) {
              throw new FirestoreError(Code.FAILED_PRECONDITION, "Persistence can only be cleared before a Firestore instance is initialized or after it is terminated.");
            }
            deferred = new Deferred();
            this._queue.enqueueAndForgetEvenWhileRestricted(function() {
              return tslib.__awaiter(_this, void 0, void 0, function() {
                var e_14;
                return tslib.__generator(this, function(_f2) {
                  switch (_f2.label) {
                    case 0:
                      _f2.trys.push([0, 2, , 3]);
                      return [4, this._offlineComponentProvider.clearPersistence(this._databaseId, this._persistenceKey)];
                    case 1:
                      _f2.sent();
                      deferred.resolve();
                      return [3, 3];
                    case 2:
                      e_14 = _f2.sent();
                      deferred.reject(e_14);
                      return [3, 3];
                    case 3:
                      return [2];
                  }
                });
              });
            });
            return [2, deferred.promise];
          });
        });
      };
      Firestore2.prototype.terminate = function() {
        this.app._removeServiceInstance("firestore");
        return this.INTERNAL.delete();
      };
      Object.defineProperty(Firestore2.prototype, "_isTerminated", {
        get: function() {
          this.ensureClientConfigured();
          return this._firestoreClient.clientTerminated;
        },
        enumerable: false,
        configurable: true
      });
      Firestore2.prototype.waitForPendingWrites = function() {
        this.ensureClientConfigured();
        return this._firestoreClient.waitForPendingWrites();
      };
      Firestore2.prototype.onSnapshotsInSync = function(arg) {
        this.ensureClientConfigured();
        if (isPartialObserver(arg)) {
          return this._firestoreClient.addSnapshotsInSyncListener(arg);
        } else {
          validateArgType("Firestore.onSnapshotsInSync", "function", 1, arg);
          var observer = {
            next: arg
          };
          return this._firestoreClient.addSnapshotsInSyncListener(observer);
        }
      };
      Firestore2.prototype.ensureClientConfigured = function() {
        if (!this._firestoreClient) {
          this.configureClient(new MemoryOfflineComponentProvider(), new OnlineComponentProvider(), {
            durable: false
          });
        }
        return this._firestoreClient;
      };
      Firestore2.prototype.makeDatabaseInfo = function() {
        return new DatabaseInfo(this._databaseId, this._persistenceKey, this._settings.host, this._settings.ssl, this._settings.experimentalForceLongPolling, this._settings.experimentalAutoDetectLongPolling);
      };
      Firestore2.prototype.configureClient = function(offlineComponentProvider, onlineComponentProvider, persistenceSettings) {
        var databaseInfo = this.makeDatabaseInfo();
        this._firestoreClient = new FirestoreClient(this._credentials, this._queue);
        return this._firestoreClient.start(databaseInfo, offlineComponentProvider, onlineComponentProvider, persistenceSettings);
      };
      Firestore2.databaseIdFromApp = function(app) {
        if (!contains(app.options, "projectId")) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
        }
        var projectId = app.options.projectId;
        if (!projectId || typeof projectId !== "string") {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "projectId must be a string in FirebaseApp.options");
        }
        return new DatabaseId(projectId);
      };
      Object.defineProperty(Firestore2.prototype, "app", {
        get: function() {
          if (!this._firebaseApp) {
            throw new FirestoreError(Code.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
          }
          return this._firebaseApp;
        },
        enumerable: false,
        configurable: true
      });
      Firestore2.prototype.collection = function(pathString) {
        validateExactNumberOfArgs("Firestore.collection", arguments, 1);
        validateArgType("Firestore.collection", "non-empty string", 1, pathString);
        this.ensureClientConfigured();
        return new CollectionReference(ResourcePath.fromString(pathString), this, null);
      };
      Firestore2.prototype.doc = function(pathString) {
        validateExactNumberOfArgs("Firestore.doc", arguments, 1);
        validateArgType("Firestore.doc", "non-empty string", 1, pathString);
        this.ensureClientConfigured();
        return DocumentReference.forPath(ResourcePath.fromString(pathString), this, null);
      };
      Firestore2.prototype.collectionGroup = function(collectionId) {
        validateExactNumberOfArgs("Firestore.collectionGroup", arguments, 1);
        validateArgType("Firestore.collectionGroup", "non-empty string", 1, collectionId);
        if (collectionId.indexOf("/") >= 0) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid collection ID '" + collectionId + "' passed to function Firestore.collectionGroup(). Collection IDs must not contain '/'.");
        }
        this.ensureClientConfigured();
        return new Query(newQueryForCollectionGroup(collectionId), this, null);
      };
      Firestore2.prototype.runTransaction = function(updateFunction) {
        var _this = this;
        validateExactNumberOfArgs("Firestore.runTransaction", arguments, 1);
        validateArgType("Firestore.runTransaction", "function", 1, updateFunction);
        return this.ensureClientConfigured().transaction(function(transaction) {
          return updateFunction(new Transaction$1(_this, transaction));
        });
      };
      Firestore2.prototype.batch = function() {
        this.ensureClientConfigured();
        return new WriteBatch(this);
      };
      Object.defineProperty(Firestore2, "logLevel", {
        get: function() {
          switch (getLogLevel()) {
            case logger.LogLevel.DEBUG:
              return "debug";
            case logger.LogLevel.ERROR:
              return "error";
            case logger.LogLevel.SILENT:
              return "silent";
            case logger.LogLevel.WARN:
              return "warn";
            case logger.LogLevel.INFO:
              return "info";
            case logger.LogLevel.VERBOSE:
              return "verbose";
            default:
              return "error";
          }
        },
        enumerable: false,
        configurable: true
      });
      Firestore2.setLogLevel = function(level) {
        validateExactNumberOfArgs("Firestore.setLogLevel", arguments, 1);
        validateStringEnum("setLogLevel", ["debug", "error", "silent", "warn", "info", "verbose"], 1, level);
        setLogLevel(level);
      };
      Firestore2.prototype._areTimestampsInSnapshotsEnabled = function() {
        return this._settings.timestampsInSnapshots;
      };
      Firestore2.prototype._getSettings = function() {
        return this._settings;
      };
      return Firestore2;
    }();
    var Transaction$1 = function() {
      function Transaction$12(_firestore, _transaction) {
        this._firestore = _firestore;
        this._transaction = _transaction;
      }
      Transaction$12.prototype.get = function(documentRef) {
        var _this = this;
        validateExactNumberOfArgs("Transaction.get", arguments, 1);
        var ref = validateReference("Transaction.get", documentRef, this._firestore);
        return this._transaction.lookup([ref._key]).then(function(docs) {
          if (!docs || docs.length !== 1) {
            return fail();
          }
          var doc = docs[0];
          if (doc instanceof NoDocument) {
            return new DocumentSnapshot(_this._firestore, ref._key, null, false, false, ref._converter);
          } else if (doc instanceof Document) {
            return new DocumentSnapshot(_this._firestore, ref._key, doc, false, false, ref._converter);
          } else {
            throw fail();
          }
        });
      };
      Transaction$12.prototype.set = function(documentRef, value, options2) {
        validateBetweenNumberOfArgs("Transaction.set", arguments, 2, 3);
        var ref = validateReference("Transaction.set", documentRef, this._firestore);
        options2 = validateSetOptions("Transaction.set", options2);
        var convertedValue = applyFirestoreDataConverter(ref._converter, value, options2);
        var parsed = parseSetData(this._firestore._dataReader, "Transaction.set", ref._key, convertedValue, ref._converter !== null, options2);
        this._transaction.set(ref._key, parsed);
        return this;
      };
      Transaction$12.prototype.update = function(documentRef, fieldOrUpdateData, value) {
        var moreFieldsAndValues = [];
        for (var _i = 3; _i < arguments.length; _i++) {
          moreFieldsAndValues[_i - 3] = arguments[_i];
        }
        var ref;
        var parsed;
        if (typeof fieldOrUpdateData === "string" || fieldOrUpdateData instanceof FieldPath$1) {
          validateAtLeastNumberOfArgs("Transaction.update", arguments, 3);
          ref = validateReference("Transaction.update", documentRef, this._firestore);
          parsed = parseUpdateVarargs(this._firestore._dataReader, "Transaction.update", ref._key, fieldOrUpdateData, value, moreFieldsAndValues);
        } else {
          validateExactNumberOfArgs("Transaction.update", arguments, 2);
          ref = validateReference("Transaction.update", documentRef, this._firestore);
          parsed = parseUpdateData(this._firestore._dataReader, "Transaction.update", ref._key, fieldOrUpdateData);
        }
        this._transaction.update(ref._key, parsed);
        return this;
      };
      Transaction$12.prototype.delete = function(documentRef) {
        validateExactNumberOfArgs("Transaction.delete", arguments, 1);
        var ref = validateReference("Transaction.delete", documentRef, this._firestore);
        this._transaction.delete(ref._key);
        return this;
      };
      return Transaction$12;
    }();
    var WriteBatch = function() {
      function WriteBatch2(_firestore) {
        this._firestore = _firestore;
        this._mutations = [];
        this._committed = false;
      }
      WriteBatch2.prototype.set = function(documentRef, value, options2) {
        validateBetweenNumberOfArgs("WriteBatch.set", arguments, 2, 3);
        this.verifyNotCommitted();
        var ref = validateReference("WriteBatch.set", documentRef, this._firestore);
        options2 = validateSetOptions("WriteBatch.set", options2);
        var convertedValue = applyFirestoreDataConverter(ref._converter, value, options2);
        var parsed = parseSetData(this._firestore._dataReader, "WriteBatch.set", ref._key, convertedValue, ref._converter !== null, options2);
        this._mutations = this._mutations.concat(parsed.toMutations(ref._key, Precondition.none()));
        return this;
      };
      WriteBatch2.prototype.update = function(documentRef, fieldOrUpdateData, value) {
        var moreFieldsAndValues = [];
        for (var _i = 3; _i < arguments.length; _i++) {
          moreFieldsAndValues[_i - 3] = arguments[_i];
        }
        this.verifyNotCommitted();
        var ref;
        var parsed;
        if (typeof fieldOrUpdateData === "string" || fieldOrUpdateData instanceof FieldPath$1) {
          validateAtLeastNumberOfArgs("WriteBatch.update", arguments, 3);
          ref = validateReference("WriteBatch.update", documentRef, this._firestore);
          parsed = parseUpdateVarargs(this._firestore._dataReader, "WriteBatch.update", ref._key, fieldOrUpdateData, value, moreFieldsAndValues);
        } else {
          validateExactNumberOfArgs("WriteBatch.update", arguments, 2);
          ref = validateReference("WriteBatch.update", documentRef, this._firestore);
          parsed = parseUpdateData(this._firestore._dataReader, "WriteBatch.update", ref._key, fieldOrUpdateData);
        }
        this._mutations = this._mutations.concat(parsed.toMutations(ref._key, Precondition.exists(true)));
        return this;
      };
      WriteBatch2.prototype.delete = function(documentRef) {
        validateExactNumberOfArgs("WriteBatch.delete", arguments, 1);
        this.verifyNotCommitted();
        var ref = validateReference("WriteBatch.delete", documentRef, this._firestore);
        this._mutations = this._mutations.concat(new DeleteMutation(ref._key, Precondition.none()));
        return this;
      };
      WriteBatch2.prototype.commit = function() {
        this.verifyNotCommitted();
        this._committed = true;
        if (this._mutations.length > 0) {
          return this._firestore.ensureClientConfigured().write(this._mutations);
        }
        return Promise.resolve();
      };
      WriteBatch2.prototype.verifyNotCommitted = function() {
        if (this._committed) {
          throw new FirestoreError(Code.FAILED_PRECONDITION, "A write batch can no longer be used after commit() has been called.");
        }
      };
      return WriteBatch2;
    }();
    var DocumentReference = function(_super) {
      tslib.__extends(DocumentReference2, _super);
      function DocumentReference2(_key, firestore, _converter) {
        var _this = _super.call(this, firestore._databaseId, _key, _converter) || this;
        _this._key = _key;
        _this.firestore = firestore;
        _this._converter = _converter;
        _this._firestoreClient = _this.firestore.ensureClientConfigured();
        return _this;
      }
      DocumentReference2.forPath = function(path2, firestore, converter) {
        if (path2.length % 2 !== 0) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid document reference. Document references must have an even number of segments, but " + (path2.canonicalString() + " has " + path2.length));
        }
        return new DocumentReference2(new DocumentKey(path2), firestore, converter);
      };
      Object.defineProperty(DocumentReference2.prototype, "id", {
        get: function() {
          return this._key.path.lastSegment();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(DocumentReference2.prototype, "parent", {
        get: function() {
          return new CollectionReference(this._key.path.popLast(), this.firestore, this._converter);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(DocumentReference2.prototype, "path", {
        get: function() {
          return this._key.path.canonicalString();
        },
        enumerable: false,
        configurable: true
      });
      DocumentReference2.prototype.collection = function(pathString) {
        validateExactNumberOfArgs("DocumentReference.collection", arguments, 1);
        validateArgType("DocumentReference.collection", "non-empty string", 1, pathString);
        if (!pathString) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Must provide a non-empty collection name to collection()");
        }
        var path2 = ResourcePath.fromString(pathString);
        return new CollectionReference(this._key.path.child(path2), this.firestore, null);
      };
      DocumentReference2.prototype.isEqual = function(other) {
        if (!(other instanceof DocumentReference2)) {
          throw invalidClassError("isEqual", "DocumentReference", 1, other);
        }
        return this.firestore === other.firestore && this._key.isEqual(other._key) && this._converter === other._converter;
      };
      DocumentReference2.prototype.set = function(value, options2) {
        validateBetweenNumberOfArgs("DocumentReference.set", arguments, 1, 2);
        options2 = validateSetOptions("DocumentReference.set", options2);
        var convertedValue = applyFirestoreDataConverter(this._converter, value, options2);
        var parsed = parseSetData(this.firestore._dataReader, "DocumentReference.set", this._key, convertedValue, this._converter !== null, options2);
        return this._firestoreClient.write(parsed.toMutations(this._key, Precondition.none()));
      };
      DocumentReference2.prototype.update = function(fieldOrUpdateData, value) {
        var moreFieldsAndValues = [];
        for (var _i = 2; _i < arguments.length; _i++) {
          moreFieldsAndValues[_i - 2] = arguments[_i];
        }
        var parsed;
        if (typeof fieldOrUpdateData === "string" || fieldOrUpdateData instanceof FieldPath$1) {
          validateAtLeastNumberOfArgs("DocumentReference.update", arguments, 2);
          parsed = parseUpdateVarargs(this.firestore._dataReader, "DocumentReference.update", this._key, fieldOrUpdateData, value, moreFieldsAndValues);
        } else {
          validateExactNumberOfArgs("DocumentReference.update", arguments, 1);
          parsed = parseUpdateData(this.firestore._dataReader, "DocumentReference.update", this._key, fieldOrUpdateData);
        }
        return this._firestoreClient.write(parsed.toMutations(this._key, Precondition.exists(true)));
      };
      DocumentReference2.prototype.delete = function() {
        validateExactNumberOfArgs("DocumentReference.delete", arguments, 0);
        return this._firestoreClient.write([
          new DeleteMutation(this._key, Precondition.none())
        ]);
      };
      DocumentReference2.prototype.onSnapshot = function() {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var _a, _b, _c;
        validateBetweenNumberOfArgs("DocumentReference.onSnapshot", arguments, 1, 4);
        var options2 = {
          includeMetadataChanges: false
        };
        var currArg = 0;
        if (typeof args[currArg] === "object" && !isPartialObserver(args[currArg])) {
          options2 = args[currArg];
          validateOptionNames("DocumentReference.onSnapshot", options2, [
            "includeMetadataChanges"
          ]);
          validateNamedOptionalType("DocumentReference.onSnapshot", "boolean", "includeMetadataChanges", options2.includeMetadataChanges);
          currArg++;
        }
        var internalOptions = {
          includeMetadataChanges: options2.includeMetadataChanges
        };
        if (isPartialObserver(args[currArg])) {
          var userObserver = args[currArg];
          args[currArg] = (_a = userObserver.next) === null || _a === void 0 ? void 0 : _a.bind(userObserver);
          args[currArg + 1] = (_b = userObserver.error) === null || _b === void 0 ? void 0 : _b.bind(userObserver);
          args[currArg + 2] = (_c = userObserver.complete) === null || _c === void 0 ? void 0 : _c.bind(userObserver);
        } else {
          validateArgType("DocumentReference.onSnapshot", "function", currArg, args[currArg]);
          validateOptionalArgType("DocumentReference.onSnapshot", "function", currArg + 1, args[currArg + 1]);
          validateOptionalArgType("DocumentReference.onSnapshot", "function", currArg + 2, args[currArg + 2]);
        }
        var observer = {
          next: function(snapshot) {
            if (args[currArg]) {
              args[currArg](_this._convertToDocSnapshot(snapshot));
            }
          },
          error: args[currArg + 1],
          complete: args[currArg + 2]
        };
        return this._firestoreClient.listen(newQueryForPath(this._key.path), internalOptions, observer);
      };
      DocumentReference2.prototype.get = function(options2) {
        var _this = this;
        validateBetweenNumberOfArgs("DocumentReference.get", arguments, 0, 1);
        validateGetOptions("DocumentReference.get", options2);
        var firestoreClient = this.firestore.ensureClientConfigured();
        if (options2 && options2.source === "cache") {
          return firestoreClient.getDocumentFromLocalCache(this._key).then(function(doc) {
            return new DocumentSnapshot(_this.firestore, _this._key, doc, true, doc instanceof Document ? doc.hasLocalMutations : false, _this._converter);
          });
        } else {
          return firestoreClient.getDocumentViaSnapshotListener(this._key, options2).then(function(snapshot) {
            return _this._convertToDocSnapshot(snapshot);
          });
        }
      };
      DocumentReference2.prototype.withConverter = function(converter) {
        return new DocumentReference2(this._key, this.firestore, converter);
      };
      DocumentReference2.prototype._convertToDocSnapshot = function(snapshot) {
        var doc = snapshot.docs.get(this._key);
        return new DocumentSnapshot(this.firestore, this._key, doc, snapshot.fromCache, snapshot.hasPendingWrites, this._converter);
      };
      return DocumentReference2;
    }(_DocumentKeyReference);
    var SnapshotMetadata = function() {
      function SnapshotMetadata2(hasPendingWrites, fromCache) {
        this.hasPendingWrites = hasPendingWrites;
        this.fromCache = fromCache;
      }
      SnapshotMetadata2.prototype.isEqual = function(other) {
        return this.hasPendingWrites === other.hasPendingWrites && this.fromCache === other.fromCache;
      };
      return SnapshotMetadata2;
    }();
    var DocumentSnapshot = function() {
      function DocumentSnapshot2(_firestore, _key, _document, _fromCache, _hasPendingWrites, _converter) {
        this._firestore = _firestore;
        this._key = _key;
        this._document = _document;
        this._fromCache = _fromCache;
        this._hasPendingWrites = _hasPendingWrites;
        this._converter = _converter;
      }
      DocumentSnapshot2.prototype.data = function(options2) {
        var _this = this;
        validateBetweenNumberOfArgs("DocumentSnapshot.data", arguments, 0, 1);
        options2 = validateSnapshotOptions("DocumentSnapshot.data", options2);
        if (!this._document) {
          return void 0;
        } else {
          if (this._converter) {
            var snapshot = new QueryDocumentSnapshot(this._firestore, this._key, this._document, this._fromCache, this._hasPendingWrites, null);
            return this._converter.fromFirestore(snapshot, options2);
          } else {
            var userDataWriter = new UserDataWriter(this._firestore._databaseId, this._firestore._areTimestampsInSnapshotsEnabled(), options2.serverTimestamps || "none", function(key) {
              return new DocumentReference(key, _this._firestore, null);
            }, function(bytes) {
              return new Blob2(bytes);
            });
            return userDataWriter.convertValue(this._document.toProto());
          }
        }
      };
      DocumentSnapshot2.prototype.get = function(fieldPath, options2) {
        var _this = this;
        validateBetweenNumberOfArgs("DocumentSnapshot.get", arguments, 1, 2);
        options2 = validateSnapshotOptions("DocumentSnapshot.get", options2);
        if (this._document) {
          var value = this._document.data().field(fieldPathFromArgument("DocumentSnapshot.get", fieldPath, this._key));
          if (value !== null) {
            var userDataWriter = new UserDataWriter(this._firestore._databaseId, this._firestore._areTimestampsInSnapshotsEnabled(), options2.serverTimestamps || "none", function(key) {
              return new DocumentReference(key, _this._firestore, _this._converter);
            }, function(bytes) {
              return new Blob2(bytes);
            });
            return userDataWriter.convertValue(value);
          }
        }
        return void 0;
      };
      Object.defineProperty(DocumentSnapshot2.prototype, "id", {
        get: function() {
          return this._key.path.lastSegment();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(DocumentSnapshot2.prototype, "ref", {
        get: function() {
          return new DocumentReference(this._key, this._firestore, this._converter);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(DocumentSnapshot2.prototype, "exists", {
        get: function() {
          return this._document !== null;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(DocumentSnapshot2.prototype, "metadata", {
        get: function() {
          return new SnapshotMetadata(this._hasPendingWrites, this._fromCache);
        },
        enumerable: false,
        configurable: true
      });
      DocumentSnapshot2.prototype.isEqual = function(other) {
        if (!(other instanceof DocumentSnapshot2)) {
          throw invalidClassError("isEqual", "DocumentSnapshot", 1, other);
        }
        return this._firestore === other._firestore && this._fromCache === other._fromCache && this._key.isEqual(other._key) && (this._document === null ? other._document === null : this._document.isEqual(other._document)) && this._converter === other._converter;
      };
      return DocumentSnapshot2;
    }();
    var QueryDocumentSnapshot = function(_super) {
      tslib.__extends(QueryDocumentSnapshot2, _super);
      function QueryDocumentSnapshot2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      QueryDocumentSnapshot2.prototype.data = function(options2) {
        var data = _super.prototype.data.call(this, options2);
        return data;
      };
      return QueryDocumentSnapshot2;
    }(DocumentSnapshot);
    function newQueryFilter(query, methodName, dataReader, databaseId, fieldPath, op, value) {
      var fieldValue;
      if (fieldPath.isKeyField()) {
        if (op === "array-contains" || op === "array-contains-any") {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid Query. You can't perform '" + op + "' queries on FieldPath.documentId().");
        } else if (op === "in" || op === "not-in") {
          validateDisjunctiveFilterElements(value, op);
          var referenceList = [];
          for (var _i = 0, value_2 = value; _i < value_2.length; _i++) {
            var arrayValue = value_2[_i];
            referenceList.push(parseDocumentIdValue(databaseId, query, arrayValue));
          }
          fieldValue = { arrayValue: { values: referenceList } };
        } else {
          fieldValue = parseDocumentIdValue(databaseId, query, value);
        }
      } else {
        if (op === "in" || op === "not-in" || op === "array-contains-any") {
          validateDisjunctiveFilterElements(value, op);
        }
        fieldValue = parseQueryValue(dataReader, methodName, value, op === "in" || op === "not-in");
      }
      var filter = FieldFilter.create(fieldPath, op, fieldValue);
      validateNewFilter(query, filter);
      return filter;
    }
    function newQueryOrderBy(query, fieldPath, direction) {
      if (query.startAt !== null) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
      }
      if (query.endAt !== null) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
      }
      var orderBy = new OrderBy(fieldPath, direction);
      validateNewOrderBy(query, orderBy);
      return orderBy;
    }
    function newQueryBoundFromDocument(query, databaseId, methodName, doc, before) {
      if (!doc) {
        throw new FirestoreError(Code.NOT_FOUND, "Can't use a DocumentSnapshot that doesn't exist for " + (methodName + "()."));
      }
      var components = [];
      for (var _i = 0, _f = queryOrderBy(query); _i < _f.length; _i++) {
        var orderBy = _f[_i];
        if (orderBy.field.isKeyField()) {
          components.push(refValue(databaseId, doc.key));
        } else {
          var value = doc.field(orderBy.field);
          if (isServerTimestamp(value)) {
            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a document for which the field "' + orderBy.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');
          } else if (value !== null) {
            components.push(value);
          } else {
            var field = orderBy.field.canonicalString();
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You are trying to start or end a query using a " + ("document for which the field '" + field + "' (used as the ") + "orderBy) does not exist.");
          }
        }
      }
      return new Bound(components, before);
    }
    function newQueryBoundFromFields(query, databaseId, dataReader, methodName, values, before) {
      var orderBy = query.explicitOrderBy;
      if (values.length > orderBy.length) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Too many arguments provided to " + methodName + "(). The number of arguments must be less than or equal to the number of orderBy() clauses");
      }
      var components = [];
      for (var i = 0; i < values.length; i++) {
        var rawValue = values[i];
        var orderByComponent = orderBy[i];
        if (orderByComponent.field.isKeyField()) {
          if (typeof rawValue !== "string") {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. Expected a string for document ID in " + (methodName + "(), but got a " + typeof rawValue));
          }
          if (!isCollectionGroupQuery(query) && rawValue.indexOf("/") !== -1) {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. When querying a collection and ordering by FieldPath.documentId(), " + ("the value passed to " + methodName + "() must be a plain document ID, but ") + ("'" + rawValue + "' contains a slash."));
          }
          var path2 = query.path.child(ResourcePath.fromString(rawValue));
          if (!DocumentKey.isDocumentKey(path2)) {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. When querying a collection group and ordering by " + ("FieldPath.documentId(), the value passed to " + methodName + "() must result in a ") + ("valid document path, but '" + path2 + "' is not because it contains an odd number ") + "of segments.");
          }
          var key = new DocumentKey(path2);
          components.push(refValue(databaseId, key));
        } else {
          var wrapped = parseQueryValue(dataReader, methodName, rawValue);
          components.push(wrapped);
        }
      }
      return new Bound(components, before);
    }
    function parseDocumentIdValue(databaseId, query, documentIdValue) {
      if (typeof documentIdValue === "string") {
        if (documentIdValue === "") {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid document ID, but it was an empty string.");
        }
        if (!isCollectionGroupQuery(query) && documentIdValue.indexOf("/") !== -1) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. When querying a collection by FieldPath.documentId(), you must provide a plain document ID, but " + ("'" + documentIdValue + "' contains a '/' character."));
        }
        var path2 = query.path.child(ResourcePath.fromString(documentIdValue));
        if (!DocumentKey.isDocumentKey(path2)) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. When querying a collection group by FieldPath.documentId(), the value provided must result in a valid document path, " + ("but '" + path2 + "' is not because it has an odd number of segments (" + path2.length + ")."));
        }
        return refValue(databaseId, new DocumentKey(path2));
      } else if (documentIdValue instanceof _DocumentKeyReference) {
        return refValue(databaseId, documentIdValue._key);
      } else {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid string or a DocumentReference, but it was: " + (valueDescription(documentIdValue) + "."));
      }
    }
    function validateDisjunctiveFilterElements(value, operator) {
      if (!Array.isArray(value) || value.length === 0) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid Query. A non-empty array is required for " + ("'" + operator.toString() + "' filters."));
      }
      if (value.length > 10) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid Query. '" + operator.toString() + "' filters support a maximum of 10 elements in the value array.");
      }
      if (operator === "in" || operator === "array-contains-any") {
        if (value.indexOf(null) >= 0) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid Query. '" + operator.toString() + "' filters cannot contain 'null' in the value array.");
        }
        if (value.filter(function(element) {
          return Number.isNaN(element);
        }).length > 0) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid Query. '" + operator.toString() + "' filters cannot contain 'NaN' in the value array.");
        }
      }
    }
    function conflictingOps(op) {
      switch (op) {
        case "!=":
          return ["!=", "not-in"];
        case "array-contains":
          return [
            "array-contains",
            "array-contains-any",
            "not-in"
          ];
        case "in":
          return ["array-contains-any", "in", "not-in"];
        case "array-contains-any":
          return [
            "array-contains",
            "array-contains-any",
            "in",
            "not-in"
          ];
        case "not-in":
          return [
            "array-contains",
            "array-contains-any",
            "in",
            "not-in",
            "!="
          ];
        default:
          return [];
      }
    }
    function validateNewFilter(query, filter) {
      if (filter.isInequality()) {
        var existingField = getInequalityFilterField(query);
        if (existingField !== null && !existingField.isEqual(filter.field)) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. All where filters with an inequality (<, <=, >, or >=) must be on the same field. But you have" + (" inequality filters on '" + existingField.toString() + "'") + (" and '" + filter.field.toString() + "'"));
        }
        var firstOrderByField = getFirstOrderByField(query);
        if (firstOrderByField !== null) {
          validateOrderByAndInequalityMatch(query, filter.field, firstOrderByField);
        }
      }
      var conflictingOp = findFilterOperator(query, conflictingOps(filter.op));
      if (conflictingOp !== null) {
        if (conflictingOp === filter.op) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You cannot use more than one " + ("'" + filter.op.toString() + "' filter."));
        } else {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You cannot use '" + filter.op.toString() + "' filters " + ("with '" + conflictingOp.toString() + "' filters."));
        }
      }
    }
    function validateNewOrderBy(query, orderBy) {
      if (getFirstOrderByField(query) === null) {
        var inequalityField = getInequalityFilterField(query);
        if (inequalityField !== null) {
          validateOrderByAndInequalityMatch(query, inequalityField, orderBy.field);
        }
      }
    }
    function validateOrderByAndInequalityMatch(baseQuery, inequality, orderBy) {
      if (!orderBy.isEqual(inequality)) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You have a where filter with an inequality " + ("(<, <=, >, or >=) on field '" + inequality.toString() + "' ") + ("and so you must also use '" + inequality.toString() + "' ") + "as your first orderBy(), but your first orderBy() " + ("is on field '" + orderBy.toString() + "' instead."));
      }
    }
    function validateHasExplicitOrderByForLimitToLast(query) {
      if (hasLimitToLast(query) && query.explicitOrderBy.length === 0) {
        throw new FirestoreError(Code.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
      }
    }
    var Query = function() {
      function Query2(_query, firestore, _converter) {
        this._query = _query;
        this.firestore = firestore;
        this._converter = _converter;
      }
      Query2.prototype.where = function(field, opStr, value) {
        validateExactNumberOfArgs("Query.where", arguments, 3);
        validateDefined("Query.where", 3, value);
        var whereFilterOpEnums = [
          "<",
          "<=",
          "==",
          "!=",
          ">=",
          ">",
          "array-contains",
          "in",
          "array-contains-any",
          "not-in"
        ];
        var op = validateStringEnum("Query.where", whereFilterOpEnums, 2, opStr);
        var fieldPath = fieldPathFromArgument("Query.where", field);
        var filter = newQueryFilter(this._query, "Query.where", this.firestore._dataReader, this.firestore._databaseId, fieldPath, op, value);
        return new Query2(queryWithAddedFilter(this._query, filter), this.firestore, this._converter);
      };
      Query2.prototype.orderBy = function(field, directionStr) {
        validateBetweenNumberOfArgs("Query.orderBy", arguments, 1, 2);
        validateOptionalArgType("Query.orderBy", "non-empty string", 2, directionStr);
        var direction;
        if (directionStr === void 0 || directionStr === "asc") {
          direction = "asc";
        } else if (directionStr === "desc") {
          direction = "desc";
        } else {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Function Query.orderBy() has unknown direction '" + directionStr + "', expected 'asc' or 'desc'.");
        }
        var fieldPath = fieldPathFromArgument("Query.orderBy", field);
        var orderBy = newQueryOrderBy(this._query, fieldPath, direction);
        return new Query2(queryWithAddedOrderBy(this._query, orderBy), this.firestore, this._converter);
      };
      Query2.prototype.limit = function(n) {
        validateExactNumberOfArgs("Query.limit", arguments, 1);
        validateArgType("Query.limit", "number", 1, n);
        validatePositiveNumber("Query.limit", 1, n);
        return new Query2(queryWithLimit(this._query, n, "F"), this.firestore, this._converter);
      };
      Query2.prototype.limitToLast = function(n) {
        validateExactNumberOfArgs("Query.limitToLast", arguments, 1);
        validateArgType("Query.limitToLast", "number", 1, n);
        validatePositiveNumber("Query.limitToLast", 1, n);
        return new Query2(queryWithLimit(this._query, n, "L"), this.firestore, this._converter);
      };
      Query2.prototype.startAt = function(docOrField) {
        var fields = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          fields[_i - 1] = arguments[_i];
        }
        validateAtLeastNumberOfArgs("Query.startAt", arguments, 1);
        var bound = this.boundFromDocOrFields("Query.startAt", docOrField, fields, true);
        return new Query2(queryWithStartAt(this._query, bound), this.firestore, this._converter);
      };
      Query2.prototype.startAfter = function(docOrField) {
        var fields = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          fields[_i - 1] = arguments[_i];
        }
        validateAtLeastNumberOfArgs("Query.startAfter", arguments, 1);
        var bound = this.boundFromDocOrFields("Query.startAfter", docOrField, fields, false);
        return new Query2(queryWithStartAt(this._query, bound), this.firestore, this._converter);
      };
      Query2.prototype.endBefore = function(docOrField) {
        var fields = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          fields[_i - 1] = arguments[_i];
        }
        validateAtLeastNumberOfArgs("Query.endBefore", arguments, 1);
        var bound = this.boundFromDocOrFields("Query.endBefore", docOrField, fields, true);
        return new Query2(queryWithEndAt(this._query, bound), this.firestore, this._converter);
      };
      Query2.prototype.endAt = function(docOrField) {
        var fields = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          fields[_i - 1] = arguments[_i];
        }
        validateAtLeastNumberOfArgs("Query.endAt", arguments, 1);
        var bound = this.boundFromDocOrFields("Query.endAt", docOrField, fields, false);
        return new Query2(queryWithEndAt(this._query, bound), this.firestore, this._converter);
      };
      Query2.prototype.isEqual = function(other) {
        if (!(other instanceof Query2)) {
          throw invalidClassError("isEqual", "Query", 1, other);
        }
        return this.firestore === other.firestore && queryEquals(this._query, other._query) && this._converter === other._converter;
      };
      Query2.prototype.withConverter = function(converter) {
        return new Query2(this._query, this.firestore, converter);
      };
      Query2.prototype.boundFromDocOrFields = function(methodName, docOrField, fields, before) {
        validateDefined(methodName, 1, docOrField);
        if (docOrField instanceof DocumentSnapshot) {
          validateExactNumberOfArgs(methodName, tslib.__spreadArrays([docOrField], fields), 1);
          return newQueryBoundFromDocument(this._query, this.firestore._databaseId, methodName, docOrField._document, before);
        } else {
          var allFields = [docOrField].concat(fields);
          return newQueryBoundFromFields(this._query, this.firestore._databaseId, this.firestore._dataReader, methodName, allFields, before);
        }
      };
      Query2.prototype.onSnapshot = function() {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var _a, _b, _c;
        validateBetweenNumberOfArgs("Query.onSnapshot", arguments, 1, 4);
        var options2 = {};
        var currArg = 0;
        if (typeof args[currArg] === "object" && !isPartialObserver(args[currArg])) {
          options2 = args[currArg];
          validateOptionNames("Query.onSnapshot", options2, [
            "includeMetadataChanges"
          ]);
          validateNamedOptionalType("Query.onSnapshot", "boolean", "includeMetadataChanges", options2.includeMetadataChanges);
          currArg++;
        }
        if (isPartialObserver(args[currArg])) {
          var userObserver = args[currArg];
          args[currArg] = (_a = userObserver.next) === null || _a === void 0 ? void 0 : _a.bind(userObserver);
          args[currArg + 1] = (_b = userObserver.error) === null || _b === void 0 ? void 0 : _b.bind(userObserver);
          args[currArg + 2] = (_c = userObserver.complete) === null || _c === void 0 ? void 0 : _c.bind(userObserver);
        } else {
          validateArgType("Query.onSnapshot", "function", currArg, args[currArg]);
          validateOptionalArgType("Query.onSnapshot", "function", currArg + 1, args[currArg + 1]);
          validateOptionalArgType("Query.onSnapshot", "function", currArg + 2, args[currArg + 2]);
        }
        var observer = {
          next: function(snapshot) {
            if (args[currArg]) {
              args[currArg](new QuerySnapshot(_this.firestore, _this._query, snapshot, _this._converter));
            }
          },
          error: args[currArg + 1],
          complete: args[currArg + 2]
        };
        validateHasExplicitOrderByForLimitToLast(this._query);
        var firestoreClient = this.firestore.ensureClientConfigured();
        return firestoreClient.listen(this._query, options2, observer);
      };
      Query2.prototype.get = function(options2) {
        var _this = this;
        validateBetweenNumberOfArgs("Query.get", arguments, 0, 1);
        validateGetOptions("Query.get", options2);
        validateHasExplicitOrderByForLimitToLast(this._query);
        var firestoreClient = this.firestore.ensureClientConfigured();
        return (options2 && options2.source === "cache" ? firestoreClient.getDocumentsFromLocalCache(this._query) : firestoreClient.getDocumentsViaSnapshotListener(this._query, options2)).then(function(snap) {
          return new QuerySnapshot(_this.firestore, _this._query, snap, _this._converter);
        });
      };
      return Query2;
    }();
    var QuerySnapshot = function() {
      function QuerySnapshot2(_firestore, _originalQuery, _snapshot, _converter) {
        this._firestore = _firestore;
        this._originalQuery = _originalQuery;
        this._snapshot = _snapshot;
        this._converter = _converter;
        this._cachedChanges = null;
        this._cachedChangesIncludeMetadataChanges = null;
        this.metadata = new SnapshotMetadata(_snapshot.hasPendingWrites, _snapshot.fromCache);
      }
      Object.defineProperty(QuerySnapshot2.prototype, "docs", {
        get: function() {
          var result = [];
          this.forEach(function(doc) {
            return result.push(doc);
          });
          return result;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(QuerySnapshot2.prototype, "empty", {
        get: function() {
          return this._snapshot.docs.isEmpty();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(QuerySnapshot2.prototype, "size", {
        get: function() {
          return this._snapshot.docs.size;
        },
        enumerable: false,
        configurable: true
      });
      QuerySnapshot2.prototype.forEach = function(callback, thisArg) {
        var _this = this;
        validateBetweenNumberOfArgs("QuerySnapshot.forEach", arguments, 1, 2);
        validateArgType("QuerySnapshot.forEach", "function", 1, callback);
        this._snapshot.docs.forEach(function(doc) {
          callback.call(thisArg, _this.convertToDocumentImpl(doc, _this.metadata.fromCache, _this._snapshot.mutatedKeys.has(doc.key)));
        });
      };
      Object.defineProperty(QuerySnapshot2.prototype, "query", {
        get: function() {
          return new Query(this._originalQuery, this._firestore, this._converter);
        },
        enumerable: false,
        configurable: true
      });
      QuerySnapshot2.prototype.docChanges = function(options2) {
        if (options2) {
          validateOptionNames("QuerySnapshot.docChanges", options2, [
            "includeMetadataChanges"
          ]);
          validateNamedOptionalType("QuerySnapshot.docChanges", "boolean", "includeMetadataChanges", options2.includeMetadataChanges);
        }
        var includeMetadataChanges = !!(options2 && options2.includeMetadataChanges);
        if (includeMetadataChanges && this._snapshot.excludesMetadataChanges) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
        }
        if (!this._cachedChanges || this._cachedChangesIncludeMetadataChanges !== includeMetadataChanges) {
          this._cachedChanges = changesFromSnapshot(this._snapshot, includeMetadataChanges, this.convertToDocumentImpl.bind(this));
          this._cachedChangesIncludeMetadataChanges = includeMetadataChanges;
        }
        return this._cachedChanges;
      };
      QuerySnapshot2.prototype.isEqual = function(other) {
        if (!(other instanceof QuerySnapshot2)) {
          throw invalidClassError("isEqual", "QuerySnapshot", 1, other);
        }
        return this._firestore === other._firestore && queryEquals(this._originalQuery, other._originalQuery) && this._snapshot.isEqual(other._snapshot) && this._converter === other._converter;
      };
      QuerySnapshot2.prototype.convertToDocumentImpl = function(doc, fromCache, hasPendingWrites) {
        return new QueryDocumentSnapshot(this._firestore, doc.key, doc, fromCache, hasPendingWrites, this._converter);
      };
      return QuerySnapshot2;
    }();
    var CollectionReference = function(_super) {
      tslib.__extends(CollectionReference2, _super);
      function CollectionReference2(_path, firestore, _converter) {
        var _this = _super.call(this, newQueryForPath(_path), firestore, _converter) || this;
        _this._path = _path;
        if (_path.length % 2 !== 1) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid collection reference. Collection references must have an odd number of segments, but " + (_path.canonicalString() + " has " + _path.length));
        }
        return _this;
      }
      Object.defineProperty(CollectionReference2.prototype, "id", {
        get: function() {
          return this._query.path.lastSegment();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(CollectionReference2.prototype, "parent", {
        get: function() {
          var parentPath = this._query.path.popLast();
          if (parentPath.isEmpty()) {
            return null;
          } else {
            return new DocumentReference(new DocumentKey(parentPath), this.firestore, null);
          }
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(CollectionReference2.prototype, "path", {
        get: function() {
          return this._query.path.canonicalString();
        },
        enumerable: false,
        configurable: true
      });
      CollectionReference2.prototype.doc = function(pathString) {
        validateBetweenNumberOfArgs("CollectionReference.doc", arguments, 0, 1);
        if (arguments.length === 0) {
          pathString = AutoId.newId();
        }
        validateArgType("CollectionReference.doc", "non-empty string", 1, pathString);
        var path2 = ResourcePath.fromString(pathString);
        return DocumentReference.forPath(this._query.path.child(path2), this.firestore, this._converter);
      };
      CollectionReference2.prototype.add = function(value) {
        validateExactNumberOfArgs("CollectionReference.add", arguments, 1);
        var convertedValue = this._converter ? this._converter.toFirestore(value) : value;
        validateArgType("CollectionReference.add", "object", 1, convertedValue);
        var docRef = this.doc();
        return new DocumentReference(docRef._key, this.firestore, null).set(convertedValue).then(function() {
          return docRef;
        });
      };
      CollectionReference2.prototype.withConverter = function(converter) {
        return new CollectionReference2(this._path, this.firestore, converter);
      };
      return CollectionReference2;
    }(Query);
    function validateSetOptions(methodName, options2) {
      if (options2 === void 0) {
        return {
          merge: false
        };
      }
      validateOptionNames(methodName, options2, ["merge", "mergeFields"]);
      validateNamedOptionalType(methodName, "boolean", "merge", options2.merge);
      validateOptionalArrayElements(methodName, "mergeFields", "a string or a FieldPath", options2.mergeFields, function(element) {
        return typeof element === "string" || element instanceof FieldPath$1;
      });
      if (options2.mergeFields !== void 0 && options2.merge !== void 0) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid options passed to function " + methodName + '(): You cannot specify both "merge" and "mergeFields".');
      }
      return options2;
    }
    function validateSnapshotOptions(methodName, options2) {
      if (options2 === void 0) {
        return {};
      }
      validateOptionNames(methodName, options2, ["serverTimestamps"]);
      validateNamedOptionalPropertyEquals(methodName, "options", "serverTimestamps", options2.serverTimestamps, ["estimate", "previous", "none"]);
      return options2;
    }
    function validateGetOptions(methodName, options2) {
      validateOptionalArgType(methodName, "object", 1, options2);
      if (options2) {
        validateOptionNames(methodName, options2, ["source"]);
        validateNamedOptionalPropertyEquals(methodName, "options", "source", options2.source, ["default", "server", "cache"]);
      }
    }
    function validateReference(methodName, documentRef, firestore) {
      if (!(documentRef instanceof _DocumentKeyReference)) {
        throw invalidClassError(methodName, "DocumentReference", 1, documentRef);
      } else if (documentRef.firestore !== firestore) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Provided document reference is from a different Firestore instance.");
      } else {
        return documentRef;
      }
    }
    function changesFromSnapshot(snapshot, includeMetadataChanges, converter) {
      if (snapshot.oldDocs.isEmpty()) {
        var lastDoc_1;
        var index_1 = 0;
        return snapshot.docChanges.map(function(change) {
          var doc = converter(change.doc, snapshot.fromCache, snapshot.mutatedKeys.has(change.doc.key));
          lastDoc_1 = change.doc;
          return {
            type: "added",
            doc,
            oldIndex: -1,
            newIndex: index_1++
          };
        });
      } else {
        var indexTracker_1 = snapshot.oldDocs;
        return snapshot.docChanges.filter(function(change) {
          return includeMetadataChanges || change.type !== 3;
        }).map(function(change) {
          var doc = converter(change.doc, snapshot.fromCache, snapshot.mutatedKeys.has(change.doc.key));
          var oldIndex = -1;
          var newIndex = -1;
          if (change.type !== 0) {
            oldIndex = indexTracker_1.indexOf(change.doc.key);
            indexTracker_1 = indexTracker_1.delete(change.doc.key);
          }
          if (change.type !== 1) {
            indexTracker_1 = indexTracker_1.add(change.doc);
            newIndex = indexTracker_1.indexOf(change.doc.key);
          }
          return { type: resultChangeType(change.type), doc, oldIndex, newIndex };
        });
      }
    }
    function resultChangeType(type) {
      switch (type) {
        case 0:
          return "added";
        case 2:
        case 3:
          return "modified";
        case 1:
          return "removed";
        default:
          return fail();
      }
    }
    function applyFirestoreDataConverter(converter, value, options2) {
      var convertedValue;
      if (converter) {
        if (options2 && (options2.merge || options2.mergeFields)) {
          convertedValue = converter.toFirestore(value, options2);
        } else {
          convertedValue = converter.toFirestore(value);
        }
      } else {
        convertedValue = value;
      }
      return convertedValue;
    }
    function contains(obj, key) {
      return Object.prototype.hasOwnProperty.call(obj, key);
    }
    var name2 = "@firebase/firestore";
    var version$1 = "1.18.0";
    var FieldValue$1 = function(_super) {
      tslib.__extends(FieldValue$12, _super);
      function FieldValue$12() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      FieldValue$12.serverTimestamp = function() {
        validateNoArgs("FieldValue.serverTimestamp", arguments);
        var delegate = serverTimestamp$1();
        delegate._methodName = "FieldValue.serverTimestamp";
        return new FieldValue$12(delegate);
      };
      FieldValue$12.delete = function() {
        validateNoArgs("FieldValue.delete", arguments);
        var delegate = deleteField();
        delegate._methodName = "FieldValue.delete";
        return new FieldValue$12(delegate);
      };
      FieldValue$12.arrayUnion = function() {
        var elements = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          elements[_i] = arguments[_i];
        }
        validateAtLeastNumberOfArgs("FieldValue.arrayUnion", arguments, 1);
        var delegate = arrayUnion.apply(void 0, elements);
        delegate._methodName = "FieldValue.arrayUnion";
        return new FieldValue$12(delegate);
      };
      FieldValue$12.arrayRemove = function() {
        var elements = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          elements[_i] = arguments[_i];
        }
        validateAtLeastNumberOfArgs("FieldValue.arrayRemove", arguments, 1);
        var delegate = arrayRemove.apply(void 0, elements);
        delegate._methodName = "FieldValue.arrayRemove";
        return new FieldValue$12(delegate);
      };
      FieldValue$12.increment = function(n) {
        validateArgType("FieldValue.increment", "number", 1, n);
        validateExactNumberOfArgs("FieldValue.increment", arguments, 1);
        var delegate = increment(n);
        delegate._methodName = "FieldValue.increment";
        return new FieldValue$12(delegate);
      };
      FieldValue$12.prototype.isEqual = function(other) {
        return this._delegate.isEqual(other._delegate);
      };
      return FieldValue$12;
    }(Compat);
    var firestoreNamespace = {
      Firestore,
      GeoPoint,
      Timestamp,
      Blob: Blob2,
      Transaction: Transaction$1,
      WriteBatch,
      DocumentReference,
      DocumentSnapshot,
      Query,
      QueryDocumentSnapshot,
      QuerySnapshot,
      CollectionReference,
      FieldPath: FieldPath$1,
      FieldValue: FieldValue$1,
      setLogLevel: Firestore.setLogLevel,
      CACHE_SIZE_UNLIMITED
    };
    function configureForFirebase(firebase2, firestoreFactory) {
      firebase2.INTERNAL.registerComponent(new component.Component("firestore", function(container) {
        var app = container.getProvider("app").getImmediate();
        return firestoreFactory(app, container.getProvider("auth-internal"));
      }, "PUBLIC").setServiceProps(Object.assign({}, firestoreNamespace)));
    }
    function registerFirestore(instance) {
      configureForFirebase(instance, function(app, auth) {
        var onlineComponentProvider = new OnlineComponentProvider();
        var offlineComponentProvider = new MultiTabOfflineComponentProvider(onlineComponentProvider);
        return new Firestore(app, auth, offlineComponentProvider, onlineComponentProvider);
      });
      instance.registerVersion(name2, version$1, "node");
    }
    registerFirestore(firebase__default["default"]);
    exports2.registerFirestore = registerFirestore;
  }
});

// .svelte-kit/vercel/entry.js
__export(exports, {
  default: () => entry_default
});
init_shims();

// node_modules/@sveltejs/kit/dist/node.js
init_shims();
function getRawBody(req) {
  return new Promise((fulfil, reject) => {
    const h = req.headers;
    if (!h["content-type"]) {
      return fulfil(null);
    }
    req.on("error", reject);
    const length = Number(h["content-length"]);
    if (isNaN(length) && h["transfer-encoding"] == null) {
      return fulfil(null);
    }
    let data = new Uint8Array(length || 0);
    if (length > 0) {
      let offset = 0;
      req.on("data", (chunk) => {
        const new_len = offset + Buffer.byteLength(chunk);
        if (new_len > length) {
          return reject({
            status: 413,
            reason: 'Exceeded "Content-Length" limit'
          });
        }
        data.set(chunk, offset);
        offset = new_len;
      });
    } else {
      req.on("data", (chunk) => {
        const new_data = new Uint8Array(data.length + chunk.length);
        new_data.set(data, 0);
        new_data.set(chunk, data.length);
        data = new_data;
      });
    }
    req.on("end", () => {
      fulfil(data);
    });
  });
}

// .svelte-kit/output/server/app.js
init_shims();
var import_cookie = __toModule(require_cookie());

// node_modules/@lukeed/uuid/dist/index.mjs
init_shims();
var IDX = 256;
var HEX = [];
var BUFFER;
while (IDX--)
  HEX[IDX] = (IDX + 256).toString(16).substring(1);
function v4() {
  var i = 0, num, out = "";
  if (!BUFFER || IDX + 16 > 256) {
    BUFFER = Array(i = 256);
    while (i--)
      BUFFER[i] = 256 * Math.random() | 0;
    i = IDX = 0;
  }
  for (; i < 16; i++) {
    num = BUFFER[IDX + i];
    if (i == 6)
      out += HEX[num & 15 | 64];
    else if (i == 8)
      out += HEX[num & 63 | 128];
    else
      out += HEX[num];
    if (i & 1 && i > 1 && i < 11)
      out += "-";
  }
  IDX++;
  return out;
}

// .svelte-kit/output/server/app.js
var import_typed = __toModule(require_typed());
var import_index_cjs = __toModule(require_index_cjs3());

// node_modules/firebase/firestore/dist/index.cjs.js
init_shims();
"use strict";
require_index_node_cjs3();

// .svelte-kit/output/server/app.js
var __require2 = typeof require !== "undefined" ? require : (x) => {
  throw new Error('Dynamic require of "' + x + '" is not supported');
};
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
var _map;
function get_single_valued_header(headers, key) {
  const value = headers[key];
  if (Array.isArray(value)) {
    if (value.length === 0) {
      return void 0;
    }
    if (value.length > 1) {
      throw new Error(`Multiple headers provided for ${key}. Multiple may be provided only for set-cookie`);
    }
    return value[0];
  }
  return value;
}
function lowercase_keys(obj) {
  const clone2 = {};
  for (const key in obj) {
    clone2[key.toLowerCase()] = obj[key];
  }
  return clone2;
}
function error$1(body) {
  return {
    status: 500,
    body,
    headers: {}
  };
}
function is_string(s2) {
  return typeof s2 === "string" || s2 instanceof String;
}
function is_content_type_textual(content_type) {
  if (!content_type)
    return true;
  const [type] = content_type.split(";");
  return type === "text/plain" || type === "application/json" || type === "application/x-www-form-urlencoded" || type === "multipart/form-data";
}
async function render_endpoint(request, route, match) {
  const mod2 = await route.load();
  const handler = mod2[request.method.toLowerCase().replace("delete", "del")];
  if (!handler) {
    return;
  }
  const params = route.params(match);
  const response = await handler({ ...request, params });
  const preface = `Invalid response from route ${request.path}`;
  if (!response) {
    return;
  }
  if (typeof response !== "object") {
    return error$1(`${preface}: expected an object, got ${typeof response}`);
  }
  let { status = 200, body, headers = {} } = response;
  headers = lowercase_keys(headers);
  const type = get_single_valued_header(headers, "content-type");
  const is_type_textual = is_content_type_textual(type);
  if (!is_type_textual && !(body instanceof Uint8Array || is_string(body))) {
    return error$1(`${preface}: body must be an instance of string or Uint8Array if content-type is not a supported textual content-type`);
  }
  let normalized_body;
  if ((typeof body === "object" || typeof body === "undefined") && !(body instanceof Uint8Array) && (!type || type.startsWith("application/json"))) {
    headers = { ...headers, "content-type": "application/json; charset=utf-8" };
    normalized_body = JSON.stringify(typeof body === "undefined" ? {} : body);
  } else {
    normalized_body = body;
  }
  return { status, body: normalized_body, headers };
}
var chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_$";
var unsafeChars = /[<>\b\f\n\r\t\0\u2028\u2029]/g;
var reserved = /^(?:do|if|in|for|int|let|new|try|var|byte|case|char|else|enum|goto|long|this|void|with|await|break|catch|class|const|final|float|short|super|throw|while|yield|delete|double|export|import|native|return|switch|throws|typeof|boolean|default|extends|finally|package|private|abstract|continue|debugger|function|volatile|interface|protected|transient|implements|instanceof|synchronized)$/;
var escaped$1 = {
  "<": "\\u003C",
  ">": "\\u003E",
  "/": "\\u002F",
  "\\": "\\\\",
  "\b": "\\b",
  "\f": "\\f",
  "\n": "\\n",
  "\r": "\\r",
  "	": "\\t",
  "\0": "\\0",
  "\u2028": "\\u2028",
  "\u2029": "\\u2029"
};
var objectProtoOwnPropertyNames = Object.getOwnPropertyNames(Object.prototype).sort().join("\0");
function devalue(value) {
  var counts = new Map();
  function walk(thing) {
    if (typeof thing === "function") {
      throw new Error("Cannot stringify a function");
    }
    if (counts.has(thing)) {
      counts.set(thing, counts.get(thing) + 1);
      return;
    }
    counts.set(thing, 1);
    if (!isPrimitive(thing)) {
      var type = getType(thing);
      switch (type) {
        case "Number":
        case "String":
        case "Boolean":
        case "Date":
        case "RegExp":
          return;
        case "Array":
          thing.forEach(walk);
          break;
        case "Set":
        case "Map":
          Array.from(thing).forEach(walk);
          break;
        default:
          var proto = Object.getPrototypeOf(thing);
          if (proto !== Object.prototype && proto !== null && Object.getOwnPropertyNames(proto).sort().join("\0") !== objectProtoOwnPropertyNames) {
            throw new Error("Cannot stringify arbitrary non-POJOs");
          }
          if (Object.getOwnPropertySymbols(thing).length > 0) {
            throw new Error("Cannot stringify POJOs with symbolic keys");
          }
          Object.keys(thing).forEach(function(key) {
            return walk(thing[key]);
          });
      }
    }
  }
  walk(value);
  var names = new Map();
  Array.from(counts).filter(function(entry) {
    return entry[1] > 1;
  }).sort(function(a, b) {
    return b[1] - a[1];
  }).forEach(function(entry, i) {
    names.set(entry[0], getName(i));
  });
  function stringify(thing) {
    if (names.has(thing)) {
      return names.get(thing);
    }
    if (isPrimitive(thing)) {
      return stringifyPrimitive(thing);
    }
    var type = getType(thing);
    switch (type) {
      case "Number":
      case "String":
      case "Boolean":
        return "Object(" + stringify(thing.valueOf()) + ")";
      case "RegExp":
        return "new RegExp(" + stringifyString(thing.source) + ', "' + thing.flags + '")';
      case "Date":
        return "new Date(" + thing.getTime() + ")";
      case "Array":
        var members = thing.map(function(v, i) {
          return i in thing ? stringify(v) : "";
        });
        var tail = thing.length === 0 || thing.length - 1 in thing ? "" : ",";
        return "[" + members.join(",") + tail + "]";
      case "Set":
      case "Map":
        return "new " + type + "([" + Array.from(thing).map(stringify).join(",") + "])";
      default:
        var obj = "{" + Object.keys(thing).map(function(key) {
          return safeKey(key) + ":" + stringify(thing[key]);
        }).join(",") + "}";
        var proto = Object.getPrototypeOf(thing);
        if (proto === null) {
          return Object.keys(thing).length > 0 ? "Object.assign(Object.create(null)," + obj + ")" : "Object.create(null)";
        }
        return obj;
    }
  }
  var str = stringify(value);
  if (names.size) {
    var params_1 = [];
    var statements_1 = [];
    var values_1 = [];
    names.forEach(function(name2, thing) {
      params_1.push(name2);
      if (isPrimitive(thing)) {
        values_1.push(stringifyPrimitive(thing));
        return;
      }
      var type = getType(thing);
      switch (type) {
        case "Number":
        case "String":
        case "Boolean":
          values_1.push("Object(" + stringify(thing.valueOf()) + ")");
          break;
        case "RegExp":
          values_1.push(thing.toString());
          break;
        case "Date":
          values_1.push("new Date(" + thing.getTime() + ")");
          break;
        case "Array":
          values_1.push("Array(" + thing.length + ")");
          thing.forEach(function(v, i) {
            statements_1.push(name2 + "[" + i + "]=" + stringify(v));
          });
          break;
        case "Set":
          values_1.push("new Set");
          statements_1.push(name2 + "." + Array.from(thing).map(function(v) {
            return "add(" + stringify(v) + ")";
          }).join("."));
          break;
        case "Map":
          values_1.push("new Map");
          statements_1.push(name2 + "." + Array.from(thing).map(function(_a) {
            var k = _a[0], v = _a[1];
            return "set(" + stringify(k) + ", " + stringify(v) + ")";
          }).join("."));
          break;
        default:
          values_1.push(Object.getPrototypeOf(thing) === null ? "Object.create(null)" : "{}");
          Object.keys(thing).forEach(function(key) {
            statements_1.push("" + name2 + safeProp(key) + "=" + stringify(thing[key]));
          });
      }
    });
    statements_1.push("return " + str);
    return "(function(" + params_1.join(",") + "){" + statements_1.join(";") + "}(" + values_1.join(",") + "))";
  } else {
    return str;
  }
}
function getName(num) {
  var name2 = "";
  do {
    name2 = chars[num % chars.length] + name2;
    num = ~~(num / chars.length) - 1;
  } while (num >= 0);
  return reserved.test(name2) ? name2 + "_" : name2;
}
function isPrimitive(thing) {
  return Object(thing) !== thing;
}
function stringifyPrimitive(thing) {
  if (typeof thing === "string")
    return stringifyString(thing);
  if (thing === void 0)
    return "void 0";
  if (thing === 0 && 1 / thing < 0)
    return "-0";
  var str = String(thing);
  if (typeof thing === "number")
    return str.replace(/^(-)?0\./, "$1.");
  return str;
}
function getType(thing) {
  return Object.prototype.toString.call(thing).slice(8, -1);
}
function escapeUnsafeChar(c) {
  return escaped$1[c] || c;
}
function escapeUnsafeChars(str) {
  return str.replace(unsafeChars, escapeUnsafeChar);
}
function safeKey(key) {
  return /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key) ? key : escapeUnsafeChars(JSON.stringify(key));
}
function safeProp(key) {
  return /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key) ? "." + key : "[" + escapeUnsafeChars(JSON.stringify(key)) + "]";
}
function stringifyString(str) {
  var result = '"';
  for (var i = 0; i < str.length; i += 1) {
    var char = str.charAt(i);
    var code = char.charCodeAt(0);
    if (char === '"') {
      result += '\\"';
    } else if (char in escaped$1) {
      result += escaped$1[char];
    } else if (code >= 55296 && code <= 57343) {
      var next = str.charCodeAt(i + 1);
      if (code <= 56319 && (next >= 56320 && next <= 57343)) {
        result += char + str[++i];
      } else {
        result += "\\u" + code.toString(16).toUpperCase();
      }
    } else {
      result += char;
    }
  }
  result += '"';
  return result;
}
function noop$1() {
}
function safe_not_equal$1(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
}
Promise.resolve();
var subscriber_queue$1 = [];
function writable$1(value, start = noop$1) {
  let stop;
  const subscribers = new Set();
  function set(new_value) {
    if (safe_not_equal$1(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue$1.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue$1.push(subscriber, value);
        }
        if (run_queue) {
          for (let i = 0; i < subscriber_queue$1.length; i += 2) {
            subscriber_queue$1[i][0](subscriber_queue$1[i + 1]);
          }
          subscriber_queue$1.length = 0;
        }
      }
    }
  }
  function update(fn) {
    set(fn(value));
  }
  function subscribe2(run2, invalidate = noop$1) {
    const subscriber = [run2, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop = start(set) || noop$1;
    }
    run2(value);
    return () => {
      subscribers.delete(subscriber);
      if (subscribers.size === 0) {
        stop();
        stop = null;
      }
    };
  }
  return { set, update, subscribe: subscribe2 };
}
function hash(value) {
  let hash2 = 5381;
  let i = value.length;
  if (typeof value === "string") {
    while (i)
      hash2 = hash2 * 33 ^ value.charCodeAt(--i);
  } else {
    while (i)
      hash2 = hash2 * 33 ^ value[--i];
  }
  return (hash2 >>> 0).toString(36);
}
var s$1 = JSON.stringify;
async function render_response({
  branch,
  options: options2,
  $session,
  page_config,
  status,
  error: error2,
  page
}) {
  const css2 = new Set(options2.entry.css);
  const js = new Set(options2.entry.js);
  const styles = new Set();
  const serialized_data = [];
  let rendered;
  let is_private = false;
  let maxage;
  if (error2) {
    error2.stack = options2.get_stack(error2);
  }
  if (page_config.ssr) {
    branch.forEach(({ node, loaded, fetched, uses_credentials }) => {
      if (node.css)
        node.css.forEach((url) => css2.add(url));
      if (node.js)
        node.js.forEach((url) => js.add(url));
      if (node.styles)
        node.styles.forEach((content) => styles.add(content));
      if (fetched && page_config.hydrate)
        serialized_data.push(...fetched);
      if (uses_credentials)
        is_private = true;
      maxage = loaded.maxage;
    });
    const session = writable$1($session);
    const props = {
      stores: {
        page: writable$1(null),
        navigating: writable$1(null),
        session
      },
      page,
      components: branch.map(({ node }) => node.module.default)
    };
    for (let i = 0; i < branch.length; i += 1) {
      props[`props_${i}`] = await branch[i].loaded.props;
    }
    let session_tracking_active = false;
    const unsubscribe = session.subscribe(() => {
      if (session_tracking_active)
        is_private = true;
    });
    session_tracking_active = true;
    try {
      rendered = options2.root.render(props);
    } finally {
      unsubscribe();
    }
  } else {
    rendered = { head: "", html: "", css: { code: "", map: null } };
  }
  const include_js = page_config.router || page_config.hydrate;
  if (!include_js)
    js.clear();
  const links = options2.amp ? styles.size > 0 || rendered.css.code.length > 0 ? `<style amp-custom>${Array.from(styles).concat(rendered.css.code).join("\n")}</style>` : "" : [
    ...Array.from(js).map((dep) => `<link rel="modulepreload" href="${dep}">`),
    ...Array.from(css2).map((dep) => `<link rel="stylesheet" href="${dep}">`)
  ].join("\n		");
  let init2 = "";
  if (options2.amp) {
    init2 = `
		<style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style>
		<noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>
		<script async src="https://cdn.ampproject.org/v0.js"><\/script>`;
  } else if (include_js) {
    init2 = `<script type="module">
			import { start } from ${s$1(options2.entry.file)};
			start({
				target: ${options2.target ? `document.querySelector(${s$1(options2.target)})` : "document.body"},
				paths: ${s$1(options2.paths)},
				session: ${try_serialize($session, (error3) => {
      throw new Error(`Failed to serialize session data: ${error3.message}`);
    })},
				host: ${page && page.host ? s$1(page.host) : "location.host"},
				route: ${!!page_config.router},
				spa: ${!page_config.ssr},
				trailing_slash: ${s$1(options2.trailing_slash)},
				hydrate: ${page_config.ssr && page_config.hydrate ? `{
					status: ${status},
					error: ${serialize_error(error2)},
					nodes: [
						${(branch || []).map(({ node }) => `import(${s$1(node.entry)})`).join(",\n						")}
					],
					page: {
						host: ${page && page.host ? s$1(page.host) : "location.host"}, // TODO this is redundant
						path: ${s$1(page && page.path)},
						query: new URLSearchParams(${page ? s$1(page.query.toString()) : ""}),
						params: ${page && s$1(page.params)}
					}
				}` : "null"}
			});
		<\/script>`;
  }
  if (options2.service_worker) {
    init2 += `<script>
			if ('serviceWorker' in navigator) {
				navigator.serviceWorker.register('${options2.service_worker}');
			}
		<\/script>`;
  }
  const head = [
    rendered.head,
    styles.size && !options2.amp ? `<style data-svelte>${Array.from(styles).join("\n")}</style>` : "",
    links,
    init2
  ].join("\n\n		");
  const body = options2.amp ? rendered.html : `${rendered.html}

			${serialized_data.map(({ url, body: body2, json }) => {
    let attributes = `type="application/json" data-type="svelte-data" data-url="${url}"`;
    if (body2)
      attributes += ` data-body="${hash(body2)}"`;
    return `<script ${attributes}>${json}<\/script>`;
  }).join("\n\n	")}
		`;
  const headers = {
    "content-type": "text/html"
  };
  if (maxage) {
    headers["cache-control"] = `${is_private ? "private" : "public"}, max-age=${maxage}`;
  }
  if (!options2.floc) {
    headers["permissions-policy"] = "interest-cohort=()";
  }
  return {
    status,
    headers,
    body: options2.template({ head, body })
  };
}
function try_serialize(data, fail) {
  try {
    return devalue(data);
  } catch (err) {
    if (fail)
      fail(err);
    return null;
  }
}
function serialize_error(error2) {
  if (!error2)
    return null;
  let serialized = try_serialize(error2);
  if (!serialized) {
    const { name: name2, message, stack } = error2;
    serialized = try_serialize({ ...error2, name: name2, message, stack });
  }
  if (!serialized) {
    serialized = "{}";
  }
  return serialized;
}
function normalize(loaded) {
  const has_error_status = loaded.status && loaded.status >= 400 && loaded.status <= 599 && !loaded.redirect;
  if (loaded.error || has_error_status) {
    const status = loaded.status;
    if (!loaded.error && has_error_status) {
      return {
        status: status || 500,
        error: new Error()
      };
    }
    const error2 = typeof loaded.error === "string" ? new Error(loaded.error) : loaded.error;
    if (!(error2 instanceof Error)) {
      return {
        status: 500,
        error: new Error(`"error" property returned from load() must be a string or instance of Error, received type "${typeof error2}"`)
      };
    }
    if (!status || status < 400 || status > 599) {
      console.warn('"error" returned from load() without a valid status code \u2014 defaulting to 500');
      return { status: 500, error: error2 };
    }
    return { status, error: error2 };
  }
  if (loaded.redirect) {
    if (!loaded.status || Math.floor(loaded.status / 100) !== 3) {
      return {
        status: 500,
        error: new Error('"redirect" property returned from load() must be accompanied by a 3xx status code')
      };
    }
    if (typeof loaded.redirect !== "string") {
      return {
        status: 500,
        error: new Error('"redirect" property returned from load() must be a string')
      };
    }
  }
  return loaded;
}
var s = JSON.stringify;
async function load_node({
  request,
  options: options2,
  state,
  route,
  page,
  node,
  $session,
  context,
  prerender_enabled,
  is_leaf,
  is_error,
  status,
  error: error2
}) {
  const { module: module2 } = node;
  let uses_credentials = false;
  const fetched = [];
  let set_cookie_headers = [];
  let loaded;
  const page_proxy = new Proxy(page, {
    get: (target, prop, receiver) => {
      if (prop === "query" && prerender_enabled) {
        throw new Error("Cannot access query on a page with prerendering enabled");
      }
      return Reflect.get(target, prop, receiver);
    }
  });
  if (module2.load) {
    const load_input = {
      page: page_proxy,
      get session() {
        uses_credentials = true;
        return $session;
      },
      fetch: async (resource, opts = {}) => {
        let url;
        if (typeof resource === "string") {
          url = resource;
        } else {
          url = resource.url;
          opts = {
            method: resource.method,
            headers: resource.headers,
            body: resource.body,
            mode: resource.mode,
            credentials: resource.credentials,
            cache: resource.cache,
            redirect: resource.redirect,
            referrer: resource.referrer,
            integrity: resource.integrity,
            ...opts
          };
        }
        const resolved = resolve(request.path, url.split("?")[0]);
        let response;
        const filename = resolved.replace(options2.paths.assets, "").slice(1);
        const filename_html = `${filename}/index.html`;
        const asset = options2.manifest.assets.find((d) => d.file === filename || d.file === filename_html);
        if (asset) {
          response = options2.read ? new Response(options2.read(asset.file), {
            headers: asset.type ? { "content-type": asset.type } : {}
          }) : await fetch(`http://${page.host}/${asset.file}`, opts);
        } else if (resolved.startsWith("/") && !resolved.startsWith("//")) {
          const relative = resolved;
          const headers = {
            ...opts.headers
          };
          if (opts.credentials !== "omit") {
            uses_credentials = true;
            headers.cookie = request.headers.cookie;
            if (!headers.authorization) {
              headers.authorization = request.headers.authorization;
            }
          }
          if (opts.body && typeof opts.body !== "string") {
            throw new Error("Request body must be a string");
          }
          const search = url.includes("?") ? url.slice(url.indexOf("?") + 1) : "";
          const rendered = await respond({
            host: request.host,
            method: opts.method || "GET",
            headers,
            path: relative,
            rawBody: opts.body == null ? null : new TextEncoder().encode(opts.body),
            query: new URLSearchParams(search)
          }, options2, {
            fetched: url,
            initiator: route
          });
          if (rendered) {
            if (state.prerender) {
              state.prerender.dependencies.set(relative, rendered);
            }
            response = new Response(rendered.body, {
              status: rendered.status,
              headers: rendered.headers
            });
          }
        } else {
          if (resolved.startsWith("//")) {
            throw new Error(`Cannot request protocol-relative URL (${url}) in server-side fetch`);
          }
          if (typeof request.host !== "undefined") {
            const { hostname: fetch_hostname } = new URL(url);
            const [server_hostname] = request.host.split(":");
            if (`.${fetch_hostname}`.endsWith(`.${server_hostname}`) && opts.credentials !== "omit") {
              uses_credentials = true;
              opts.headers = {
                ...opts.headers,
                cookie: request.headers.cookie
              };
            }
          }
          const external_request = new Request(url, opts);
          response = await options2.hooks.externalFetch.call(null, external_request);
        }
        if (response) {
          const proxy = new Proxy(response, {
            get(response2, key, receiver) {
              async function text() {
                const body = await response2.text();
                const headers = {};
                for (const [key2, value] of response2.headers) {
                  if (key2 === "set-cookie") {
                    set_cookie_headers = set_cookie_headers.concat(value);
                  } else if (key2 !== "etag") {
                    headers[key2] = value;
                  }
                }
                if (!opts.body || typeof opts.body === "string") {
                  fetched.push({
                    url,
                    body: opts.body,
                    json: `{"status":${response2.status},"statusText":${s(response2.statusText)},"headers":${s(headers)},"body":${escape$1(body)}}`
                  });
                }
                return body;
              }
              if (key === "text") {
                return text;
              }
              if (key === "json") {
                return async () => {
                  return JSON.parse(await text());
                };
              }
              return Reflect.get(response2, key, response2);
            }
          });
          return proxy;
        }
        return response || new Response("Not found", {
          status: 404
        });
      },
      context: { ...context }
    };
    if (is_error) {
      load_input.status = status;
      load_input.error = error2;
    }
    loaded = await module2.load.call(null, load_input);
  } else {
    loaded = {};
  }
  if (!loaded && is_leaf && !is_error)
    return;
  if (!loaded) {
    throw new Error(`${node.entry} - load must return a value except for page fall through`);
  }
  return {
    node,
    loaded: normalize(loaded),
    context: loaded.context || context,
    fetched,
    set_cookie_headers,
    uses_credentials
  };
}
var escaped$2 = {
  "<": "\\u003C",
  ">": "\\u003E",
  "/": "\\u002F",
  "\\": "\\\\",
  "\b": "\\b",
  "\f": "\\f",
  "\n": "\\n",
  "\r": "\\r",
  "	": "\\t",
  "\0": "\\0",
  "\u2028": "\\u2028",
  "\u2029": "\\u2029"
};
function escape$1(str) {
  let result = '"';
  for (let i = 0; i < str.length; i += 1) {
    const char = str.charAt(i);
    const code = char.charCodeAt(0);
    if (char === '"') {
      result += '\\"';
    } else if (char in escaped$2) {
      result += escaped$2[char];
    } else if (code >= 55296 && code <= 57343) {
      const next = str.charCodeAt(i + 1);
      if (code <= 56319 && next >= 56320 && next <= 57343) {
        result += char + str[++i];
      } else {
        result += `\\u${code.toString(16).toUpperCase()}`;
      }
    } else {
      result += char;
    }
  }
  result += '"';
  return result;
}
var absolute = /^([a-z]+:)?\/?\//;
function resolve(base2, path) {
  const base_match = absolute.exec(base2);
  const path_match = absolute.exec(path);
  if (!base_match) {
    throw new Error(`bad base path: "${base2}"`);
  }
  const baseparts = path_match ? [] : base2.slice(base_match[0].length).split("/");
  const pathparts = path_match ? path.slice(path_match[0].length).split("/") : path.split("/");
  baseparts.pop();
  for (let i = 0; i < pathparts.length; i += 1) {
    const part = pathparts[i];
    if (part === ".")
      continue;
    else if (part === "..")
      baseparts.pop();
    else
      baseparts.push(part);
  }
  const prefix = path_match && path_match[0] || base_match && base_match[0] || "";
  return `${prefix}${baseparts.join("/")}`;
}
function coalesce_to_error(err) {
  return err instanceof Error ? err : new Error(JSON.stringify(err));
}
async function respond_with_error({ request, options: options2, state, $session, status, error: error2 }) {
  const default_layout = await options2.load_component(options2.manifest.layout);
  const default_error = await options2.load_component(options2.manifest.error);
  const page = {
    host: request.host,
    path: request.path,
    query: request.query,
    params: {}
  };
  const loaded = await load_node({
    request,
    options: options2,
    state,
    route: null,
    page,
    node: default_layout,
    $session,
    context: {},
    prerender_enabled: is_prerender_enabled(options2, default_error, state),
    is_leaf: false,
    is_error: false
  });
  const branch = [
    loaded,
    await load_node({
      request,
      options: options2,
      state,
      route: null,
      page,
      node: default_error,
      $session,
      context: loaded ? loaded.context : {},
      prerender_enabled: is_prerender_enabled(options2, default_error, state),
      is_leaf: false,
      is_error: true,
      status,
      error: error2
    })
  ];
  try {
    return await render_response({
      options: options2,
      $session,
      page_config: {
        hydrate: options2.hydrate,
        router: options2.router,
        ssr: options2.ssr
      },
      status,
      error: error2,
      branch,
      page
    });
  } catch (err) {
    const error3 = coalesce_to_error(err);
    options2.handle_error(error3, request);
    return {
      status: 500,
      headers: {},
      body: error3.stack
    };
  }
}
function is_prerender_enabled(options2, node, state) {
  return options2.prerender && (!!node.module.prerender || !!state.prerender && state.prerender.all);
}
async function respond$1(opts) {
  const { request, options: options2, state, $session, route } = opts;
  let nodes;
  try {
    nodes = await Promise.all(route.a.map((id2) => id2 ? options2.load_component(id2) : void 0));
  } catch (err) {
    const error3 = coalesce_to_error(err);
    options2.handle_error(error3, request);
    return await respond_with_error({
      request,
      options: options2,
      state,
      $session,
      status: 500,
      error: error3
    });
  }
  const leaf = nodes[nodes.length - 1].module;
  let page_config = get_page_config(leaf, options2);
  if (!leaf.prerender && state.prerender && !state.prerender.all) {
    return {
      status: 204,
      headers: {},
      body: ""
    };
  }
  let branch = [];
  let status = 200;
  let error2;
  let set_cookie_headers = [];
  ssr:
    if (page_config.ssr) {
      let context = {};
      for (let i = 0; i < nodes.length; i += 1) {
        const node = nodes[i];
        let loaded;
        if (node) {
          try {
            loaded = await load_node({
              ...opts,
              node,
              context,
              prerender_enabled: is_prerender_enabled(options2, node, state),
              is_leaf: i === nodes.length - 1,
              is_error: false
            });
            if (!loaded)
              return;
            set_cookie_headers = set_cookie_headers.concat(loaded.set_cookie_headers);
            if (loaded.loaded.redirect) {
              return with_cookies({
                status: loaded.loaded.status,
                headers: {
                  location: encodeURI(loaded.loaded.redirect)
                }
              }, set_cookie_headers);
            }
            if (loaded.loaded.error) {
              ({ status, error: error2 } = loaded.loaded);
            }
          } catch (err) {
            const e = coalesce_to_error(err);
            options2.handle_error(e, request);
            status = 500;
            error2 = e;
          }
          if (loaded && !error2) {
            branch.push(loaded);
          }
          if (error2) {
            while (i--) {
              if (route.b[i]) {
                const error_node = await options2.load_component(route.b[i]);
                let node_loaded;
                let j = i;
                while (!(node_loaded = branch[j])) {
                  j -= 1;
                }
                try {
                  const error_loaded = await load_node({
                    ...opts,
                    node: error_node,
                    context: node_loaded.context,
                    prerender_enabled: is_prerender_enabled(options2, error_node, state),
                    is_leaf: false,
                    is_error: true,
                    status,
                    error: error2
                  });
                  if (error_loaded.loaded.error) {
                    continue;
                  }
                  page_config = get_page_config(error_node.module, options2);
                  branch = branch.slice(0, j + 1).concat(error_loaded);
                  break ssr;
                } catch (err) {
                  const e = coalesce_to_error(err);
                  options2.handle_error(e, request);
                  continue;
                }
              }
            }
            return with_cookies(await respond_with_error({
              request,
              options: options2,
              state,
              $session,
              status,
              error: error2
            }), set_cookie_headers);
          }
        }
        if (loaded && loaded.loaded.context) {
          context = {
            ...context,
            ...loaded.loaded.context
          };
        }
      }
    }
  try {
    return with_cookies(await render_response({
      ...opts,
      page_config,
      status,
      error: error2,
      branch: branch.filter(Boolean)
    }), set_cookie_headers);
  } catch (err) {
    const error3 = coalesce_to_error(err);
    options2.handle_error(error3, request);
    return with_cookies(await respond_with_error({
      ...opts,
      status: 500,
      error: error3
    }), set_cookie_headers);
  }
}
function get_page_config(leaf, options2) {
  return {
    ssr: "ssr" in leaf ? !!leaf.ssr : options2.ssr,
    router: "router" in leaf ? !!leaf.router : options2.router,
    hydrate: "hydrate" in leaf ? !!leaf.hydrate : options2.hydrate
  };
}
function with_cookies(response, set_cookie_headers) {
  if (set_cookie_headers.length) {
    response.headers["set-cookie"] = set_cookie_headers;
  }
  return response;
}
async function render_page(request, route, match, options2, state) {
  if (state.initiator === route) {
    return {
      status: 404,
      headers: {},
      body: `Not found: ${request.path}`
    };
  }
  const params = route.params(match);
  const page = {
    host: request.host,
    path: request.path,
    query: request.query,
    params
  };
  const $session = await options2.hooks.getSession(request);
  const response = await respond$1({
    request,
    options: options2,
    state,
    $session,
    route,
    page
  });
  if (response) {
    return response;
  }
  if (state.fetched) {
    return {
      status: 500,
      headers: {},
      body: `Bad request in load function: failed to fetch ${state.fetched}`
    };
  }
}
function read_only_form_data() {
  const map = new Map();
  return {
    append(key, value) {
      if (map.has(key)) {
        (map.get(key) || []).push(value);
      } else {
        map.set(key, [value]);
      }
    },
    data: new ReadOnlyFormData(map)
  };
}
var ReadOnlyFormData = class {
  constructor(map) {
    __privateAdd(this, _map, void 0);
    __privateSet(this, _map, map);
  }
  get(key) {
    const value = __privateGet(this, _map).get(key);
    return value && value[0];
  }
  getAll(key) {
    return __privateGet(this, _map).get(key);
  }
  has(key) {
    return __privateGet(this, _map).has(key);
  }
  *[Symbol.iterator]() {
    for (const [key, value] of __privateGet(this, _map)) {
      for (let i = 0; i < value.length; i += 1) {
        yield [key, value[i]];
      }
    }
  }
  *entries() {
    for (const [key, value] of __privateGet(this, _map)) {
      for (let i = 0; i < value.length; i += 1) {
        yield [key, value[i]];
      }
    }
  }
  *keys() {
    for (const [key] of __privateGet(this, _map))
      yield key;
  }
  *values() {
    for (const [, value] of __privateGet(this, _map)) {
      for (let i = 0; i < value.length; i += 1) {
        yield value[i];
      }
    }
  }
};
_map = new WeakMap();
function parse_body(raw, headers) {
  if (!raw)
    return raw;
  const content_type = headers["content-type"];
  const [type, ...directives] = content_type ? content_type.split(/;\s*/) : [];
  const text = () => new TextDecoder(headers["content-encoding"] || "utf-8").decode(raw);
  switch (type) {
    case "text/plain":
      return text();
    case "application/json":
      return JSON.parse(text());
    case "application/x-www-form-urlencoded":
      return get_urlencoded(text());
    case "multipart/form-data": {
      const boundary = directives.find((directive) => directive.startsWith("boundary="));
      if (!boundary)
        throw new Error("Missing boundary");
      return get_multipart(text(), boundary.slice("boundary=".length));
    }
    default:
      return raw;
  }
}
function get_urlencoded(text) {
  const { data, append } = read_only_form_data();
  text.replace(/\+/g, " ").split("&").forEach((str) => {
    const [key, value] = str.split("=");
    append(decodeURIComponent(key), decodeURIComponent(value));
  });
  return data;
}
function get_multipart(text, boundary) {
  const parts = text.split(`--${boundary}`);
  if (parts[0] !== "" || parts[parts.length - 1].trim() !== "--") {
    throw new Error("Malformed form data");
  }
  const { data, append } = read_only_form_data();
  parts.slice(1, -1).forEach((part) => {
    const match = /\s*([\s\S]+?)\r\n\r\n([\s\S]*)\s*/.exec(part);
    if (!match) {
      throw new Error("Malformed form data");
    }
    const raw_headers = match[1];
    const body = match[2].trim();
    let key;
    const headers = {};
    raw_headers.split("\r\n").forEach((str) => {
      const [raw_header, ...raw_directives] = str.split("; ");
      let [name2, value] = raw_header.split(": ");
      name2 = name2.toLowerCase();
      headers[name2] = value;
      const directives = {};
      raw_directives.forEach((raw_directive) => {
        const [name22, value2] = raw_directive.split("=");
        directives[name22] = JSON.parse(value2);
      });
      if (name2 === "content-disposition") {
        if (value !== "form-data")
          throw new Error("Malformed form data");
        if (directives.filename) {
          throw new Error("File upload is not yet implemented");
        }
        if (directives.name) {
          key = directives.name;
        }
      }
    });
    if (!key)
      throw new Error("Malformed form data");
    append(key, body);
  });
  return data;
}
async function respond(incoming, options2, state = {}) {
  if (incoming.path !== "/" && options2.trailing_slash !== "ignore") {
    const has_trailing_slash = incoming.path.endsWith("/");
    if (has_trailing_slash && options2.trailing_slash === "never" || !has_trailing_slash && options2.trailing_slash === "always" && !(incoming.path.split("/").pop() || "").includes(".")) {
      const path = has_trailing_slash ? incoming.path.slice(0, -1) : incoming.path + "/";
      const q = incoming.query.toString();
      return {
        status: 301,
        headers: {
          location: options2.paths.base + path + (q ? `?${q}` : "")
        }
      };
    }
  }
  const headers = lowercase_keys(incoming.headers);
  const request = {
    ...incoming,
    headers,
    body: parse_body(incoming.rawBody, headers),
    params: {},
    locals: {}
  };
  try {
    return await options2.hooks.handle({
      request,
      resolve: async (request2) => {
        if (state.prerender && state.prerender.fallback) {
          return await render_response({
            options: options2,
            $session: await options2.hooks.getSession(request2),
            page_config: { ssr: false, router: true, hydrate: true },
            status: 200,
            branch: []
          });
        }
        for (const route of options2.manifest.routes) {
          const match = route.pattern.exec(request2.path);
          if (!match)
            continue;
          const response = route.type === "endpoint" ? await render_endpoint(request2, route, match) : await render_page(request2, route, match, options2, state);
          if (response) {
            if (response.status === 200) {
              const cache_control = get_single_valued_header(response.headers, "cache-control");
              if (!cache_control || !/(no-store|immutable)/.test(cache_control)) {
                const etag = `"${hash(response.body || "")}"`;
                if (request2.headers["if-none-match"] === etag) {
                  return {
                    status: 304,
                    headers: {},
                    body: ""
                  };
                }
                response.headers["etag"] = etag;
              }
            }
            return response;
          }
        }
        const $session = await options2.hooks.getSession(request2);
        return await respond_with_error({
          request: request2,
          options: options2,
          state,
          $session,
          status: 404,
          error: new Error(`Not found: ${request2.path}`)
        });
      }
    });
  } catch (err) {
    const e = coalesce_to_error(err);
    options2.handle_error(e, request);
    return {
      status: 500,
      headers: {},
      body: options2.dev ? e.stack : e.message
    };
  }
}
function noop() {
}
function run(fn) {
  return fn();
}
function blank_object() {
  return Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
}
function subscribe(store, ...callbacks) {
  if (store == null) {
    return noop;
  }
  const unsub = store.subscribe(...callbacks);
  return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function compute_slots(slots) {
  const result = {};
  for (const key in slots) {
    result[key] = true;
  }
  return result;
}
function null_to_empty(value) {
  return value == null ? "" : value;
}
var current_component;
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component)
    throw new Error("Function called outside component initialization");
  return current_component;
}
function setContext(key, context) {
  get_current_component().$$.context.set(key, context);
}
Promise.resolve();
var escaped = {
  '"': "&quot;",
  "'": "&#39;",
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;"
};
function escape(html) {
  return String(html).replace(/["'&<>]/g, (match) => escaped[match]);
}
function each(items, fn) {
  let str = "";
  for (let i = 0; i < items.length; i += 1) {
    str += fn(items[i], i);
  }
  return str;
}
var missing_component = {
  $$render: () => ""
};
function validate_component(component, name2) {
  if (!component || !component.$$render) {
    if (name2 === "svelte:component")
      name2 += " this={...}";
    throw new Error(`<${name2}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);
  }
  return component;
}
var on_destroy;
function create_ssr_component(fn) {
  function $$render(result, props, bindings, slots, context) {
    const parent_component = current_component;
    const $$ = {
      on_destroy,
      context: new Map(parent_component ? parent_component.$$.context : context || []),
      on_mount: [],
      before_update: [],
      after_update: [],
      callbacks: blank_object()
    };
    set_current_component({ $$ });
    const html = fn(result, props, bindings, slots);
    set_current_component(parent_component);
    return html;
  }
  return {
    render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {
      on_destroy = [];
      const result = { title: "", head: "", css: new Set() };
      const html = $$render(result, props, {}, $$slots, context);
      run_all(on_destroy);
      return {
        html,
        css: {
          code: Array.from(result.css).map((css2) => css2.code).join("\n"),
          map: null
        },
        head: result.title + result.head
      };
    },
    $$render
  };
}
function add_attribute(name2, value, boolean) {
  if (value == null || boolean && !value)
    return "";
  return ` ${name2}${value === true ? "" : `=${typeof value === "string" ? JSON.stringify(escape(value)) : `"${value}"`}`}`;
}
function afterUpdate() {
}
var css$2 = {
  code: "#svelte-announcer.svelte-1pdgbjn{clip:rect(0 0 0 0);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;left:0;overflow:hidden;position:absolute;top:0;white-space:nowrap;width:1px}",
  map: `{"version":3,"file":"root.svelte","sources":["root.svelte"],"sourcesContent":["<!-- This file is generated by @sveltejs/kit \u2014 do not edit it! -->\\n<script>\\n\\timport { setContext, afterUpdate, onMount } from 'svelte';\\n\\n\\t// stores\\n\\texport let stores;\\n\\texport let page;\\n\\n\\texport let components;\\n\\texport let props_0 = null;\\n\\texport let props_1 = null;\\n\\texport let props_2 = null;\\n\\n\\tsetContext('__svelte__', stores);\\n\\n\\t$: stores.page.set(page);\\n\\tafterUpdate(stores.page.notify);\\n\\n\\tlet mounted = false;\\n\\tlet navigated = false;\\n\\tlet title = null;\\n\\n\\tonMount(() => {\\n\\t\\tconst unsubscribe = stores.page.subscribe(() => {\\n\\t\\t\\tif (mounted) {\\n\\t\\t\\t\\tnavigated = true;\\n\\t\\t\\t\\ttitle = document.title || 'untitled page';\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\tmounted = true;\\n\\t\\treturn unsubscribe;\\n\\t});\\n<\/script>\\n\\n<svelte:component this={components[0]} {...(props_0 || {})}>\\n\\t{#if components[1]}\\n\\t\\t<svelte:component this={components[1]} {...(props_1 || {})}>\\n\\t\\t\\t{#if components[2]}\\n\\t\\t\\t\\t<svelte:component this={components[2]} {...(props_2 || {})}/>\\n\\t\\t\\t{/if}\\n\\t\\t</svelte:component>\\n\\t{/if}\\n</svelte:component>\\n\\n{#if mounted}\\n\\t<div id=\\"svelte-announcer\\" aria-live=\\"assertive\\" aria-atomic=\\"true\\">\\n\\t\\t{#if navigated}\\n\\t\\t\\t{title}\\n\\t\\t{/if}\\n\\t</div>\\n{/if}\\n\\n<style>#svelte-announcer{clip:rect(0 0 0 0);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;left:0;overflow:hidden;position:absolute;top:0;white-space:nowrap;width:1px}</style>"],"names":[],"mappings":"AAqDO,gCAAiB,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,kBAAkB,MAAM,GAAG,CAAC,CAAC,UAAU,MAAM,GAAG,CAAC,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,CAAC,SAAS,MAAM,CAAC,SAAS,QAAQ,CAAC,IAAI,CAAC,CAAC,YAAY,MAAM,CAAC,MAAM,GAAG,CAAC"}`
};
var Root = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { stores } = $$props;
  let { page } = $$props;
  let { components } = $$props;
  let { props_0 = null } = $$props;
  let { props_1 = null } = $$props;
  let { props_2 = null } = $$props;
  setContext("__svelte__", stores);
  afterUpdate(stores.page.notify);
  if ($$props.stores === void 0 && $$bindings.stores && stores !== void 0)
    $$bindings.stores(stores);
  if ($$props.page === void 0 && $$bindings.page && page !== void 0)
    $$bindings.page(page);
  if ($$props.components === void 0 && $$bindings.components && components !== void 0)
    $$bindings.components(components);
  if ($$props.props_0 === void 0 && $$bindings.props_0 && props_0 !== void 0)
    $$bindings.props_0(props_0);
  if ($$props.props_1 === void 0 && $$bindings.props_1 && props_1 !== void 0)
    $$bindings.props_1(props_1);
  if ($$props.props_2 === void 0 && $$bindings.props_2 && props_2 !== void 0)
    $$bindings.props_2(props_2);
  $$result.css.add(css$2);
  {
    stores.page.set(page);
  }
  return `


${validate_component(components[0] || missing_component, "svelte:component").$$render($$result, Object.assign(props_0 || {}), {}, {
    default: () => `${components[1] ? `${validate_component(components[1] || missing_component, "svelte:component").$$render($$result, Object.assign(props_1 || {}), {}, {
      default: () => `${components[2] ? `${validate_component(components[2] || missing_component, "svelte:component").$$render($$result, Object.assign(props_2 || {}), {}, {})}` : ``}`
    })}` : ``}`
  })}

${``}`;
});
var base = "";
var assets = "";
function set_paths(paths) {
  base = paths.base;
  assets = paths.assets || base;
}
function set_prerendering(value) {
}
var handle = async ({ request, resolve: resolve2 }) => {
  const cookies = import_cookie.default.parse(request.headers.cookie || "");
  request.locals.userid = cookies.userid || v4();
  if (request.query.has("_method")) {
    request.method = request.query.get("_method").toUpperCase();
  }
  const response = await resolve2(request);
  if (!cookies.userid) {
    response.headers["set-cookie"] = `userid=${request.locals.userid}; Path=/; HttpOnly`;
  }
  return response;
};
var user_hooks = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  handle
});
var template = ({ head, body }) => '<!DOCTYPE html>\n<html lang="en">\n	<head>\n		<meta charset="utf-8" />\n		<link rel="icon" href="/favicon.png" />\n		<meta name="viewport" content="width=device-width, initial-scale=1" />\n		' + head + '\n	</head>\n	<body>\n		<div id="svelte">' + body + "</div>\n	</body>\n</html>\n";
var options = null;
var default_settings = { paths: { "base": "", "assets": "" } };
function init(settings = default_settings) {
  set_paths(settings.paths);
  set_prerendering(settings.prerendering || false);
  const hooks = get_hooks(user_hooks);
  options = {
    amp: false,
    dev: false,
    entry: {
      file: assets + "/_app/start-df7463fe.js",
      css: [assets + "/_app/assets/start-464e9d0a.css"],
      js: [assets + "/_app/start-df7463fe.js", assets + "/_app/chunks/vendor-c3306e91.js"]
    },
    fetched: void 0,
    floc: false,
    get_component_path: (id2) => assets + "/_app/" + entry_lookup[id2],
    get_stack: (error2) => String(error2),
    handle_error: (error2, request) => {
      hooks.handleError({ error: error2, request });
      error2.stack = options.get_stack(error2);
    },
    hooks,
    hydrate: true,
    initiator: void 0,
    load_component,
    manifest,
    paths: settings.paths,
    prerender: true,
    read: settings.read,
    root: Root,
    service_worker: null,
    router: true,
    ssr: true,
    target: "#svelte",
    template,
    trailing_slash: "never"
  };
}
var empty = () => ({});
var manifest = {
  assets: [{ "file": "assets/collaborate.svg", "size": 55848, "type": "image/svg+xml" }, { "file": "assets/community.svg", "size": 2967, "type": "image/svg+xml" }, { "file": "assets/discord.svg", "size": 2925, "type": "image/svg+xml" }, { "file": "assets/discover.svg", "size": 20826, "type": "image/svg+xml" }, { "file": "assets/git.svg", "size": 603, "type": "image/svg+xml" }, { "file": "assets/github.svg", "size": 973, "type": "image/svg+xml" }, { "file": "assets/integration.svg", "size": 560, "type": "image/svg+xml" }, { "file": "assets/Project.svg", "size": 20845, "type": "image/svg+xml" }, { "file": "assets/releases.svg", "size": 4118, "type": "image/svg+xml" }, { "file": "assets/twitter.svg", "size": 1647, "type": "image/svg+xml" }, { "file": "favicon.png", "size": 24641, "type": "image/png" }, { "file": "logo/logo.png", "size": 24641, "type": "image/png" }, { "file": "logo/logo.svg", "size": 5439, "type": "image/svg+xml" }, { "file": "robots.txt", "size": 67, "type": "text/plain" }],
  layout: "src/routes/__layout.svelte",
  error: ".svelte-kit/build/components/error.svelte",
  routes: [
    {
      type: "page",
      pattern: /^\/$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/index.svelte"],
      b: [".svelte-kit/build/components/error.svelte"]
    }
  ]
};
var get_hooks = (hooks) => ({
  getSession: hooks.getSession || (() => ({})),
  handle: hooks.handle || (({ request, resolve: resolve2 }) => resolve2(request)),
  handleError: hooks.handleError || (({ error: error2 }) => console.error(error2.stack)),
  externalFetch: hooks.externalFetch || fetch
});
var module_lookup = {
  "src/routes/__layout.svelte": () => Promise.resolve().then(function() {
    return __layout;
  }),
  ".svelte-kit/build/components/error.svelte": () => Promise.resolve().then(function() {
    return error;
  }),
  "src/routes/index.svelte": () => Promise.resolve().then(function() {
    return index;
  })
};
var metadata_lookup = { "src/routes/__layout.svelte": { "entry": "pages/__layout.svelte-f3c58152.js", "css": ["assets/pages/__layout.svelte-dd9d94d3.css"], "js": ["pages/__layout.svelte-f3c58152.js", "chunks/vendor-c3306e91.js"], "styles": [] }, ".svelte-kit/build/components/error.svelte": { "entry": "error.svelte-7bf29900.js", "css": [], "js": ["error.svelte-7bf29900.js", "chunks/vendor-c3306e91.js"], "styles": [] }, "src/routes/index.svelte": { "entry": "pages/index.svelte-ec2a9404.js", "css": ["assets/pages/index.svelte-7abb02ec.css"], "js": ["pages/index.svelte-ec2a9404.js", "chunks/vendor-c3306e91.js"], "styles": [] } };
async function load_component(file) {
  const { entry, css: css2, js, styles } = metadata_lookup[file];
  return {
    module: await module_lookup[file](),
    entry: assets + "/_app/" + entry,
    css: css2.map((dep) => assets + "/_app/" + dep),
    js: js.map((dep) => assets + "/_app/" + dep),
    styles
  };
}
function render(request, {
  prerender: prerender2
} = {}) {
  const host = request.headers["host"];
  return respond({ ...request, host }, options, { prerender: prerender2 });
}
var _layout = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${$$result.head += `${$$result.title = `<title>Hydralite</title>`, ""}<meta name="${"description"}" content="${"Connect with like-minded developers, onboard investors and seamlessly manage your codebase."}" data-svelte="svelte-5a12gz"><link rel="${"shortcut icon"}" href="${"/logo/logo.svg"}" data-svelte="svelte-5a12gz">`, ""}
<main>${slots.default ? slots.default({}) : ``}</main>`;
});
var __layout = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": _layout
});
function load({ error: error2, status }) {
  return { props: { error: error2, status } };
}
var Error$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { status } = $$props;
  let { error: error2 } = $$props;
  if ($$props.status === void 0 && $$bindings.status && status !== void 0)
    $$bindings.status(status);
  if ($$props.error === void 0 && $$bindings.error && error2 !== void 0)
    $$bindings.error(error2);
  return `<h1>${escape(status)}</h1>

<pre>${escape(error2.message)}</pre>



${error2.frame ? `<pre>${escape(error2.frame)}</pre>` : ``}
${error2.stack ? `<pre>${escape(error2.stack)}</pre>` : ``}`;
});
var error = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Error$1,
  load
});
var css$1 = {
  code: ".typed-element .typed-cursor{-webkit-animation:svelte-qb0pfd-typedjsBlink .7s infinite;animation:svelte-qb0pfd-typedjsBlink .7s infinite;color:#5d6bff;opacity:1}@-webkit-keyframes svelte-qb0pfd-typedjsBlink{50%{opacity:0}}@keyframes svelte-qb0pfd-typedjsBlink{50%{opacity:0}}",
  map: `{"version":3,"file":"SvelteTyped.svelte","sources":["SvelteTyped.svelte"],"sourcesContent":["<!-- This code is from (could not add it because of some issue while running) -->\\r\\n<!-- https://github.com/MelihAltintas/svelte-typed-js/blob/master/src/components/SvelteTypedJs.svelte -->\\r\\n<span class=\\"typed-element \\" bind:this={typedElement}>\\r\\n    <slot></slot>\\r\\n</span>\\r\\n\\r\\n<script>\\r\\n  import Typed from 'typed.js'\\r\\n  \\r\\n  import { onMount } from 'svelte';\\r\\n  import { onDestroy } from 'svelte';\\r\\n  let typedObj = null;\\r\\n  let typedElement = null;\\r\\n  function throwError(message) {\\r\\n      throw new TypeError(message)\\r\\n  }\\r\\n  function initTypedJS() {\\r\\n      \\r\\n      const $typed = typedElement.querySelector('.typing')\\r\\n      if ($$slots.default == undefined) {\\r\\n          throwError(\`Just one child element allowed inside  component.\`)\\r\\n      } else if ($$slots.default == true) {\\r\\n          typedObj = new Typed($typed, $$props)\\r\\n      }\\r\\n  }\\r\\n  onMount(() => {initTypedJS()});\\r\\n//   onDestroy(() => {typedObj.destroy()});\\r\\n<\/script>\\r\\n\\r\\n<style>:global(.typed-element .typed-cursor){-webkit-animation:typedjsBlink .7s infinite;animation:typedjsBlink .7s infinite;color:#5d6bff;opacity:1}@-webkit-keyframes typedjsBlink{50%{opacity:0}}@keyframes typedjsBlink{50%{opacity:0}}</style>\\r\\n"],"names":[],"mappings":"AA6Be,4BAA4B,AAAC,CAAC,kBAAkB,0BAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU,0BAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,OAAO,CAAC,QAAQ,CAAC,CAAC,mBAAmB,0BAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,WAAW,0BAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC"}`
};
var SvelteTyped = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  compute_slots(slots);
  let typedElement = null;
  $$result.css.add(css$1);
  return `

<span class="${"typed-element "}"${add_attribute("this", typedElement, 0)}>${slots.default ? slots.default({}) : ``}
</span>`;
});
var Footer = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<div class="${"h-[25vh] bg-dark-bg mt-40 flex items-center justify-around"}"><img src="${"/logo/logo.svg"}" alt="${"Logo"}" class="${"w-20"}">
	<div class="${"flex gap-5 items-center"}"><a href="${"https://twitter.com/hydraliteio"}" target="${"_blank"}"><img src="${"/assets/twitter.svg"}" alt="${""}" width="${"75%"}"></a>
		<a href="${"https://discord.gg/e2AP2Dmk8w"}" target="${"_blank"}" class="${"w-full h-full"}"><img src="${"/assets/discord.svg"}" alt="${""}" width="${"40%"}"></a></div></div>`;
});
var subscriber_queue = [];
function readable(value, start) {
  return {
    subscribe: writable(value, start).subscribe
  };
}
function writable(value, start = noop) {
  let stop;
  const subscribers = new Set();
  function set(new_value) {
    if (safe_not_equal(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue.push(subscriber, value);
        }
        if (run_queue) {
          for (let i = 0; i < subscriber_queue.length; i += 2) {
            subscriber_queue[i][0](subscriber_queue[i + 1]);
          }
          subscriber_queue.length = 0;
        }
      }
    }
  }
  function update(fn) {
    set(fn(value));
  }
  function subscribe2(run2, invalidate = noop) {
    const subscriber = [run2, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop = start(set) || noop;
    }
    run2(value);
    return () => {
      subscribers.delete(subscriber);
      if (subscribers.size === 0) {
        stop();
        stop = null;
      }
    };
  }
  return { set, update, subscribe: subscribe2 };
}
function derived(stores, fn, initial_value) {
  const single = !Array.isArray(stores);
  const stores_array = single ? [stores] : stores;
  const auto = fn.length < 2;
  return readable(initial_value, (set) => {
    let inited = false;
    const values = [];
    let pending = 0;
    let cleanup = noop;
    const sync = () => {
      if (pending) {
        return;
      }
      cleanup();
      const result = fn(single ? values[0] : values, set);
      if (auto) {
        set(result);
      } else {
        cleanup = is_function(result) ? result : noop;
      }
    };
    const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
      values[i] = value;
      pending &= ~(1 << i);
      if (inited) {
        sync();
      }
    }, () => {
      pending |= 1 << i;
    }));
    inited = true;
    sync();
    return function stop() {
      run_all(unsubscribers);
      cleanup();
    };
  });
}
function createNotificationStore(timeout) {
  const _notifications = writable([]);
  function send(message, type = "default", timeout2) {
    _notifications.update((state) => {
      return [...state, { id: id(), type, message, timeout: timeout2 }];
    });
  }
  const notifications2 = derived(_notifications, ($_notifications, set) => {
    set($_notifications);
    if ($_notifications.length > 0) {
      const timer = setTimeout(() => {
        _notifications.update((state) => {
          state.shift();
          return state;
        });
      }, $_notifications[0].timeout);
      return () => {
        clearTimeout(timer);
      };
    }
  });
  const { subscribe: subscribe2 } = notifications2;
  return {
    subscribe: subscribe2,
    send,
    default: (msg, timeout2) => send(msg, "default", timeout2),
    danger: (msg, timeout2) => send(msg, "danger", timeout2),
    warning: (msg, timeout2) => send(msg, "warning", timeout2),
    info: (msg, timeout2) => send(msg, "info", timeout2),
    success: (msg, timeout2) => send(msg, "success", timeout2)
  };
}
function id() {
  return "_" + Math.random().toString(36).substr(2, 9);
}
var notifications = createNotificationStore();
var css = {
  code: ".notifications.svelte-u5ypha{align-items:center;border-radius:10px;display:flex;flex-direction:column;justify-content:flex-start;left:0;margin:0 auto;padding:0;pointer-events:none;position:fixed;right:0;top:10px;z-index:9999}.toast.svelte-u5ypha{border-radius:10px;flex:0 0 auto;margin-bottom:10px}.content.svelte-u5ypha{color:#fff;display:block;font-weight:500;padding:10px}",
  map: '{"version":3,"file":"Toast.svelte","sources":["Toast.svelte"],"sourcesContent":["<style>.notifications{align-items:center;border-radius:10px;display:flex;flex-direction:column;justify-content:flex-start;left:0;margin:0 auto;padding:0;pointer-events:none;position:fixed;right:0;top:10px;z-index:9999}.toast{border-radius:10px;flex:0 0 auto;margin-bottom:10px}.content{color:#fff;display:block;font-weight:500;padding:10px}</style>\\r\\n    \\r\\n    <!-- This code rightfully belongs to https://svelte.dev/repl/2254c3b9b9ba4eeda05d81d2816f6276?version=3.32.2 -->\\r\\n    <script>\\r\\n    // @ts-nocheck\\r\\n    import { flip } from \\"svelte/animate\\";\\r\\n    import { fly } from \\"svelte/transition\\";\\r\\n    import { notifications } from \\"./notifs\\";\\r\\n    export let themes = {\\r\\n        danger: \\"#E26D69\\",\\r\\n        success: \\"#84C991\\",\\r\\n        warning: \\"#f0ad4e\\",\\r\\n        info: \\"#5bc0de\\",\\r\\n        default: \\"#aaaaaa\\",\\r\\n    };\\r\\n    <\/script>\\r\\n    \\r\\n    <div class=\\"notifications\\">\\r\\n        {#each $notifications as notification (notification.id)}\\r\\n            <div\\r\\n                animate:flip\\r\\n                class=\\"toast\\"\\r\\n                style=\\"background: {themes[notification.type]};\\"\\r\\n                transition:fly=\\"{{ y: 30 }}\\">\\r\\n                <div class=\\"content\\">{notification.message}</div>\\r\\n                {#if notification.icon}<i class=\\"{notification.icon}\\"></i>{/if}\\r\\n            </div>\\r\\n        {/each}\\r\\n    </div>"],"names":[],"mappings":"AAAO,4BAAc,CAAC,YAAY,MAAM,CAAC,cAAc,IAAI,CAAC,QAAQ,IAAI,CAAC,eAAe,MAAM,CAAC,gBAAgB,UAAU,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,eAAe,IAAI,CAAC,SAAS,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,oBAAM,CAAC,cAAc,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,IAAI,CAAC,sBAAQ,CAAC,MAAM,IAAI,CAAC,QAAQ,KAAK,CAAC,YAAY,GAAG,CAAC,QAAQ,IAAI,CAAC"}'
};
var Toast = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $notifications, $$unsubscribe_notifications;
  $$unsubscribe_notifications = subscribe(notifications, (value) => $notifications = value);
  let { themes = {
    danger: "#E26D69",
    success: "#84C991",
    warning: "#f0ad4e",
    info: "#5bc0de",
    default: "#aaaaaa"
  } } = $$props;
  if ($$props.themes === void 0 && $$bindings.themes && themes !== void 0)
    $$bindings.themes(themes);
  $$result.css.add(css);
  $$unsubscribe_notifications();
  return `
    
    
    <div class="${"notifications svelte-u5ypha"}">${each($notifications, (notification) => `<div class="${"toast svelte-u5ypha"}" style="${"background: " + escape(themes[notification.type]) + ";"}"><div class="${"content svelte-u5ypha"}">${escape(notification.message)}</div>
                ${notification.icon ? `<i class="${escape(null_to_empty(notification.icon)) + " svelte-u5ypha"}"></i>` : ``}
            </div>`)}</div>`;
});
var email = "";
var Waitlist = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<div class="${"flex w-screen items-center justify-center"}"><div class="${"h-[50vh] w-[90vw] md:w-[75vw] lg:w-[75vw] bg-gray-200 mt-16 rounded-2xl grid grid-cols-3 gap-1"}">${validate_component(Toast, "Toast").$$render($$result, {}, {}, {})}
	<div class="${"w-full h-full grid grid-rows-3 col-span-3 gap-3 p-4 sm:col-span-3 2xl:col-span-2"}" id="${"waitlist"}"><div class="${"grid row-span-3 2xl:row-span-2 md:row-span-3"}"><div class="${"w-full h-full bg-white rounded-xl drop-shadow-2xl flex items-center flex-col bg p-7 "}"><div class="${"flex items-center flex-col"}"><h1 class="${"text-2xl font-bold font-montserrat"}">Join the <span class="${"text-dark-color-accent font-extrabold"}">waitlist!</span></h1></div>
				<div class="${"flex w-full h-full items-center justify-center flex-col"}"><h5 class="${"text-center font-bold font-montserrat hidden lg:block 2xl:block"}">Become the first to know when Hydralite releases. <br> Just enter your email down
						below!<br></h5>
					<br>
					<div class="${"grid grid-cols-4 w-full h-[3vh] bg-acrylic-20 p-1 rounded-xl h-[7vh] sm:h-[7vh] lg:h-[7vh] xl:h-[7vh]"}"><input type="${"text"}" name="${"Email.."}" autocomplete="${"off"}" placeholder="${"Email.."}" class="${"bg-transparent col-span-3 focus:outline-none text-black ml-4 "}"${add_attribute("value", email, 0)}>
						<button class="${"col-span-1 flex items-center justify-center bg-dark-color-accent rounded-xl text-white font-montserrat"}">Submit
						</button></div></div></div></div>
		<div class="${"w-full h-full bg-white rounded-xl drop-shadow-2xl p-5 hidden items-center flex-col justify-around 2xl:flex"}"><h1 class="${"text-3xl font-bold font-montserrat"}">Have <span class="${"text-dark-color-accent"}">queries?</span></h1>
			<h6 class="${"text-lg font-semibold font-montserrat"}">Email us at team@hydralite.io</h6></div></div>
	<div class="${"w-full h-full hidden grid-rows-3 gap-3 py-4 pr-4 2xl:grid"}"><a href="${"https://discord.gg/e2AP2Dmk8w"}" target="${"_blank"}" class="${"w-full h-full"}"><div class="${"w-full h-full bg-white rounded-xl drop-shadow-2xl flex flex-col items-center justify-around"}"><h1 class="${"text-2xl font-montserrat font-bold"}">Join our discord server</h1>
				<button class="${"bg-dark-color-accent pl-7 py-2 rounded-xl font-montserrat text-white hover:bg-opacity-90 duration-300 flex items-center gap-3"}"><img src="${"/assets/discord.svg"}" width="${"10%"}" height="${"10%"}" alt="${"Discord logo"}">Take me
					there!</button></div></a>
		<a href="${"https://twitter.com/hydraliteio"}" target="${"_blank"}" class="${"w-full h-full"}"><div class="${"w-full h-full bg-white rounded-xl drop-shadow-2xl flex flex-col items-center justify-around"}"><h1 class="${"text-2xl font-montserrat font-bold"}">Follow us on twitter</h1>
				<button class="${"bg-dark-color-accent pl-7 py-2 rounded-xl font-montserrat text-white hover:bg-opacity-90 duration-300 flex items-center gap-3"}"><img src="${"/assets/twitter.svg"}" width="${"10%"}" height="${"10%"}" alt="${"Discord logo"}">Follow
					@hydraliteio
				</button></div></a>
		<a href="${"https://github.com/hydralite"}"><div class="${"w-full h-full bg-white rounded-xl drop-shadow-2xl flex flex-col items-center justify-around"}"><h1 class="${"text-2xl font-montserrat font-bold"}">Browse our GitHub</h1>
				<button class="${"bg-dark-color-accent text-sm py-2 rounded-xl px-9 font-montserrat text-white hover:bg-opacity-90 duration-300 flex items-center gap-3"}"><img src="${"/assets/github.svg"}" width="${"20%"}" height="${"20%"}" alt="${"Discord logo"}">GitHub
				</button></div></a></div></div></div>`;
});
var Whitespace = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { img = "/assets/integration.svg" } = $$props;
  if ($$props.img === void 0 && $$bindings.img && img !== void 0)
    $$bindings.img(img);
  return `<div class="${"w-[25%] h-full flex flex-col items-center justify-around"}"><img class="${"md:w-[5em] lg:w-[1em] xl:w-[3em]"}" width="${"50em"}"${add_attribute("src", img, 0)}${add_attribute("alt", img, 0)}>
    ${slots.default ? slots.default({}) : ``}</div>`;
});
var DarkSection = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<div class="${"h-[80vh] bg-dark-bg flex items-center justify-between px-[15vw] relative"}"><div><h2 class="${"font-bold font-montserrat text-acrylic-20"}">FAST, INTUITIVE, POWERFUL</h2>
		<h2 class="${"mt-5 font-extrabold text-3xl font-montserrat text-dark-color-accent"}">PROJECT MANAGEMENT
		</h2>
		<h5 class="${"mt-5 font-semibold text-acrylic-30"}">Hydralite allows easy, intuitive project<br> management, it allows brainstorming <br>
			sessions, audio rooms, inbuilt source control, <br>and many more!
		</h5></div>
	<div class="${"hidden sm:hidden md:hidden lg:text-sm xl:hidden 2xl:inline-flex"}"><div class="${"z-50 absolute bg-white w-[calc(100%-30%)] h-[25vh] right-[15vw] bottom-[-15vh] drop-shadow-2xl rounded-xl flex"}">${validate_component(Whitespace, "Whitespace").$$render($$result, { img: "/assets/integration.svg" }, {}, {
    default: () => `<h4 class="${"text-center font-bold font-montserrat md:text-xl lg:text-sm text-gray-800"}">Hydralite\u2019s tightly integrated with<br> your favourite providers! You can <br> do it all
					through Hydralite.
				</h4>`
  })}
			${validate_component(Whitespace, "Whitespace").$$render($$result, { img: "/assets/git.svg" }, {}, {
    default: () => `<h4 class="${"text-center font-bold font-montserrat md:text-xl lg:text-sm text-gray-800"}">Integrated with Github,<br> Bitbucket and Gitlab for seamless codebase management.
				</h4>`
  })}
			${validate_component(Whitespace, "Whitespace").$$render($$result, { img: "/assets/releases.svg" }, {}, {
    default: () => `<h4 class="${"text-center font-bold font-montserrat md:text-xl lg:text-sm text-gray-800"}">Hydralite allows you<br> to handle releases<br> easily using our<br> integrations.
				</h4>`
  })}
			${validate_component(Whitespace, "Whitespace").$$render($$result, { img: "/assets/community.svg" }, {}, {
    default: () => `<h4 class="${"text-center font-bold font-montserrat md:text-xl lg:text-sm text-gray-800 mr-3"}">Build a community around your product.  Update them<br>  about your latest releases
					<br>and features.
				</h4>`
  })}</div></div>
	<img class="${"hidden lg:inline-flex xl:inline-flex 2xl:inline-flex"}" src="${"/assets/Project.svg"}" alt="${""}" width="${"50%"}" height="${"50%"}"></div>`;
});
var DescriptionBoxes = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(DarkSection, "DarkSection").$$render($$result, {}, {}, {})}

<div class="${"h-[80vh] bg-white flex items-center justify-between px-[15vw] mt-[5vh]"}"><img src="${"/assets/discover.svg"}" class="${"hidden lg:inline-flex xl:inline-flex 2xl:inline-flex drop-shadow-xl"}" alt="${""}" width="${"60%"}">
	<div><h2 class="${"font-bold font-montserrat text-base text-gray-700"}">EXPLORE. CONNECT. BUILD.</h2>
		<h2 class="${"mt-5 font-extrabold text-4xl font-montserrat text-dark-color-accent"}">DISCOVER
		</h2>
		<h5 class="${"mt-5 font-semibold text-gray-800"}">Connect with like-minded developers and build a followership. Find your next project idea with
			Hydralite\u2019s built in project idea explorer. Discover other incredible projects, big or small!
		</h5></div></div>
<div class="${"h-[80vh] bg-dark-bg flex items-center justify-between px-[15vw] mt-[5vh]"}"><div><h2 class="${"font-bold font-montserrat text-base text-gray-200"}">COLLABORATE. INNOVATE. SHIP.</h2>
		<h2 class="${"mt-5 font-extrabold text-4xl font-montserrat text-dark-color-accent"}">COLLABORATE</h2>
		<h5 class="${"mt-5 font-semibold text-gray-200"}">Build your dream development team. Work with pioneers in the industry. Sign sponsorships and
			onboard investors.
		</h5></div>
	<img src="${"/assets/collaborate.svg"}" class="${"drop-shadow-xl hidden lg:inline-flex xl:inline-flex 2xl:inline-flex"}" alt="${""}" width="${"60%"}" height="${"60%"}"></div>`;
});
var prerender = true;
var Routes = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${$$result.head += `${$$result.title = `<title>Home</title>`, ""}`, ""}

<div class="${"overflow-x-hidden"}"><div class="${"flex items-center justify-between font-montserrat my-4 mx-16"}"><img src="${"/logo/logo.svg"}" alt="${"Logo"}" class="${"w-20"}">
		<button class="${"font-bold text-gray-500"}">Join Waitlist
		</button></div>
	<div class="${"h-[calc(100vh-10vh)] flex items-center justify-center w-screen flex-col"}"><h1 class="${"font-bold text-center text-5xl font-montserrat"}">${validate_component(SvelteTyped, "SvelteTypedJs").$$render($$result, {
    strings: ["Discover", "Develop", "Deploy"],
    loop: "true",
    smartBackspace: "true",
    typeSpeed: "10",
    backSpeed: "5"
  }, {}, {
    default: () => `The place for Developers to<br><span class="${"typing text-iris-30 font-extrabold"}"></span>Software
			`
  })}</h1>
		<h4 class="${"font-montserrat font-bold mt-6 text-[#656565] text-center"}">Connect with like-minded developers, onboard investors <br> and seamlessly manage your codebase.
		</h4></div>
	${validate_component(DescriptionBoxes, "DescriptionBoxes").$$render($$result, {}, {}, {})}
	${validate_component(Waitlist, "Waitlist").$$render($$result, {}, {}, {})}
	${validate_component(Footer, "Footer").$$render($$result, {}, {}, {})}</div>`;
});
var index = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Routes,
  prerender
});

// .svelte-kit/vercel/entry.js
init();
var entry_default = async (req, res) => {
  const { pathname, searchParams } = new URL(req.url || "", "http://localhost");
  let body;
  try {
    body = await getRawBody(req);
  } catch (err) {
    res.statusCode = err.status || 400;
    return res.end(err.reason || "Invalid request body");
  }
  const rendered = await render({
    method: req.method,
    headers: req.headers,
    path: pathname,
    query: searchParams,
    rawBody: body
  });
  if (rendered) {
    const { status, headers, body: body2 } = rendered;
    return res.writeHead(status, headers).end(body2);
  }
  return res.writeHead(404).end();
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
/*!
 * 
 *   typed.js - A JavaScript Typing Animation Library
 *   Author: Matt Boldt <me@mattboldt.com>
 *   Version: v2.0.12
 *   Url: https://github.com/mattboldt/typed.js
 *   License(s): MIT
 * 
 */
/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2018 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Wrapper for built-in http.js to emulate the browser XMLHttpRequest object.
 *
 * This can be used with JS designed for browsers to improve reuse of code and
 * allow the use of existing libraries.
 *
 * Usage: include("XMLHttpRequest.js") and use XMLHttpRequest per W3C specs.
 *
 * @author Dan DeFelippi <dan@driverdan.com>
 * @contributor David Ellis <d.f.ellis@ieee.org>
 * @license MIT
 */
