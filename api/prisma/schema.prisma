datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/typegql-generated"
}

enum OauthConnectionService {
  github
  google
  discord
  twitter
}

enum AttachmentTypes {
  image
  video
  other
}

model PostComment {
  id          String   @id @default(uuid())
  body        String
  postedby    User     @relation(fields: [userId], references: [id])
  postedtime  DateTime
  userId      String
  post        Post     @relation(fields: [postId], references: [id])
  postId      String
  attachments String
}

model Attachments {
  id            String          @id @default(uuid())
  attachmentURL String
  type          AttachmentTypes
  Post          Post[]
}

model Hashtags {
  id         String  @id @default(uuid())
  name       String
  numofPosts BigInt
  createdBy  User    @relation(fields: [userId], references: [id])
  Post       Post?   @relation(fields: [postId], references: [id])
  postId     String?
  userId     String
}

model Post {
  id            String         @id @default(uuid())
  title         String
  description   String
  postedby      User           @relation("PostToUser", fields: [userId], references: [id])
  postedtime    DateTime
  ProjectGroup  ProjectGroup[]
  userId        String
  files         Attachments    @relation(fields: [attachmentsId], references: [id])
  comments      Post           @relation("PostToPost", fields: [postId], references: [id])
  Post          Post[]         @relation("PostToPost")
  postId        String
  PostComment   PostComment[]
  DownVotes     BigInt
  Upvotes       BigInt
  Topics        Hashtags[]
  attachmentsId String
}

model ProjectGroup {
  id          String  @id @default(uuid())
  title       String
  description String
  members     User[]
  isCommunity Boolean
  posts       Post    @relation(fields: [postId], references: [id])
  postId      String
}

model OauthConnection {
  id                 String                 @id @default(uuid())
  oauthService       OauthConnectionService
  email              String
  username           String
  oauthServiceUserId String
  isPrimary          Boolean

  // Connection Owner
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  username  String   @unique
  email     String   @unique
  joinDate  DateTime @default(now())
  hydra     Int

  // Profile
  profile   UserProfile @relation("UserProfileRelation", fields: [profileId], references: [id])
  profileId String

  // Projects
  ownedProjects Project[] @relation("UserOwnedProjectsRelation")
  allProjects   Project[] @relation("AllUserProjectsRelation")

  // Appreciated Projects
  likedProjects    Project[] @relation("UserLikedProjectsRelation")
  followedProjects Project[] @relation("UserFollowedProjectsRelation")

  // Oauth Connections
  oauthConnections OauthConnection[]

  // followers
  following      User[]        @relation("UserFollowRelation", references: [id])
  followers      User[]        @relation("UserFollowRelation", references: [id])
  ProjectGroup   ProjectGroup? @relation(fields: [projectGroupId], references: [id])
  projectGroupId String?
  Post           Post[]
  PostComment    PostComment[]
  Topics         Hashtags[]
}

model UserProfile {
  id        String @id @default(uuid())
  user      User?  @relation("UserProfileRelation")
  avatarURL String
  bio       String
}

model Project {
  id          String @id @default(uuid())
  title       String
  description String
  logoUrl     String
  bannerUrl   String

  // Members
  owner   User   @relation("UserOwnedProjectsRelation", fields: [ownerId], references: [id])
  ownerId String

  members User[] @relation("AllUserProjectsRelation", references: [id])

  // Appreciators
  likers    User[] @relation("UserLikedProjectsRelation", references: [id])
  followers User[] @relation("UserFollowedProjectsRelation", references: [id])

  // TASK -> Add project groups
  // TASK --> Add project announcements
  // TASK --> Add project posts
  // TASK -> Add project scheduled meeting rooms
  // TASK -> Add project tasks
  // TASK -> Add project roadmap
  // TASK -> Add project reporting
  // TASK -> Add project hydra
  // TASK -> Add project integrations
}
