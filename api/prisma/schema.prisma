datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/typegql-generated"
}

enum OauthConnectionService {
  github
  google
  discord
  twitter
}

enum AttachmentType {
  image
  video
  other
}

model PostComment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  body String

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  post   Post   @relation(fields: [postId], references: [id])
  postId String
}

model Attachment {
  id            String         @id @default(uuid())
  attachmentURL String
  type          AttachmentType
  post          Post           @relation(fields: [postId], references: [id])
  postId        String
}

model Hashtag {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  name       String
  numOfPosts BigInt

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  posts Post[]
}

model Post {
  id             String   @id @default(uuid())
  postedtime     DateTime
  title          String
  description    String
  isAnnouncement Boolean

  postGroups PostGroup[]

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  comments    PostComment[]
  attachments Attachment[]

  hashtags Hashtag[]
}

model PostGroup {
  id          String  @id @default(uuid())
  title       String
  description String
  isCommunity Boolean

  creator   User   @relation("UserOwnedPostGroupsRelation", fields: [creatorId], references: [id])
  creatorId String

  members User[] @relation("PostGroupMembersRelation")

  posts Post[]

  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
}

model OauthConnection {
  id                 String                 @id @default(uuid())
  oauthService       OauthConnectionService
  email              String
  username           String
  oauthServiceUserId String
  isPrimary          Boolean

  // Connection Owner
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  username  String   @unique
  email     String   @unique
  joinDate  DateTime @default(now())
  hydra     Int

  // Profile
  profile   UserProfile @relation("UserProfileRelation", fields: [profileId], references: [id])
  profileId String

  // Projects
  ownedProjects Project[] @relation("UserOwnedProjectsRelation")
  allProjects   Project[] @relation("AllUserProjectsRelation")

  // Appreciated Projects
  likedProjects    Project[] @relation("UserLikedProjectsRelation")
  followedProjects Project[] @relation("UserFollowedProjectsRelation")

  // Oauth Connections
  oauthConnections OauthConnection[]

  // followers
  following User[] @relation("UserFollowRelation", references: [id])
  followers User[] @relation("UserFollowRelation", references: [id])

  // Posts and Post Groups
  posts               Post[]
  createdPostComments PostComment[]
  createdHashtags     Hashtag[]
  ownedPostGroups     PostGroup[]   @relation("UserOwnedPostGroupsRelation")
  memberOfPostGroups  PostGroup[]   @relation("PostGroupMembersRelation")
}

model UserProfile {
  id        String @id @default(uuid())
  user      User?  @relation("UserProfileRelation")
  avatarURL String
  bio       String
}

model Project {
  id          String @id @default(uuid())
  title       String
  description String
  logoUrl     String
  bannerUrl   String

  // Members
  owner   User   @relation("UserOwnedProjectsRelation", fields: [ownerId], references: [id])
  ownerId String

  members User[] @relation("AllUserProjectsRelation", references: [id])

  // Appreciators
  likers    User[] @relation("UserLikedProjectsRelation", references: [id])
  followers User[] @relation("UserFollowedProjectsRelation", references: [id])

  // Post Groups
  postGroups PostGroup[]

  // TASK -> Add project scheduled meeting rooms
  // TASK -> Add project tasks
  // TASK -> Add project roadmap
  // TASK -> Add project reporting
  // TASK -> Add project hydra
  // TASK -> Add project integrations
}
