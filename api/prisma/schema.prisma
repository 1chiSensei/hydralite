datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum AttachmentType {
  image
  video
  other
}

enum BugReportSeverity {
  catastrophic
  critical
  high
  medium
  low
}

enum OauthConnectionService {
  github
  google
  discord
  twitter
}

enum PostType {
  post
  article
  question
  feedback
  suggestion
  appreciation
}

enum ProjectMemberType {
  projectTeam
  moderator
  communityMember
}

enum TimeFrequency {
  hourly
  daily
  weekly
  monthly
  yearly
}

model Attachment {
  id               String         @id @default(uuid())
  attachmentURL    String
  type             AttachmentType
  post             Post?          @relation(fields: [postId], references: [id])
  postId           String?
  featureRequest   FeatureRequest @relation(fields: [featureRequestId], references: [id])
  featureRequestId String
  bugReport        BugReport      @relation(fields: [bugReportId], references: [id])
  bugReportId      String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model BugReport {
  id                       String            @id @default(uuid())
  name                     String
  description              String?
  severity                 BugReportSeverity
  creator                  User              @relation(fields: [creatorId], references: [id])
  creatorId                String
  isCreatedByProjectMember Boolean
  attachments              Attachment[]
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
}

model FeatureRequest {
  id                          String       @id @default(uuid())
  name                        String
  description                 String?
  creator                     User         @relation(fields: [creatorId], references: [id])
  creatorId                   String
  isCreatedByProjectMember    Boolean
  featureGeneratedFromRequest String
  createdAt                   DateTime     @default(now())
  updatedAt                   DateTime     @updatedAt
  Attachment                  Attachment[]
}

model Hashtag {
  id         String   @id @default(uuid())
  name       String   @unique
  numOfPosts BigInt
  creator    User     @relation(fields: [creatorId], references: [id])
  creatorId  String
  posts      Post[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model InterestOrSkill {
  id                  String        @id @default(uuid())
  name                String        @unique
  uses                Int           @default(0)
  creator             User          @relation(fields: [creatorId], references: [id])
  creatorId           String
  linkedProjects      Project[]
  linkedProfiles      UserProfile[]
  linkedOpportunities Opportunity[]
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model MemberRole {
  id              String                   @id @default(uuid())
  title           String                   @unique
  description     String
  assignedMembers ProjectMember[]
  permissions     ProjectMemberPermissions @relation(fields: [permissionsId], references: [id])
  permissionsId   String
  project         Project                  @relation(fields: [projectId], references: [id])
  projectId       String
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
}

model OauthConnection {
  id                 String                 @id @default(uuid())
  oauthService       OauthConnectionService
  email              String
  username           String
  oauthServiceUserId String
  isPrimary          Boolean
  user               User                   @relation(fields: [userId], references: [id])
  userId             String
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
}

model Opportunity {
  id               String                 @id @default(uuid())
  title            String
  description      String
  requiredSkills   InterestOrSkill[]
  isPaid           Boolean
  paymentAmount    Int?
  timeFrequency    TimeFrequency?
  requiredCapacity Int?
  applicants       OpportunityApplicant[]
  project          Project                @relation(fields: [projectId], references: [id])
  projectId        String
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
}

model OpportunityApplicant {
  id            String      @id @default(uuid())
  isAccepted    Boolean
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id])
  opportunityId String
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Post {
  id             String        @id @default(uuid())
  title          String
  description    String?
  isAnnouncement Boolean
  type           PostType
  labels         PostLabel[]
  isPublic       Boolean
  visibleTo      User[]        @relation("PostVisibleToRelation")
  project        Project       @relation(fields: [projectId], references: [id])
  projectId      String
  likers         User[]        @relation("UserLikedPostsRelation")
  comments       PostComment[]
  attachments    Attachment[]
  hashtags       Hashtag[]
  creator        User          @relation("UserOwnedPostsRelation", fields: [creatorId], references: [id])
  creatorId      String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model PostComment {
  id        String   @id @default(uuid())
  body      String
  creator   User     @relation(fields: [creatorId], references: [id])
  creatorId String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  edited    Boolean  @default(false)
  likers    User[]   @relation("UserLikedCommentsRelation")
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostLabel {
  id          String   @id @default(uuid())
  title       String
  color       String
  description String?
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  creator     User     @relation(fields: [creatorId], references: [id])
  creatorId   String
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Project {
  id                        String            @id @default(uuid())
  title                     String
  description               String
  logoUrl                   String
  bannerUrl                 String
  newJoineesRequireApproval Boolean           @default(true)
  owner                     User              @relation(fields: [ownerId], references: [id])
  ownerId                   String
  members                   ProjectMember[]
  likers                    User[]            @relation("UserLikedProjectsRelation", references: [id])
  followers                 User[]            @relation("UserFollowedProjectsRelation", references: [id])
  opportunities             Opportunity[]
  roles                     MemberRole[]
  posts                     Post[]
  postLabels                PostLabel[]
  interestOrSkills          InterestOrSkill[]
  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime          @updatedAt
}

model ProjectMember {
  id                         String                    @id @default(uuid())
  roles                      MemberRole[]
  awaitingApproval           Boolean
  type                       ProjectMemberType         @default(communityMember)
  overallPermissions         ProjectMemberPermissions? @relation(fields: [projectMemberPermissionsId], references: [id])
  projectMemberPermissionsId String?
  project                    Project                   @relation(fields: [projectId], references: [id])
  projectId                  String
  user                       User                      @relation(fields: [userId], references: [id])
  userId                     String
  createdAt                  DateTime                  @default(now())
  updatedAt                  DateTime                  @updatedAt
}

model ProjectMemberPermissions {
  id                              String         @id @default(uuid())
  canManageFeatureRequests        Boolean?
  canManageBugReports             Boolean?
  canManageMembers                Boolean?
  canManageRoles                  Boolean?
  canManagePosts                  Boolean?
  canManageFundraisers            Boolean?
  canManageWaitlists              Boolean?
  canCreateUserReviews            Boolean?
  canManageContributorOutsourcing Boolean?
  memberRole                      MemberRole?
  projectMember                   ProjectMember?
}

model TokenPair {
  id           String   @id @default(uuid())
  accessToken  String   @unique
  refreshToken String   @unique
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id                      String                 @id @default(uuid())
  username                String                 @unique
  email                   String
  hydra                   Int
  isSiteAdmin             Boolean                @default(false)
  profile                 UserProfile            @relation("UserProfileRelation", fields: [profileId], references: [id])
  profileId               String
  ownedProjects           Project[]
  allProjects             ProjectMember[]
  likedProjects           Project[]              @relation("UserLikedProjectsRelation")
  followedProjects        Project[]              @relation("UserFollowedProjectsRelation")
  oauthConnections        OauthConnection[]
  tokens                  TokenPair[]
  following               User[]                 @relation("UserFollowRelation", references: [id])
  followers               User[]                 @relation("UserFollowRelation", references: [id])
  posts                   Post[]                 @relation("UserOwnedPostsRelation")
  likedPosts              Post[]                 @relation("UserLikedPostsRelation")
  likedComments           PostComment[]          @relation("UserLikedCommentsRelation")
  viewablePosts           Post[]                 @relation("PostVisibleToRelation")
  createdInterestOrSkills InterestOrSkill[]
  createdPostComments     PostComment[]
  createdHashtags         Hashtag[]
  postLabels              PostLabel[]
  bugReports              BugReport[]
  featureRequests         FeatureRequest[]
  appliedOpportunities    OpportunityApplicant[]
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
}

model UserProfile {
  id               String            @id @default(uuid())
  user             User?             @relation("UserProfileRelation")
  avatarURL        String
  bio              String
  interestOrSkills InterestOrSkill[]
}